{
  "language": "ts",
  "name": "HumanEval_47_median",
  "results": [
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprz2_y9qa.ts(14,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"median requires at least one argument\");\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpj1sko0lb.js:22:12)\n    at Object.<anonymous> (/tmp/tmpj1sko0lb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + Math.ceil(right - left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpfypuxn4f.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpfypuxn4f.js:14:27)\n    at median (/tmp/tmpfypuxn4f.js:15:19)\n    at median (/tmp/tmpfypuxn4f.js:15:19)\n    at median (/tmp/tmpfypuxn4f.js:15:19)\n    at median (/tmp/tmpfypuxn4f.js:15:19)\n    at median (/tmp/tmpfypuxn4f.js:15:19)\n    at median (/tmp/tmpfypuxn4f.js:15:19)\n    at median (/tmp/tmpfypuxn4f.js:15:19)\n    at median (/tmp/tmpfypuxn4f.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp30yjae_r.js:23:12)\n    at Object.<anonymous> (/tmp/tmp30yjae_r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp101cdxmd.js:22:12)\n    at Object.<anonymous> (/tmp/tmp101cdxmd.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewvty7a9.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpewvty7a9.js:11:20)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const half = Math.floor(l.length / 2);\n  return l[half];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmphsgkjb5n.js:18:12)\n    at Object.<anonymous> (/tmp/tmphsgkjb5n.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpjwono8ff.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpjwono8ff.js:11:20)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n    at median (/tmp/tmpjwono8ff.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbnn6n0o6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpbnn6n0o6.js:11:27)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp6f4ahivd.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6f4ahivd.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx7m9i7n2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx7m9i7n2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmprub2yd_o.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmprub2yd_o.js:11:27)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n    at median (/tmp/tmprub2yd_o.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5a7xobhy.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp5a7xobhy.js:8:15)\n    at median (/tmp/tmp5a7xobhy.js:14:18)\n    at median (/tmp/tmp5a7xobhy.js:14:18)\n    at median (/tmp/tmp5a7xobhy.js:15:19)\n    at test (/tmp/tmp5a7xobhy.js:21:22)\n    at Object.<anonymous> (/tmp/tmp5a7xobhy.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6oxs38np.js:8\n        throw new Error(\"Cannot compute median of an empty list\");\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmp6oxs38np.js:8:15)\n    at median (/tmp/tmp6oxs38np.js:15:18)\n    at median (/tmp/tmp6oxs38np.js:15:18)\n    at median (/tmp/tmp6oxs38np.js:16:19)\n    at test (/tmp/tmp6oxs38np.js:22:22)\n    at Object.<anonymous> (/tmp/tmp6oxs38np.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxhd48vqy.ts(14,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr7ydghbw.ts(14,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? left + (right - left) / 2 : left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpadrbyth6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpadrbyth6.js:11:27)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  if (l[mid] >= l[mid+1]) {\n    return l[mid];\n  }\n  return l[mid+1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpm0j6u9dg.js:22:12)\n    at Object.<anonymous> (/tmp/tmpm0j6u9dg.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmph_8rhhq5.js:22:12)\n    at Object.<anonymous> (/tmp/tmph_8rhhq5.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpkjy_c9yd.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpkjy_c9yd.js:8:15)\n    at median (/tmp/tmpkjy_c9yd.js:15:18)\n    at median (/tmp/tmpkjy_c9yd.js:15:18)\n    at median (/tmp/tmpkjy_c9yd.js:16:19)\n    at test (/tmp/tmpkjy_c9yd.js:22:22)\n    at Object.<anonymous> (/tmp/tmpkjy_c9yd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpm2_xnie_.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpm2_xnie_.js:11:20)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp49aa6r6o.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp49aa6r6o.js:11:20)\n    at median (/tmp/tmp49aa6r6o.js:13:27)\n    at median (/tmp/tmp49aa6r6o.js:13:27)\n    at median (/tmp/tmp49aa6r6o.js:13:27)\n    at median (/tmp/tmp49aa6r6o.js:13:27)\n    at median (/tmp/tmp49aa6r6o.js:13:27)\n    at median (/tmp/tmp49aa6r6o.js:13:27)\n    at median (/tmp/tmp49aa6r6o.js:13:27)\n    at median (/tmp/tmp49aa6r6o.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp30yjae_r.js:23:12)\n    at Object.<anonymous> (/tmp/tmp30yjae_r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsp25x6tm.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpsp25x6tm.js:8:15)\n    at median (/tmp/tmpsp25x6tm.js:14:18)\n    at median (/tmp/tmpsp25x6tm.js:14:18)\n    at median (/tmp/tmpsp25x6tm.js:15:19)\n    at test (/tmp/tmpsp25x6tm.js:21:22)\n    at Object.<anonymous> (/tmp/tmpsp25x6tm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0hkj864w.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp0hkj864w.js:15:27)\n    at median (/tmp/tmp0hkj864w.js:16:19)\n    at median (/tmp/tmp0hkj864w.js:16:19)\n    at median (/tmp/tmp0hkj864w.js:16:19)\n    at median (/tmp/tmp0hkj864w.js:16:19)\n    at median (/tmp/tmp0hkj864w.js:16:19)\n    at median (/tmp/tmp0hkj864w.js:16:19)\n    at median (/tmp/tmp0hkj864w.js:16:19)\n    at median (/tmp/tmp0hkj864w.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpduomu876.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpduomu876.js:8:15)\n    at median (/tmp/tmpduomu876.js:16:28)\n    at median (/tmp/tmpduomu876.js:16:28)\n    at median (/tmp/tmpduomu876.js:17:26)\n    at test (/tmp/tmpduomu876.js:23:22)\n    at Object.<anonymous> (/tmp/tmpduomu876.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 1) return NaN\n  if (n === 1) return l[0]\n  const mid = n >> 1\n  const a = median(l.slice(0, mid))\n  const b = median(l.slice(mid))\n  return ((a + b) / 2)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpi0qiijv1.js:20:12)\n    at Object.<anonymous> (/tmp/tmpi0qiijv1.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpnp10bc4l.js:22:12)\n    at Object.<anonymous> (/tmp/tmpnp10bc4l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const half = n / 2;\n  if (n % 2) {\n    return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf9k_y2lc.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpf9k_y2lc.ts(16,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpf9k_y2lc.ts(18,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3r53i2qc.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp3r53i2qc.js:11:20)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvo1ntonn.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvo1ntonn.js:11:27)\n    at median (/tmp/tmpvo1ntonn.js:12:19)\n    at median (/tmp/tmpvo1ntonn.js:12:19)\n    at median (/tmp/tmpvo1ntonn.js:12:19)\n    at median (/tmp/tmpvo1ntonn.js:12:19)\n    at median (/tmp/tmpvo1ntonn.js:12:19)\n    at median (/tmp/tmpvo1ntonn.js:12:19)\n    at median (/tmp/tmpvo1ntonn.js:12:19)\n    at median (/tmp/tmpvo1ntonn.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp1xyq91mf.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp1xyq91mf.js:14:27)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvvz4i4pm.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvvz4i4pm.js:11:27)\n    at median (/tmp/tmpvvz4i4pm.js:12:19)\n    at median (/tmp/tmpvvz4i4pm.js:12:19)\n    at median (/tmp/tmpvvz4i4pm.js:12:19)\n    at median (/tmp/tmpvvz4i4pm.js:12:19)\n    at median (/tmp/tmpvvz4i4pm.js:12:19)\n    at median (/tmp/tmpvvz4i4pm.js:12:19)\n    at median (/tmp/tmpvvz4i4pm.js:12:19)\n    at median (/tmp/tmpvvz4i4pm.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = l.length / 2;\n  if (middle === 0) {\n    return l[middle];\n  }\n  if (middle === 1) {\n    return l[middle - 1];\n  }\n  const medianValue = l[middle];\n  const leftMedian = median(l.slice(0, middle));\n  const rightMedian = median(l.slice(middle + 1));\n  return medianValue + Math.max(leftMedian, rightMedian);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpz6w_2jzr.js:25:12)\n    at Object.<anonymous> (/tmp/tmpz6w_2jzr.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const midIndex = Math.floor(sortedList.length / 2);\n  return sortedList[midIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp4scz42na.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4scz42na.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": -1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot calculate median of an empty list');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[(n - 1) / 2] as number;\n  }\n  const half = n / 2;\n  let i = 0;\n  let m = 0;\n  while (i < half) {\n    m = l[i];\n    if (m > l[half]) {\n      i++;\n    }\n    else if (m === l[half]) {\n      i++;\n      m++;\n    }\n    else {\n      m++;\n    }\n  }\n  return m / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334863
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  const sorted = l.slice().sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[mid];\n  }\n  const medianOfMiddle = Math.floor(mid / 2);\n  return sorted[medianOfMiddle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpqq6lqvxl.js:21:12)\n    at Object.<anonymous> (/tmp/tmpqq6lqvxl.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmph4bx786d.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmph4bx786d.js:11:20)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n    at median (/tmp/tmph4bx786d.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf6a3oaen.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf6a3oaen.js:15:27)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpma4z2tzx.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpma4z2tzx.js:11:27)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right + l[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpyex5cfwe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpyex5cfwe.js:8:15)\n    at median (/tmp/tmpyex5cfwe.js:15:18)\n    at median (/tmp/tmpyex5cfwe.js:15:18)\n    at median (/tmp/tmpyex5cfwe.js:16:19)\n    at test (/tmp/tmpyex5cfwe.js:22:22)\n    at Object.<anonymous> (/tmp/tmpyex5cfwe.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 2) return NaN\n  const mid = ~~(n / 2)\n  const a = l[mid]\n  const b = l[n - 1]\n  const c = l[mid]\n  const d = l[n - 1]\n  return ((a + b + c + d) / 4).toFixed(2) // toFixed returns string, not number\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpthgyt4wr.ts(14,3): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "timestamp": 1660334851
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((l[mid] + l[mid-1] + l[mid+1] + right) / 4) as number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpj5jdvoog.js:17:12)\n    at Object.<anonymous> (/tmp/tmpj5jdvoog.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334851
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp8x859nvp.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp8x859nvp.js:11:27)\n    at median (/tmp/tmp8x859nvp.js:12:19)\n    at median (/tmp/tmp8x859nvp.js:12:19)\n    at median (/tmp/tmp8x859nvp.js:12:19)\n    at median (/tmp/tmp8x859nvp.js:12:19)\n    at median (/tmp/tmp8x859nvp.js:12:19)\n    at median (/tmp/tmp8x859nvp.js:12:19)\n    at median (/tmp/tmp8x859nvp.js:12:19)\n    at median (/tmp/tmp8x859nvp.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334851
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgxh9gp_m.js:8\n        throw new Error('Cannot compute median of an empty list');\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmpgxh9gp_m.js:8:15)\n    at median (/tmp/tmpgxh9gp_m.js:15:18)\n    at median (/tmp/tmpgxh9gp_m.js:15:18)\n    at median (/tmp/tmpgxh9gp_m.js:16:19)\n    at test (/tmp/tmpgxh9gp_m.js:22:22)\n    at Object.<anonymous> (/tmp/tmpgxh9gp_m.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsp25x6tm.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpsp25x6tm.js:8:15)\n    at median (/tmp/tmpsp25x6tm.js:14:18)\n    at median (/tmp/tmpsp25x6tm.js:14:18)\n    at median (/tmp/tmpsp25x6tm.js:15:19)\n    at test (/tmp/tmpsp25x6tm.js:21:22)\n    at Object.<anonymous> (/tmp/tmpsp25x6tm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 2) {\n    return l[0]\n  }\n  const half = Math.floor(n / 2)\n  const left = median(l[half])\n  const right = median(l[n - half])\n  return (left + right) / 2\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmu_xhdqf.ts(12,23): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpmu_xhdqf.ts(13,24): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334851
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp1xyq91mf.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp1xyq91mf.js:14:27)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewvty7a9.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpewvty7a9.js:11:20)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  if (n % 2) {\n    return median(l[mid]);\n  }\n  return median(l[mid], l[n - 1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp11lfqhv5.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmp11lfqhv5.ts(18,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334851
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length\n  if (n < 2) return l[0]\n  const half = n / 2\n  const i = half\n  const a = l[half]\n  const b = l[n - 1]\n  let c = l[n - 2]\n  let d = l[n - 3]\n  let m\n  if (a > b && a > c) m = a\n  else if (b > c && b > d) m = b\n  else m = c\n  if (m === 0) return 0\n  else if (m === 1) return l[n - 1]\n  else if (m === 2) return l[n - 2]\n  else if (m === 3) return l[n - 3]\n  else if (m === 4) return l[n - 4]\n  else if (m === 5) return l[n - 5]\n  else if (m === 6) return l[n - 6]\n  else if (m === 7) return l[n - 7]\n  else if (m === 8) return l[n - 8]\n  else if (m === 9) return l[n - 9]\n  else if (m === 10) return l[n - 10]\n  else if (m === 11) return l[n - 11]\n  else if (m === 12) return l[n - 12]\n  else if (m === 13) return l[n - 13]\n  else if (m === 14) return l[n - 14]\n  else if (m === 15) return l[n - 15]\n  else if (m === 16) return l[n - 16]\n  else if (m === 17) return l[n - 17]\n  else if (m === 18) return l[n - 18]\n  else if (m === 19) return l[n - 19]\n  else if (m === 20) return l[n - 20]\n  else if (m === 21) return l[n - 21]\n  else if (m === 22) return l[n - 22]\n  else if (m === 23) return l[n - 23]\n  else if (m === 24) return l[n - 24]\n  else if (m === 25) return l[n - 25]\n  else if (m === 26) return l[n - 26]\n  else if (m === 27) return l[n - 27]\n  else if (m === 28) return l[n - 28]\n  else if (m === 29) return l[n - 29]\n  else if (m === 30) return l[n - 30]\n  else if (m === 31) return l[n - 31]\n  else if (m === 32) return l[n - 32]\n  else if (m === 33) return l[n - 33]\n  else if (m === 34) return l[n - 34]\n  else if (m === 35) return l[n - 35]\n  else if (m === 36) return l[n - 36]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp54tqrpse.ts(69,8): error TS1005: '}' expected.\n",
      "timestamp": 1660334851
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpq7f53czp.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpq7f53czp.js:11:27)\n    at median (/tmp/tmpq7f53czp.js:12:19)\n    at median (/tmp/tmpq7f53czp.js:12:19)\n    at median (/tmp/tmpq7f53czp.js:12:19)\n    at median (/tmp/tmpq7f53czp.js:12:19)\n    at median (/tmp/tmpq7f53czp.js:12:19)\n    at median (/tmp/tmpq7f53czp.js:12:19)\n    at median (/tmp/tmpq7f53czp.js:12:19)\n    at median (/tmp/tmpq7f53czp.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpdkxl9l50.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdkxl9l50.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp093059x1.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp093059x1.js:11:27)\n    at median (/tmp/tmp093059x1.js:12:19)\n    at median (/tmp/tmp093059x1.js:12:19)\n    at median (/tmp/tmp093059x1.js:12:19)\n    at median (/tmp/tmp093059x1.js:12:19)\n    at median (/tmp/tmp093059x1.js:12:19)\n    at median (/tmp/tmp093059x1.js:12:19)\n    at median (/tmp/tmp093059x1.js:12:19)\n    at median (/tmp/tmp093059x1.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (mid % 1 !== 0) {\n    return l[mid];\n  }\n  const lower = [];\n  const upper = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i < mid) {\n      lower.push(l[i]);\n    } else {\n      upper.push(l[i]);\n    }\n  }\n  return median(lower) + median(upper);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpy19lr_vs.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy19lr_vs.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedArr = l.slice().sort((a, b) => a - b);\n  const mid = Math.floor(sortedArr.length / 2);\n  if (sortedArr.length % 2 === 0) {\n    return sortedArr[mid];\n  }\n  return sortedArr[mid - 1] + sortedArr[mid];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp68o27j4q.js:20:12)\n    at Object.<anonymous> (/tmp/tmp68o27j4q.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const middle = Math.floor(l.length / 2);\n  const medianOfMiddle = median(l.slice(0, middle));\n  const medianOfRest = median(l.slice(middle));\n  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpprc6ifop.js:21:12)\n    at Object.<anonymous> (/tmp/tmpprc6ifop.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return median(l.slice(0, mid), l.slice(mid));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppo27klhs.ts(14,34): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  return sortedList[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpxtldl9e6.js:18:12)\n    at Object.<anonymous> (/tmp/tmpxtldl9e6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx1n97oss.js:23:12)\n    at Object.<anonymous> (/tmp/tmpx1n97oss.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp17c05coz.js:22:12)\n    at Object.<anonymous> (/tmp/tmp17c05coz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpd6ik10aw.js:8\n        throw new Error(\"Cannot compute median of an empty list\");\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmpd6ik10aw.js:8:15)\n    at median (/tmp/tmpd6ik10aw.js:16:28)\n    at median (/tmp/tmpd6ik10aw.js:16:28)\n    at median (/tmp/tmpd6ik10aw.js:17:26)\n    at test (/tmp/tmpd6ik10aw.js:23:22)\n    at Object.<anonymous> (/tmp/tmpd6ik10aw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpx91aia6l.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpx91aia6l.js:11:27)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n    at median (/tmp/tmpx91aia6l.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid-1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyhqc85kr.ts(14,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list.\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  if (n % 2) {\n    return median(l[mid]);\n  }\n  return median(l[mid], l[n - 1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgcwgcm3i.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpgcwgcm3i.ts(18,25): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpm2_xnie_.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpm2_xnie_.js:11:20)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp_2fs8t3a.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp_2fs8t3a.js:15:27)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n    at median (/tmp/tmp_2fs8t3a.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpd6xv8y3n.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd6xv8y3n.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334854
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 === 0\n    ? left + right\n    : (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp47u4w4m3.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp47u4w4m3.js:8:15)\n    at median (/tmp/tmp47u4w4m3.js:14:18)\n    at median (/tmp/tmp47u4w4m3.js:14:18)\n    at median (/tmp/tmp47u4w4m3.js:15:19)\n    at test (/tmp/tmp47u4w4m3.js:23:22)\n    at Object.<anonymous> (/tmp/tmp47u4w4m3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sortedList.length / 2);\n  if (sortedList.length % 2 === 0) {\n    return sortedList[middle];\n  }\n  return sortedList[middle - 1] + sortedList[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp0b9y1_v6.js:20:12)\n    at Object.<anonymous> (/tmp/tmp0b9y1_v6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = len / 2;\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n  return ((right - left) / 2 + left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpmluhl8kx.js:23:12)\n    at Object.<anonymous> (/tmp/tmpmluhl8kx.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp5bqiszb8.js:21:12)\n    at Object.<anonymous> (/tmp/tmp5bqiszb8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpm2_xnie_.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpm2_xnie_.js:11:20)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const mid = sortedList.length / 2;\n  if (sortedList.length % 2) {\n    return sortedList[mid];\n  }\n  return (sortedList[mid - 1] + sortedList[mid]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpflirgm6q.js:20:12)\n    at Object.<anonymous> (/tmp/tmpflirgm6q.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpdkxl9l50.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdkxl9l50.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? left + (right - left) / 2 : left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpadrbyth6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpadrbyth6.js:11:27)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n    at median (/tmp/tmpadrbyth6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpd6xv8y3n.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd6xv8y3n.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334854
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpaxhgk40c.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpaxhgk40c.js:14:27)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3r53i2qc.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp3r53i2qc.js:11:20)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpql36r1c_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpql36r1c_.js:8:15)\n    at median (/tmp/tmpql36r1c_.js:14:18)\n    at median (/tmp/tmpql36r1c_.js:14:18)\n    at median (/tmp/tmpql36r1c_.js:15:19)\n    at test (/tmp/tmpql36r1c_.js:21:22)\n    at Object.<anonymous> (/tmp/tmpql36r1c_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbnn6n0o6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpbnn6n0o6.js:11:27)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx7m9i7n2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx7m9i7n2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list.\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp7kmwep7t.js:8\n        throw new Error(\"Cannot calculate median of an empty list.\");\n        ^\n\nError: Cannot calculate median of an empty list.\n    at median (/tmp/tmp7kmwep7t.js:8:15)\n    at median (/tmp/tmp7kmwep7t.js:15:18)\n    at median (/tmp/tmp7kmwep7t.js:15:18)\n    at median (/tmp/tmp7kmwep7t.js:16:19)\n    at test (/tmp/tmp7kmwep7t.js:22:22)\n    at Object.<anonymous> (/tmp/tmp7kmwep7t.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp17c05coz.js:22:12)\n    at Object.<anonymous> (/tmp/tmp17c05coz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmphx2x1st_.js:8\n        throw new Error(\"Cannot compute median of an empty list\");\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmphx2x1st_.js:8:15)\n    at median (/tmp/tmphx2x1st_.js:15:18)\n    at median (/tmp/tmphx2x1st_.js:15:18)\n    at median (/tmp/tmphx2x1st_.js:16:19)\n    at test (/tmp/tmphx2x1st_.js:22:22)\n    at Object.<anonymous> (/tmp/tmphx2x1st_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewvty7a9.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpewvty7a9.js:11:20)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((l[mid] + l[mid-1] + l[mid+1] + right) / 4) as number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpj5jdvoog.js:17:12)\n    at Object.<anonymous> (/tmp/tmpj5jdvoog.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334851
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpm2_xnie_.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpm2_xnie_.js:11:20)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n    at median (/tmp/tmpm2_xnie_.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp30yjae_r.js:23:12)\n    at Object.<anonymous> (/tmp/tmp30yjae_r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (mid === 0) {\n    return l[mid];\n  }\n  if (mid === 1) {\n    return l[mid];\n  }\n  return median(l[mid], l[mid - 1], l[mid]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppjey6v_x.ts(17,25): error TS2554: Expected 1 arguments, but got 3.\n",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (mid % 1 !== 0) {\n    return l[mid];\n  }\n  const lower = [];\n  const upper = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i < mid) {\n      lower.push(l[i]);\n    } else {\n      upper.push(l[i]);\n    }\n  }\n  return median(lower) + median(upper);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpy19lr_vs.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy19lr_vs.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpulu1155j.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpulu1155j.js:11:20)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp__nnmtv5.js:23:12)\n    at Object.<anonymous> (/tmp/tmp__nnmtv5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpql36r1c_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpql36r1c_.js:8:15)\n    at median (/tmp/tmpql36r1c_.js:14:18)\n    at median (/tmp/tmpql36r1c_.js:14:18)\n    at median (/tmp/tmpql36r1c_.js:15:19)\n    at test (/tmp/tmpql36r1c_.js:21:22)\n    at Object.<anonymous> (/tmp/tmpql36r1c_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw Error('Cannot compute median of an empty list');\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[(n - 1) / 2] as number;\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpi3z9pcww.js:8\n        throw Error('Cannot compute median of an empty list');\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmpi3z9pcww.js:8:15)\n    at median (/tmp/tmpi3z9pcww.js:15:18)\n    at median (/tmp/tmpi3z9pcww.js:15:18)\n    at median (/tmp/tmpi3z9pcww.js:16:19)\n    at test (/tmp/tmpi3z9pcww.js:22:22)\n    at Object.<anonymous> (/tmp/tmpi3z9pcww.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5r1zrlw4.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5r1zrlw4.js:11:27)\n    at median (/tmp/tmp5r1zrlw4.js:12:19)\n    at median (/tmp/tmp5r1zrlw4.js:12:19)\n    at median (/tmp/tmp5r1zrlw4.js:12:19)\n    at median (/tmp/tmp5r1zrlw4.js:12:19)\n    at median (/tmp/tmp5r1zrlw4.js:12:19)\n    at median (/tmp/tmp5r1zrlw4.js:12:19)\n    at median (/tmp/tmp5r1zrlw4.js:12:19)\n    at median (/tmp/tmp5r1zrlw4.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp17c05coz.js:22:12)\n    at Object.<anonymous> (/tmp/tmp17c05coz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? left + ((right - left) / 2) : left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.75\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpnmhtipqu.js:21:12)\n    at Object.<anonymous> (/tmp/tmpnmhtipqu.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.75,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[len - 1 - middle];\n  return median1 + median2 / (len / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4.2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpwka0ufj7.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwka0ufj7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4.2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvs7dd44i.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvs7dd44i.js:11:20)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n  return median1 + median2 / (len / 2 - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpemagvtd4.js:23:12)\n    at Object.<anonymous> (/tmp/tmpemagvtd4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  l.sort((a, b) => a - b);\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  return (l[mid] + l[mid-1]) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpd6xv8y3n.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd6xv8y3n.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334854
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf6a3oaen.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf6a3oaen.js:15:27)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpkjy_c9yd.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpkjy_c9yd.js:8:15)\n    at median (/tmp/tmpkjy_c9yd.js:15:18)\n    at median (/tmp/tmpkjy_c9yd.js:15:18)\n    at median (/tmp/tmpkjy_c9yd.js:16:19)\n    at test (/tmp/tmpkjy_c9yd.js:22:22)\n    at Object.<anonymous> (/tmp/tmpkjy_c9yd.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp15bdinr0.js:22:12)\n    at Object.<anonymous> (/tmp/tmp15bdinr0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return l[l.length - 1];\n  }\n  if (middle > 1) {\n    return median(l[middle - 1] + l[middle]);\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmlmbwkkq.ts(18,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpz5xgoa05.js:8\n        throw new Error(\"Cannot compute median of an empty list\");\n        ^\n\nError: Cannot compute median of an empty list\n    at median (/tmp/tmpz5xgoa05.js:8:15)\n    at median (/tmp/tmpz5xgoa05.js:14:18)\n    at median (/tmp/tmpz5xgoa05.js:14:18)\n    at median (/tmp/tmpz5xgoa05.js:15:19)\n    at test (/tmp/tmpz5xgoa05.js:21:22)\n    at Object.<anonymous> (/tmp/tmpz5xgoa05.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334856
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return l[l.length - 1];\n  }\n  if (middle > 1) {\n    return median(l[middle - 1] + l[middle]);\n  }\n  return median(l[middle - 1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv0bh06wa.ts(18,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpv0bh06wa.ts(20,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334857
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = l.length / 2;\n  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return l[l.length - 1];\n  }\n  const medianValue = median(l);\n  const leftMedian = median(l.slice(0, middle));\n  const rightMedian = median(l.slice(middle + 1));\n  return ((leftMedian + rightMedian) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmptbwxdy1j.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError: Maximum call stack size exceeded\n    at median (/tmp/tmptbwxdy1j.js:7:11)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n    at median (/tmp/tmptbwxdy1j.js:17:25)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf6a3oaen.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf6a3oaen.js:15:27)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const half = n / 2;\n  if (n % 2) {\n    return median(l[half]) < median(l[half - 1]) ? l[half] : l[half - 1];\n  }\n  return median(l[half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp80jt7udr.ts(16,19): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmp80jt7udr.ts(16,37): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmp80jt7udr.ts(18,17): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[(len - 1) / 2];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpdkxl9l50.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdkxl9l50.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334852
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const n = l.length;\n  if (n === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp7rj0atcf.js:22:12)\n    at Object.<anonymous> (/tmp/tmp7rj0atcf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps1jn80sl.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps1jn80sl.js:14:27)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const left = sorted[middle - 1];\n  const right = sorted[middle];\n  return ((right - left) / 2 + left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpdz8h6y1q.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdz8h6y1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpwlr5uqdy.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpwlr5uqdy.js:11:20)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps1jn80sl.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps1jn80sl.js:14:27)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const middle = Math.floor(l.length / 2)\n  const left = l.slice(0, middle)\n  const right = l.slice(middle)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp084zcnpo.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp084zcnpo.js:11:20)\n    at median (/tmp/tmp084zcnpo.js:13:27)\n    at median (/tmp/tmp084zcnpo.js:13:27)\n    at median (/tmp/tmp084zcnpo.js:13:27)\n    at median (/tmp/tmp084zcnpo.js:13:27)\n    at median (/tmp/tmp084zcnpo.js:13:27)\n    at median (/tmp/tmp084zcnpo.js:13:27)\n    at median (/tmp/tmp084zcnpo.js:13:27)\n    at median (/tmp/tmp084zcnpo.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpma4z2tzx.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpma4z2tzx.js:11:27)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n    at median (/tmp/tmpma4z2tzx.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewvty7a9.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpewvty7a9.js:11:20)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.625\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpadmn78hy.js:21:12)\n    at Object.<anonymous> (/tmp/tmpadmn78hy.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.625,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? left + right : Math.max(left, right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpza7gd8zw.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpza7gd8zw.js:8:15)\n    at median (/tmp/tmpza7gd8zw.js:14:18)\n    at median (/tmp/tmpza7gd8zw.js:14:18)\n    at median (/tmp/tmpza7gd8zw.js:15:19)\n    at test (/tmp/tmpza7gd8zw.js:21:22)\n    at Object.<anonymous> (/tmp/tmpza7gd8zw.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbnn6n0o6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpbnn6n0o6.js:11:27)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(n / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp6t28s8vk.js:9\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp6t28s8vk.js:9:15)\n    at median (/tmp/tmp6t28s8vk.js:14:12)\n    at median (/tmp/tmp6t28s8vk.js:14:12)\n    at median (/tmp/tmp6t28s8vk.js:14:12)\n    at test (/tmp/tmp6t28s8vk.js:19:22)\n    at Object.<anonymous> (/tmp/tmp6t28s8vk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 1) {\n    throw new Error(\"median requires at least one argument\");\n  }\n  if (n === 1) {\n    return l[0];\n  }\n  const middle = Math.floor(n / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpgo_4771u.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgo_4771u.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx7m9i7n2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpx7m9i7n2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpwlr5uqdy.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpwlr5uqdy.js:11:20)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n    at median (/tmp/tmpwlr5uqdy.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a: number, b: number) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpppc2ka7v.js:23:12)\n    at Object.<anonymous> (/tmp/tmpppc2ka7v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpewvty7a9.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpewvty7a9.js:11:20)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n    at median (/tmp/tmpewvty7a9.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const mid = Math.floor((n - 1) / 2);\n  if (l[mid] >= l[mid + 1]) {\n    return l[mid];\n  }\n  return l[mid + 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmptyzw9g06.js:20:12)\n    at Object.<anonymous> (/tmp/tmptyzw9g06.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  const medianOfLeft = getMedian(left);\n  const medianOfRight = getMedian(right);\n  return medianOfLeft + medianOfRight;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphadoc4xu.ts(13,24): error TS2304: Cannot find name 'getMedian'.\n../../../../tmp/tmphadoc4xu.ts(14,25): error TS2304: Cannot find name 'getMedian'.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n  if (middle === 0) {\n    return l[0];\n  }\n  if (middle === 1) {\n    return l[l.length - 1];\n  }\n  const medianValue = median(l[middle]);\n  return l.slice(0, middle).concat([medianValue]).concat(l.slice(middle + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwucvggz1.ts(17,30): error TS2345: Argument of type 'number' is not assignable to parameter of type 'number[]'.\n../../../../tmp/tmpwucvggz1.ts(18,3): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpt_kr5ijr.js:21:12)\n    at Object.<anonymous> (/tmp/tmpt_kr5ijr.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left > right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpdl7uzvu2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpdl7uzvu2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sortedList = l.slice().sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedList.length / 2);\n  return sortedList[middleIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpwyzn7mna.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwyzn7mna.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpp2orx101.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpp2orx101.js:14:27)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n    at median (/tmp/tmpp2orx101.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf9td8o7n.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf9td8o7n.js:11:20)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n    at median (/tmp/tmpf9td8o7n.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 2,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list.\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = Math.floor(n / 2);\n  return median(l[half], l[n - half]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0417her2.ts(15,26): error TS2554: Expected 1 arguments, but got 2.\n",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle - 1] + sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpdt6s1hwb.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdt6s1hwb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const mid = Math.floor(n / 2);\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpmk7_crqh.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpmk7_crqh.js:8:15)\n    at median (/tmp/tmpmk7_crqh.js:15:18)\n    at median (/tmp/tmpmk7_crqh.js:15:18)\n    at median (/tmp/tmpmk7_crqh.js:16:19)\n    at test (/tmp/tmpmk7_crqh.js:22:22)\n    at Object.<anonymous> (/tmp/tmpmk7_crqh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334859
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const medianOfMiddle = median(sorted.slice(0, middle));\n  const medianOfRest = median(sorted.slice(middle));\n  return medianOfMiddle + medianOfRest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpduomu876.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpduomu876.js:8:15)\n    at median (/tmp/tmpduomu876.js:16:28)\n    at median (/tmp/tmpduomu876.js:16:28)\n    at median (/tmp/tmpduomu876.js:17:26)\n    at test (/tmp/tmpduomu876.js:23:22)\n    at Object.<anonymous> (/tmp/tmpduomu876.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9igxdy5w.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9igxdy5w.js:8:15)\n    at median (/tmp/tmp9igxdy5w.js:15:18)\n    at median (/tmp/tmp9igxdy5w.js:15:18)\n    at median (/tmp/tmp9igxdy5w.js:16:19)\n    at test (/tmp/tmp9igxdy5w.js:22:22)\n    at Object.<anonymous> (/tmp/tmp9igxdy5w.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  }\n  const middle = l.length / 2;\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpgdry8lat.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpgdry8lat.js:11:20)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n    at median (/tmp/tmpgdry8lat.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l);\n  const right = median(l.slice(half));\n  return half\n    ? Math.max(left, right) < Math.abs(left - right) ? left : right\n    : left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpox58hv97.js:7\n    if (l.length === 0) {\n          ^\n\nRangeError: Maximum call stack size exceeded\n    at median (/tmp/tmpox58hv97.js:7:11)\n    at median (/tmp/tmpox58hv97.js:15:18)\n    at median (/tmp/tmpox58hv97.js:15:18)\n    at median (/tmp/tmpox58hv97.js:15:18)\n    at median (/tmp/tmpox58hv97.js:15:18)\n    at median (/tmp/tmpox58hv97.js:15:18)\n    at median (/tmp/tmpox58hv97.js:15:18)\n    at median (/tmp/tmpox58hv97.js:15:18)\n    at median (/tmp/tmpox58hv97.js:15:18)\n    at median (/tmp/tmpox58hv97.js:15:18)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const middle = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[middle];\n  }\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp57n_dx9d.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp57n_dx9d.js:8:15)\n    at median (/tmp/tmp57n_dx9d.js:16:12)\n    at median (/tmp/tmp57n_dx9d.js:16:12)\n    at median (/tmp/tmp57n_dx9d.js:16:27)\n    at test (/tmp/tmp57n_dx9d.js:21:22)\n    at Object.<anonymous> (/tmp/tmp57n_dx9d.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp__nnmtv5.js:23:12)\n    at Object.<anonymous> (/tmp/tmp__nnmtv5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return leftMedian + rightMedian / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpnc57tn3u.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpnc57tn3u.js:8:15)\n    at median (/tmp/tmpnc57tn3u.js:14:24)\n    at median (/tmp/tmpnc57tn3u.js:14:24)\n    at median (/tmp/tmpnc57tn3u.js:15:25)\n    at test (/tmp/tmpnc57tn3u.js:21:22)\n    at Object.<anonymous> (/tmp/tmpnc57tn3u.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return l.length % 2 ? Math.max(left, right) : left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp66bu0a2k.js:17:12)\n    at Object.<anonymous> (/tmp/tmp66bu0a2k.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpulu1155j.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpulu1155j.js:11:20)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n    at median (/tmp/tmpulu1155j.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lr7grt6.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lr7grt6.js:14:27)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n    at median (/tmp/tmp5lr7grt6.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpf6a3oaen.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpf6a3oaen.js:15:27)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n    at median (/tmp/tmpf6a3oaen.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334849
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return ((left < right) ? left : right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpierw88ml.js:15\n    const left = median(l.slice(0, half));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpierw88ml.js:15:27)\n    at median (/tmp/tmpierw88ml.js:16:19)\n    at median (/tmp/tmpierw88ml.js:16:19)\n    at median (/tmp/tmpierw88ml.js:16:19)\n    at median (/tmp/tmpierw88ml.js:16:19)\n    at median (/tmp/tmpierw88ml.js:16:19)\n    at median (/tmp/tmpierw88ml.js:16:19)\n    at median (/tmp/tmpierw88ml.js:16:19)\n    at median (/tmp/tmpierw88ml.js:16:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle - 1];\n  const median2 = sorted[middle];\n  return median1 + median2 / (len / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp1mxk07t0.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1mxk07t0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  const median1 = sorted[middle];\n  const median2 = sorted[middle + 1];\n  return (median1 + median2) / 2.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3.5\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp30yjae_r.js:23:12)\n    at Object.<anonymous> (/tmp/tmp30yjae_r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3.5,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = l.length / 2 - 1;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + right;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpbnn6n0o6.js:11\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpbnn6n0o6.js:11:27)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n    at median (/tmp/tmpbnn6n0o6.js:12:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334844
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  const n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  const mid = n / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp5l18yr5m.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5l18yr5m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const n = l.length;\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)];\n  }\n  const half = n / 2;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp0px0vf4n.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp0px0vf4n.js:8:15)\n    at median (/tmp/tmp0px0vf4n.js:15:18)\n    at median (/tmp/tmp0px0vf4n.js:15:18)\n    at median (/tmp/tmp0px0vf4n.js:16:19)\n    at test (/tmp/tmp0px0vf4n.js:22:22)\n    at Object.<anonymous> (/tmp/tmp0px0vf4n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpnp10bc4l.js:22:12)\n    at Object.<anonymous> (/tmp/tmpnp10bc4l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const mid = Math.floor(l.length / 2);\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp5lhk3jsf.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp5lhk3jsf.js:11:20)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n    at median (/tmp/tmp5lhk3jsf.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2) | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmps1jn80sl.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmps1jn80sl.js:14:27)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n    at median (/tmp/tmps1jn80sl.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334858
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpsp25x6tm.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpsp25x6tm.js:8:15)\n    at median (/tmp/tmpsp25x6tm.js:14:18)\n    at median (/tmp/tmpsp25x6tm.js:14:18)\n    at median (/tmp/tmpsp25x6tm.js:15:19)\n    at test (/tmp/tmpsp25x6tm.js:21:22)\n    at Object.<anonymous> (/tmp/tmpsp25x6tm.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot compute median of an empty list\");\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  const middle = Math.floor(len / 2);\n  return sorted[middle];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp3s3w57pl.js:22:12)\n    at Object.<anonymous> (/tmp/tmp3s3w57pl.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpc7h5zrqk.js:21:12)\n    at Object.<anonymous> (/tmp/tmpc7h5zrqk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const leftMedian = median(l.slice(0, mid));\n  const rightMedian = median(l.slice(mid));\n  return leftMedian + rightMedian / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpwe3z2bz_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpwe3z2bz_.js:8:15)\n    at median (/tmp/tmpwe3z2bz_.js:14:24)\n    at median (/tmp/tmpwe3z2bz_.js:14:24)\n    at median (/tmp/tmpwe3z2bz_.js:15:25)\n    at test (/tmp/tmpwe3z2bz_.js:21:22)\n    at Object.<anonymous> (/tmp/tmpwe3z2bz_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[l.length / 2 - 1]\n  }\n  const mid = l.length / 2\n  const left = l.slice(0, mid)\n  const right = l.slice(mid)\n  return median(left) + median(right)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp3r53i2qc.js:11\n    const left = l.slice(0, mid);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp3r53i2qc.js:11:20)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n    at median (/tmp/tmp3r53i2qc.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  const mid = l.length / 2;\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((l[mid] + l[mid]) / 2) < left ? (left + right) / 2 : left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpxiaojbok.js:17:12)\n    at Object.<anonymous> (/tmp/tmpxiaojbok.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334861
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp9wjm0di_.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmp9wjm0di_.js:8:15)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:14:18)\n    at median (/tmp/tmp9wjm0di_.js:15:19)\n    at test (/tmp/tmp9wjm0di_.js:21:22)\n    at Object.<anonymous> (/tmp/tmp9wjm0di_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return left + Math.abs(right - left);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpaxhgk40c.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpaxhgk40c.js:14:27)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n    at median (/tmp/tmpaxhgk40c.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"Cannot calculate median of an empty list\");\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return ((left + right) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpa7i8i6fe.js:8\n        throw new Error(\"Cannot calculate median of an empty list\");\n        ^\n\nError: Cannot calculate median of an empty list\n    at median (/tmp/tmpa7i8i6fe.js:8:15)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:14:18)\n    at median (/tmp/tmpa7i8i6fe.js:15:19)\n    at test (/tmp/tmpa7i8i6fe.js:21:22)\n    at Object.<anonymous> (/tmp/tmpa7i8i6fe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334845
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length % 2 === 0) {\n    return l[Math.floor(l.length / 2)];\n  }\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n  return median(left) + median(right);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmpvs7dd44i.js:11\n    const left = l.slice(0, middle);\n                   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmpvs7dd44i.js:11:20)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n    at median (/tmp/tmpvs7dd44i.js:13:27)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334855
    },
    {
      "exit_code": 1,
      "program": "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n  }\n  const mid = l.length / 2;\n  if (l.length % 2 === 0) {\n    return l[mid];\n  }\n  const left = median(l.slice(0, mid));\n  const right = median(l.slice(mid));\n  return (left + right) / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "/tmp/tmp1xyq91mf.js:14\n    const left = median(l.slice(0, mid));\n                          ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.slice (<anonymous>)\n    at median (/tmp/tmp1xyq91mf.js:14:27)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n    at median (/tmp/tmp1xyq91mf.js:15:19)\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334848
    }
  ]
}