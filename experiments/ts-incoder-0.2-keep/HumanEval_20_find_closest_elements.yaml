completions:
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: numbers.length\
  \ < 2\");\n  }\n  const smallest = numbers[0];\n  const largest = numbers[0];\n\
  \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n\
  \      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"Must have at least two numbers\
  \ to compare\");\n  }\n  let smallest: number = numbers[0];\n  let largest: number\
  \ = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
  \ < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest)\
  \ {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    } else if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements expects\
  \ at least two numbers to compare\");\n  }\n\n  let minDiff = Number.MAX_SAFE_INTEGER;\n\
  \  let minDiffIndex = 0;\n  let minDiffValue = numbers[0];\n\n  for (let i = 1;\
  \ i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - minDiffValue);\n\
  \    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n   \
  \ }\n  }\n\n  return [minDiffValue, numbers[minDiffIndex]];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: numbers.length\
  \ must be at least 2\");\n  }\n  const smallest = numbers[0];\n  const largest =\
  \ numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
  \ < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest)\
  \ {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  let smallest: number;\n  let largest: number;\n  let smallest_index: number;\n\
  \  let largest_index: number;\n  for (let i = 0; i < numbers.length; i += 1) {\n\
  \    smallest = numbers[i];\n    largest = numbers[i];\n    smallest_index = i;\n\
  \    largest_index = i;\n    for (let j = i + 1; j < numbers.length; j += 1) {\n\
  \      if (numbers[j] < smallest) {\n        smallest = numbers[j];\n        smallest_index\
  \ = j;\n      }\n      if (numbers[j] > largest) {\n        largest = numbers[j];\n\
  \        largest_index = j;\n      }\n    }\n    if (smallest_index !== largest_index)\
  \ {\n      numbers[smallest_index] = numbers[largest_index];\n      numbers[largest_index]\
  \ = smallest;\n    }\n  }\n  return [numbers[0], numbers[numbers.length - 1]];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const closestNumbers\
  \ = sortedNumbers.slice(0, 2);\n  return [closestNumbers[0], closestNumbers[1]];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i\
  \ < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\
  \t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
  \treturn [smallest, largest];\n}\n"
- "  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 1; i\
  \ < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n\
  \    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\
  \  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1;\
  \ i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest =\
  \ numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n\
  \    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
  \t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i\
  \ < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
  \treturn [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: Not enough\
  \ numbers to find closest pair\");\n  }\n  const [smallest, largest] = numbers;\n\
  \  const [smallest2, largest2] = numbers.sort((a, b) => a - b);\n  if (smallest\
  \ === smallest2) {\n    return [smallest, largest];\n  }\n  if (largest === largest2)\
  \ {\n    return [largest, smallest];\n  }\n  const middle = Math.floor((numbers.length\
  \ - 1) / 2);\n  const [middle2, middle3] = numbers.sort((a, b) => a - b);\n  if\
  \ (middle === middle2) {\n    return [middle, middle3];\n  }\n  if (middle === middle3)\
  \ {\n    return [middle3, middle];\n  }\n  const [middle4, middle5] = numbers.sort((a,\
  \ b) => a - b);\n  if (middle4 === middle5) {\n    return [middle4, middle5];\n\
  \  }\n  return [middle5, middle4];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet smallest: number = numbers[0];\n\tlet largest: number = numbers[0];\n\tfor\
  \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\
  \tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest\
  \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    } else if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min1 = numbers[0];\n\tlet max1 = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tlet min2 = numbers[i];\n\t\tlet max2 = numbers[i];\n\t\tif (min1 >\
  \ max2) {\n\t\t\tmin2 = min1;\n\t\t\tmax2 = max1;\n\t\t}\n\t\tif (min2 > max1) {\n\
  \t\t\tmin2 = min1;\n\t\t\tmax2 = max1;\n\t\t}\n\t\tif (min2 < min1) {\n\t\t\tmin2\
  \ = min1;\n\t\t}\n\t\tif (min2 > max1) {\n\t\t\tmax2 = max1;\n\t\t}\n\t\tmin1 =\
  \ min2;\n\t\tmax1 = max2;\n\t}\n\treturn [min1, max1];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"Must provide at least two numbers\
  \ to compare\");\n  }\n\n  const smallest = numbers[0];\n  const largest = numbers[0];\n\
  \n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n\
  \      smallest = numbers[i];\n    }\n\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  const min_dist = Number.MAX_SAFE_INTEGER;\n  const min_dist_index = -1;\n  for\
  \ (let i = 0; i < numbers.length - 1; i++) {\n    const dist = numbers[i] - numbers[i\
  \ + 1];\n    if (dist < min_dist) {\n      min_dist = dist;\n      min_dist_index\
  \ = i;\n    }\n  }\n  return [numbers[min_dist_index + 1], numbers[min_dist_index]];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"Must have at\
  \ least two numbers to compare\");\n  }\n  const smallest = numbers[0];\n  const\
  \ largest = numbers[0];\n  for (let i = 1; i < n; i++) {\n    if (numbers[i] < smallest)\
  \ {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n    \
  \  largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"Must have at least two numbers\
  \ to compare\");\n  }\n  const smallest = numbers[0];\n  const largest = numbers[0];\n\
  \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n\
  \      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: Invalid\
  \ number of arguments. Must supply at least two numbers to compare.\");\n  }\n \
  \ let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 1; i <\
  \ numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n\
  \    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\
  \  return [smallest, largest];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements expects\
  \ at least two numbers to compare\");\n  }\n  let smallest = numbers[0];\n  let\
  \ largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
  \ < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest)\
  \ {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers\
  \ = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length;\
  \ i++) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0] -\
  \ closestNumbers[1]) {\n      closestNumbers = [sortedNumbers[i], sortedNumbers[i]];\n\
  \    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return\
  \ closestNumbers;\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    } else if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"Must have at least two numbers\
  \ to compare\");\n  }\n  const smallest = numbers[0];\n  const largest = numbers[0];\n\
  \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n\
  \      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "  let smallest: number = numbers[0];\n  let largest: number = numbers[0];\n  for\
  \ (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n   \
  \   smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const [smallest, largest] = numbers.sort((a, b) => a - b);\n  return [smallest,\
  \ largest];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: not enough\
  \ numbers to find two closest to each other\");\n  }\n  let smallest = numbers[0];\n\
  \  let largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n   \
  \ if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i]\
  \ > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
  }\n"
- "  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 1; i\
  \ < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n\
  \    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\
  \  return [smallest, largest];\n}\n"
- "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
  \t}\n\treturn [min, max];\n}\n"
- "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i\
  \ < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
  \treturn [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: Must\
  \ have at least two numbers to compare\");\n  }\n  let smallest = numbers[0];\n\
  \  let largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n   \
  \ if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i]\
  \ > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 1; i\
  \ < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n\
  \    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\
  \  return [smallest, largest];\n}\n"
- "  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1;\
  \ i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest =\
  \ numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n\
  \    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet smallest = Math.min(...numbers);\n\tlet largest = Math.max(...numbers);\n\
  \tlet index = numbers.indexOf(smallest);\n\tlet result = [smallest, largest];\n\t\
  while (index >= 0) {\n\t\tsmallest = numbers[index];\n\t\tindex = numbers.indexOf(smallest);\n\
  \t\tresult = [smallest, largest];\n\t\tlargest = numbers[index];\n\t\tindex = numbers.indexOf(largest);\n\
  \t}\n\treturn result;\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet smallest: number;\n\tlet largest: number;\n\tlet smallest_index = 0;\n\t\
  let largest_index = 0;\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i]\
  \ < numbers[smallest_index]) {\n\t\t\tsmallest_index = i;\n\t\t}\n\t\tif (numbers[i]\
  \ > numbers[largest_index]) {\n\t\t\tlargest_index = i;\n\t\t}\n\t}\n\tsmallest\
  \ = numbers[smallest_index];\n\tlargest = numbers[largest_index];\n\tlet result\
  \ = [smallest, largest];\n\tfor (let i = smallest_index + 1; i < largest_index;\
  \ i++) {\n\t\tresult[0] = Math.min(result[0], numbers[i]);\n\t\tresult[1] = Math.max(result[1],\
  \ numbers[i]);\n\t}\n\treturn result;\n}\n"
- "  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers\
  \ = [sortedNumbers[0], sortedNumbers[0]];\n  for (let i = 1; i < sortedNumbers.length;\
  \ i += 1) {\n    if (sortedNumbers[i] - sortedNumbers[i - 1] < closestNumbers[0]\
  \ - closestNumbers[1]) {\n      closestNumbers = [sortedNumbers[i], sortedNumbers[i]];\n\
  \    } else {\n      closestNumbers[1] = sortedNumbers[i];\n    }\n  }\n  return\
  \ closestNumbers;\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements expects\
  \ at least two numbers\")\n  }\n  const [smallest, largest] = numbers\n  const [smallest2,\
  \ largest2] = numbers\n  const [smallest3, largest3] = numbers\n  const [smallest4,\
  \ largest4] = numbers\n  const [smallest5, largest5] = numbers\n  const [smallest6,\
  \ largest6] = numbers\n  const [smallest7, largest7] = numbers\n  const [smallest8,\
  \ largest8] = numbers\n  const [smallest9, largest9] = numbers\n  const [smallest10,\
  \ largest10] = numbers\n  const [smallest11, largest11] = numbers\n  const [smallest12,\
  \ largest12] = numbers\n  const [smallest13, largest13] = numbers\n  const [smallest14,\
  \ largest14] = numbers\n  const [smallest15, largest15] = numbers\n  const [smallest16,\
  \ largest16] = numbers\n  const [smallest17, largest17] = numbers\n  const [smallest18,\
  \ largest18] = numbers\n  const [smallest19, largest19] = numbers\n  const [smallest20,\
  \ largest20] = numbers\n  const [smallest21, largest21] = numbers\n  const [smallest22,\
  \ largest22] = numbers\n  const [smallest23, largest23] = numbers\n  const [smallest24,\
  \ largest24] = numbers\n  const [smallest25, largest25] = numbers\n  const [smallest26,\
  \ largest26] = numbers\n  const [smallest27, largest27] = numbers\n  const [smallest28,\
  \ largest28] = numbers\n  const [smallest29, largest29] = numbers\n  const [smallest30,\
  \ largest30] = numbers\n  const [smallest31, largest31] = numbers\n  const [smallest32,\
  \ largest32] = numbers\n  const [smallest33, largest33] = numbers\n  const [smallest34,\
  \ largest34] = numbers\n  const [smallest35, largest35] = numbers\n  const [smallest36,\
  \ largest36] = numbers\n  const [smallest37, largest37] = numbers\n  const [smallest38,\
  \ largest38] = numbers\n  const [smallest39, largest39] = numbers\n  const [smallest40,\
  \ largest40] = numbers\n  const [smallest41, largest41] = numbers\n  const [smallest42,\
  \ largest42] = numbers\n  const [smallest43, largest43] = numbers\n  const [smallest44,\
  \ largest44] = numbers\n  const [smallest45, largest45] = numbers\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
  \ > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: Not enough\
  \ numbers to find two closest to each other.\");\n  }\n  const sortedNumbers = numbers.slice().sort((a,\
  \ b) => a - b);\n  const closestNumbers = [sortedNumbers[0], sortedNumbers[0]];\n\
  \  const closestDistances = [Number.MAX_VALUE, Number.MAX_VALUE];\n  for (let i\
  \ = 1; i < sortedNumbers.length; i++) {\n    const distance = sortedNumbers[i] -\
  \ sortedNumbers[i - 1];\n    if (distance < closestDistances[0]) {\n      closestNumbers[0]\
  \ = sortedNumbers[i];\n      closestDistances[0] = distance;\n    } else if (distance\
  \ < closestDistances[1]) {\n      closestNumbers[1] = sortedNumbers[i];\n      closestDistances[1]\
  \ = distance;\n    }\n  }\n  return [closestNumbers[0], closestNumbers[1]];\n}\n"
- "  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const closestNumbers\
  \ = sortedNumbers.slice(0, 2);\n  return [closestNumbers[0], closestNumbers[1]];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i\
  \ < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\
  \t\t} else if (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
  \treturn [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tlet current = numbers[i];\n\t\tif (current < min) {\n\t\t\tmin = current;\n\
  \t\t} else if (current > max) {\n\t\t\tmax = current;\n\t\t}\n\t}\n\treturn [min,\
  \ max];\n}\n"
- "\tlet smallest: number = numbers[0];\n\tlet largest: number = numbers[0];\n\tfor\
  \ (let i = 1; i < numbers.length; i++) {\n\t\tsmallest = Math.min(numbers[i], smallest);\n\
  \t\tlargest = Math.max(numbers[i], largest);\n\t}\n\treturn [smallest, largest];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const min_diff = Number.MAX_SAFE_INTEGER;\n  let min_diff_index = 0;\n  let min_number\
  \ = numbers[0];\n  let max_number = numbers[0];\n\n  for (let i = 1; i < numbers.length;\
  \ i++) {\n    const diff = numbers[i] - min_number;\n    if (diff < min_diff) {\n\
  \      min_number = numbers[i];\n      min_diff = diff;\n      min_diff_index =\
  \ i;\n    } else if (diff === min_diff) {\n      min_number = numbers[i];\n    }\n\
  \n    if (numbers[i] > max_number) {\n      max_number = numbers[i];\n    }\n  }\n\
  \n  return [min_number, max_number];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min1 = numbers[0];\n\tlet min2 = numbers[0];\n\tlet minDiff = Number.MAX_VALUE;\n\
  \tfor (let i = 1; i < numbers.length; i++) {\n\t\tlet diff = Math.abs(numbers[i]\
  \ - min1);\n\t\tif (diff < minDiff) {\n\t\t\tminDiff = diff;\n\t\t\tmin1 = numbers[i];\n\
  \t\t} else if (diff == minDiff) {\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min1, min2];\n}\n"
- "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t\tif (numbers[i]\
  \ > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn [min, max];\n}\n"
- "  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1;\
  \ i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest =\
  \ numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n\
  \    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 1; i\
  \ < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n\
  \    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\
  \  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  let smallest: number = numbers[0];\n  let largest: number = numbers[0];\n  for\
  \ (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n   \
  \   smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: Not enough\
  \ numbers to find closest\");\n  }\n  let smallest: number = numbers[0];\n  let\
  \ largest: number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n\
  \    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i]\
  \ > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const closestNumbers\
  \ = sortedNumbers.slice(0, 2);\n  return [closestNumbers[0], closestNumbers[1]];\n\
  }\n"
- "\tlet min1 = numbers[0];\n\tlet min2 = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tlet d = Math.abs(min1 - numbers[i]);\n\t\tif (d < Math.abs(min2 -\
  \ numbers[i])) {\n\t\t\tmin2 = min1;\n\t\t\tmin1 = numbers[i];\n\t\t} else if (d\
  \ > Math.abs(min2 - numbers[i])) {\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min1, min2];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1;\
  \ i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest =\
  \ numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n\
  \    }\n  }\n  return [smallest, largest];\n}\n"
- "  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 1; i\
  \ < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n\
  \    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\
  \  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const min_diff = Number.MAX_SAFE_INTEGER;\n  const min_diff_index = 0;\n  for\
  \ (let i = 1; i < numbers.length; ++i) {\n    const diff = numbers[i] - numbers[i\
  \ - 1];\n    if (diff < min_diff) {\n      min_diff = diff;\n      min_diff_index\
  \ = i;\n    }\n  }\n  return [numbers[min_diff_index], numbers[min_diff_index -\
  \ 1]];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "\tlet min1 = numbers[0];\n\tlet min2 = numbers[0];\n\tlet minDiff = Number.MAX_VALUE;\n\
  \tfor (let i = 1; i < numbers.length; i++) {\n\t\tlet diff = Math.abs(numbers[i]\
  \ - min1);\n\t\tif (diff < minDiff) {\n\t\t\tminDiff = diff;\n\t\t\tmin1 = numbers[i];\n\
  \t\t} else if (diff === minDiff) {\n\t\t\tmin2 = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min1, min2];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers\
  \ = sortedNumbers.filter(\n    (n) => sortedNumbers.indexOf(n) === sortedNumbers.lastIndexOf(n)\
  \ - 1,\n  );\n  return [closestNumbers[0], closestNumbers[sortedNumbers.length -\
  \ 1]];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "  const [smallest, largest] = numbers.sort((a, b) => a - b);\n  return [smallest,\
  \ largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements expects\
  \ at least two numbers to compare\");\n  }\n\n  let smallest = numbers[0];\n  let\
  \ largest = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if\
  \ (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i]\
  \ > largest) {\n      largest = numbers[i];\n    }\n  }\n\n  return [smallest, largest];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  let smallest: number = numbers[0];\n  let largest: number = numbers[0];\n  for\
  \ (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n   \
  \   smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: numbers.length\
  \ must be at least 2\");\n  }\n  let smallest = numbers[0];\n  let largest = numbers[0];\n\
  \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n\
  \      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: Not enough\
  \ numbers to find two closest to each other\");\n  }\n  let smallest = numbers[0];\n\
  \  let largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n   \
  \ if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i]\
  \ > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
  }\n"
- "  const [smallest, largest] = numbers.sort((a, b) => a - b);\n  return [smallest,\
  \ largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: numbers.length\
  \ must be at least 2\");\n  }\n  const [smallest, largest] = numbers;\n  const smallest_distance\
  \ = Number.MAX_VALUE;\n  const largest_distance = Number.MAX_VALUE;\n  for (let\
  \ i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - smallest;\n\
  \    if (distance < smallest_distance) {\n      smallest_distance = distance;\n\
  \    }\n    if (distance > largest_distance) {\n      largest_distance = distance;\n\
  \    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: at least\
  \ two numbers are required\");\n  }\n  const [smallest, largest] = numbers.sort((a,\
  \ b) => a - b);\n  const [smallest2, largest2] = numbers.sort((a, b) => b - a);\n\
  \  if (smallest === largest) {\n    return [smallest, smallest];\n  }\n  if (smallest\
  \ === smallest2) {\n    return [smallest, largest2];\n  }\n  if (smallest === largest2)\
  \ {\n    return [smallest2, largest];\n  }\n  if (smallest === smallest2 && smallest\
  \ === largest2) {\n    return [smallest2, largest2];\n  }\n  return [smallest2,\
  \ largest2];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet smallest = Math.min(...numbers);\n\tlet largest = Math.max(...numbers);\n\
  \tlet middle = Math.floor(numbers.length / 2);\n\tlet left_closest = numbers[middle];\n\
  \tlet right_closest = numbers[middle + 1];\n\tif (smallest == largest) {\n\t\treturn\
  \ [smallest, smallest];\n\t}\n\tif (smallest < largest) {\n\t\treturn [left_closest,\
  \ right_closest];\n\t}\n\treturn [right_closest, left_closest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const closestNumbers\
  \ = sortedNumbers.slice(0, 2);\n  return [closestNumbers[0], closestNumbers[1]];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet smallest: number = numbers[0];\n\tlet largest: number = numbers[0];\n\tfor\
  \ (let i = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\
  \tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest\
  \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n"
- "  const [smallest, largest] = numbers.sort((a, b) => a - b);\n  return [smallest,\
  \ largest];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: Not enough\
  \ numbers to find closest\");\n  }\n  const smallest = numbers[0];\n  const largest\
  \ = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
  \ < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest)\
  \ {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min1 = numbers[0];\n\tlet min2 = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tlet diff = Math.abs(numbers[i] - min1);\n\t\tif (diff < min2) {\n\t\
  \t\tmin2 = min1;\n\t\t\tmin1 = numbers[i];\n\t\t} else if (diff > min2) {\n\t\t\t\
  min2 = diff;\n\t\t}\n\t}\n\treturn [min1, min2];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i\
  \ < numbers.length; i++) {\n\t\tif (numbers[i] < smallest) {\n\t\t\tsmallest = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > largest) {\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
  \treturn [smallest, largest];\n}\n"
- "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax = Math.max(max, numbers[i]);\n\
  \t}\n\treturn [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: Not enough\
  \ numbers to find closest pair\");\n  }\n  const [smallest, largest] = numbers.sort((a,\
  \ b) => a - b);\n  const [closest1, closest2] = [smallest, largest];\n  let closestDiff\
  \ = Number.MAX_VALUE;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const\
  \ diff = numbers[i] - numbers[i + 1];\n    if (diff < closestDiff) {\n      closestDiff\
  \ = diff;\n      closest1 = numbers[i];\n      closest2 = numbers[i + 1];\n    }\n\
  \  }\n  return [closest1, closest2];\n}\n"
- "\tlet min = numbers[0];\n\tlet max = numbers[0];\n\tfor (let i = 1; i < numbers.length;\
  \ i++) {\n\t\tconst current = numbers[i];\n\t\tif (current < min) {\n\t\t\tmin =\
  \ current;\n\t\t}\n\t\tif (current > max) {\n\t\t\tmax = current;\n\t\t}\n\t}\n\t\
  return [min, max];\n}\n"
- "  let min: number = numbers[0];\n  let max: number = numbers[0];\n  for (let i\
  \ = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n\
  \    } else if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  let smallest: number = numbers[0];\n  let largest: number = numbers[0];\n  for\
  \ (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n   \
  \   smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest\
  \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t}\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  let smallest: number;\n  let largest: number;\n  let smallest_index = 0;\n  let\
  \ largest_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
  \ < numbers[smallest_index]) {\n      smallest_index = i;\n    }\n    if (numbers[i]\
  \ > numbers[largest_index]) {\n      largest_index = i;\n    }\n  }\n  if (smallest_index\
  \ === largest_index) {\n    return [numbers[smallest_index], numbers[smallest_index]];\n\
  \  }\n  smallest = numbers[smallest_index];\n  largest = numbers[largest_index];\n\
  \  if (smallest > largest) {\n    return [numbers[smallest_index], numbers[largest_index]];\n\
  \  } else {\n    return [numbers[largest_index], numbers[smallest_index]];\n  }\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tmin = Math.min(min, numbers[i]);\n\t\tmax\
  \ = Math.max(max, numbers[i]);\n\t}\n\treturn [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements expects\
  \ at least two numbers\")\n  }\n  const smallest = numbers[0]\n  const largest =\
  \ numbers[0]\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] <\
  \ smallest) {\n      smallest = numbers[i]\n    }\n    if (numbers[i] > largest)\
  \ {\n      largest = numbers[i]\n    }\n  }\n  return [smallest, largest]\n}\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
- "  if (numbers.length < 2) {\n    throw new Error(\"find_closest_elements: not enough\
  \ numbers to compare\");\n  }\n\n  let smallest: number = numbers[0];\n  let largest:\
  \ number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
  \ < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest)\
  \ {\n      largest = numbers[i];\n    }\n  }\n\n  return [smallest, largest];\n\
  }\n"
- "\tlet min: number = numbers[0];\n\tlet max: number = numbers[0];\n\tfor (let i\
  \ = 1; i < numbers.length; i++) {\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\
  \t\t} else if (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t}\n\treturn\
  \ [min, max];\n}\n"
language: ts
name: HumanEval_20_find_closest_elements
prompt: '//From a supplied list of numbers (of length at least two) select and return
  two that are the closest to each

  // other and return them in order (smaller number, larger number).

  // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])

  // (2.0, 2.2)

  // >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])

  // (2.0, 2.0)

  function find_closest_elements(numbers: number[]): [number, number] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
