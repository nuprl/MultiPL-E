language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp3bava2fq.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3bava2fq.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzk0e8qvn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzk0e8qvn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      const level = paren_stack.pop();\n\
    \      if (level > paren_level[paren_level.length - 1]) {\n        paren_level[paren_level.length\
    \ - 1] = level;\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  0,\n  0,\n  5,\n  6,\n  0,\n  0,\n  9,\n  10,\n  11\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuushupz7.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuushupz7.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,\
    \  1, 2, 0, 0,\n     5,  6, 0, 0, 9,\n    10, 11\n  ],\n  expected: [ 2, 3, 1,\
    \ 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpug9bwo3z.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpug9bwo3z.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpgp_nb5k0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgp_nb5k0.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqe6orui8.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqe6orui8.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  const paren_level_max_index: number[]\
    \ = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \      paren_level_max.push(0);\n      paren_level_max_index.push(0);\n    } else\
    \ if (char === ')') {\n      paren_level[paren_stack.pop()] = paren_level[paren_stack.pop()]\
    \ - 1;\n      paren_level_max[paren_stack.pop()] = Math.max(paren_level_max[paren_stack.pop()],\
    \ paren_level[paren_stack.pop()]);\n      paren_level_max_index[paren_stack.pop()]\
    \ = Math.max(paren_level_max_index[paren_stack.pop()], paren_stack.length - 1);\n\
    \    }\n  }\n  return paren_level_max_index;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  undefined: NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1cy19xrl.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1cy19xrl.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, undefined: NaN ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpjxol7hpi.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjxol7hpi.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  let paren_level_count: number[] =\
    \ [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count_index:\
    \ number[] = [];\n  let paren_level_max_count_index2: number[] = [];\n  let paren_level_max_count_index3:\
    \ number[] = [];\n  let paren_level_max_count_index4: number[] = [];\n  let paren_level_max_count_index5:\
    \ number[] = [];\n  let paren_level_max_count_index6: number[] = [];\n  let paren_level_max_count_index7:\
    \ number[] = [];\n  let paren_level_max_count_index8: number[] = [];\n  let paren_level_max_count_index9:\
    \ number[] = [];\n  let paren_level_max_count_index10: number[] = [];\n  let paren_level_max_count_index11:\
    \ number[] = [];\n  let paren_level_max_count_index12: number[] = [];\n  let paren_level_max_count_index13:\
    \ number[] = [];\n  let paren_level_max_count_index14: number[] = [];\n  let paren_level_max_count_index15:\
    \ number[] = [];\n  let paren_level_max_count_index16: number[] = [];\n  let paren_level_max_count_index17:\
    \ number[] = [];\n  let paren_level_max_count_index18: number[] = [];\n  let paren_level_max_count_index19:\
    \ number[] = [];\n  let paren_level_max_count_index20: number[] = [];\n  let paren_level_max_count_index21:\
    \ number[] = [];\n  let paren_level_max_count_index22: number[] = [];\n  let paren_level_max_count_index23:\
    \ number[] = [];\n  let paren_level_max_count_index24: number[] = [];\n  let paren_level_max_count_index25:\
    \ number[] = [];\n  let paren_level_max_count_index26: number[] = [];\n  let paren_level_max_count_index27:\
    \ number[] = [];\n  let paren_level_max_count_index28: number[] = [];\n  let paren_level_max_count_index29:\
    \ number[] = [];\n  let paren_level_max_count_index30: number[] = [];\n  let paren_level_max_count_index31:\
    \ number[] = [];\n  let paren_level_max_count_index32: number[] = [];\n  let paren_level_max_count_index33:\
    \ number[] = [];\n  let paren_level_max_count_index34: number[] = [];\n  let paren_level_max_count_index35:\
    \ number[] = [];\n  let paren_level_max_count_index36: number[] = [];\n  let paren_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpowu81hsm.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n      paren_level[paren_level_count] = paren_level_max;\n\
    \      paren_level_max--;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplr3elcd0.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmplr3elcd0.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 1;\n  let paren_level_max_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level = 1;\n  let paren_level_max_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 1;\n  let paren_level_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpppk189j6.ts(38,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      const current_level = paren_level.pop();\n \
    \     const current_level_length = paren_level.length - 1;\n      if (current_level_length\
    \ === 0) {\n        paren_level_count--;\n      }\n      if (current_level_length\
    \ >= 0 && paren_level[current_level_length] === current_level) {\n        paren_level_count--;\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmppgkw5mf4.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmppgkw5mf4.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = (paren_level_count > paren_level_max) ? paren_level_count : paren_level_max;\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n      paren_level_max = (paren_level_count > paren_level_max)\
    \ ? paren_level_count : paren_level_max;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuxhs79d4.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuxhs79d4.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpug9bwo3z.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpug9bwo3z.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count.push(paren_level.length);\n\
    \      paren_count++;\n    } else if (char === ')') {\n      const paren_level\
    \ = paren_level_count[paren_stack.pop()];\n      if (paren_level > 0) {\n    \
    \    paren_level_count[paren_stack.pop()]--;\n      }\n      paren_count--;\n\
    \    }\n  }\n  return paren_level_count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2wm739qu.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2wm739qu.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      paren_level_max = Math.max(paren_level_max,\
    \ paren_stack.pop());\n      if (paren_level_count === 0) {\n        paren_level_max_index\
    \ = paren_level_max_count;\n        paren_level_max_count = paren_level;\n   \
    \   }\n    }\n  }\n  return paren_level_max_count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp84or8668.ts(22,9): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmp84or8668.ts(26,3): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max =\
    \ 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count += 1;\n      paren_level_max = Math.max(paren_level_max,\
    \ paren_level_count);\n      paren_level_max_index = i;\n    } else if (char ===\
    \ ')') {\n      paren_count -= 1;\n      paren_level_count -= 1;\n      if (paren_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdfan1eqc.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdfan1eqc.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n      if (paren_count ===\
    \ 0) {\n        paren_stack.push(paren_count);\n      }\n    }\n  }\n  return\
    \ paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp7g9tt48q.ts(12,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmp7g9tt48q.ts(17,26):\
    \ error TS2345: Argument of type '0' is not assignable to parameter of type 'string'.\n\
    ../../../../../tmp/tmp7g9tt48q.ts(21,3): error TS2322: Type 'string[]' is not\
    \ assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n"
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      const paren_level_count = paren_level.pop();\n\
    \      if (paren_level_count > 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbtbxz8mz.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbtbxz8mz.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_count = 0;\n  for (let\
    \ i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_count.push(paren_count);\n\
    \      paren_count++;\n    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n\
    \      paren_level_count[paren_stack.pop()] = paren_count;\n    }\n  }\n  return\
    \ paren_level_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  undefined,\n  NaN,\n  NaN,\n  undefined,\n  undefined,\n  NaN,\n  NaN,\n\
    \  undefined,\n  undefined,\n  NaN: NaN,\n  undefined: undefined\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptpu3n24w.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmptpu3n24w.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \                    1,\n    1,                    undefined,\n    NaN,      \
    \            NaN,\n    undefined,            undefined,\n    NaN,            \
    \      NaN,\n    undefined,            undefined,\n    undefined: undefined, NaN:\
    \ NaN\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp0m4_soeu.js:30:12)\n    at Object.<anonymous> (/tmp/tmp0m4_soeu.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(char);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const last_char = paren_stack.pop();\n\
    \      if (last_char === '(') {\n        paren_level.pop();\n      }\n    }\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu7p0fyq2.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu7p0fyq2.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpgp_nb5k0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgp_nb5k0.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n \
    \   }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptj4fmhjr.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(group => parse_nested_parens(group)));\n  return max_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3c0inw_7.ts(8,30): error TS2345: Argument of type
    ''number[]'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp3c0inw_7.ts(9,3): error TS2322: Type ''number'' is not assignable
    to type ''number[]''.

    '
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpwqahbkve.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwqahbkve.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0im3w53p.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0im3w53p.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      const current_level = paren_level.pop();\n\
    \      if (current_level > 0) {\n        paren_level.push(current_level);\n  \
    \    }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpac6rdzpt.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpac6rdzpt.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const current_level = paren_level.pop();\n\
    \      if (current_level > 0) {\n        paren_level.push(current_level);\n  \
    \    }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp35_9gx7r.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp35_9gx7r.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu57o3g9p.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu57o3g9p.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp9j__t6j6.ts(11,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmp9j__t6j6.ts(14,7):\
    \ error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../../tmp/tmp9j__t6j6.ts(17,3):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const max_level\
    \ = groups.length;\n  const levels: number[] = [];\n  for (let i = 0; i < max_level;\
    \ i++) {\n    levels.push(0);\n  }\n  for (let i = 0; i < max_level; i++) {\n\
    \    for (let j = 0; j < groups.length; j++) {\n      if (groups[j].indexOf(groups[i])\
    \ > -1) {\n        levels[i] = Math.max(levels[i], j + 1);\n      }\n    }\n \
    \ }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwmvvevjn.js:8\n    var max_level = groups.length;\n           \
    \                ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at parse_nested_parens (/tmp/tmpwmvvevjn.js:8:28)\n    at test (/tmp/tmpwmvvevjn.js:25:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwmvvevjn.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpk26lt01u.js:28:12)\n    at Object.<anonymous> (/tmp/tmpk26lt01u.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  const paren_level_max_index: number[]\
    \ = [];\n  let paren_level_index = 0;\n  let paren_level_max_index = 0;\n  let\
    \ paren_level_max_paren_level = 0;\n  let paren_level_max_paren_level_index =\
    \ 0;\n  let paren_level_max_paren_level_paren_level = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_paren_level_paren_level_index\
    \ = 0;\n  let paren_level_max_paren_level_paren_level_index = 0;\n  let paren_level_max_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuuiidwdm.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4moe4mv2.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n\
    \    }\n    if (paren_count === 0) {\n      paren_stack.push(paren_count);\n \
    \   }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmp78o65hb_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp78o65hb_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level[paren_stack.length\
    \ - 1]++;\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n\
    \  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7uvj49jp.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7uvj49jp.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(group => group.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n \
    \   }\n  }\n  return levels.map(level => level + 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph6xxqcu3.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const level = paren_stack.pop();\n    \
    \  paren_level[level] = paren_level[level] - 1;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgbmu74a6.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgbmu74a6.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1,\
    \ -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpgp_nb5k0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgp_nb5k0.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')')\
    \ {\n      paren_count = paren_stack.pop();\n      paren_level.pop();\n    }\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_8ttvprt.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_8ttvprt.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n\
    \    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn7j09hu5.ts(17,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_level);\n    } else if (paren_string[i] === ')')\
    \ {\n      paren_level = Math.max(paren_stack.pop(), paren_level);\n    }\n  }\n\
    \  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_smtgvc7.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_smtgvc7.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      paren_level.push(paren_level_count);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp19l4sri7.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp19l4sri7.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 0, 0, 1,\n    0, 0, 0, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n \
    \ let paren_level_max_level_length_index_count: number[] = [];\n  let paren_level_max_level_length_index_count_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpspg0vq5v.ts(35,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpspg0vq5v.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_level: number = 0;\n\
    \  let paren_level_max_level_length: number = 0;\n  let paren_level_max_level_length_index:\
    \ number = 0;\n  let paren_level_max_level_length_count: number = 0;\n  let paren_level_max_level_length_index_count:\
    \ number = 0;\n  let paren_level_max_level_length_count_index: number = 0;\n \
    \ let paren_level_max_level_length_count_count_index: number = 0;\n  let paren_level_max_level_length_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_index: number\
    \ = 0;\n  let paren_level_max_level_length_count_count_count_count_index: number\
    \ = 0;\n  let paren_level_max_level_length_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_count_index:\
    \ number = 0;\n  let paren_level_max_level_length_count_count_count_count_count_count_count_count_count_count_count_index:\
    \ number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6qo3qlyh.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748318
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level[paren_level_count] += 1;\n      paren_level_count -= 1;\n   \
    \   if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n \
    \ 3,\n  1,\n  3\n]\n    at test (/tmp/tmpf7bb_vxp.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf7bb_vxp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, NaN, NaN, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748318
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpne8qttr0.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpne8qttr0.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748318
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      paren_level[paren_level_count]\
    \ = paren_level_max;\n      paren_level_max = 0;\n    } else {\n      paren_level_count++;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n \
    \ 1,\n  3\n]\n    at test (/tmp/tmpjr2j40yd.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjr2j40yd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvv6r04iq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvv6r04iq.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length\
    \ - 1]++;\n    } else if (char === ' ') {\n      paren_level_count--;\n    }\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  -1,\n  0,\n  4,\n  -1,\n  -3,\n  -2,\n  1,\n  -1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmper2yu51v.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmper2yu51v.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,\
    \  2,  3, -1, 0,\n     4, -1, -3, -2, 1,\n    -1,  0\n  ],\n  expected: [ 2, 3,\
    \ 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2\
    \ = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4\
    \ = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6\
    \ = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8\
    \ = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10\
    \ = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12\
    \ = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14\
    \ = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16\
    \ = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18\
    \ = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20\
    \ = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22\
    \ = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24\
    \ = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26\
    \ = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28\
    \ = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30\
    \ = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32\
    \ = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34\
    \ = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36\
    \ = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38\
    \ = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40\
    \ = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42\
    \ = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44\
    \ = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46\
    \ = 0;\n  let paren_level_max_count_index47 = 0;\n  let paren_level_max_count_index48\
    \ = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf2o6f4oa.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(char);\n      paren_level_max++;\n    } else\
    \ if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ < 0) {\n        paren_level_count = 0;\n        paren_level.pop();\n      }\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpp2sqh5eo.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp2sqh5eo.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12 ],\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpne8qttr0.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpne8qttr0.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(-1);\n\
    \  const result = [];\n  for (let i = 0; i < groups.length; i++) {\n    const\
    \ group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n      if (levels[j]\
    \ >= 0) {\n        levels[j]++;\n      } else {\n        result.push(levels[j]);\n\
    \        levels[j] = 1;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5_9b00u3.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748318
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      paren_level[paren_level_count]\
    \ = paren_level_max;\n      paren_level_max = 0;\n    } else {\n      paren_level_count\
    \ = 0;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n \
    \ 1,\n  3\n]\n    at test (/tmp/tmpvs1dtfc8.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvs1dtfc8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748318
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(-1);\n\
    \  let level = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group\
    \ = groups[i];\n    if (group.length <= levels[level]) {\n      levels[level]\
    \ = group.length;\n      level++;\n    }\n  }\n  return levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpha8pz_ic.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzk0e8qvn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzk0e8qvn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpy261fbcb.js:26:12)\n    at Object.<anonymous> (/tmp/tmpy261fbcb.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.shift();\n\
    \        paren_level.shift();\n      }\n    }\n  }\n  return paren_level;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpk53zmwh4.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk53zmwh4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 0, 0,\n    1, 2, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpgp_nb5k0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgp_nb5k0.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level);\n\
    \  for (let i = 0; i < levels.length; i++) {\n    levels[i] = 0;\n  }\n  for (let\
    \ i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let\
    \ j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[levels.length\
    \ - 1]++;\n      } else if (group[j] === ')') {\n        levels[levels.length\
    \ - 1]--;\n      }\n    }\n  }\n  return levels.filter(l => l > 0).length;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmponwayt8r.ts(23,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpgp_nb5k0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgp_nb5k0.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count\
    \ -= 1;\n      if (paren_count === 0) {\n        paren_stack.push(paren_count);\n\
    \        paren_level_count += 1;\n      }\n    } else if (char === ' ') {\n  \
    \    if (paren_count === 0) {\n        paren_stack.push(paren_count);\n      \
    \  paren_level_count += 1;\n      }\n    } else {\n      paren_count -= 1;\n \
    \     if (paren_count === 0) {\n        paren_stack.push(paren_count);\n     \
    \   paren_level_count += 1;\n      }\n    }\n  }\n  while (paren_stack.length\
    \ > 0) {\n    paren_level[paren_stack.pop()] = paren_level_count;\n    paren_level_count\
    \ += 1;\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy__sxlty.ts(14,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpy__sxlty.ts(19,26): error TS2345: Argument of type ''0''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpy__sxlty.ts(24,26): error TS2345: Argument of type ''0''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpy__sxlty.ts(30,26): error TS2345: Argument of type ''0''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n\
    \  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number\
    \ = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpev3h7uhd.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpwqahbkve.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwqahbkve.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max =\
    \ 0;\n  let paren_level_max_index = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count += 1;\n      paren_level_max =\n        paren_level_count\
    \ > paren_level_max_index ? paren_level_count : paren_level_max_index;\n     \
    \ paren_level_max_index = paren_level_max;\n      paren_count += 1;\n    } else\
    \ if (char === ')') {\n      paren_count -= 1;\n      if (paren_count === 0) {\n\
    \        paren_level[paren_level_max_index] += 1;\n      }\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8gxqnvy_.ts(16,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n\
    \        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === ')')\
    \ {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return\
    \ levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6asheiwj.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_count: number = 0;\n  let paren_level_max_index: number = 0;\n\
    \  let paren_level_max_string: string = '';\n  let paren_level_max_string_index:\
    \ number = 0;\n  let paren_level_max_string_index2: number = 0;\n  let paren_level_max_string_index3:\
    \ number = 0;\n  let paren_level_max_string_index4: number = 0;\n  let paren_level_max_string_index5:\
    \ number = 0;\n  let paren_level_max_string_index6: number = 0;\n  let paren_level_max_string_index7:\
    \ number = 0;\n  let paren_level_max_string_index8: number = 0;\n  let paren_level_max_string_index9:\
    \ number = 0;\n  let paren_level_max_string_index10: number = 0;\n  let paren_level_max_string_index11:\
    \ number = 0;\n  let paren_level_max_string_index12: number = 0;\n  let paren_level_max_string_index13:\
    \ number = 0;\n  let paren_level_max_string_index14: number = 0;\n  let paren_level_max_string_index15:\
    \ number = 0;\n  let paren_level_max_string_index16: number = 0;\n  let paren_level_max_string_index17:\
    \ number = 0;\n  let paren_level_max_string_index18: number = 0;\n  let paren_level_max_string_index19:\
    \ number = 0;\n  let paren_level_max_string_index20: number = 0;\n  let paren_level_max_string_index21:\
    \ number = 0;\n  let paren_level_max_string_index22: number = 0;\n  let paren_level_max_string_index23:\
    \ number = 0;\n  let paren_level_max_string_index24: number = 0;\n  let paren_level_max_string_index25:\
    \ number = 0;\n  let paren_level_max_string_index26: number = 0;\n  let paren_level_max_string_index27:\
    \ number = 0;\n  let paren_level_max_string_index28: number = 0;\n  let paren_level_max_string_index29:\
    \ number = 0;\n  let paren_level_max_string_index30: number = 0;\n  let paren_level_max_string_index31:\
    \ number = 0;\n  let paren_level_max_string_index32: number = 0;\n  let paren_level_max_string_index33:\
    \ number = 0;\n  let paren_level_max_string_index34: number = 0;\n  let paren_level_max_string_index35:\
    \ number = 0;\n  let paren_level_max_string_index36: number = 0;\n  let paren_level_max_string_index37:\
    \ number = 0;\n  let paren_level_max_string_index38: number\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0fhfqx0h.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      if\
    \ (paren_level_count < paren_level_max) {\n        paren_level_count++;\n    \
    \  }\n      paren_level_count--;\n      paren_level.push(paren_level_count);\n\
    \      paren_stack.splice(paren_stack.length - 1, 1);\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmfxw86kq.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmfxw86kq.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n\
    \    } else if (char === ')') {\n      paren_depth = Math.max(paren_stack.pop(),\
    \ paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgy50bmoh.ts(18,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpjxol7hpi.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjxol7hpi.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_index: number[]\
    \ = [];\n  let paren_level_length: number[] = [];\n  let paren_level_length_count:\
    \ number[] = [];\n  let paren_level_length_index: number[] = [];\n  let paren_level_length_count2:\
    \ number[] = [];\n  let paren_level_length_index2: number[] = [];\n  let paren_level_length_count3:\
    \ number[] = [];\n  let paren_level_length_index3: number[] = [];\n  let paren_level_length_count4:\
    \ number[] = [];\n  let paren_level_length_index4: number[] = [];\n  let paren_level_length_count5:\
    \ number[] = [];\n  let paren_level_length_index5: number[] = [];\n  let paren_level_length_count6:\
    \ number[] = [];\n  let paren_level_length_index6: number[] = [];\n  let paren_level_length_count7:\
    \ number[] = [];\n  let paren_level_length_index7: number[] = [];\n  let paren_level_length_count8:\
    \ number[] = [];\n  let paren_level_length_index8: number[] = [];\n  let paren_level_length_count9:\
    \ number[] = [];\n  let paren_level_length_index9: number[] = [];\n  let paren_level_length_count10:\
    \ number[] = [];\n  let paren_level_length_index10: number[] = [];\n  let paren_level_length_count11:\
    \ number[] = [];\n  let paren_level_length_index11: number[] = [];\n  let paren_level_length_count12:\
    \ number[] = [];\n  let paren_level_length_index12: number[] = [];\n  let paren_level_length_count13:\
    \ number[] = [];\n  let paren_level_length_index13: number[] = [];\n  let paren_level_length_count14:\
    \ number[] = [];\n  let paren_level_length_index14: number[] = [];\n  let paren_level_length_count15:\
    \ number[] = [];\n  let paren_level_length_index15: number[] = [];\n  let paren_level_length_count16:\
    \ number[] = [];\n  let paren_level_length_index16: number[] = [];\n  let paren_level_length_count17:\
    \ number[] = [];\n  let paren_level_length_index17: number[] = [];\n  let paren_level_length_count18:\
    \ number[] = [];\n  let paren_level_length_index18: number[] = [];\n  let paren_level_length_count19:\
    \ number[] = [];\n  let paren_level_length_index19: number[] = [];\n  let paren_level_length_count20:\
    \ number[] = [];\n  let paren_level_length_index20\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpatmwsjq3.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_level = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_level);\n      paren_level++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_level--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpvzuowzx5.ts(11,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpvzuowzx5.ts(17,3):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let\
    \ paren_level_counts_index = 0;\n  let paren_level_char_count = 0;\n  let paren_level_char_index\
    \ = 0;\n  let paren_level_char = '';\n  let paren_level_char_next = '';\n  let\
    \ paren_level_char_next_index = 0;\n  let paren_level_char_next_count = 0;\n \
    \ let paren_level_char_next_count_index = 0;\n  let paren_level_char_next_count_index2\
    \ = 0;\n  let paren_level_char_next_count_index3 = 0;\n  let paren_level_char_next_count_index4\
    \ = 0;\n  let paren_level_char_next_count_index5 = 0;\n  let paren_level_char_next_count_index6\
    \ = 0;\n  let paren_level_char_next_count_index7 = 0;\n  let paren_level_char_next_count_index8\
    \ = 0;\n  let paren_level_char_next_count_index9 = 0;\n  let paren_level_char_next_count_index10\
    \ = 0;\n  let paren_level_char_next_count_index11 = 0;\n  let paren_level_char_next_count_index12\
    \ = 0;\n  let paren_level_char_next_count_index13 = 0;\n  let paren_level_char_next_count_index14\
    \ = 0;\n  let paren_level_char_next_count_index15 = 0;\n  let paren_level_char_next_count_index16\
    \ = 0;\n  let paren_level_char_next_count_index17 = 0;\n  let paren_level_char_next_count_index18\
    \ = 0;\n  let paren_level_char_next_count_index19 = 0;\n  let paren_level_char_next_count_index20\
    \ = 0;\n  let paren_level_char_next_count_index21 = 0;\n  let paren_level_char_next_count_index22\
    \ = 0;\n  let paren_level_char_next_count_index23 = 0;\n  let paren_level_char_next_count_index24\
    \ = 0;\n  let paren_level_char_next_count_index25 = 0;\n  let paren_level_char_next_count_index26\
    \ = 0;\n  let paren_level_char_next_count_index27 = 0;\n  let paren_level_char_next_count_index28\
    \ = 0;\n  let paren_level_char_next_count_index29 = 0;\n  let paren_level_char_next_count_index30\
    \ = 0;\n  let paren_level_char_next_count_index31 = 0;\n  let paren_level_char_next_count_index32\
    \ = 0;\n  let paren_level_char_next_count_index33 = 0;\n  let paren_level_char_next_count_index34\
    \ = 0;\n  let paren_level_char_next_count_index35 = 0;\n  let paren_level_char_next_count_index36\
    \ = 0;\n  let paren_level_char_next_count_index37 = 0;\n  let paren_level_char_next_count_index38\
    \ = 0;\n  let paren_level_char_next_count_index\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprec44gye.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')')\
    \ {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  1,\n  0,\n  0,\n  0,\n  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp4v5s5sa4.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4v5s5sa4.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 1, 0, 0,\n    0, 2, 0, 0, 0, 0,\n    0, 0, 0, 1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpwqahbkve.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwqahbkve.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[]\
    \ = [];\n  const paren_level_max_count_index: number[] = [];\n  let paren_level_max_count_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let\
    \ paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count\
    \ = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count =\
    \ 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n \
    \ let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let\
    \ paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count\
    \ = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count =\
    \ 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n \
    \ let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let\
    \ paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count\
    \ = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count =\
    \ 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n \
    \ let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let\
    \ paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count\
    \ = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count =\
    \ 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n \
    \ let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let\
    \ paren_level_max_count_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_count\
    \ = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count =\
    \ 0;\n  let paren_level_count = 0;\n  let paren_level_max_count_index = 0;\n \
    \ let paren_level_max_count = 0;\n  let paren_level_count = 0;\n  let paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw33na265.ts(84,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_count: number;\n \
    \ let paren_level_max_string: string;\n  let paren_level_max_string_index: number;\n\
    \  let paren_level_max_string_index2: number;\n  let paren_level_max_string_index3:\
    \ number;\n  let paren_level_max_string_index4: number;\n  let paren_level_max_string_index5:\
    \ number;\n  let paren_level_max_string_index6: number;\n  let paren_level_max_string_index7:\
    \ number;\n  let paren_level_max_string_index8: number;\n  let paren_level_max_string_index9:\
    \ number;\n  let paren_level_max_string_index10: number;\n  let paren_level_max_string_index11:\
    \ number;\n  let paren_level_max_string_index12: number;\n  let paren_level_max_string_index13:\
    \ number;\n  let paren_level_max_string_index14: number;\n  let paren_level_max_string_index15:\
    \ number;\n  let paren_level_max_string_index16: number;\n  let paren_level_max_string_index17:\
    \ number;\n  let paren_level_max_string_index18: number;\n  let paren_level_max_string_index19:\
    \ number;\n  let paren_level_max_string_index20: number;\n  let paren_level_max_string_index21:\
    \ number;\n  let paren_level_max_string_index22: number;\n  let paren_level_max_string_index23:\
    \ number;\n  let paren_level_max_string_index24: number;\n  let paren_level_max_string_index25:\
    \ number;\n  let paren_level_max_string_index26: number;\n  let paren_level_max_string_index27:\
    \ number;\n  let paren_level_max_string_index28: number;\n  let paren_level_max_string_index29:\
    \ number;\n  let paren_level_max_string_index30: number;\n  let paren_level_max_string_index31:\
    \ number;\n  let paren_level_max_string_index32: number;\n  let paren_level_max_string_index33:\
    \ number;\n  let paren_level_max_string_index34: number;\n  let paren_level_max_string_index35:\
    \ number;\n  let paren_level_max_string_index36: number;\n  let paren_level_max_string_index37:\
    \ number;\n  let paren_level_max_string_index38: number;\n  let paren_level_max_string_index39:\
    \ number;\n  let paren_level_max_string_index40: number;\n  let paren_level_max_string_index41:\
    \ number;\n  let paren_level_max_string_index42: number;\n  let paren_level_max_string_index43:\
    \ number;\n  let paren_level_max_string_index44: number;\n  let paren_level_max_string_index45:\
    \ number;\n  let paren\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaob199oa.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n      if (paren_count <\
    \ 0) {\n        throw new Error(`Unbalanced parenthesis at index ${i}`);\n   \
    \   }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplyukzkcj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmplyukzkcj.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_index: number[]\
    \ = [];\n  let paren_level_length: number[] = [];\n  let paren_level_length_count:\
    \ number[] = [];\n  let paren_level_length_index: number[] = [];\n  let paren_level_length_counts:\
    \ number[] = [];\n  let paren_level_length_counts_index: number[] = [];\n  let\
    \ paren_level_length_counts_length: number[] = [];\n  let paren_level_length_counts_length_index:\
    \ number[] = [];\n  let paren_level_length_counts_length_count: number[] = [];\n\
    \  let paren_level_length_counts_length_count_index: number[] = [];\n  let paren_level_length_counts_length_counts_index:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length: number[]\
    \ = [];\n  let paren_level_length_counts_length_counts_length_index: number[]\
    \ = [];\n  let paren_level_length_counts_length_counts_length_count: number[]\
    \ = [];\n  let paren_level_length_counts_length_counts_length_count_index: number[]\
    \ = [];\n  let paren_level_length_counts_length_counts_length_counts_index: number[]\
    \ = [];\n  let paren_level_length_counts_length_counts_length_counts_length: number[]\
    \ = [];\n  let paren_level_length_counts_length_counts_length_counts_length_index:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_count:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_count_index:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_index:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_index:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_count:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_count_index:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_counts_length:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_counts_length_index:\
    \ number[] = [];\n  let paren_level_length_counts_length_counts_length_counts_length_counts_length_counts_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0suhg5xn.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpwqahbkve.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwqahbkve.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count = paren_stack.pop();\n    }\n\
    \  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0c92xub1.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0c92xub1.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count--;\n\
    \    }\n    if (paren_count === 0) {\n      paren_stack.push(paren_count);\n \
    \   }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmp78o65hb_.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp78o65hb_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n \
    \   }\n  }\n  return levels.slice(0, max_level);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwfhnvs12.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = 0;\n      paren_level_count = 0;\n    } else if (char === ')') {\n      paren_level_count\
    \ = paren_stack.pop();\n      paren_level_max = Math.max(paren_level_max, paren_level_count);\n\
    \    }\n    paren_level_count += 1;\n  }\n  return paren_level;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0wqpstbt.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0wqpstbt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level_count]\
    \ = paren_level_max;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '-1': 2,\n\
    \  '-10': 11,\n  '-11': 12,\n  '-12': 12,\n  '-2': 3,\n  '-3': 3,\n  '-4': 6,\n\
    \  '-5': 6,\n  '-6': 6,\n  '-7': 7,\n  '-8': 10,\n  '-9': 10\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphy5afioi.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmphy5afioi.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '-1':\
    \ 2,   '-2': 3,\n    '-3': 3,   '-4': 6,\n    '-5': 6,   '-6': 6,\n    '-7': 7,\
    \   '-8': 10,\n    '-9': 10,  '-10': 11,\n    '-11': 12, '-12': 12\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n\
    \      paren_level[paren_level_count] = paren_level_count;\n    } else if (char\
    \ === ')') {\n      paren_level_count--;\n      if (paren_level_count < 0) {\n\
    \        throw new Error(`Unbalanced parenthesis at index ${i}`);\n      }\n \
    \     paren_level[paren_level_count] = paren_level_count;\n      if (paren_level_count\
    \ === 0) {\n        paren_level_max = Math.max(...paren_level);\n      }\n   \
    \ } else if (char === ' ') {\n      if (paren_level_count === 0) {\n        throw\
    \ new Error(`Unbalanced parenthesis at index ${i}`);\n      }\n      paren_level[paren_level_count]\
    \ = paren_level_count;\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbfgmt0q9.ts(33,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1orpxp4z.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1orpxp4z.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')')\
    \ {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n\
    \    } else {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphyvai33w.ts(13,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmphyvai33w.ts(17,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmphyvai33w.ts(18,7): error TS2588: Cannot assign to ''paren_level''
    because it is a constant.

    ../../../../../tmp/tmphyvai33w.ts(20,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      paren_level.pop();\n\
    \      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp3qo7qsj5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3qo7qsj5.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[]\
    \ = [];\n  let paren_level_max_value: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcep782qh.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \        paren_level_count += 1;\n      }\n    } else if (paren_string[i] ===\
    \ ' ') {\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \        paren_level_count += 1;\n      }\n    }\n  }\n  if (paren_level_count\
    \ > 0) {\n    paren_level.push(paren_level_count);\n  }\n  for (let i = 0; i <\
    \ paren_level.length; i++) {\n    if (paren_level[i] > paren_level_max) {\n  \
    \    paren_level_max = paren_level[i];\n      paren_level_max_index = i;\n   \
    \ }\n  }\n  const result: number[] = [];\n  for (let i = 0; i < paren_stack.length;\
    \ i++) {\n    result.push(paren_stack[i]);\n  }\n  result.push(paren_level_max);\n\
    \  result.push(paren_level_max_index);\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  1,\n  2,\n  3,\n  1,\n  1,\n  2,\n  3,\n  2,\n  2,\n  1,\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmph8qw3r9a.js:51:12)\n\
    \    at Object.<anonymous> (/tmp/tmph8qw3r9a.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 1, 2, 3,\n    1, 1, 2, 3, 2, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1,\
    \ 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count = paren_stack.pop();\n\
    \      paren_level[paren_level_count] = paren_level_max;\n      paren_level_max--;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu0fyuikz.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu0fyuikz.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa1p0trp9.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa1p0trp9.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_max++;\n    } else if (paren_string[i] === ')') {\n      paren_level_count++;\n\
    \      if (paren_level_count > paren_level_max) {\n        paren_level_max = paren_level_count;\n\
    \      }\n      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpv_37mws5.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv_37mws5.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n\
    \      paren_level[paren_level_count] = paren_level_count;\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_level_count);\n    } else if (char === ')')\
    \ {\n      paren_level_count--;\n      paren_level[paren_level_count] = paren_level_count;\n\
    \      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpp0qi0db0.js:32:12)\n    at Object.<anonymous> (/tmp/tmpp0qi0db0.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length\
    \ - 1]++;\n    } else if (char === ' ') {\n      paren_level_count--;\n    }\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  -1,\n  0,\n  4,\n  -1,\n  -3,\n  -2,\n  1,\n  -1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmper2yu51v.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmper2yu51v.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,\
    \  2,  3, -1, 0,\n     4, -1, -3, -2, 1,\n    -1,  0\n  ],\n  expected: [ 2, 3,\
    \ 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.pop();\n\
    \      }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpcjw6sjvg.ts(11,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpcjw6sjvg.ts(20,3):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpwqahbkve.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwqahbkve.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0im3w53p.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0im3w53p.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(')\
    \ {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n     \
    \ paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level_max\
    \ = Math.max(...paren_level);\n      }\n      paren_level.splice(paren_level.indexOf(paren_level_count),\
    \ 1);\n    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbw947eh7.ts(24,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level[paren_stack.pop()] = paren_level_count;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0lq3u3gn.js:30:12)\n    at Object.<anonymous> (/tmp/tmp0lq3u3gn.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748322
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      paren_level.pop();\n      paren_stack.push(paren_level.length);\n\
    \    } else if (char === ' ') {\n      paren_level[paren_stack.pop()] += 1;\n\
    \    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  1,\n  1,\n  1,\n  2,\n  3,\n  3,\n  2,\n  2,\n  3,\n  4,\n  5,\n  5,\n\
    \  4,\n  4,\n  4,\n  4,\n  4,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpklyb9oi4.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpklyb9oi4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 1, 1, 1, 2,\n    3, 3, 2, 2, 3, 4, 5,\n    5, 4, 4, 4, 4, 4, 3\n  ],\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_max_count: number;\n\
    \  let paren_level_max_level: number;\n  let paren_level_max_level_length: number;\n\
    \  let paren_level_max_level_length_index: number;\n  let paren_level_max_level_length_index_in_paren_stack:\
    \ number;\n  let paren_level_max_level_length_index_in_paren_stack_count: number;\n\
    \  let paren_level_max_level_length_index_in_paren_stack_count2: number;\n  let\
    \ paren_level_max_level_length_index_in_paren_stack_count3: number;\n  let paren_level_max_level_length_index_in_paren_stack_count4:\
    \ number;\n  let paren_level_max_level_length_index_in_paren_stack_count5: number;\n\
    \  let paren_level_max_level_length_index_in_paren_stack_count6: number;\n  let\
    \ paren_level_max_level_length_index_in_paren_stack_count7: number;\n  let paren_level_max_level_length_index_in_paren_stack_count8:\
    \ number;\n  let paren_level_max_level_length_index_in_paren_stack_count9: number;\n\
    \  let paren_level_max_level_length_index_in_paren_stack_count10: number;\n  let\
    \ paren_level_max_level_length_index_in_paren_stack_count11: number;\n  let paren_level_max_level_length_index_in_paren_stack_count12:\
    \ number;\n  let paren_level_max_level_length_index_in_paren_stack_count13: number;\n\
    \  let paren_level_max_level_length_index_in_paren_stack_count14: number;\n  let\
    \ paren_level_max_level_length_index_in_paren_stack_count15: number;\n  let paren_level_max_level_length_index_in_paren_stack_count16:\
    \ number;\n  let paren_level_max_level_length_index_in_paren_stack_count17: number;\n\
    \  let paren_level_max_level_length_index_in_paren_stack_count18: number;\n  let\
    \ paren_level_max_level_length_index_in_paren_stack_count19: number;\n  let paren_level_max_level_length_index_in_paren_stack_count20:\
    \ number;\n  let paren_level_max_level_length_index_in_paren_stack_count21: number;\n\
    \  let paren_level_max_level_length_index_in_paren_stack_count22: number;\n  let\
    \ paren_level_max_level_length_index_in_paren_stack_count23: number;\n  let paren_level_max_level_length_index_in_paren_stack_count24:\
    \ number;\n  let paren_level_max_level_length_index_in_paren_stack_count25: number;\n\
    \  let paren_level_max_level_length_index_in_paren_stack_count26: number;\n  let\
    \ paren_level_max_level_length_index_in_paren_stack_count27: number;\n  let paren_level_max_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppipeeqaa.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748323
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_count);\n\
    \        paren_count++;\n      }\n    } else if (char === ' ') {\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_count);\n        paren_count++;\n \
    \     }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpsgpddma4.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsgpddma4.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748323
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ if (paren_level_count === 0) {\n        paren_level.push(paren_stack.pop());\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpcpqtzyb4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpcpqtzyb4.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 1 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748323
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: string[] = [];\n    const paren_level: number[] =\
    \ [];\n    const paren_level_count: number[] = [];\n    const paren_level_max_count:\
    \ number[] = [];\n    const paren_level_max_count_index: number[] = [];\n    const\
    \ paren_level_max_count_index2: number[] = [];\n    const paren_level_max_count_index3:\
    \ number[] = [];\n    const paren_level_max_count_index4: number[] = [];\n   \
    \ const paren_level_max_count_index5: number[] = [];\n    const paren_level_max_count_index6:\
    \ number[] = [];\n    const paren_level_max_count_index7: number[] = [];\n   \
    \ const paren_level_max_count_index8: number[] = [];\n    const paren_level_max_count_index9:\
    \ number[] = [];\n    const paren_level_max_count_index10: number[] = [];\n  \
    \  const paren_level_max_count_index11: number[] = [];\n    const paren_level_max_count_index12:\
    \ number[] = [];\n    const paren_level_max_count_index13: number[] = [];\n  \
    \  const paren_level_max_count_index14: number[] = [];\n    const paren_level_max_count_index15:\
    \ number[] = [];\n    const paren_level_max_count_index16: number[] = [];\n  \
    \  const paren_level_max_count_index17: number[] = [];\n    const paren_level_max_count_index18:\
    \ number[] = [];\n    const paren_level_max_count_index19: number[] = [];\n  \
    \  const paren_level_max_count_index20: number[] = [];\n    const paren_level_max_count_index21:\
    \ number[] = [];\n    const paren_level_max_count_index22: number[] = [];\n  \
    \  const paren_level_max_count_index23: number[] = [];\n    const paren_level_max_count_index24:\
    \ number[] = [];\n    const paren_level_max_count_index25: number[] = [];\n  \
    \  const paren_level_max_count_index26: number[] = [];\n    const paren_level_max_count_index27:\
    \ number[] = [];\n    const paren_level_max_count_index28: number[] = [];\n  \
    \  const paren_level_max_count_index29: number[] = [];\n    const paren_level_max_count_index30:\
    \ number[] = [];\n    const paren_level_max_count_index31: number[] = [];\n  \
    \  const paren_level_max_count_index32: number[] = [];\n    const paren_level_max_count_index33:\
    \ number[] = [];\n    const paren_level_max_count_index34: number[] = [];\n  \
    \  const paren_level_max_count_index35: number[] = [];\n    const paren_level_max_count_index36:\
    \ number[] = [];\n    const paren_level_max_count_index37: number[] = [];\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpudzex98v.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748323
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max_count = 1;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n\
    \        paren_level_max_count = Math.max(paren_level_max_count, paren_level[paren_level.length\
    \ - 1]);\n      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp_49_nw_p.js:31:12)\n    at Object.<anonymous> (/tmp/tmp_49_nw_p.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_level.push(paren_count);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpfc4n3qnt.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfc4n3qnt.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_max_count:\
    \ number[] = [];\n  let paren_level_max_count: number[] = [];\n  let paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo8wkjsvg.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748323
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n\
    \      paren_level_count += 1;\n      if (paren_level_count > paren_level_max)\
    \ {\n        paren_level_max = paren_level_count;\n        paren_level_max_index\
    \ = i;\n        paren_level_max_count = 0;\n      }\n    } else if (char === ')')\
    \ {\n      paren_level[paren_level_max_count] += 1;\n      paren_level_count -=\
    \ 1;\n      if (paren_level_count === 0) {\n        paren_level_max_count += 1;\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at\
    \ test (/tmp/tmphtbwsxd6.js:37:12)\n    at Object.<anonymous> (/tmp/tmphtbwsxd6.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  const paren_level_max: number[]\
    \ = [];\n  let paren_level_index = 0;\n  let paren_level_max_index = 0;\n  let\
    \ paren_level_max_count = 0;\n  let paren_level_max_value = 0;\n  let paren_level_max_index2\
    \ = 0;\n  let paren_level_max_count2 = 0;\n  let paren_level_max_value2 = 0;\n\
    \  let paren_level_max_index3 = 0;\n  let paren_level_max_count3 = 0;\n  let paren_level_max_value3\
    \ = 0;\n  let paren_level_max_index4 = 0;\n  let paren_level_max_count4 = 0;\n\
    \  let paren_level_max_value4 = 0;\n  let paren_level_max_index5 = 0;\n  let paren_level_max_count5\
    \ = 0;\n  let paren_level_max_value5 = 0;\n  let paren_level_max_index6 = 0;\n\
    \  let paren_level_max_count6 = 0;\n  let paren_level_max_value6 = 0;\n  let paren_level_max_index7\
    \ = 0;\n  let paren_level_max_count7 = 0;\n  let paren_level_max_value7 = 0;\n\
    \  let paren_level_max_index8 = 0;\n  let paren_level_max_count8 = 0;\n  let paren_level_max_value8\
    \ = 0;\n  let paren_level_max_index9 = 0;\n  let paren_level_max_count9 = 0;\n\
    \  let paren_level_max_value9 = 0;\n  let paren_level_max_index10 = 0;\n  let\
    \ paren_level_max_count10 = 0;\n  let paren_level_max_value10 = 0;\n  let paren_level_max_index11\
    \ = 0;\n  let paren_level_max_count11 = 0;\n  let paren_level_max_value11 = 0;\n\
    \  let paren_level_max_index12 = 0;\n  let paren_level_max_count12 = 0;\n  let\
    \ paren_level_max_value12 = 0;\n  let paren_level_max_index13 = 0;\n  let paren_level_max_count13\
    \ = 0;\n  let paren_level_max_value13 = 0;\n  let paren_level_max_index14 = 0;\n\
    \  let paren_level_max_count14 = 0;\n  let paren_level_max_value14 = 0;\n  let\
    \ paren_level_max_index15 = 0;\n  let paren_level_max_count15 = 0;\n  let paren_level_max_value15\
    \ = 0;\n  let paren_level_max_index16 = 0;\n  let paren_level_max_count16 = 0;\n\
    \  let paren_level_max_value16 = 0;\n  let paren_level_max_index17 = 0;\n  let\
    \ paren_level_max_count17 = 0;\n  let paren_level_max_value17 = 0;\n  let paren_level_max_index18\
    \ = 0;\n  let paren_level_max_count18 = 0;\n  let paren_level_max_value\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpno0i_sac.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_index: number[]\
    \ = [];\n  let paren_level_max_value: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_max_value_count:\
    \ number[] = [];\n  let paren_level_max_value_count: number[] = [];\n  let paren_level_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcep782qh.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length\
    \ - 1]++;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnqlzw9io.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnqlzw9io.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvv6r04iq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvv6r04iq.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmph4hzbn05.ts(12,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmph4hzbn05.ts(18,3):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')')\
    \ {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n\
    \    } else {\n      paren_count = paren_stack.pop();\n      paren_level = paren_stack.pop();\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppvef90ps.ts(18,7): error TS2588: Cannot assign to
    ''paren_level'' because it is a constant.

    ../../../../../tmp/tmppvef90ps.ts(21,7): error TS2588: Cannot assign to ''paren_level''
    because it is a constant.

    '
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      const current_level = paren_level.pop();\n\
    \      const current_level_parens = paren_stack.pop();\n      if (current_level_parens\
    \ === current_level) {\n        paren_level_count--;\n      }\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmi1auo8d.ts(18,11): error TS2367: This condition
    will always return ''false'' since the types ''string'' and ''number'' have no
    overlap.

    '
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvv6r04iq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvv6r04iq.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n      paren_level_count\
    \ -= 1;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdtt0fdkb.ts(14,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzk0e8qvn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzk0e8qvn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level[paren_stack.length\
    \ - 1]++;\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n\
    \  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7uvj49jp.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7uvj49jp.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const level_count = paren_stack.pop();\n\
    \      if (level_count === undefined) {\n        throw new Error(\n          `Unmatched\
    \ closing parenthesis at index ${i}: ${paren_string}`\n        );\n      }\n \
    \     paren_level[level_count] = paren_level[level_count] - 1;\n    }\n  }\n \
    \ return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa665290x.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa665290x.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1,\
    \ -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzk0e8qvn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzk0e8qvn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzk0e8qvn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzk0e8qvn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvv6r04iq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvv6r04iq.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n \
    \ let paren_level_max_level_length_count2: number[] = [];\n  let paren_level_max_level_length_count3:\
    \ number[] = [];\n  let paren_level_max_level_length_count4: number[] = [];\n\
    \  let paren_level_max_level_length_count5: number[] = [];\n  let paren_level_max_level_length_count6:\
    \ number[] = [];\n  let paren_level_max_level_length_count7: number[] = [];\n\
    \  let paren_level_max_level_length_count8: number[] = [];\n  let paren_level_max_level_length_count9:\
    \ number[] = [];\n  let paren_level_max_level_length_count10: number[] = [];\n\
    \  let paren_level_max_level_length_count11: number[] = [];\n  let paren_level_max_level_length_count12:\
    \ number[] = [];\n  let paren_level_max_level_length_count13: number[] = [];\n\
    \  let paren_level_max_level_length_count14: number[] = [];\n  let paren_level_max_level_length_count15:\
    \ number[] = [];\n  let paren_level_max_level_length_count16: number[] = [];\n\
    \  let paren_level_max_level_length_count17: number[] = [];\n  let paren_level_max_level_length_count18:\
    \ number[] = [];\n  let paren_level_max_level_length_count19: number[] = [];\n\
    \  let paren_level_max_level_length_count20: number[] = [];\n  let paren_level_max_level_length_count21:\
    \ number[] = [];\n  let paren_level_max_level_length_count22: number[] = [];\n\
    \  let paren_level_max_level_length_count23: number[] = [];\n  let paren_level_max_level_length_count24:\
    \ number[] = [];\n  let paren_level_max_level_length_count25: number[] = [];\n\
    \  let paren_level_max_level_length_count26: number[] = [];\n  let paren_level_max_level_length_count27:\
    \ number[] = [];\n  let paren_level_max_level_length_count28: number[] = [];\n\
    \  let paren_level_max_level_length_count29: number[] = [];\n  let paren_level_max_level_length_count30:\
    \ number[] = [];\n  let paren_level_max_level_length_count31: number[] = [];\n\
    \  let paren_level_max_level_length_count32: number[] = [];\n  let paren_level_max_level_length_count33\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwzlkdyc6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_max\
    \ = Math.max(...paren_level);\n        paren_level_max_count = paren_level.indexOf(paren_level_max);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpje8w4c_p.js:33:12)\n    at Object.<anonymous> (/tmp/tmpje8w4c_p.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_count2: number[]\
    \ = [];\n  let paren_level_max_count3: number[] = [];\n  let paren_level_max_count4:\
    \ number[] = [];\n  let paren_level_max_count5: number[] = [];\n  let paren_level_max_count6:\
    \ number[] = [];\n  let paren_level_max_count7: number[] = [];\n  let paren_level_max_count8:\
    \ number[] = [];\n  let paren_level_max_count9: number[] = [];\n  let paren_level_max_count10:\
    \ number[] = [];\n  let paren_level_max_count11: number[] = [];\n  let paren_level_max_count12:\
    \ number[] = [];\n  let paren_level_max_count13: number[] = [];\n  let paren_level_max_count14:\
    \ number[] = [];\n  let paren_level_max_count15: number[] = [];\n  let paren_level_max_count16:\
    \ number[] = [];\n  let paren_level_max_count17: number[] = [];\n  let paren_level_max_count18:\
    \ number[] = [];\n  let paren_level_max_count19: number[] = [];\n  let paren_level_max_count20:\
    \ number[] = [];\n  let paren_level_max_count21: number[] = [];\n  let paren_level_max_count22:\
    \ number[] = [];\n  let paren_level_max_count23: number[] = [];\n  let paren_level_max_count24:\
    \ number[] = [];\n  let paren_level_max_count25: number[] = [];\n  let paren_level_max_count26:\
    \ number[] = [];\n  let paren_level_max_count27: number[] = [];\n  let paren_level_max_count28:\
    \ number[] = [];\n  let paren_level_max_count29: number[] = [];\n  let paren_level_max_count30:\
    \ number[] = [];\n  let paren_level_max_count31: number[] = [];\n  let paren_level_max_count32:\
    \ number[] = [];\n  let paren_level_max_count33: number[] = [];\n  let paren_level_max_count34:\
    \ number[] = [];\n  let paren_level_max_count35: number[] = [];\n  let paren_level_max_count36:\
    \ number[] = [];\n  let paren_level_max_count37: number[] = [];\n  let paren_level_max_count38:\
    \ number[] = [];\n  let paren_level_max_count39: number[] = [];\n  let paren_level_max_count40:\
    \ number[] = [];\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe76gjgh_.ts(52,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpe76gjgh_.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzlnqo20d.js:26:12)\n    at Object.<anonymous> (/tmp/tmpzlnqo20d.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_count = 0;\n  let\
    \ paren_level_max_count = 1;\n  let paren_level_max_level = 1;\n  let paren_level_max_level_index\
    \ = 0;\n  let paren_level_max_level_length = 0;\n  let paren_level_max_level_length_index\
    \ = 0;\n  let paren_level_max_level_length_count = 0;\n  let paren_level_max_level_length_count2\
    \ = 0;\n  let paren_level_max_level_length_count3 = 0;\n  let paren_level_max_level_length_count4\
    \ = 0;\n  let paren_level_max_level_length_count5 = 0;\n  let paren_level_max_level_length_count6\
    \ = 0;\n  let paren_level_max_level_length_count7 = 0;\n  let paren_level_max_level_length_count8\
    \ = 0;\n  let paren_level_max_level_length_count9 = 0;\n  let paren_level_max_level_length_count10\
    \ = 0;\n  let paren_level_max_level_length_count11 = 0;\n  let paren_level_max_level_length_count12\
    \ = 0;\n  let paren_level_max_level_length_count13 = 0;\n  let paren_level_max_level_length_count14\
    \ = 0;\n  let paren_level_max_level_length_count15 = 0;\n  let paren_level_max_level_length_count16\
    \ = 0;\n  let paren_level_max_level_length_count17 = 0;\n  let paren_level_max_level_length_count18\
    \ = 0;\n  let paren_level_max_level_length_count19 = 0;\n  let paren_level_max_level_length_count20\
    \ = 0;\n  let paren_level_max_level_length_count21 = 0;\n  let paren_level_max_level_length_count22\
    \ = 0;\n  let paren_level_max_level_length_count23 = 0;\n  let paren_level_max_level_length_count24\
    \ = 0;\n  let paren_level_max_level_length_count25 = 0;\n  let paren_level_max_level_length_count26\
    \ = 0;\n  let paren_level_max_level_length_count27 = 0;\n  let paren_level_max_level_length_count28\
    \ = 0;\n  let paren_level_max_level_length_count29 = 0;\n  let paren_level_max_level_length_count30\
    \ = 0;\n  let paren_level_max_level_length_count31 = 0;\n  let paren_level_max_level_length_count32\
    \ = 0;\n  let paren_level_max_level_length_count33 = 0;\n  let paren_level_max_level_length_count34\
    \ = 0;\n  let paren_level_max_level_length_count35 = 0;\n  let paren_level_max_level_length_count36\
    \ = 0;\n  let paren_level_max_level_length_count37 = 0;\n  let paren_level_max_level_length_count38\
    \ = 0;\n  let paren_level_max_level_length_count39 = 0;\n  let paren_level_max_level_length_count40\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcv78raks.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n\
    \        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === ')')\
    \ {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return\
    \ levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6asheiwj.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(')\
    \ {\n      paren_stack.push(paren_string[i]);\n      paren_level_count++;\n  \
    \  } else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if\
    \ (paren_level_count === 0) {\n        paren_level_max++;\n      }\n      paren_level[paren_level_count\
    \ - 1] = paren_level_max;\n      paren_stack.splice(paren_stack.length - 1, 1);\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  '-1': 4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpxkgd60oa.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxkgd60oa.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, '-1':\
    \ 4 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n      if (paren_count ===\
    \ 0) {\n        paren_stack.pop();\n      }\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpxthag5wz.ts(12,24): error TS2345: Argument of type\
    \ 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpxthag5wz.ts(21,3):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n"
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqe6orui8.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqe6orui8.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const paren_level = paren_stack.pop();\n\
    \      const paren_level_diff = paren_level.length - paren_level[paren_level.length\
    \ - 1];\n      paren_level.push(paren_level[paren_level.length - 1] + paren_level_diff);\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpawe5wyku.ts(16,53): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    ../../../../../tmp/tmpawe5wyku.ts(17,19): error TS2339: Property ''push'' does
    not exist on type ''string''.

    '
  timestamp: 1659748325
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n      if (paren_count <\
    \ 0) {\n        throw new Error(`Unbalanced parenthesis at index ${i}`);\n   \
    \   }\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmplyukzkcj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmplyukzkcj.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n\
    \  let paren_level_max_value_length: number = 0;\n  let paren_level_max_value_char:\
    \ number = 0;\n  let paren_level_max_value_char_count: number = 0;\n  let paren_level_max_value_char_length:\
    \ number = 0;\n  let paren_level_max_value_char_index: number = 0;\n  let paren_level_max_value_char_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_index: number = 0;\n  let\
    \ paren_level_max_value_char_value_value: number = 0;\n  let paren_level_max_value_char_value_value_index:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_index: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_char_value_value_value_value: number\
    \ = 0;\n  let paren_level_max_value_char_value_value_value_value: number = 0;\n\
    \  let paren_level_max_value_char_value_value_value_value: number = 0;\n  let\
    \ paren_level_max_value_char_value_value_value_value: number = 0;\n  let paren_level_max_value_char_value_value_value_value:\
    \ number = 0;\n  let paren_level_max_value_\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpskdrrhiv.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748325
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ groups.length - 1;\n  const levels = new Array<number>(max_level);\n  for (let\
    \ i = 0; i < max_level; i++) {\n    levels[i] = 0;\n  }\n  for (let i = 0; i <\
    \ groups.length; i++) {\n    const group = groups[i];\n    if (group === '(')\
    \ {\n      levels[levels.length - 1]++;\n    } else if (group === ')') {\n   \
    \   levels[levels.length - 1]--;\n    }\n  }\n  return levels.slice(0, levels.length\
    \ - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpiywhvpsr.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiywhvpsr.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count = paren_stack.pop();\n    }\n  }\n  return paren_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph9e0ade5.ts(17,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  const result: number[] = [];\n  for (let i = 0; i < groups.length; i++) {\n\
    \    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n\
    \      levels[group[j]] += 1;\n    }\n  }\n  for (let i = 0; i < levels.length;\
    \ i++) {\n    if (levels[i] === max_level) {\n      result.push(i);\n    }\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4t7jadvc.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvv6r04iq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvv6r04iq.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp3bava2fq.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3bava2fq.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  let paren_depth = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n \
    \     paren_stack.push(paren_depth);\n      paren_depth++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_depth = Math.max(paren_stack.pop(), paren_depth);\n\
    \    }\n  }\n  return paren_depth;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpic2flb6a.ts(11,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpic2flb6a.ts(14,30): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpic2flb6a.ts(17,3): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number;\n\
    \  let paren_level_max_level: number;\n  let paren_level_max_level_length: number;\n\
    \  let paren_level_max_level_length_count: number;\n  let paren_level_max_level_length_index_count:\
    \ number;\n  let paren_level_max_level_length_index_count_max: number;\n  let\
    \ paren_level_max_level_length_index_count_min: number;\n  let paren_level_max_level_length_index_count_min_index:\
    \ number;\n  let paren_level_max_level_length_index_count_max_index: number;\n\
    \  let paren_level_max_level_length_index_count_min_index2: number;\n  let paren_level_max_level_length_index_count_max_index2:\
    \ number;\n  let paren_level_max_level_length_index_count_min_index3: number;\n\
    \  let paren_level_max_level_length_index_count_max_index3: number;\n  let paren_level_max_level_length_index_count_min_index4:\
    \ number;\n  let paren_level_max_level_length_index_count_max_index4: number;\n\
    \  let paren_level_max_level_length_index_count_min_index5: number;\n  let paren_level_max_level_length_index_count_max_index5:\
    \ number;\n  let paren_level_max_level_length_index_count_min_index6: number;\n\
    \  let paren_level_max_level_length_index_count_max_index6: number;\n  let paren_level_max_level_length_index_count_min_index7:\
    \ number;\n  let paren_level_max_level_length_index_count_max_index7: number;\n\
    \  let paren_level_max_level_length_index_count_min_index8: number;\n  let paren_level_max_level_length_index_count_max_index8:\
    \ number;\n  let paren_level_max_level_length_index_count_min_index9: number;\n\
    \  let paren_level_max_level_length_index_count_max_index9: number;\n  let paren_level_max_level_length_index_count_min_index10:\
    \ number;\n  let paren_level_max_level_length_index_count_max_index10: number;\n\
    \  let paren_level_max_level_length_index_count_min_index11: number;\n  let paren_level_max_level_length_index_count_max_index11:\
    \ number;\n  let paren_level_max_level_length_index_count_min_index12: number;\n\
    \  let paren_level_max_level_length_index_count_max_index12: number;\n  let paren_level_max_level_length_index_count_min_index13:\
    \ number;\n  let paren_level_max_level_length_index_count_max_index13: number;\n\
    \  let paren_level_max_level_length_index_count_min_index14: number;\n  let paren_level_max_level_length_index_count_max_index14:\
    \ number;\n  let paren_level_max_level_length_index_count_min_index15: number;\n\
    \  let paren_level_max_level_length_index_count_max_index\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpknpz9z4h.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level_count++;\n    } else if (paren_string[i] === ')') {\n     \
    \ paren_level_count--;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_stack.length);\n\
    \        paren_stack.splice(paren_stack.length - 1, 1);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  5,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpxmew4jo7.js:28:12)\n    at Object.<anonymous> (/tmp/tmpxmew4jo7.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 5,\
    \ 9 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level_count = paren_stack.pop();\n\
    \    }\n    paren_level.push(paren_level_count);\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpz2azyrdc.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz2azyrdc.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0,\
    \ 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_index: number = 0;\n\
    \  let paren_level_max_index: number = 0;\n  let paren_level_max_index: number\
    \ = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\n  let paren_level_max_index:\
    \ number = 0;\n  let paren_level_max_index: number = 0;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpev3h7uhd.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max_count\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_max_count\
    \ = Math.max(paren_level_max_count, paren_count);\n      paren_count++;\n    }\
    \ else if (char === ')') {\n      paren_count--;\n      if (paren_count === 0)\
    \ {\n        paren_level_count++;\n      }\n    } else if (char === ' ') {\n \
    \     if (paren_count === 0) {\n        paren_level_count++;\n      }\n    } else\
    \ {\n      paren_count--;\n    }\n    paren_level[paren_stack.pop()] = paren_level_count;\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcwt5e3xu.ts(15,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      const current_level = paren_level.pop();\n\
    \      if (current_level > 0) {\n        paren_level.push(current_level);\n  \
    \    }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp35_9gx7r.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp35_9gx7r.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      if (paren_level_count\
    \ > paren_level_max) {\n        paren_level_max = paren_level_count;\n      }\n\
    \      paren_level.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa1p0trp9.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa1p0trp9.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_max);\n      }\n      paren_stack.push(paren_string[i]);\n\
    \    } else if (char === ' ') {\n      paren_level_count++;\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps0dn3z14.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmps0dn3z14.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpy261fbcb.js:26:12)\n    at Object.<anonymous> (/tmp/tmpy261fbcb.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      if (paren_level_count === 0) {\n        paren_level_max = Math.max(...paren_level);\n\
    \      }\n      paren_level.splice(paren_level.indexOf(paren_level_count), 1);\n\
    \    }\n  }\n  return paren_level_max;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkfi4ukke.ts(25,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length);\n      paren_level_count =\
    \ 0;\n    } else if (char === ')') {\n      paren_level_count = Math.max(paren_level_count,\
    \ paren_stack.pop());\n    }\n    paren_level_count += 1;\n  }\n  return paren_level_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj7qjl9h7.ts(22,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      levels[group[j]] += 1;\n \
    \   }\n  }\n  return levels.map(l => l === max_level ? l : l - 1);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps70tzxh3.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max = Math.max(paren_level_max, paren_stack.length - 1);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0ean3qdy.js:27:12)\n    at Object.<anonymous> (/tmp/tmp0ean3qdy.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n\
    \      paren_level_count += 1;\n      paren_level.push(paren_level_count);\n \
    \   } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level[paren_level_max_index]\
    \ = paren_level_count;\n      if (paren_level_count > paren_level_max_count) {\n\
    \        paren_level_max_count = paren_level_count;\n        paren_level_max_index\
    \ = paren_level_max_count;\n      }\n      paren_stack.pop();\n    } else {\n\
    \      paren_level[paren_level_max_index] = paren_level_count;\n    }\n  }\n \
    \ return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  1,\n  2,\n  3,\n  1,\n  1,\n  2,\n  3,\n  2,\n  2\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpn3sdkgff.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn3sdkgff.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 0, 1, 2,\n    3, 1, 1, 2, 3,\n    2, 2\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp1orpxp4z.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1orpxp4z.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748321
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  let paren_level_index = 0;\n  let\
    \ paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count\
    \ = 0;\n  let paren_level_max_count_index = 0;\n  let paren_level_max_count_index2\
    \ = 0;\n  let paren_level_max_count_index3 = 0;\n  let paren_level_max_count_index4\
    \ = 0;\n  let paren_level_max_count_index5 = 0;\n  let paren_level_max_count_index6\
    \ = 0;\n  let paren_level_max_count_index7 = 0;\n  let paren_level_max_count_index8\
    \ = 0;\n  let paren_level_max_count_index9 = 0;\n  let paren_level_max_count_index10\
    \ = 0;\n  let paren_level_max_count_index11 = 0;\n  let paren_level_max_count_index12\
    \ = 0;\n  let paren_level_max_count_index13 = 0;\n  let paren_level_max_count_index14\
    \ = 0;\n  let paren_level_max_count_index15 = 0;\n  let paren_level_max_count_index16\
    \ = 0;\n  let paren_level_max_count_index17 = 0;\n  let paren_level_max_count_index18\
    \ = 0;\n  let paren_level_max_count_index19 = 0;\n  let paren_level_max_count_index20\
    \ = 0;\n  let paren_level_max_count_index21 = 0;\n  let paren_level_max_count_index22\
    \ = 0;\n  let paren_level_max_count_index23 = 0;\n  let paren_level_max_count_index24\
    \ = 0;\n  let paren_level_max_count_index25 = 0;\n  let paren_level_max_count_index26\
    \ = 0;\n  let paren_level_max_count_index27 = 0;\n  let paren_level_max_count_index28\
    \ = 0;\n  let paren_level_max_count_index29 = 0;\n  let paren_level_max_count_index30\
    \ = 0;\n  let paren_level_max_count_index31 = 0;\n  let paren_level_max_count_index32\
    \ = 0;\n  let paren_level_max_count_index33 = 0;\n  let paren_level_max_count_index34\
    \ = 0;\n  let paren_level_max_count_index35 = 0;\n  let paren_level_max_count_index36\
    \ = 0;\n  let paren_level_max_count_index37 = 0;\n  let paren_level_max_count_index38\
    \ = 0;\n  let paren_level_max_count_index39 = 0;\n  let paren_level_max_count_index40\
    \ = 0;\n  let paren_level_max_count_index41 = 0;\n  let paren_level_max_count_index42\
    \ = 0;\n  let paren_level_max_count_index43 = 0;\n  let paren_level_max_count_index44\
    \ = 0;\n  let paren_level_max_count_index45 = 0;\n  let paren_level_max_count_index46\
    \ = 0;\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm8t033ec.ts(61,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpm8t033ec.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n\
    \  let paren_level_max_parens: number = 0;\n  let paren_level_max_parens_index:\
    \ number = 0;\n  let paren_level_max_parens_value: number = 0;\n  let paren_level_max_parens_parens:\
    \ number = 0;\n  let paren_level_max_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens: number = 0;\n  let\
    \ paren_level_max_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens: number = 0;\n\
    \  let paren_level_max_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens: number\
    \ = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_index: number\
    \ = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_value: number\
    \ = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens: number\
    \ = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_index:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_index:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_index:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_parens:\
    \ number = 0;\n  let paren_level_max_parens_parens_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph8t193jr.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_count: number[] = [];\n  const paren_level_max_count: number[]\
    \ = [];\n  const paren_level_max_count_index: number[] = [];\n  const paren_level_max_count_index2:\
    \ number[] = [];\n  const paren_level_max_count_index3: number[] = [];\n  const\
    \ paren_level_max_count_index4: number[] = [];\n  const paren_level_max_count_index5:\
    \ number[] = [];\n  const paren_level_max_count_index6: number[] = [];\n  const\
    \ paren_level_max_count_index7: number[] = [];\n  const paren_level_max_count_index8:\
    \ number[] = [];\n  const paren_level_max_count_index9: number[] = [];\n  const\
    \ paren_level_max_count_index10: number[] = [];\n  const paren_level_max_count_index11:\
    \ number[] = [];\n  const paren_level_max_count_index12: number[] = [];\n  const\
    \ paren_level_max_count_index13: number[] = [];\n  const paren_level_max_count_index14:\
    \ number[] = [];\n  const paren_level_max_count_index15: number[] = [];\n  const\
    \ paren_level_max_count_index16: number[] = [];\n  const paren_level_max_count_index17:\
    \ number[] = [];\n  const paren_level_max_count_index18: number[] = [];\n  const\
    \ paren_level_max_count_index19: number[] = [];\n  const paren_level_max_count_index20:\
    \ number[] = [];\n  const paren_level_max_count_index21: number[] = [];\n  const\
    \ paren_level_max_count_index22: number[] = [];\n  const paren_level_max_count_index23:\
    \ number[] = [];\n  const paren_level_max_count_index24: number[] = [];\n  const\
    \ paren_level_max_count_index25: number[] = [];\n  const paren_level_max_count_index26:\
    \ number[] = [];\n  const paren_level_max_count_index27: number[] = [];\n  const\
    \ paren_level_max_count_index28: number[] = [];\n  const paren_level_max_count_index29:\
    \ number[] = [];\n  const paren_level_max_count_index30: number[] = [];\n  const\
    \ paren_level_max_count_index31: number[] = [];\n  const paren_level_max_count_index32:\
    \ number[] = [];\n  const paren_level_max_count_index33: number[] = [];\n  const\
    \ paren_level_max_count_index34: number[] = [];\n  const paren_level_max_count_index35:\
    \ number[] = [];\n  const paren_level_max_count_index36: number[] = [];\n  const\
    \ paren_level_max_count_index37: number[] = [];\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoy1bd5ro.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748326
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_index: number = 0;\n  let paren_level_max_value: number = 0;\n\
    \  let paren_level_max_parens: number = 0;\n  let paren_level_max_parens_index:\
    \ number = 0;\n  let paren_level_max_parens_value: number = 0;\n  let paren_level_max_parens_parens:\
    \ number = 0;\n  let paren_level_max_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens: number = 0;\n  let\
    \ paren_level_max_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens: number = 0;\n\
    \  let paren_level_max_parens_parens_parens_parens_index: number = 0;\n  let paren_level_max_parens_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens: number\
    \ = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_index: number\
    \ = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_value: number\
    \ = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens: number\
    \ = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_index:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_index:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_index:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_value:\
    \ number = 0;\n  let paren_level_max_parens_parens_parens_parens_parens_parens_parens_parens_parens:\
    \ number = 0;\n  let paren_level_max_parens_parens_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph8t193jr.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748326
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n\
    \    } else if (char === ')') {\n      paren_level_count++;\n      paren_level[paren_level_count]\
    \ = paren_level_max;\n      paren_level_max = 0;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  1,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n \
    \ 1,\n  3\n]\n    at test (/tmp/tmpyrpxt7yn.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyrpxt7yn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 1, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_max = (paren_level_count > paren_level_max) ? paren_level_count\
    \ : paren_level_max;\n      paren_level_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_level_count--;\n      paren_level[paren_stack.pop()]\
    \ = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp4286s59a.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4286s59a.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpw7mse609.js:28:12)\n    at Object.<anonymous> (/tmp/tmpw7mse609.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748327
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(')\
    \ {\n      paren_stack.push(paren_level_count);\n      paren_level_max = Math.max(paren_level_max,\
    \ paren_stack[paren_stack.length - 1]);\n      paren_level_count += 1;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count -= 1;\n      if\
    \ (paren_level_count === 0) {\n        paren_level.push(paren_level_max);\n  \
    \      paren_level_max = 0;\n      }\n    }\n  }\n  return paren_level;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpq7i5ddh2.js:30:12)\n    at Object.<anonymous> (/tmp/tmpq7i5ddh2.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0,\
    \ 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748327
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n \
    \   for (let j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n\
    \        levels[groups.length - 1 - i] += 1;\n      } else if (group[j] === ')')\
    \ {\n        levels[groups.length - 1 - i] -= 1;\n      }\n    }\n  }\n  return\
    \ levels.filter(l => l > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6asheiwj.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  let level = 0;\n  for (let i = 0; i < groups.length; i++) {\n    const group\
    \ = groups[i];\n    if (group.length <= level) {\n      levels[level] += 1;\n\
    \    } else {\n      levels[level] = Math.max(levels[level], group.length);\n\
    \    }\n    level++;\n  }\n  return levels.slice(0, level);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuab_7lv5.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpgp_nb5k0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgp_nb5k0.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpk26lt01u.js:28:12)\n    at Object.<anonymous> (/tmp/tmpk26lt01u.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748316
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count\
    \ += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n     \
    \ paren_level_max = Math.max(paren_level_max, paren_stack.pop());\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnjtcvt7e.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnjtcvt7e.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_level.length\
    \ - 1]++;\n      if (paren_level_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  3,\n  0,\n  1,\n  5,\n  1,\n  0,\n  1,\n  4,\n  2,\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnqlzw9io.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnqlzw9io.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 2, 3, 0, 1,\n    5, 1, 0, 1, 4,\n    2, 3\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748324
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (paren_string[i] === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp3bava2fq.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3bava2fq.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  const paren_level_max: number[] = [];\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(char);\n\
    \      paren_level.push(0);\n      paren_level_max.push(0);\n    } else if (char\
    \ === ')') {\n      paren_level[paren_stack.length - 1]++;\n      paren_level_max[paren_stack.length\
    \ - 1] = Math.max(paren_level_max[paren_stack.length - 1], paren_level[paren_stack.length\
    \ - 1]);\n      paren_stack.pop();\n    }\n  }\n  return paren_level;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  6,\n\
    \  2,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvh4y7rdt.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvh4y7rdt.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 6, 2, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max.apply(null, groups.map(g => g.length));\n  const levels = new Array(max_level).fill(0);\n\
    \  const result: number[] = [];\n  for (let i = 0; i < groups.length; i++) {\n\
    \    const group = groups[i];\n    for (let j = 0; j < group.length; j++) {\n\
    \      if (levels[j] >= group.length) {\n        levels[j]++;\n        result.push(j);\n\
    \      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4z8qmy73.ts(9,39): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659748328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_stack.length - 1);\n      paren_level_count++;\n\
    \    } else if (char === ')') {\n      paren_level_count--;\n      paren_level[paren_stack.pop()]\
    \ = paren_level_count;\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp_o0tvsyg.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_o0tvsyg.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index\
    \ = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n\
    \  let paren_level_max_string_index = 0;\n  let paren_level_max_string_count =\
    \ 0;\n  let paren_level_max_string_value = '';\n  let paren_level_max_string_value_index\
    \ = 0;\n  let paren_level_max_string_value_count = 0;\n  let paren_level_max_string_value_value\
    \ = '';\n  let paren_level_max_string_value_value_index = 0;\n  let paren_level_max_string_value_value_count\
    \ = 0;\n  let paren_level_max_string_value_value_value = '';\n  let paren_level_max_string_value_value_value_index\
    \ = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value\
    \ = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count\
    \ = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index\
    \ = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value\
    \ = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count\
    \ = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index\
    \ = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value\
    \ = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count\
    \ = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index\
    \ = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value\
    \ = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count\
    \ = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value_value_index\
    \ = 0;\n  let paren_level_max_string_value_value_value_count = 0;\n  let paren_level_max_string_value_value_value_value\
    \ = '';\n  let paren_level_max_string_value_value_value_index = 0;\n  let paren_level_max_string_value_value_value_count\
    \ = 0;\n  let paren_level_max_string_value_value_value_value = '';\n  let paren_level_max_string_value_value\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz2jwiuw7.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzk0e8qvn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzk0e8qvn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpjxol7hpi.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjxol7hpi.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_count);\n\
    \      paren_level.push(0);\n      paren_count++;\n    } else if (char === ')')\
    \ {\n      paren_count = paren_stack.pop();\n      paren_level.pop();\n    }\n\
    \  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp87kuy9jj.ts(13,24): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmp87kuy9jj.ts(17,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659748328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max: number[] = [];\n\
    \  let paren_level_max_count: number[] = [];\n  let paren_level_max_string: string[]\
    \ = [];\n  let paren_level_max_string_count: number[] = [];\n  let paren_level_max_string_index:\
    \ number[] = [];\n  let paren_level_max_string_index2: number[] = [];\n  let paren_level_max_string_index3:\
    \ number[] = [];\n  let paren_level_max_string_index4: number[] = [];\n  let paren_level_max_string_index5:\
    \ number[] = [];\n  let paren_level_max_string_index6: number[] = [];\n  let paren_level_max_string_index7:\
    \ number[] = [];\n  let paren_level_max_string_index8: number[] = [];\n  let paren_level_max_string_index9:\
    \ number[] = [];\n  let paren_level_max_string_index10: number[] = [];\n  let\
    \ paren_level_max_string_index11: number[] = [];\n  let paren_level_max_string_index12:\
    \ number[] = [];\n  let paren_level_max_string_index13: number[] = [];\n  let\
    \ paren_level_max_string_index14: number[] = [];\n  let paren_level_max_string_index15:\
    \ number[] = [];\n  let paren_level_max_string_index16: number[] = [];\n  let\
    \ paren_level_max_string_index17: number[] = [];\n  let paren_level_max_string_index18:\
    \ number[] = [];\n  let paren_level_max_string_index19: number[] = [];\n  let\
    \ paren_level_max_string_index20: number[] = [];\n  let paren_level_max_string_index21:\
    \ number[] = [];\n  let paren_level_max_string_index22: number[] = [];\n  let\
    \ paren_level_max_string_index23: number[] = [];\n  let paren_level_max_string_index24:\
    \ number[] = [];\n  let paren_level_max_string_index25: number[] = [];\n  let\
    \ paren_level_max_string_index26: number[] = [];\n  let paren_level_max_string_index27:\
    \ number[] = [];\n  let paren_level_max_string_index28: number[] = [];\n  let\
    \ paren_level_max_string_index29: number[] = [];\n  let paren_level_max_string_index30:\
    \ number[] = [];\n  let paren_level_max_string_index31: number[] = [];\n  let\
    \ paren_level_max_string_index32: number[] = [];\n  let paren_level_max_string_index33:\
    \ number[] = [];\n  let paren_level_max_string_index34: number[] = [];\n  let\
    \ paren_level_max_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbhrbv1vr.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i]\
    \ === ')') {\n      paren_count--;\n      if (paren_count === 0) {\n        paren_stack.push(paren_string[i]);\n\
    \        paren_level.push(paren_count);\n      }\n    }\n  }\n  return paren_level;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpgp_nb5k0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgp_nb5k0.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      const last_paren_level = paren_level.pop();\n\
    \      if (paren_stack.length > 0) {\n        const last_paren_level_char = paren_stack.pop();\n\
    \        if (last_paren_level_char === '(') {\n          paren_level[last_paren_level]\
    \ = paren_level[last_paren_level - 1];\n        }\n      }\n      paren_level_count--;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined: undefined\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n\
    \  3\n]\n    at test (/tmp/tmpi7ynq3ne.js:33:12)\n    at Object.<anonymous> (/tmp/tmpi7ynq3ne.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined: undefined ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_count);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  0,\n  1,\n  2,\n  0,\n  0,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzk0e8qvn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpzk0e8qvn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 0, 1,\n    2, 0, 0, 0, 0, 1,\n    2, 1, 1, 0\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738659
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_depth = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_depth);\n      paren_depth++;\n\
    \    } else if (char === ')') {\n      paren_depth = Math.max(paren_stack.pop(),\
    \ paren_depth);\n    }\n  }\n  return paren_depth;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgy50bmoh.ts(18,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748319
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n\
    \      paren_level.push(paren_level_count);\n      paren_level_count++;\n    }\
    \ else if (char === ')') {\n      const current_level = paren_level.pop();\n \
    \     const current_level_length = paren_stack.length - paren_level[paren_level.length\
    \ - 1];\n      if (current_level_length >= current_level) {\n        paren_level_count--;\n\
    \      }\n    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpqo2956jk.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqo2956jk.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748329
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: number[] = [];\n    const paren_level: number[] =\
    \ [];\n    let paren_level_count: number = 0;\n    let paren_level_max: number\
    \ = 0;\n    let paren_level_max_index: number = 0;\n    let paren_level_max_value:\
    \ number = 0;\n    let paren_level_max_value_length: number = 0;\n    let paren_level_max_value_length_index:\
    \ number = 0;\n    let paren_level_max_value_length_value: number = 0;\n    let\
    \ paren_level_max_value_length_value_length: number = 0;\n    let paren_level_max_value_length_value_length_index:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value: number\
    \ = 0;\n    let paren_level_max_value_length_value_length_value_length: number\
    \ = 0;\n    let paren_level_max_value_length_value_length_value_length_index:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value:\
    \ number = 0;\n    let paren_level_max_value_length_value_length_value_length_value_length_value_length_value_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0ne76vmt.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.trim().split(/\\s+/);\n  const max_level =\
    \ Math.max(...groups.map(g => g.length));\n  const levels = new Array(max_level);\n\
    \  for (let i = 0; i < levels.length; i++) {\n    levels[i] = 0;\n  }\n  for (let\
    \ i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    for (let\
    \ j = 0; j < group.length; j++) {\n      if (group[j] === '(') {\n        levels[levels.length\
    \ - 1]++;\n      } else if (group[j] === ')') {\n        levels[levels.length\
    \ - 1]--;\n      }\n    }\n  }\n  return levels.filter(l => l > 0).length;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmponwayt8r.ts(23,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max_count: number = 0;\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(paren_level_count);\n\
    \      paren_level_count++;\n    } else if (char === ')') {\n      paren_level_count--;\n\
    \      paren_level_max_count = Math.max(paren_level_max_count, paren_level[paren_level.length\
    \ - 1]);\n      paren_level.pop();\n    }\n  }\n  return paren_level_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgn6f8v9n.ts(23,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659748328
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  let paren_level_max: number = 0;\n  let\
    \ paren_level_max_count: number;\n  let paren_level_max_index: number;\n  let\
    \ paren_level_max_string: string;\n  let paren_level_max_string_index: number;\n\
    \  let paren_level_max_string_index2: number;\n  let paren_level_max_string_index3:\
    \ number;\n  let paren_level_max_string_index4: number;\n  let paren_level_max_string_index5:\
    \ number;\n  let paren_level_max_string_index6: number;\n  let paren_level_max_string_index7:\
    \ number;\n  let paren_level_max_string_index8: number;\n  let paren_level_max_string_index9:\
    \ number;\n  let paren_level_max_string_index10: number;\n  let paren_level_max_string_index11:\
    \ number;\n  let paren_level_max_string_index12: number;\n  let paren_level_max_string_index13:\
    \ number;\n  let paren_level_max_string_index14: number;\n  let paren_level_max_string_index15:\
    \ number;\n  let paren_level_max_string_index16: number;\n  let paren_level_max_string_index17:\
    \ number;\n  let paren_level_max_string_index18: number;\n  let paren_level_max_string_index19:\
    \ number;\n  let paren_level_max_string_index20: number;\n  let paren_level_max_string_index21:\
    \ number;\n  let paren_level_max_string_index22: number;\n  let paren_level_max_string_index23:\
    \ number;\n  let paren_level_max_string_index24: number;\n  let paren_level_max_string_index25:\
    \ number;\n  let paren_level_max_string_index26: number;\n  let paren_level_max_string_index27:\
    \ number;\n  let paren_level_max_string_index28: number;\n  let paren_level_max_string_index29:\
    \ number;\n  let paren_level_max_string_index30: number;\n  let paren_level_max_string_index31:\
    \ number;\n  let paren_level_max_string_index32: number;\n  let paren_level_max_string_index33:\
    \ number;\n  let paren_level_max_string_index34: number;\n  let paren_level_max_string_index35:\
    \ number;\n  let paren_level_max_string_index36: number;\n  let paren_level_max_string_index37:\
    \ number;\n  let paren_level_max_string_index38: number;\n  let paren_level_max_string_index39:\
    \ number;\n  let paren_level_max_string_index40: number;\n  let paren_level_max_string_index41:\
    \ number;\n  let paren_level_max_string_index42: number;\n  let paren_level_max_string_index43:\
    \ number;\n  let paren_level_max_string_index44: number;\n  let paren_level_max_string_index45:\
    \ number;\n  let paren_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphr2w7mnx.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ '(') {\n      paren_stack.push(paren_level.length);\n      paren_level.push(0);\n\
    \    } else if (paren_string[i] === ')') {\n      paren_level.pop();\n    }\n\
    \  }\n  return paren_stack;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmkv6zx9k.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmkv6zx9k.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748329
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (paren_string[i] === ')') {\n  \
    \    paren_level_count -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n\
    \    }\n  }\n  return paren_level;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpa9h39_xa.js:25:12)\n    at Object.<anonymous> (/tmp/tmpa9h39_xa.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748329
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_count = 0;\n  let paren_level_count = 0;\n  let paren_level_max =\
    \ 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_level_max\
    \ = Math.max(paren_level_max, paren_level_count);\n      paren_level_count = 0;\n\
    \      paren_count++;\n    } else if (char === ')') {\n      paren_count--;\n\
    \      paren_level_count++;\n      paren_level_max = Math.max(paren_level_max,\
    \ paren_level_count);\n    }\n  }\n  return paren_stack;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpm2ny0y9r.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm2ny0y9r.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748329
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n\
    \    if (char === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level.push(0);\n\
    \    } else if (char === ')') {\n      paren_level.pop();\n      if (paren_level.length\
    \ === 0) {\n        paren_stack.push(paren_string[i]);\n      }\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp91nauze_.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp91nauze_.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748329
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  let paren_count = 0;\n  for (let i\
    \ = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n  \
    \  if (char === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')') {\n      paren_count--;\n    }\n  }\n  return paren_stack.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  1,\n  0,\n  0,\n  2,\n  1,\n  0,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpea60rnl0.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpea60rnl0.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 1, 0,\n    0, 2, 1, 0, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748329
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n\
    \      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count\
    \ -= 1;\n      paren_level[paren_stack.pop()] = paren_level_count;\n    }\n  }\n\
    \  return paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpy261fbcb.js:26:12)\n    at Object.<anonymous> (/tmp/tmpy261fbcb.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748319
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: number[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count: number[] = [];\n  let paren_level_max_count: number[]\
    \ = [];\n  let paren_level_max_level: number[] = [];\n  let paren_level_max_level_length:\
    \ number[] = [];\n  let paren_level_max_level_length_count: number[] = [];\n \
    \ let paren_level_max_level_length_index_count: number[] = [];\n  let paren_level_max_level_length_index_count_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_index:\
    \ number[] = [];\n  let paren_level_max_level_length_index_count_index_index_index_index_index_index_index_index_index_index_index_index_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3g101qea.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748328
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const paren_level: number[] = [];\n\
    \  let paren_level_count = 0;\n  let paren_level_max = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === '(') {\n      paren_stack.push(paren_string[i]);\n      paren_level_max++;\n\
    \    } else if (char === ')') {\n      paren_level_count--;\n      if (paren_level_count\
    \ === 0) {\n        paren_level.push(paren_level_max);\n      }\n      paren_stack.push(paren_string[i]);\n\
    \    } else if (char === ' ') {\n      paren_level_count++;\n    }\n  }\n  return\
    \ paren_level;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps0dn3z14.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmps0dn3z14.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748326
