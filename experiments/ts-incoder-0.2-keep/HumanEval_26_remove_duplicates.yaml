completions:
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        result.push(num);\n        seen.add(num);\n    }\n    return result;\n\
  }\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n     \
  \ continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n \
  \ }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n \
  \   if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const hashTable = {};\n  for (const num of numbers) {\n    if (hashTable[num])\
  \ {\n      delete hashTable[num];\n    } else {\n      hashTable[num] = true;\n\
  \    }\n  }\n  return Object.keys(hashTable).map(num => +num);\n}\n"
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n      \
  \  if (seen.indexOf(number) !== -1) {\n            continue;\n        }\n      \
  \  seen.push(number);\n        unique.push(number);\n    }\n    return unique;\n\
  }\n"
- "  const uniqueNumbers = new Set<number>();\n  for (const num of numbers) {\n  \
  \  if (uniqueNumbers.has(num)) {\n      continue;\n    }\n    uniqueNumbers.add(num);\n\
  \  }\n  return Array.from(uniqueNumbers);\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const hash = new Set<number>();\n  const result = [];\n  for (let i = 0; i <\
  \ numbers.length; i++) {\n    const num = numbers[i];\n    if (hash.has(num)) {\n\
  \      continue;\n    }\n    result.push(num);\n    hash.add(num);\n  }\n  return\
  \ result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
  }\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,typescript |>\n<code>\nconst\
  \ arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n\
  \  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\n\
  console.log(unique);</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,typescript\
  \ |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc,\
  \ cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return\
  \ acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,typescript\
  \ |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc,\
  \ cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return\
  \ acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
  <code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc,\
  \ cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return\
  \ acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a tags=javascript,typescript |>\n\
  <| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique\
  \ = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n\
  \  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a tags=javascript,typescript\
  \ |>\n<| a tags=javascript,typescript |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3,\
  \ 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) ===\
  \ -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n\
  <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2,\
  \ 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1)\
  \ {\n"
- "    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((number)\
  \ => {\n        if (seen.indexOf(number) === -1) {\n            result.push(number);\n\
  \            seen.push(number);\n        }\n    });\n    return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "    const seen = new Set<number>();\n    return numbers.filter(n => !seen.has(n)\
  \ && seen.add(n));\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const hashTable = {};\n  const output = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (hashTable[number]) {\n      continue;\n\
  \    }\n    hashTable[number] = true;\n    output.push(number);\n  }\n  return output;\n\
  }\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num)\
  \ => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n \
  \           unique.push(num);\n        }\n    });\n    return unique;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const seen = new Set<number>();\n    return numbers.filter(n => !seen.has(n)\
  \ && seen.add(n));\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n     \
  \ continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n \
  \ }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const result: number[] = [];\n    let seen: number[] = [];\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1)\
  \ {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n\
  \        }\n    }\n    return result;\n}\n"
- "  const output: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i]);\n\
  \    }\n  }\n  return output;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num)\
  \ => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n \
  \           result.push(num);\n        }\n    });\n    return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
  \ = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n\
  \    }\n  }\n  return result;\n}\n"
- "    const result = [];\n    const seen = new Set();\n    for (const num of numbers)\
  \ {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
  \        result.push(num);\n    }\n    return result;\n}\n"
- "  const hash: number[] = [];\n  const result: number[] = [];\n\n  for (let i =\
  \ 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash.indexOf(number)\
  \ === -1) {\n      result.push(number);\n      hash.push(number);\n    }\n  }\n\n\
  \  return result;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n \
  \   if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  const hash: Map<number, boolean> = new Map();\n  for (const num of numbers) {\n\
  \    if (hash.has(num)) {\n      continue;\n    }\n    hash.set(num, true);\n  \
  \  numbers.push(num);\n  }\n  return numbers;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n    \
  \  result.push(number);\n    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const n of numbers) {\n    if\
  \ (map.has(n)) {\n      map.set(n, map.get(n) + 1);\n    } else {\n      map.set(n,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries())\
  \ {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n\
  }\n"
- "    const result: number[] = [];\n    const seen: Set<number> = new Set();\n  \
  \  numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n\
  \        }\n        seen.add(num);\n        result.push(num);\n    });\n    return\
  \ result;\n}\n"
- "  const hash: Map<number, boolean> = new Map();\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (!hash.has(number)) {\n      hash.set(number,\
  \ true);\n      numbers[i] = number;\n    }\n  }\n  return numbers.filter(n => !hash.has(n));\n\
  }\n"
- "    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n  \
  \      if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n\
  \        result.push(num);\n    });\n    return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const hashTable = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const\
  \ number = numbers[i];\n    if (hashTable[number]) {\n      hashTable[number]++;\n\
  \    } else {\n      hashTable[number] = 1;\n    }\n  }\n  const result = [];\n\
  \  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
  \    if (hashTable[number] === 1) {\n      result.push(number);\n    }\n  }\n  return\
  \ result;\n}\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n    \
  \  result.push(number);\n    }\n  }\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries())\
  \ {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n\
  }\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
  \ = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n\
  \    }\n  }\n  return result;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
  }\n"
- "    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n\
  \    for (const num of numbers) {\n        if (numberSet.has(num)) {\n         \
  \   continue;\n        }\n        numberSet.add(num);\n        uniqueNumbers.push(num);\n\
  \    }\n    return uniqueNumbers;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (numbers.indexOf(result[i]) === -1) {\n      result.push(numbers[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n \
  \   if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries())\
  \ {\n    if (value === 1) {\n      result.push(key);\n    }\n  }\n  return result;\n\
  }\n"
- "    const result: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1)\
  \ {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n\
  \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
  This should be the accepted answer. No need to reinvent the wheel. Just use lodash\
  \ _.uniq\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
  \ the wheel. Just use lodash _.uniq\n<|/ c |>\n<| c |>\nThis should be the accepted\
  \ answer. No need to reinvent the wheel. Just use lodash _.uniq\n<|/ c |>\n<| c\
  \ |>\nThis should be the accepted answer. No need to reinvent the wheel. Just use\
  \ lodash _.uniq\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need\
  \ to reinvent the wheel. Just use lodash _.uniq\n<|/ c |>\n<| a tags=javascript,arrays\
  \ |>\n<code>"
- "  const uniqueNumbers: number[] = [];\n  const numberSet = new Set(numbers);\n\
  \  for (const num of numbers) {\n    if (numberSet.has(num)) {\n      continue;\n\
  \    }\n    uniqueNumbers.push(num);\n    numberSet.add(num);\n  }\n  return uniqueNumbers;\n\
  }\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n     \
  \ continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n \
  \ }\n  return result;\n}\n"
- "    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n  \
  \      if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n\
  \        result.push(num);\n    });\n    return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (!map.has(number)) {\n      map.set(number,\
  \ number);\n    } else {\n      map.set(number, map.get(number) + 1);\n    }\n \
  \ }\n  return Array.from(map.values());\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
  }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if there\
  \ is a way to do this without creating a new Set. Maybe using some kind of hash\
  \ table?\n<|/ c |>\n<| c |>\nYes, you can use a hash table to keep track of seen\
  \ numbers. I updated my answer with an example.\n<|/ c |>\n<| c |>\nI like this\
  \ solution, but I wonder if there is a way to do this without creating a new Set.\
  \ Maybe using some kind of hash table?\n<|/ c |>\n<| c |>\nYes, you can use a hash\
  \ table to keep track of seen numbers. I updated my answer with an example.\n<|/\
  \ c |>\n<| c |>\nThis solution does not preserve the order of the original array.\
  \ `remove_duplicates([1, 2, 3, 2, 4])` returns `[1, 3, 2, 4]` instead of `[1, 3,\
  \ 4]`\n<|/ c |>\n<| a dscore=5 |>\nYou can use lodash uniqBy function\n<code>\n\
  _.uniqBy([1, 1, 2, 2], _.identity)\n</code>\n<|/ a tags=javascript,arrays |>\n<|\
  \ c |>\nThis doesn't preserve the order of the original array. `uniqBy` returns\
  \ `[1, 3, 2, 4]` instead of `[1, 3, 4]`\n<|/ c |>\n<| c |>\nThis doesn't preserve\
  \ the order of the original array. uniqBy returns `[1, 3, 2, 4]` instead of `[1,\
  \ 3, 4]`\n<|/ c |>\n<| c |>\nThis doesn't preserve the order of the original array.\
  \ uniqBy returns `[1, 3, 2, 4]` instead of `[1, 3, 4]`\n<|/ c |>\n<| c |>\nThis\
  \ doesn't preserve the order of the original array. uniqBy returns `[1, 3, 2, 4]`\
  \ instead of `[1, 3, 4]`\n<|/ c |>\n<| c |>\nThis doesn't preserve the order of\
  \ the original array. uniqBy returns `[1, 3, 2, 4]` instead of `[1, 3, 4]`\n<|/\
  \ c |>\n<| a dscore=5 |>\n<code>\nvar arr = [1, 2, 3, 1, 2, 3];\nvar unique = arr.filter(function(elem,\
  \ index, self) {\n    return self.indexOf(elem) === index;\n});\n</code>\n<|/ a\
  \ tags=javascript,arrays |>\n<| c |>\nThis doesn't preserve the order of the original\
  \ array. `filter` returns `[1, 3, 2, 4]` instead of `[1, 3, 4]`\n<|/ c "
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n \
  \   if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (!map.has(num)) {\n      map.set(num, num);\n    }\n  }\n  return Array.from(map.values());\n\
  }\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "  const hashTable = {};\n  const result = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (hashTable[number]) {\n      hashTable[number]++;\n\
  \    } else {\n      hashTable[number] = 1;\n      result.push(number);\n    }\n\
  \  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const uniqueNumbers: number[] = [];\n    numbers.forEach((num) => {\n     \
  \   if (uniqueNumbers.indexOf(num) === -1) {\n            uniqueNumbers.push(num);\n\
  \        }\n    });\n    return uniqueNumbers;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
  \ = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n\
  \    }\n  }\n  return result;\n}\n"
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n      \
  \  if (seen.indexOf(number) !== -1) {\n            continue;\n        }\n      \
  \  seen.push(number);\n        unique.push(number);\n    }\n    return unique;\n\
  }\n"
- "  const hashTable = {};\n  const result = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (!hashTable[number]) {\n      hashTable[number]\
  \ = true;\n      result.push(number);\n    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (seen.has(number)) {\n      continue;\n\
  \    }\n    seen.add(number);\n    result.push(number);\n  }\n  return result;\n\
  }\n"
- "    const unique: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
  \ {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
  \        }\n    }\n    return unique;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const uniqueNumbers: number[] = [];\n    numbers.forEach((number) => {\n  \
  \      if (uniqueNumbers.indexOf(number) === -1) {\n            uniqueNumbers.push(number);\n\
  \        }\n    });\n    return uniqueNumbers;\n}\n"
- "    const output: number[] = [];\n    const seen: number[] = [];\n    for (const\
  \ num of numbers) {\n        if (seen.indexOf(num) >= 0) {\n            continue;\n\
  \        }\n        seen.push(num);\n        output.push(num);\n    }\n    return\
  \ output;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
  \ = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n\
  \    }\n  }\n  return result;\n}\n"
- "    const output: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1)\
  \ {\n            seen.push(numbers[i]);\n            output.push(numbers[i]);\n\
  \        }\n    }\n    return output;\n}\n"
- "    const unique: number[] = [];\n    numbers.forEach(number => {\n        if (unique.indexOf(number)\
  \ === -1) {\n            unique.push(number);\n        }\n    });\n    return unique;\n\
  }\n</code>\n<|/ a tags=javascript,typescript |>\n<| a dscore=0 |>\n<code>"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n \
  \   if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
  }\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
  \ === i) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (let\
  \ i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n\
  \    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n\
  }\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "    const unique: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
  \ {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
  \        }\n    }\n    return unique;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1)\
  \ {\n            continue;\n        }\n        seen.push(numbers[i]);\n        unique.push(numbers[i]);\n\
  \    }\n    return unique;\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const output: number[] = [];\n    let seen: number[] = [];\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1)\
  \ {\n            seen.push(numbers[i]);\n            output.push(numbers[i]);\n\
  \        }\n    }\n    return output;\n}\n"
- "    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n\
  \    for (const num of numberSet) {\n        if (uniqueNumbers.indexOf(num) ===\
  \ -1) {\n            uniqueNumbers.push(num);\n        }\n    }\n    return uniqueNumbers;\n\
  }\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
  \ > -1) result.push(numbers[i]);\n  }\n  return result;\n}\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "    const unique: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
  \ {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
  \        }\n    }\n    return unique;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num)\
  \ => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n\
  \        result.push(num);\n    });\n    return result;\n}\n</code>\n<|/ a |>\n\
  <| a tags=arrays,javascript |>\n<code>"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const hashTable = {};\n  const result = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (hashTable[number]) {\n      continue;\n\
  \    }\n    hashTable[number] = true;\n    result.push(number);\n  }\n  return result;\n\
  }\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
  \ > -1) result.push(numbers[i]);\n  }\n  return result;\n}\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1)\
  \ {\n            unique.push(numbers[i]);\n            seen.push(numbers[i]);\n\
  \        }\n    }\n    return unique;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
  This should be the accepted answer. Simple and effective.\n<|/ c |>\n<| c |>\nThis\
  \ should be the accepted answer. Simple and effective.\n<|/ c |>\n<| c |>\nThis\
  \ should be the accepted answer. Simple and effective.\n<|/ c |>\n<| c |>\nThis\
  \ should be the accepted answer. Simple and effective.\n<|/ c |>\n<| c |>\nThis\
  \ should be the accepted answer. Simple and effective.\n<|/ c |>\n<| a dscore=5\
  \ |>\n<code>"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
  \ === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return\
  \ result;\n}\n"
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1)\
  \ {\n            continue;\n        }\n        seen.push(numbers[i]);\n        unique.push(numbers[i]);\n\
  \    }\n    return unique;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const output: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach(num\
  \ => {\n        if (seen.indexOf(num) === -1) {\n            output.push(num);\n\
  \            seen.push(num);\n        }\n    });\n    return output;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "    const result: number[] = [];\n    const seen: Set<number> = new Set();\n  \
  \  numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n\
  \        }\n        seen.add(num);\n        result.push(num);\n    });\n    return\
  \ result;\n}\n</code>\n<|/ a tags=typescript,javascript |>\n<| c |>\nThis answer\
  \ does not work if you have a list of objects and want to remove duplicates from\
  \ that list. For example, if you have `const list = [{id: 1, name: 'a'}, {id: 2,\
  \ name: 'b'}, {id: 3, name: 'a'}, {id: 4, name: 'b'}]`, then `remove_duplicates(list)`\
  \ will return `[{id: 1, name: 'a'}, {id: 3, name: 'a'}, {id: 4, name: 'b'}]` instead\
  \ of `[{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 4, name: 'b'}]`.\n<|/ c |>\n\
  <| c |>\nThe question was about removing duplicates from a list of integers, not\
  \ a list of objects.\n<|/ c |>\n<| c |>\nI know, but I thought it would be helpful\
  \ to people who come across this question because they might have a list of integers\
  \ and want to remove duplicates from that list.\n<|/ c |>\n<| c |>\nI added a solution\
  \ for a list of integers. I hope it helps.\n<|/ c |>\n<| c |>\nThis answer does\
  \ not work if you have a list of objects and want to remove duplicates from that\
  \ list. For example, if you have `const list = [{id: 1, name: 'a'}, {id: 2, name:\
  \ 'b'}, {id: 3, name: 'a'}, {id: 4, name: 'b'}]`, then `remove_duplicates(list)`\
  \ will return `[{id: 1, name: 'a'}, {id: 3, name: 'a'}, {id: 4, name: 'b'}]` instead\
  \ of `[{id: 1, name: 'a'}, {id: 2, name: 'b'}, {id: 4, name: 'b'}]`.\n<|/ c |>\n\
  <| a tags=typescript,javascript |>\n<code>\nconst list = [1, 2, 3, 1, 2, 3, 1, 2,\
  \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
  \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
  \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
  \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
  \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
  \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
  \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
  \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, "
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n      \
  \  if (seen.indexOf(number) === -1) {\n            seen.push(number);\n        \
  \    unique.push(number);\n        }\n    }\n    return unique;\n}\n"
- "  const hashTable = {};\n  const result = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (hashTable[number]) {\n      hashTable[number]++;\n\
  \    } else {\n      hashTable[number] = 1;\n      result.push(number);\n    }\n\
  \  }\n  return result;\n}\n"
- "    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n  \
  \      if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n\
  \        result.push(num);\n    });\n    return result;\n}\n"
- "    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num)\
  \ => {\n        if (seen.indexOf(num) >= 0) {\n            return;\n        }\n\
  \        seen.push(num);\n        result.push(num);\n    });\n    return result;\n\
  }\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n\
  \    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n\
  }\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n     \
  \ continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n \
  \ }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (seen.has(number)) {\n      continue;\n\
  \    }\n    seen.add(number);\n    result.push(number);\n  }\n  return result;\n\
  }\n"
- "    const result = [];\n    const seen = new Set();\n    for (const num of numbers)\
  \ {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n\
  \        result.push(num);\n    }\n    return result;\n}\n"
- "  const hashTable = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const\
  \ number = numbers[i];\n    if (hashTable[number] === undefined) {\n      hashTable[number]\
  \ = number;\n    } else {\n      delete hashTable[number];\n    }\n  }\n  return\
  \ Object.keys(hashTable).map(Number);\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n\
  \    result.push(numbers[i]);\n  }\n  return result;\n}\n"
- "  const hashTable = {};\n  const result = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (hashTable[number]) {\n      hashTable[number]++;\n\
  \    } else {\n      hashTable[number] = 1;\n      result.push(number);\n    }\n\
  \  }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n     \
  \ seen.push(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
  }\n"
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n\
  \    result.push(numbers[i]);\n  }\n  return result;\n}\n"
- "    const result: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n      \
  \  if (seen.indexOf(number) === -1) {\n            result.push(number);\n      \
  \      seen.push(number);\n        }\n    }\n    return result;\n}"
- "    const result: number[] = [];\n    const seen: Set<number> = new Set();\n  \
  \  for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
  \        }\n        seen.add(num);\n        result.push(num);\n    }\n    return\
  \ result;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number\
  \ = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "    const output: number[] = [];\n    let seen: number[] = [];\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1)\
  \ {\n            seen.push(numbers[i]);\n            output.push(numbers[i]);\n\
  \        }\n    }\n    return output;\n}\n"
- "    const unique: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
  \ {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
  \        }\n    }\n    return unique;\n}\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n     \
  \ continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n \
  \ }\n  return result;\n}\n"
- "  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n\
  \    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n\
  }\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (!map.has(num)) {\n      map.set(num, num);\n    }\n  }\n  return Array.from(map.values());\n\
  }\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const uniqueNumbers = new Set<number>();\n    numbers.forEach((num) => {\n\
  \        if (!uniqueNumbers.has(num)) {\n            uniqueNumbers.add(num);\n \
  \       }\n    });\n    return [...uniqueNumbers];\n}\n</code>\n<|/ a dscore=5 |>\n\
  <| c |>\nThis should be the accepted answer. No need to reinvent the wheel. Thanks!\n\
  <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\
  \ Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
  \ the wheel. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No\
  \ need to reinvent the wheel. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
  \ answer. No need to reinvent the wheel. Thanks!\n<|/ c |>\n<| a |>\n<code>"
- "    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n\
  \    numbers.forEach((number) => {\n        if (numberSet.has(number)) {\n     \
  \       return;\n        }\n        numberSet.add(number);\n        uniqueNumbers.push(number);\n\
  \    });\n    return uniqueNumbers;\n}\n"
- "    const output: number[] = [];\n    const seen: Set<number> = new Set();\n  \
  \  for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n\
  \        }\n        seen.add(num);\n        output.push(num);\n    }\n    return\
  \ output;\n}\n"
- "  const output: number[] = [];\n  let seen: Set<number> = new Set();\n  for (let\
  \ i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n\
  \    }\n    seen.add(numbers[i]);\n    output.push(numbers[i]);\n  }\n  return output;\n\
  }\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n      \
  \  if (seen.indexOf(number) !== -1) {\n            continue;\n        }\n      \
  \  seen.push(number);\n        unique.push(number);\n    }\n    return unique;\n\
  }\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n     \
  \ continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n \
  \ }\n  return result;\n}\n"
- "  const result = [];\n  let seen: Set<number> = new Set();\n  for (const num of\
  \ numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const hashTable = {};\n  const result = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (!hashTable[number]) {\n      hashTable[number]\
  \ = true;\n      result.push(number);\n    }\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n\
  \    numbers.forEach(number => {\n        if (numberSet.has(number)) {\n       \
  \     return;\n        }\n        numberSet.add(number);\n        uniqueNumbers.push(number);\n\
  \    });\n    return uniqueNumbers;\n}\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n     \
  \ continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n \
  \ }\n  return result;\n}\n"
- "    const output: number[] = [];\n    let seen: number[] = [];\n    for (let i\
  \ = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1)\
  \ {\n            seen.push(numbers[i]);\n            output.push(numbers[i]);\n\
  \        }\n    }\n    return output;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n \
  \   if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((number)\
  \ => {\n        if (seen.indexOf(number) === -1) {\n            result.push(number);\n\
  \            seen.push(number);\n        }\n    });\n    return result;\n}\n"
- "  const hashTable = {};\n  const output = [];\n  for (let i = 0; i < numbers.length;\
  \ i++) {\n    const number = numbers[i];\n    if (hashTable[number] === undefined)\
  \ {\n      hashTable[number] = true;\n      output.push(number);\n    }\n  }\n \
  \ return output;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n    \
  \  result.push(number);\n    }\n  }\n  return result;\n}\n"
- "    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n  \
  \      if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n\
  \        result.push(num);\n    });\n    return result;\n}\n"
- "    const seen = new Set<number>();\n    const result = [];\n    for (let i = 0;\
  \ i < numbers.length; i++) {\n        if (seen.has(numbers[i])) {\n            continue;\n\
  \        }\n        seen.add(numbers[i]);\n        result.push(numbers[i]);\n  \
  \  }\n    return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach(n\
  \ => {\n        if (!seen.has(n)) {\n            result.push(n);\n            seen.add(n);\n\
  \        }\n    });\n    return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const hash: Map<number, boolean> = new Map();\n  for (const num of numbers) {\n\
  \    if (hash.has(num)) {\n      hash.set(num, true);\n    } else {\n      hash.set(num,\
  \ false);\n    }\n  }\n  const result: number[] = [];\n  for (const [key, value]\
  \ of hash.entries()) {\n    if (value) {\n      result.push(key);\n    }\n  }\n\
  \  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map.entries())\
  \ {\n    if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n\
  }\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n     \
  \ seen.push(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const result = [];\n  const seen = new Set<number>();\n  for (const num of numbers)\
  \ {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "  const hashTable = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const\
  \ number = numbers[i];\n    if (hashTable[number]) {\n      delete hashTable[number];\n\
  \    } else {\n      hashTable[number] = number;\n    }\n  }\n  return Object.keys(hashTable).map(Number);\n\
  }\n"
language: ts
name: HumanEval_26_remove_duplicates
prompt: '//From a list of integers, remove all elements that occur more than once.

  // Keep order of elements left the same as in the input.

  // >>> remove_duplicates([1, 2, 3, 2, 4])

  // [1, 3, 4]

  function remove_duplicates(numbers: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"
