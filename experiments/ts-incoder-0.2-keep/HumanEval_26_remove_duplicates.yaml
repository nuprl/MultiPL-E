completions:
- "  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n\
  \    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n\
  \  }\n  return result;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        result.push(num);\n        seen.add(num);\n    }\n    return result;\n\
  }\n"
- "  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0;\
  \ i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) !== -1) {\n     \
  \ continue;\n    }\n    seen.push(numbers[i]);\n    result.push(numbers[i]);\n \
  \ }\n  return result;\n}\n"
- "  const unique: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
  \    }\n  }\n  return unique;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const uniqueNumbers: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n\
  \    }\n  }\n  return uniqueNumbers;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
  \    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const map = new Map<number, number>();\n  for (const num of numbers) {\n    if\
  \ (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num,\
  \ 1);\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n \
  \   if (value > 1) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "  const hashTable = {};\n  for (const num of numbers) {\n    if (hashTable[num])\
  \ {\n      delete hashTable[num];\n    } else {\n      hashTable[num] = true;\n\
  \    }\n  }\n  return Object.keys(hashTable).map(num => +num);\n}\n"
- "    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let\
  \ i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n      \
  \  if (seen.indexOf(number) !== -1) {\n            continue;\n        }\n      \
  \  seen.push(number);\n        unique.push(number);\n    }\n    return unique;\n\
  }\n"
- "  const uniqueNumbers = new Set<number>();\n  for (const num of numbers) {\n  \
  \  if (uniqueNumbers.has(num)) {\n      continue;\n    }\n    uniqueNumbers.add(num);\n\
  \  }\n  return Array.from(uniqueNumbers);\n}\n"
- "  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
  \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"
- "  const hash = new Set<number>();\n  const result = [];\n  for (let i = 0; i <\
  \ numbers.length; i++) {\n    const num = numbers[i];\n    if (hash.has(num)) {\n\
  \      continue;\n    }\n    result.push(num);\n    hash.add(num);\n  }\n  return\
  \ result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
- "    const result = [];\n    const seen = new Set<number>();\n    for (const num\
  \ of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n\
  \        seen.add(num);\n        result.push(num);\n    }\n    return result;\n\
  }\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,typescript |>\n<code>\nconst\
  \ arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n\
  \  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\n\
  console.log(unique);</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,typescript\
  \ |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc,\
  \ cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return\
  \ acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,typescript\
  \ |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc,\
  \ cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return\
  \ acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
  <code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc,\
  \ cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return\
  \ acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a tags=javascript,typescript |>\n\
  <| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique\
  \ = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n\
  \  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a tags=javascript,typescript\
  \ |>\n<| a tags=javascript,typescript |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3,\
  \ 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) ===\
  \ -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n\
  <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2,\
  \ 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1)\
  \ {\n"
- "    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((number)\
  \ => {\n        if (seen.indexOf(number) === -1) {\n            result.push(number);\n\
  \            seen.push(number);\n        }\n    });\n    return result;\n}\n"
- "  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (const\
  \ num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n\
  \    result.push(num);\n  }\n  return result;\n}\n"
language: ts
name: HumanEval_26_remove_duplicates
prompt: '//From a list of integers, remove all elements that occur more than once.

  // Keep order of elements left the same as in the input.

  // >>> remove_duplicates([1, 2, 3, 2, 4])

  // [1, 3, 4]

  function remove_duplicates(numbers: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"
