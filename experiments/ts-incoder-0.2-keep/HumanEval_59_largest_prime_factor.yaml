completions:
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n      }\n  \
  \  }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 1;\n  let i: number;\n\
  \  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length\
  \ === 0) {\n    return 1;\n  }\n  if (factors.length === 1) {\n    return factors[0];\n\
  \  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
  \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
  \ factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = i\
  \ * i; j < n; j += i) {\n      isPrime = false;\n    }\n  }\n  return factors[factors.length\
  \ - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 0;\n  for (let i = 2;\
  \ i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n\
  \    }\n    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if\
  \ (n > 1) {\n    factors.push(n);\n  }\n  while (factors.length != 0) {\n    maxFactor\
  \ = Math.max(maxFactor, factors[factors.length - 1]);\n    factors.pop();\n  }\n\
  \  return maxFactor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
  \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "    let i = 2;\n    let p = n;\n    while (p % i === 0) {\n        p /= i;\n  \
  \      i++;\n    }\n    return p;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors.length\
  \ ? factors[factors.length - 1] : 1;\n}\n"
- "    let i = 2;\n    let p = 2;\n    let q = 3;\n    while (i <= n) {\n        if\
  \ (n % i == 0) {\n            n = n / i;\n            p = i;\n            q = i;\n\
  \        }\n        i++;\n    }\n    return p * q;\n}\n"
- "    let i = 2;\n    let p = n;\n    while (i < p) {\n        if (n % i == 0) {\n\
  \            p /= i;\n        }\n        else {\n            i += 1;\n        }\n\
  \    }\n    return p;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
  }\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 0;\n  for (let i = 2;\
  \ i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n = n\
  \ / i;\n    }\n  }\n  if (n > 1) {\n    for (let i = factors.length - 1; i >= 0;\
  \ i--) {\n      if (factors[i] > maxFactor) {\n        maxFactor = factors[i];\n\
  \      }\n    }\n  }\n  return maxFactor;\n}\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n\
  }\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
  }\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
  \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (n %\
  \ i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime)\
  \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
  \ : -1;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  let p = n;\n  while (p % i === 0) {\n    p /= i;\n    i++;\n  }\n\
  \  return p;\n}\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n\
  }\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  while (maxFactor > 1) {\n\
  \    let i = 2;\n    while (i < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n\
  \        maxFactor = i;\n      }\n      i += 1;\n    }\n  }\n  if (maxFactor !=\
  \ n) return n;\n  return factors[factors.length - 1];\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  let factor: number = n;\n  while (i < n) {\n    if (n % i == 0)\
  \ {\n      factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n\
  }\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    }\n    isPrime = !isPrime;\n  }\n  if (isPrime) {\n    factors.push(1);\n\
  \  }\n  return factors[factors.length - 1];\n}\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n\
  }\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    isPrime = false;\n    for (let j = 0; j < factors.length; j++) {\n\
  \      if (n % factors[j] === 0) {\n        isPrime = true;\n        break;\n  \
  \    }\n    }\n    if (isPrime) {\n      factors.push(i);\n    }\n  }\n  return\
  \ factors.length ? Math.max.apply(null, factors) : -1;\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n   \
  \   factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
  }\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n\
  }\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    factors.push(n);\n\
  \  }\n  return factors[factors.length - 1];\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
  \ factors[factors.length - 1];\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 0;\n  let i: number;\n\
  \  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length\
  \ === 0) {\n    return 1;\n  }\n  return Math.max(...factors);\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
  \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] === maxFactor) {\n\
  \      maxFactorIndex = i;\n      break;\n    }\n  }\n  return factors[maxFactorIndex];\n\
  }\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors.length\
  \ ? Math.max(...factors) : -1;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2;\
  \ j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n    if (isPrime) {\n      factors.push(i);\n      if (i > maxFactor)\
  \ {\n        maxFactor = i;\n        maxFactorIndex = factors.length - 1;\n    \
  \  }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  return\
  \ factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let\
  \ i = 2;\n    while (i * i <= maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n\
  \        maxFactor = n / i;\n        break;\n      }\n      i += 1;\n    }\n  }\n\
  \  return factors.length ? Math.max(...factors) : -1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n      }\n  \
  \  }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
  \ -1;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors[factors.length - 1];\n}\n"
- "    let i = 2;\n    let p = 2;\n    while (i <= n && n % i == 0) {\n        i++;\n\
  \        p++;\n    }\n    return p;\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n   \
  \   factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n   \
  \   factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = factors.length\
  \ - 1; j >= 0; j--) {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n\
  \        break;\n      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
  \ (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n\
  \  }\n  return 1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n\
  \ / i; i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j\
  \ = i * i; j < n; j += i) {\n      isPrime = false;\n    }\n  }\n  return factors[factors.length\
  \ - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (n %\
  \ j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime)\
  \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
  \ : -1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factor: number = 1;\n  let factors: number[] = [];\n  for (let i = 2; i <=\
  \ n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n\
  \    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  return factors.length\
  \ ? Math.max(...factors) : -1;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
  \ factors[factors.length - 1];\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n\
  \    factor *= i;\n  }\n  return factor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? factors[factors.length - 1]\
  \ : 1;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n;\
  \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n   \
  \ }\n    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n\
  \ > 1) {\n    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors)\
  \ : -1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n\
  \  }\n  return -1;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factor: number = 1;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++)\
  \ {\n    if (n % i === 0) {\n      factor = i;\n      break;\n    }\n  }\n  return\
  \ factor;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factor: number = 0;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++)\
  \ {\n    if (n % i === 0) {\n      factor = i;\n      break;\n    }\n  }\n  return\
  \ factor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors.length\
  \ ? Math.max(...factors) : undefined;\n}\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n\
  }\n"
- "  let factor: number = 1;\n  let factors: number[] = [];\n  for (let i = 2; i <=\
  \ n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n\
  \    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  return factors[factors.length\
  \ - 1];\n}\n"
- "  let i = 2\n  let factor: number\n  while (i < n && n % i == 0) {\n    i += 1\n\
  \  }\n  factor = i\n  while (n > 1 && n % factor === 0) {\n    n /= factor\n   \
  \ factor++\n  }\n  return factor\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let\
  \ i = 2;\n    while (i < maxFactor) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \        maxFactor = i;\n      }\n      i++;\n    }\n    n--;\n  }\n  if (factors.length\
  \ > 0) {\n    return factors[factors.length - 1];\n  }\n  return 1;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
  \ factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n   \
  \   n = n / i;\n      factor = i;\n    } else {\n      i++;\n    }\n  }\n  return\
  \ factor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors.length\
  \ ? factors[factors.length - 1] : 1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (n %\
  \ j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime)\
  \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
  \ : -1;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
  \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    } else {\n      if (n % i !== 0) {\n        isPrime = false;\n   \
  \   }\n    }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n \
  \ }\n  return 1;\n}\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 2;\n  }\n  return i;\n\
  }\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 0;\n  for (let i = 2;\
  \ i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n\
  \    }\n    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  factors.push(1);\n\
  \  while (n > 1) {\n    maxFactor = Math.max(maxFactor, factors.length);\n    for\
  \ (let i = factors.length - 1; i >= 0; i--) {\n      if (factors[i] > n) {\n   \
  \     factors.splice(i, 1);\n      } else {\n        break;\n      }\n    }\n  \
  \  n--;\n  }\n  return maxFactor;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = factors.length\
  \ - 1; j >= 0; j--) {\n      if (n % factors[j] === 0) {\n        isPrime = false;\n\
  \        break;\n      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    }\n    isPrime = !isPrime;\n  }\n  if (isPrime) {\n    factors.push(n);\n\
  \  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n      }\n \
  \   }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return\
  \ -1;\n}\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n\
  }\n"
- "  let i = 2;\n  let p = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i == 0)\
  \ {\n      p = i;\n      break;\n    }\n    i += 1;\n  }\n  return p;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n;\
  \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n   \
  \ }\n    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n\
  \ > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let i = 2\n  let factor: number\n  while (i < n) {\n    if (n % i == 0) {\n \
  \     factor = i\n      break\n    }\n    i += 1\n  }\n  return factor\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n      }\n \
  \   }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
  \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n  \
  \    maxFactor = factors[i];\n      maxFactorIndex = i;\n    }\n  }\n  return factors[maxFactorIndex];\n\
  }\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    }\n    if (isPrime && n % i !== 0) {\n      isPrime = false;\n   \
  \ }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    }\n    if (!isPrime) {\n      for (var j = factors.length - 1; j >=\
  \ 0; j--) {\n        if (n % factors[j] === 0) {\n          isPrime = false;\n \
  \         break;\n        }\n      }\n    }\n  }\n  return factors.length ? factors[factors.length\
  \ - 1] : null;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
  }\n"
- "  let i = 2;\n  let p = 2;\n  while (i <= n && p < n) {\n    if (n % i == 0) {\n\
  \      p = i;\n    }\n    i += 2;\n  }\n  return p;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
  \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n  \
  \    maxFactor = factors[i];\n      maxFactorIndex = i;\n    }\n  }\n  return factors[maxFactorIndex];\n\
  }\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n\
  \    factor *= i;\n  }\n  return factor;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n;\
  \ i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
  \    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1)\
  \ {\n    factors.push(n);\n  }\n  return factors.length ? factors[factors.length\
  \ - 1] : 1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  return factors.length ? Math.max(...factors) : -1;\n}\n"
- "    let i = 2;\n    let p = 2;\n    let q = 3;\n    while (i <= n) {\n        if\
  \ (n % i == 0) {\n            n = n / i;\n            p = i;\n            q = i;\n\
  \        }\n        i++;\n    }\n    return q;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  factors.push(1);\n  while (n > 1) {\n    for (let\
  \ i = factors.length - 1; i >= 0; i--) {\n      if (n % factors[i] == 0) {\n   \
  \     maxFactor = factors[i];\n        maxFactorIndex = i;\n      }\n    }\n   \
  \ factors[maxFactorIndex] += 1;\n    n /= maxFactor;\n  }\n  return factors[0];\n\
  }\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n   \
  \   factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors.length\
  \ ? factors[factors.length - 1] : 1;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n  \
  \  if (n % i == 0) {\n      factors.push(i);\n    }\n  }\n  if (factors.length ==\
  \ 0) {\n    return 1;\n  }\n  return Math.max(...factors);\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 1;\n  let i: number;\n\
  \  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length\
  \ === 0) {\n    return 1;\n  }\n  return maxFactor;\n}\n"
- "  let i = 2\n  let p = 2\n  while (i < n) {\n    if (n % i == 0) {\n      p = i\n\
  \    }\n    i++\n  }\n  return p\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 0;\
  \ j < factors.length; j++) {\n      if (n % factors[j] === 0) {\n        isPrime\
  \ = false;\n      }\n    }\n    if (isPrime) {\n      factors.push(i);\n      if\
  \ (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
  \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
  \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      for (let j = 2; j < i; j++) {\n        if (n\
  \ % j === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n\
  \      if (isPrime) {\n        factors.push(i);\n      }\n    }\n  }\n  return factors.length\
  \ ? Math.max(...factors) : -1;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
  }\n"
- "    let i = 2;\n    let p = 2;\n    let q = n;\n    while (i <= q) {\n        if\
  \ (n % i == 0) {\n            p = i;\n            while (n % p == 0) {\n       \
  \         p = p * 2;\n            }\n        }\n        i++;\n    }\n    return\
  \ p;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
  \ (isPrime) {\n    factors.push(1);\n  }\n  return factors[factors.length - 1];\n\
  }\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 1;\n  let i: number;\n\
  \  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length\
  \ === 0) {\n    return 1;\n  }\n  return maxFactor;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n        maxFactorIndex = factors.length\
  \ - 1;\n      }\n    }\n  }\n  return factors[maxFactorIndex];\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n   \
  \   factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
  }\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    }\n    else {\n      if (n % i !== 0) {\n        isPrime = false;\n\
  \      }\n    }\n  }\n  if (isPrime) {\n    factors.push(1);\n  }\n  return factors[factors.length\
  \ - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n;\
  \ i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
  \    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1)\
  \ {\n    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) :\
  \ -1;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (n %\
  \ i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime)\
  \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
  \ : -1;\n}\n"
- "  let factor: number = 1;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++)\
  \ {\n    if (n % i == 0) {\n      factor = i;\n      break;\n    }\n  }\n  return\
  \ factor;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factor: number = 2\n  let i: number = 0\n  while (i < n) {\n    if (n % factor\
  \ === 0) {\n      n = n / factor\n      factor++\n    } else {\n      i++\n    }\n\
  \  }\n  return factor\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let\
  \ i = 2;\n    while (i < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n\
  \        maxFactor = i;\n      }\n      i += 1;\n    }\n  }\n  return factors[factors.length\
  \ - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 0;\n  for (let i = 2;\
  \ i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n\
  \ / i;\n    }\n  }\n  if (n > 1) {\n    for (let i = factors.length - 1; i >= 0;\
  \ i--) {\n      if (factors[i] > maxFactor) {\n        maxFactor = factors[i];\n\
  \      }\n    }\n  }\n  return maxFactor;\n}\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n\
  }\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
  \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n  \
  \    maxFactor = factors[i];\n      maxFactorIndex = i;\n    }\n  }\n  return factors[maxFactorIndex];\n\
  }\n"
- "  let i = 2;\n  let p = n;\n  while (p % i === 0) {\n    p /= i;\n    i += 1;\n\
  \  }\n  return p;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
  \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] === maxFactor) {\n\
  \      maxFactorIndex = i;\n      break;\n    }\n  }\n  return factors[maxFactorIndex];\n\
  }\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n   \
  \   factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n"
- "  let factor: number = 1;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++)\
  \ {\n    if (n % i == 0) {\n      factor = i;\n      break;\n    }\n  }\n  return\
  \ factor;\n}\n"
- "  let i = 2\n  let p = n\n  while (i < p && p % i === 0) {\n    ++i\n  }\n  return\
  \ i\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n = n / i;\n    }\n  }\n  if (n > 1) {\n    for (let i = 2; i <= maxFactor;\
  \ i++) {\n      if (n % i == 0) {\n        factors.push(i);\n        n = n / i;\n\
  \      }\n    }\n  }\n  if (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n\
  \      if (n % i == 0) {\n        factors.push(i);\n        n = n / i;\n      }\n\
  \    }\n  }\n  if (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n      if\
  \ (n % i == 0) {\n        factors.push(i);\n        n = n / i;\n      }\n    }\n\
  \  }\n  if (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n      if (n %\
  \ i == 0) {\n        factors.push(i);\n        n = n / i;\n      }\n    }\n  }\n\
  \  if (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n      if (n % i ==\
  \ 0) {\n        factors.push(i);\n        n = n / i;\n      }\n    }\n  }\n  if\
  \ (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n      if (n % i == 0) {\n\
  \        factors.push(i);\n        n = n / i;\n      }\n    }\n  }\n  if (n > 1)\
  \ {\n    for (let i = 2; i <= maxFactor; i++) {\n      if (n % i == 0) {\n     \
  \   factors.push(i);\n        n = n / i;\n      }\n    }\n  }\n  if (n > 1) {\n\
  \    for (let i = 2; i <= maxFactor; i++) {\n      if (n % i == 0) {\n        factors.push(i);\n\
  \        n = n / i;\n      }\n    }\n  }\n  if (n > 1) {\n    for (let i = 2; i\
  \ <= maxFactor; i++) {\n      if (n % i == 0) {\n        factors.push(i);\n    \
  \    n = n / i;\n      }\n    }\n  }\n  if (n > 1) {\n    for (let i = 2; i <= maxFactor;\
  \ i++) {\n      if (n % i == 0) {\n        factors.push(i);\n        n = n / i;\n\
  \      }\n    }\n  }\n  if (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n\
  \      if (n % i == 0) {\n        factors.push(i);\n        n = n / i;\n      }\n\
  \    }\n  }\n  if (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n      if\
  \ (n % i == 0) {\n        factors.push(i);\n        n = n / i;\n      }\n    }\n\
  \  }\n  if (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n      if (n %\
  \ i == 0) {\n        factors.push(i);\n        n = n / i;\n      }\n    }\n  }\n\
  \  if (n > 1) {\n    for (let i = 2; i <= maxFactor; i++) {\n      if (n % i ==\
  \ 0) {\n        factors.push(i);"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n\
  }\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
  }\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n\
  \ / i; i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    isPrime =\
  \ !isPrime;\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  let factor: number = 0;\n  while (maxFactorIndex < maxFactor) {\n    factor =\
  \ maxFactorIndex + 1;\n    while (n % factor === 0) {\n      factors.push(factor);\n\
  \      n /= factor;\n    }\n    maxFactorIndex = factors.length - 1;\n  }\n  if\
  \ (n > 1) {\n    factors.push(1);\n  }\n  return factors[factors.length - 1];\n\
  }\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n);\
  \ i++) {\n    if (isPrime) {\n      if (n % i === 0) {\n        factors.push(i);\n\
  \      }\n    }\n    if (n % i === 0) {\n      isPrime = false;\n    }\n  }\n  if\
  \ (isPrime) {\n    return factors[factors.length - 1];\n  }\n  return -1;\n}\n"
- "  let factor: number = 1;\n  let i: number;\n  for (i = 2; i <= n; i++) {\n   \
  \ if (n % i === 0) {\n      factor = i;\n      break;\n    }\n  }\n  return factor;\n\
  }\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors[factors.length - 1];\n}\n"
- "    let i = 2;\n    let p = 2;\n    let q = 3;\n    while (i <= n) {\n        if\
  \ (n % i == 0) {\n            n = n / i;\n            p = i;\n            q = i;\n\
  \        }\n        else {\n            i++;\n        }\n    }\n    return q;\n\
  }\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  for (let\
  \ i = factors.length - 1; i >= 0; i--) {\n    if (factors[i] > maxFactor) {\n  \
  \    maxFactor = factors[i];\n      maxFactorIndex = i;\n    }\n  }\n  return factors[maxFactorIndex];\n\
  }\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n\
  }\n"
- "  let i = 2\n  let factor: number\n  while (i < n) {\n    if (n % i == 0) {\n \
  \     factor = i\n      break\n    }\n    i++\n  }\n  return factor\n}\n"
- "    let i = 2;\n    let p = 2;\n    while (i <= n && n % i == 0) {\n        i++;\n\
  \        p++;\n    }\n    return p;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n;\
  \ i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
  \    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n > 1)\
  \ {\n    factors.push(n);\n  }\n  for (let i = factors.length - 1; i >= 0; i--)\
  \ {\n    if (factors[i] > maxFactor) {\n      maxFactor = factors[i];\n    }\n \
  \ }\n  return maxFactor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n\
  \    factors.push(n);\n  }\n  return factors.length ? Math.max(...factors) : -1;\n\
  }\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  while (n > 1) {\n    while\
  \ (n % 2 == 0) {\n      factors.push(2);\n      n = n / 2;\n    }\n    while (n\
  \ % 3 == 0) {\n      factors.push(3);\n      n = n / 3;\n    }\n    while (n % 5\
  \ == 0) {\n      factors.push(5);\n      n = n / 5;\n    }\n    while (n % 7 ==\
  \ 0) {\n      factors.push(7);\n      n = n / 7;\n    }\n  }\n  return factors[factors.length\
  \ - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n      }\n \
  \   }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (n %\
  \ i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime)\
  \ {\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max(...factors)\
  \ : -1;\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i <= n && n % i == 0) {\n    i += 1;\n\
  \    factor *= i;\n  }\n  return factor;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 0;\n  for (let i = 2;\
  \ i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n\
  \    }\n    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if\
  \ (n > 1) {\n    factors.push(n);\n  }\n  for (let i = factors.length - 1; i >=\
  \ 0; i--) {\n    if (factors[i] > maxFactor) {\n      maxFactor = factors[i];\n\
  \    }\n  }\n  return maxFactor;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n\
  \  }\n  return -1;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n\
  \  }\n  return -1;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      for (let j = i; j < n; j += i) {\n        factors.push(j);\n\
  \      }\n    }\n    isPrime = !isPrime;\n  }\n  return factors[factors.length -\
  \ 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % i == 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n\
  \  }\n  return -1;\n}\n"
- "  let factor: number = 2;\n  let i: number;\n  for (i = 2; i <= Math.sqrt(n); i++)\
  \ {\n    if (n % i == 0) {\n      factor = i;\n      break;\n    }\n  }\n  return\
  \ factor;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      for (let j = 2; j < i; j++) {\n        if (n\
  \ % j === 0) {\n          isPrime = false;\n          break;\n        }\n      }\n\
  \      if (isPrime) {\n        factors.push(i);\n      }\n    }\n  }\n  return factors[factors.length\
  \ - 1];\n}\n"
- "    let i = 2;\n    let p = 2;\n    let q = 2;\n    while (i <= n) {\n        if\
  \ (n % i == 0) {\n            while (n % i == 0) {\n                p = i;\n   \
  \             n /= i;\n            }\n            break;\n        }\n        i++;\n\
  \    }\n    if (n > 1) {\n        while (p < n) {\n            while (q < n) {\n\
  \                n -= q;\n                q += p;\n                p = q;\n    \
  \        }\n            p++;\n        }\n    }\n    return n;\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n) {\n    if (n % i == 0) {\n   \
  \   factor = i;\n      break;\n    }\n    i += 1;\n  }\n  return factor;\n}\n"
- "  let factors: number[] = [];\n  for (let i = 2; i <= n; i++) {\n    while (n %\
  \ i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors.length\
  \ ? Math.max(...factors) : undefined;\n}\n"
- "  let i = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n  }\n  return i;\n\
  }\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = 0;\n  for (let i = 2; i <= n;\
  \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n   \
  \ }\n    if (n > 1) {\n      factors.push(n);\n      n = 1;\n    }\n  }\n  if (n\
  \ > 1) {\n    factors.push(n);\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let\
  \ i = 2;\n    while (i < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n\
  \        maxFactor = i;\n      }\n      i += 1;\n    }\n  }\n  if (factors.length\
  \ == 0) return 1;\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let\
  \ i = 2;\n    while (i < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n\
  \        maxFactor = i;\n      }\n      i += 1;\n    }\n  }\n  return factors.length\
  \ ? Math.max(...factors) : -1;\n}\n"
- "  let i = 2;\n  let p = n;\n  while (p % i === 0) {\n    p /= i;\n    i += 1;\n\
  \  }\n  return p;\n}\n"
- "  let i = 2\n  let factor = 2\n  while (i < n) {\n    if (n % i == 0) {\n     \
  \ factor = i\n      break\n    }\n    i++\n  }\n  return factor\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 0;\n  let i: number;\n\
  \  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n\
  \      if (i > maxFactor) {\n        maxFactor = i;\n      }\n    }\n  }\n  if (factors.length\
  \ === 0) {\n    return 1;\n  }\n  return factors[factors.length - 1];\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  while (n > 1) {\n    let\
  \ i = 2;\n    while (i < maxFactor) {\n      if (n % i == 0) {\n        factors.push(i);\n\
  \        maxFactor = i;\n      }\n      i += 1;\n    }\n  }\n  return factors.length\
  \ ? Math.max(...factors) : -1;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2\n  let factor: number\n  while (i < n && n % i == 0) {\n    i += 1\n\
  \  }\n  factor = i\n  while (n > 1 && n % i == 0) {\n    n /= i\n    factor++\n\
  \  }\n  return factor\n}\n"
- "  let factors: number[] = [];\n  let maxFactor: number = 0;\n  for (let i = 2;\
  \ i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n = n\
  \ / i;\n    }\n  }\n  factors.push(1);\n  while (n > 1) {\n    while (n % 2 == 0)\
  \ {\n      factors.push(2);\n      n = n / 2;\n    }\n    while (n % 3 == 0) {\n\
  \      factors.push(3);\n      n = n / 3;\n    }\n    while (n % 5 == 0) {\n   \
  \   factors.push(5);\n      n = n / 5;\n    }\n  }\n  return factors[factors.length\
  \ - 1];\n}\n"
- "  let factors: number[] = [];\n  let isPrime = true;\n  for (let i = 2; i <= n;\
  \ i++) {\n    if (isPrime) {\n      factors.push(i);\n    }\n    for (let j = 2;\
  \ j < i; j++) {\n      if (n % j === 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n  }\n  if (isPrime) {\n    return factors[factors.length - 1];\n\
  \  }\n  return -1;\n}\n"
- "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    }\
  \ else {\n      i = i + 1;\n    }\n  }\n  return i;\n}\n"
- "  let i = 2;\n  let factor = 2;\n  while (i < n && n % i == 0) {\n    i += 1;\n\
  \    factor *= i;\n  }\n  return factor;\n}\n"
- "  let factors: number[] = [];\n  let maxFactor = n;\n  let maxFactorIndex = 0;\n\
  \  for (let i = 2; i <= maxFactor; i++) {\n    while (n % i === 0) {\n      factors.push(i);\n\
  \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n  }\n  if (factors.length\
  \ > 0) {\n    maxFactorIndex = factors.length - 1;\n  }\n  return factors[maxFactorIndex];\n\
  }\n"
language: ts
name: HumanEval_59_largest_prime_factor
prompt: '//Return the largest prime factor of n. Assume n > 1 and is not a prime.

  // >>> largest_prime_factor(13195)

  // 29

  // >>> largest_prime_factor(2048)

  // 2

  function largest_prime_factor(n: number): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
