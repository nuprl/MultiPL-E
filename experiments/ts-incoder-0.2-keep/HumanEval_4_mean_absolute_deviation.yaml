name: HumanEval_4_mean_absolute_deviation
language: humaneval_to_typescript.py
prompt: "//For a given list of input numbers, calculate Mean Absolute Deviation\n\
  // around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute\
  \ difference between each\n// element and a centerpoint (mean in this case):\n//\
  \ MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  // 1.0\nfunction mean_absolute_deviation(numbers: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = mean_absolute_deviation;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0]),0.5);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0]),1.0);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),1.2);\n}\n\ntest();"
completions: ["  let mean: number = numbers.reduce((sum, value) => sum + value, 0)\
    \ / numbers.length;\n  return numbers.reduce((sum, value) => Math.abs(value -\
    \ mean) < sum ? Math.abs(value - mean) : sum, 0);\n}\n", "  const mean: number\
    \ = mean(numbers);\n  const deviations: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    const deviation = numbers[i] - mean;\n    deviations.push(deviation);\n\
    \  }\n  return mean(deviations);\n}\n", "  const n = numbers.length;\n  if (n\
    \ < 2) {\n    throw new Error(\"Mean Absolute Deviation requires at least two\
    \ data points\");\n  }\n  const mean = numbers.reduce((sum, value) => sum + value,\
    \ 0) / n;\n  return numbers.reduce((sum, value) => (sum + Math.abs(value - mean)),\
    \ 0) / n;\n}\n", "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"\
    Mean Absolute Deviation requires at least two data points\");\n  }\n  const mean\
    \ = numbers.reduce((sum, value) => sum + value, 0) / n;\n  const deviations =\
    \ numbers.map(value => {\n    const diff = value - mean;\n    return diff * diff;\n\
    \  });\n  return deviations.reduce((sum, deviation) => sum + deviation, 0) / n;\n\
    }\n", "  let mean: number = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n\
    \  return numbers.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b, 0) /\
    \ numbers.length;\n}\n", "  const mean: number = mean(numbers);\n  const deviations:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    deviations.push(Math.pow(numbers[i]\
    \ - mean, 2));\n  }\n  return mean(deviations);\n}\n", "  let mean = mean_(numbers);\n\
    \  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i]\
    \ - mean);\n  }\n  return sum / numbers.length;\n}\n", "  const mean = mean(numbers);\n\
    \  return deviation(numbers, mean);\n}\n", "  const mean: number = mean(numbers);\n\
    \  return deviation(numbers, mean);\n}\n", "  const n = numbers.length;\n  if\
    \ (n < 2) {\n    throw new Error(\"Mean Absolute Deviation requires at least two\
    \ data points.\");\n  }\n  const mean = sum(numbers) / n;\n  const deviations\
    \ = numbers.map(function(x) {\n    return Math.pow((x - mean), 2);\n  });\n  return\
    \ mean(deviations);\n}\n", "  const n = numbers.length;\n  if (n < 2) {\n    throw\
    \ new Error(\"Mean Absolute Deviation requires at least two data points\");\n\
    \  }\n  const mean = sum(numbers) / n;\n  const deviations = numbers.map((x) =>\
    \ Math.abs(x - mean));\n  return mean(deviations);\n}\n", "  const n = numbers.length;\n\
    \  if (n === 0) return NaN;\n  const mean = sum(numbers) / n;\n  const deviations\
    \ = numbers.map(x => Math.pow(x-mean, 2));\n  return mean(deviations);\n}\n",
  "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"Mean Absolute\
    \ Deviation requires at least two data points.\");\n  }\n  const mean = numbers.reduce((sum,\
    \ value) => sum + value, 0) / n;\n  const deviations = numbers.map(value => Math.pow(value\
    \ - mean, 2));\n  return deviations.reduce((sum, deviation) => sum + deviation,\
    \ 0) / n;\n}\n", "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"\
    Mean Absolute Deviation requires at least two data points\");\n  }\n  const mean\
    \ = sum(numbers) / n;\n  const sumOfSquares = numbers.map(x => Math.pow((x - mean),\
    \ 2));\n  return Math.sqrt(sum(sumOfSquares) / n);\n}\n", "  const n = numbers.length;\n\
    \  if (n < 2) {\n    throw new Error(\"Mean Absolute Deviation requires at least\
    \ two data points.\");\n  }\n  const mean = numbers.reduce((sum, value) => sum\
    \ + value, 0) / n;\n  const deviations = numbers.map(value => {\n    const diff\
    \ = value - mean;\n    return diff * diff;\n  });\n  return deviations.reduce((sum,\
    \ deviation) => sum + deviation, 0) / n;\n}\n", "  const mean: number = mean(numbers);\n\
    \  const deviations: number[] = [];\n  for (let i = 0; i < numbers.length; i++)\
    \ {\n    deviations.push(Math.pow(numbers[i] - mean, 2));\n  }\n  return mean(deviations);\n\
    }\n", "  let mean: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    mean += Math.abs(numbers[i] - mean);\n  }\n  return mean / numbers.length;\n\
    }\n", "  var mean = mean_(numbers);\n  var squared_deviation = 0;\n  for (var\
    \ i = 0; i < numbers.length; i++) {\n    var diff = numbers[i] - mean;\n    squared_deviation\
    \ += diff * diff;\n  }\n  return Math.sqrt(squared_deviation / numbers.length);\n\
    }\n", "  const n = numbers.length;\n  if (n < 2) {\n    throw new Error(\"Mean\
    \ Absolute Deviation requires at least two data points.\");\n  }\n  const mean\
    \ = numbers.reduce((sum, value) => sum + value, 0) / n;\n  const deviations =\
    \ numbers.map(value => Math.abs(value - mean));\n  return deviations.reduce((sum,\
    \ deviation) => sum + deviation, 0) / n;\n}\n", "  let mean: number = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    mean += Math.abs(numbers[i] - mean);\n\
    \  }\n  return mean / numbers.length;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
