language: ts
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp6bn_ta5k.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6bn_ta5k.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result = [];\n    let max = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > max) {\n            result.push(numbers[i]);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpn771q8gy.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn771q8gy.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7lsoj9b5.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738566
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ currentIndex: number[] = [];\n  let currentMax: number[] = [];\n  let currentMaxIndex:\
    \ number[] = [];\n  let currentMaxIndex2: number[] = [];\n  let currentMaxIndex3:\
    \ number[] = [];\n  let currentMaxIndex4: number[] = [];\n  let currentMaxIndex5:\
    \ number[] = [];\n  let currentMaxIndex6: number[] = [];\n  let currentMaxIndex7:\
    \ number[] = [];\n  let currentMaxIndex8: number[] = [];\n  let currentMaxIndex9:\
    \ number[] = [];\n  let currentMaxIndex10: number[] = [];\n  let currentMaxIndex11:\
    \ number[] = [];\n  let currentMaxIndex12: number[] = [];\n  let currentMaxIndex13:\
    \ number[] = [];\n  let currentMaxIndex14: number[] = [];\n  let currentMaxIndex15:\
    \ number[] = [];\n  let currentMaxIndex16: number[] = [];\n  let currentMaxIndex17:\
    \ number[] = [];\n  let currentMaxIndex18: number[] = [];\n  let currentMaxIndex19:\
    \ number[] = [];\n  let currentMaxIndex20: number[] = [];\n  let currentMaxIndex21:\
    \ number[] = [];\n  let currentMaxIndex22: number[] = [];\n  let currentMaxIndex23:\
    \ number[] = [];\n  let currentMaxIndex24: number[] = [];\n  let currentMaxIndex25:\
    \ number[] = [];\n  let currentMaxIndex26: number[] = [];\n  let currentMaxIndex27:\
    \ number[] = [];\n  let currentMaxIndex28: number[] = [];\n  let currentMaxIndex29:\
    \ number[] = [];\n  let currentMaxIndex30: number[] = [];\n  let currentMaxIndex31:\
    \ number[] = [];\n  let currentMaxIndex32: number[] = [];\n  let currentMaxIndex33:\
    \ number[] = [];\n  let currentMaxIndex34: number[] = [];\n  let currentMaxIndex35:\
    \ number[] = [];\n  let currentMaxIndex36: number[] = [];\n  let currentMaxIndex37:\
    \ number[] = [];\n  let currentMaxIndex38: number[] = [];\n  let currentMaxIndex39:\
    \ number[] = [];\n  let currentMaxIndex40: number[] = [];\n  let currentMaxIndex41:\
    \ number[] = [];\n  let currentMaxIndex42: number[] = [];\n  let currentMaxIndex43:\
    \ number[] = [];\n  let currentMaxIndex44: number[] = [];\n  let currentMaxIndex45:\
    \ number[] = [];\n  let currentMaxIndex46: number[] = [];\n  let currentMaxIndex47:\
    \ number[] = [];\n  let currentMaxIndex48: number[] = [];\n  let currentMaxIndex49:\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphm5ktlas.ts(59,9): error TS1005: '','' expected.

    ../../../../../tmp/tmphm5ktlas.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var currentMax: number = 0;\n\
    \    var currentIndex: number = 0;\n    while (currentIndex < numbers.length)\
    \ {\n        if (numbers[currentIndex] > currentMax) {\n            currentMax\
    \ = numbers[currentIndex];\n        }\n        currentIndex++;\n    }\n    for\
    \ (var i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.unshift(numbers[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpqz31oi0j.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqz31oi0j.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value\
    \ < numbers[i]) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n \
    \   if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpg1faei7n.js:26:12)\n    at Object.<anonymous> (/tmp/tmpg1faei7n.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmpasktsq93.js:18:12)\n    at Object.<anonymous> (/tmp/tmpasktsq93.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let max_index = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rolling_max[max_index])\
    \ {\n      rolling_max[max_index] = numbers[i];\n      max_index++;\n    }\n \
    \ }\n  return rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp0e_l93ke.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0e_l93ke.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  let rolling_max_number:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_number\
    \ = Math.max(rolling_max_number, numbers[i]);\n    rolling_max_result.push(rolling_max_number);\n\
    \  }\n  return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpps90mm2k.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpps90mm2k.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  let\
    \ currentIndex: number[] = [];\n  let currentIndexMax: number[] = [];\n  let currentIndexMaxIndex:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex: number[] = [];\n  let currentIndexMaxIndexIndex2:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex3: number[] = [];\n  let currentIndexMaxIndexIndex4:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex5: number[] = [];\n  let currentIndexMaxIndexIndex6:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex7: number[] = [];\n  let currentIndexMaxIndexIndex8:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex9: number[] = [];\n  let currentIndexMaxIndexIndex10:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex11: number[] = [];\n  let currentIndexMaxIndexIndex12:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex13: number[] = [];\n  let currentIndexMaxIndexIndex14:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex15: number[] = [];\n  let currentIndexMaxIndexIndex16:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex17: number[] = [];\n  let currentIndexMaxIndexIndex18:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex19: number[] = [];\n  let currentIndexMaxIndexIndex20:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex21: number[] = [];\n  let currentIndexMaxIndexIndex22:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex23: number[] = [];\n  let currentIndexMaxIndexIndex24:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex25: number[] = [];\n  let currentIndexMaxIndexIndex26:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex27: number[] = [];\n  let currentIndexMaxIndexIndex28:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex29: number[] = [];\n  let currentIndexMaxIndexIndex30:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex31: number[] = [];\n  let currentIndexMaxIndexIndex32:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex33: number[] = [];\n  let currentIndexMaxIndexIndex34:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex35: number[] = [];\n  let currentIndexMaxIndexIndex36:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex37: number[] = [];\n  let currentIndexMaxIndexIndex38:\
    \ number[] = [];\n  let currentIndexMaxIndexIndex39: number[] = [];\n  let currentIndexMaxIndexIndex40\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0zo8zhqg.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738566
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  let rolling_max_number:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_number\
    \ = Math.max(rolling_max_number, numbers[i]);\n    rolling_max_result.push(rolling_max_number);\n\
    \  }\n  return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let current: number[] = [];\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max[max.length\
    \ - 1]) {\n            max = current.slice();\n            current.push(numbers[i]);\n\
    \        } else {\n            current.push(numbers[i]);\n        }\n    }\n \
    \   return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpyn63_1y2.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyn63_1y2.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    let maxIndex = i;\n    for (let j = i + 1; j < numbers.length; j++)\
    \ {\n      if (numbers[j] > numbers[maxIndex]) {\n        maxIndex = j;\n    \
    \  }\n    }\n    max.push(numbers[maxIndex]);\n  }\n  return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmphzfjhk3m.js:22:12)\n    at Object.<anonymous> (/tmp/tmphzfjhk3m.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    rolling_max_array.push(Math.max(...numbers));\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmppsh76n8v.js:16:12)\n    at Object.<anonymous> (/tmp/tmppsh76n8v.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let max_number: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_number)\
    \ {\n      rolling_max_array.push(max_number);\n      max_number = numbers[i];\n\
    \    } else {\n      rolling_max_array.push(numbers[i]);\n    }\n  }\n  rolling_max_array.push(max_number);\n\
    \  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp3fpg9mmv.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp3fpg9mmv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result = [];\n    let currentMax = numbers[0];\n    let\
    \ currentIndex = -1;\n    for (let i = 1; i < numbers.length; i++) {\n       \
    \ if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n     \
    \       currentIndex = i;\n        }\n    }\n    result.push(currentMax);\n  \
    \  for (let i = currentIndex + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp43e__oyw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp43e__oyw.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  let rolling_max_number:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_number\
    \ < numbers[i]) {\n      rolling_max_number = numbers[i];\n    }\n    rolling_max_result.push(rolling_max_number);\n\
    \  }\n  return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp_kg0uiel.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_kg0uiel.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    let maxIndex = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n            maxIndex = i;\n        }\n   \
    \ }\n    for (let i = maxIndex + 1; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpe8p46xl8.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe8p46xl8.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  let\
    \ currentMaxIndex: number[] = [];\n  let currentMaxIndexIndex: number[] = [];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax[currentMaxIndexIndex])\
    \ {\n      currentMax[currentMaxIndexIndex] = numbers[i];\n      currentMaxIndex[currentMaxIndexIndex]\
    \ = i;\n      currentMaxIndexIndex[currentMaxIndexIndex] = currentMaxIndexIndex[currentMaxIndexIndex\
    \ - 1];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > currentMax[currentMaxIndexIndex]) {\n      currentMax[currentMaxIndexIndex]\
    \ = numbers[i];\n      currentMaxIndex[currentMaxIndexIndex] = i;\n      currentMaxIndexIndex[currentMaxIndexIndex]\
    \ = currentMaxIndexIndex[currentMaxIndexIndex - 1];\n    }\n  }\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax[currentMaxIndexIndex])\
    \ {\n      currentMax[currentMaxIndexIndex] = numbers[i];\n      currentMaxIndex[currentMaxIndexIndex]\
    \ = i;\n      currentMaxIndexIndex[currentMaxIndexIndex] = currentMaxIndexIndex[currentMaxIndexIndex\
    \ - 1];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > currentMax[currentMaxIndexIndex]) {\n      currentMax[currentMaxIndexIndex]\
    \ = numbers[i];\n      currentMaxIndex[currentMaxIndexIndex] = i;\n      currentMaxIndexIndex[currentMaxIndexIndex]\
    \ = currentMaxIndexIndex[currentMaxIndexIndex - 1];\n    }\n  }\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax[currentMaxIndexIndex])\
    \ {\n      currentMax[currentMaxIndexIndex] = numbers[i];\n      currentMaxIndex[currentMaxIndexIndex]\
    \ = i;\n      currentMaxIndexIndex[currentMaxIndexIndex] = currentMaxIndexIndex[currentMaxIndexIndex\
    \ - 1];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > currentMax[currentMaxIndexIndex]) {\n      currentMax[currentMaxIndexIndex]\
    \ = numbers[i];\n      currentMaxIndex[currentMaxIndexIndex] = i;\n      currentMaxIndexIndex[currentMaxIndexIndex]\
    \ = currentMaxIndexIndex[currentMaxIndexIndex - 1];\n    }\n  }\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax[currentMaxIndexIndex])\
    \ {\n      currentMax[currentMaxIndexIndex] = numbers[i];\n      currentMaxIndex[currentMaxIndexIndex]\
    \ = i;\n      currentMaxIndexIndex[currentMaxIndexIndex] = currentMaxIndexIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppqsuc9mi.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = 0;\n\
    \    let currentIndex: number = 0;\n    while (currentIndex < numbers.length)\
    \ {\n        if (numbers[currentIndex] > currentMax) {\n            currentMax\
    \ = numbers[currentIndex];\n        }\n        currentIndex++;\n    }\n    for\
    \ (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.unshift(numbers[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp73dzp7sa.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp73dzp7sa.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_maxes: number[] = [];\n    let rolling_max: number[]\
    \ = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuctogpec.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp6bn_ta5k.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6bn_ta5k.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = 0;\n\
    \    let currentIndex: number = 0;\n    while (currentIndex < numbers.length)\
    \ {\n        if (numbers[currentIndex] > currentMax) {\n            currentMax\
    \ = numbers[currentIndex];\n        }\n        currentIndex++;\n    }\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.push(currentMax);\n            currentMax = numbers[i];\n\
    \        }\n    }\n    result.push(currentMax);\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpmfraqdcy.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpmfraqdcy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_value: number[] = [];\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpincx2vj3.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var max: number = 0;\n    var\
    \ i: number;\n    for (i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n    }\n    for (i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n\
    \            max = numbers[i];\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpnwn7qmna.js:30:12)\n    at Object.<anonymous> (/tmp/tmpnwn7qmna.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const max_rolling_number = numbers[0];\n  for (let i = 1; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > max_rolling_number) {\n      max_rolling_number\
    \ = numbers[i];\n    }\n  }\n  return max_rolling_number;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw2pjxatu.ts(9,7): error TS2588: Cannot assign to
    ''max_rolling_number'' because it is a constant.

    ../../../../../tmp/tmpw2pjxatu.ts(12,3): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp8w3kdnmx.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8w3kdnmx.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpps90mm2k.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpps90mm2k.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_value = numbers[0];\n  let max_index = 0;\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_value) {\n     \
    \ max_value = numbers[i];\n      max_index = i;\n    }\n  }\n  return numbers.slice(0,\
    \ max_index + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpwy51txu9.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwy51txu9.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  let rolling_max_number:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_number) {\n      rolling_max_number = numbers[i];\n    }\n  }\n\
    \  rolling_max_result.push(rolling_max_number);\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > rolling_max_number) {\n      rolling_max_number\
    \ = numbers[i];\n    }\n    rolling_max_result.push(rolling_max_number);\n  }\n\
    \  return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp8hsg1rc9.js:25:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8hsg1rc9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n \
    \   }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpps90mm2k.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpps90mm2k.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let maxIndexIndex: number[] = [];\n    let maxIndexIndexIndex: number[] =\
    \ [];\n    let maxIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg4selhr4.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747949
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_list: number[] = [];\n    let rolling_max_value:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (rolling_max_index >= numbers.length - 1)\
    \ {\n            rolling_max_list.push(rolling_max_value);\n            rolling_max_value\
    \ = 0;\n            rolling_max_index = 0;\n        } else {\n            if (numbers[i]\
    \ > rolling_max_value) {\n                rolling_max_value = numbers[i];\n  \
    \              rolling_max_index = i;\n            }\n        }\n    }\n    return\
    \ rolling_max_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmppco1c83p.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmppco1c83p.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n        else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpt8xsrzex.js:29:12)\n    at Object.<anonymous> (/tmp/tmpt8xsrzex.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let rolling_max: number[] = [];\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    rolling_max.push(numbers[i]);\n\
    \    if (numbers[i] > rolling_max[rolling_max.length - 1]) {\n      rolling_max.push(numbers[i]);\n\
    \    }\n  }\n  for (let i = 0; i < rolling_max.length; i++) {\n    max = max.concat(rolling_max);\n\
    \  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  1,\n  2,\n  3,\n  4,\n  1,\n  2,\n  3,\n  4,\n  1,\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpzqhf_i4b.js:23:12)\n    at Object.<anonymous> (/tmp/tmpzqhf_i4b.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4, 1, 2,\n    3, 4, 1, 2, 3, 4,\n    1, 2, 3, 4\n  ],\n  expected: [ 1,\
    \ 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value\
    \ < numbers[i]) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738566
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_value\
    \ < numbers[i]) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       } else {\n            result.push(numbers[i]);\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmprsmvdyu4.js:28:12)\n    at Object.<anonymous> (/tmp/tmprsmvdyu4.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(max);\n      max = numbers[i];\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpn8ys8a64.js:29:12)\n    at Object.<anonymous> (/tmp/tmpn8ys8a64.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_index\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_index\
    \ >= numbers.length - 1) {\n      rolling_max_array.push(numbers[i]);\n    } else\
    \ {\n      if (numbers[i] > rolling_max_array[rolling_max_index]) {\n        rolling_max_array.push(numbers[i]);\n\
    \      }\n    }\n    rolling_max_index++;\n  }\n  return rolling_max_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpvhpxluid.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvhpxluid.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let max_element: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_element)\
    \ {\n      max_element = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    rolling_max_array.push(max_element);\n  }\n  return rolling_max_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpndwoxdve.js:22:12)\n    at Object.<anonymous> (/tmp/tmpndwoxdve.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let rolling_max: number[] = [];\n\
    \    let i: number;\n    let j: number;\n    let k: number;\n    let maxIndex:\
    \ number = 0;\n    let rollingMaxIndex: number = 0;\n    let maxIndex2: number\
    \ = 0;\n    let rollingMaxIndex2: number = 0;\n    let maxIndex3: number = 0;\n\
    \    let rollingMaxIndex3: number = 0;\n    let maxIndex4: number = 0;\n    let\
    \ rollingMaxIndex4: number = 0;\n    let maxIndex5: number = 0;\n    let rollingMaxIndex5:\
    \ number = 0;\n    let maxIndex6: number = 0;\n    let rollingMaxIndex6: number\
    \ = 0;\n    let maxIndex7: number = 0;\n    let rollingMaxIndex7: number = 0;\n\
    \    let maxIndex8: number = 0;\n    let rollingMaxIndex8: number = 0;\n    let\
    \ maxIndex9: number = 0;\n    let rollingMaxIndex9: number = 0;\n    let maxIndex10:\
    \ number = 0;\n    let rollingMaxIndex10: number = 0;\n    let maxIndex11: number\
    \ = 0;\n    let rollingMaxIndex11: number = 0;\n    let maxIndex12: number = 0;\n\
    \    let rollingMaxIndex12: number = 0;\n    let maxIndex13: number = 0;\n   \
    \ let rollingMaxIndex13: number = 0;\n    let maxIndex14: number = 0;\n    let\
    \ rollingMaxIndex14: number = 0;\n    let maxIndex15: number = 0;\n    let rollingMaxIndex15:\
    \ number = 0;\n    let maxIndex16: number = 0;\n    let rollingMaxIndex16: number\
    \ = 0;\n    let maxIndex17: number = 0;\n    let rollingMaxIndex17: number = 0;\n\
    \    let maxIndex18: number = 0;\n    let rollingMaxIndex18: number = 0;\n   \
    \ let maxIndex19: number = 0;\n    let rollingMaxIndex19: number = 0;\n    let\
    \ maxIndex20: number = 0;\n    let rollingMaxIndex20: number = 0;\n    let maxIndex21:\
    \ number = 0;\n    let rollingMaxIndex21: number = 0;\n    let maxIndex22: number\
    \ = 0;\n    let rollingMaxIndex22: number = 0;\n    let maxIndex23: number = 0;\n\
    \    let rollingMaxIndex23: number = 0;\n    let maxIndex24: number = 0;\n   \
    \ let rollingMaxIndex24: number = 0;\n    let maxIndex25: number = 0;\n    let\
    \ rollingMaxIndex25: number = 0;\n    let maxIndex26: number = 0;\n    let rollingMaxIndex26:\
    \ number = 0;\n    let maxIndex27: number = 0;\n    let rollingMaxIndex27: number\
    \ = 0;\n    let maxIndex28: number = 0;\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5hc515jd.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_result: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (rolling_max_number < numbers[i]) {\n   \
    \         rolling_max_number = numbers[i];\n            rolling_max_index = i;\n\
    \        }\n    }\n    rolling_max_result.push(rolling_max_number);\n    for (let\
    \ i = rolling_max_index + 1; i < numbers.length; i++) {\n        if (rolling_max_number\
    \ < numbers[i]) {\n            rolling_max_number = numbers[i];\n            rolling_max_index\
    \ = i;\n        }\n        rolling_max_result.push(rolling_max_number);\n    }\n\
    \    return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpkcd6yla_.js:28:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpkcd6yla_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp6bn_ta5k.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6bn_ta5k.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max_array: number[] = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    let rolling_max_found = false;\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] >= rolling_max_value)\
    \ {\n            rolling_max_found = true;\n            rolling_max_value = numbers[i];\n\
    \            rolling_max_index = i;\n        }\n    }\n    if (rolling_max_found)\
    \ {\n        rolling_max_array.push(rolling_max_value);\n        rolling_max_array.push(numbers[rolling_max_index]);\n\
    \    }\n    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpu7wohoer.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu7wohoer.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp8w3kdnmx.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8w3kdnmx.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_numbers: number[] = [];\n  let max_number: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_number)\
    \ {\n      max_number = numbers[i];\n    }\n    rolling_max_numbers.push(max_number);\n\
    \  }\n  return rolling_max_numbers;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1d0c_dz3.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1d0c_dz3.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp2dlqxjs2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2dlqxjs2.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_arr: number[] = [];\n  let rolling_max_num:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_num) {\n      rolling_max_num = numbers[i];\n    }\n  }\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rolling_max_num)\
    \ {\n      rolling_max_arr.push(rolling_max_num);\n      rolling_max_num = numbers[i];\n\
    \    }\n  }\n  rolling_max_arr.push(rolling_max_num);\n  return rolling_max_arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpyakniati.js:25:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpyakniati.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_index\
    \ = 0;\n    let rolling_max_value = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > rolling_max_value) {\n            rolling_max_value\
    \ = numbers[i];\n            rolling_max_index = i;\n        }\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \    for (let i = numbers.length - 1; i >= 0; i--) {\n        if (numbers[i] >\
    \ rolling_max_value) {\n            rolling_max_array.push(numbers[i]);\n    \
    \    }\n    }\n    return rolling_max_array;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpf7xm2bhp.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf7xm2bhp.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let rolling_max: number[] = [];\n    let max_element: number\
    \ = numbers[0];\n    let max_index: number = numbers.length - 1;\n    for (let\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_element) {\n\
    \            max_element = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    rolling_max.push(max_element);\n    for (let i = max_index; i > 0;\
    \ i--) {\n        rolling_max.push(numbers[i]);\n    }\n    return rolling_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpsmoehnkd.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsmoehnkd.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp_kg0uiel.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_kg0uiel.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const max_rolling_numbers: number[] = [];\n  let max_rolling_numbers_length\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_rolling_numbers[max_rolling_numbers_length\
    \ - 1]) {\n      max_rolling_numbers_length++;\n      max_rolling_numbers.push(numbers[i]);\n\
    \    } else {\n      max_rolling_numbers[max_rolling_numbers_length - 1] = numbers[i];\n\
    \    }\n  }\n  return max_rolling_numbers;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmpfrdj9fwt.js:23:12)\n    at Object.<anonymous> (/tmp/tmpfrdj9fwt.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ '-1': 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let max_element: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_element)\
    \ {\n      rolling_max = [max_element];\n      max_element = numbers[i];\n   \
    \ } else {\n      rolling_max.push(max_element);\n      max_element = numbers[i];\n\
    \    }\n  }\n  return rolling_max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpdzcm5or3.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdzcm5or3.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_rolling_number: number[] = [];\n  let max_rolling_number_index:\
    \ number[] = [];\n  let max_rolling_number_index_index: number[] = [];\n  let\
    \ max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqrl7mqti.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max_rolling_number: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_value: number[] = [];\n    let max_rolling_number_length:\
    \ number[] = [];\n    let max_rolling_number_length_index: number[] = [];\n  \
    \  let max_rolling_number_length_value: number[] = [];\n    let max_rolling_number_length_sum:\
    \ number[] = [];\n    let max_rolling_number_length_sum_index: number[] = [];\n\
    \    let max_rolling_number_length_sum_value: number[] = [];\n    let max_rolling_number_length_sum_length:\
    \ number[] = [];\n    let max_rolling_number_length_sum_length_index: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_value: number[] = [];\n\
    \    let max_rolling_number_length_sum_length_length: number[] = [];\n    let\
    \ max_rolling_number_length_sum_length_length_index: number[] = [];\n    let max_rolling_number_length_sum_length_length_value:\
    \ number[] = [];\n    let max_rolling_number_length_sum_length_length_length:\
    \ number[] = [];\n    let max_rolling_number_length_sum_length_length_length_index:\
    \ number[] = [];\n    let max_rolling_number_length_sum_length_length_value: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_length_length: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_length_length_index: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_length_value: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length_index: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_length_value: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length_index: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_length_value: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length_index: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_length_value: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length_index: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_length_value: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length: number[] =\
    \ [];\n    let max_rolling_number_length_sum_length_length_length_index: number[]\
    \ = [];\n    let max_rolling_number_length_sum_length_length_value: number[] =\
    \ [];\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbqet57lz.ts(43,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpbqet57lz.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747952
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var max_rolling_number: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var max_rolling_number_index:\
    \ number[] = [];\n    var max_rolling_number_value: number[] = [];\n    var \n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpujh3k3sl.ts(58,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpujh3k3sl.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpvkf2atxs.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvkf2atxs.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp_kg0uiel.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_kg0uiel.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747949
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let current: number[] = [];\n    let currentIndex: number[] = [];\n    let\
    \ currentMax: number[] = [];\n    let currentMaxIndex: number[] = [];\n    let\
    \ currentMaxIndexCount: number[] = [];\n    let currentMaxIndexCountIndex: number[]\
    \ = [];\n    let currentMaxIndexCountIndex2: number[] = [];\n    let currentMaxIndexCountIndex3:\
    \ number[] = [];\n    let currentMaxIndexCountIndex4: number[] = [];\n    let\
    \ currentMaxIndexCountIndex5: number[] = [];\n    let currentMaxIndexCountIndex6:\
    \ number[] = [];\n    let currentMaxIndexCountIndex7: number[] = [];\n    let\
    \ currentMaxIndexCountIndex8: number[] = [];\n    let currentMaxIndexCountIndex9:\
    \ number[] = [];\n    let currentMaxIndexCountIndex10: number[] = [];\n    let\
    \ currentMaxIndexCountIndex11: number[] = [];\n    let currentMaxIndexCountIndex12:\
    \ number[] = [];\n    let currentMaxIndexCountIndex13: number[] = [];\n    let\
    \ currentMaxIndexCountIndex14: number[] = [];\n    let currentMaxIndexCountIndex15:\
    \ number[] = [];\n    let currentMaxIndexCountIndex16: number[] = [];\n    let\
    \ currentMaxIndexCountIndex17: number[] = [];\n    let currentMaxIndexCountIndex18:\
    \ number[] = [];\n    let currentMaxIndexCountIndex19: number[] = [];\n    let\
    \ currentMaxIndexCountIndex20: number[] = [];\n    let currentMaxIndexCountIndex21:\
    \ number[] = [];\n    let currentMaxIndexCountIndex22: number[] = [];\n    let\
    \ currentMaxIndexCountIndex23: number[] = [];\n    let currentMaxIndexCountIndex24:\
    \ number[] = [];\n    let currentMaxIndexCountIndex25: number[] = [];\n    let\
    \ currentMaxIndexCountIndex26: number[] = [];\n    let currentMaxIndexCountIndex27:\
    \ number[] = [];\n    let currentMaxIndexCountIndex28: number[] = [];\n    let\
    \ currentMaxIndexCountIndex29: number[] = [];\n    let currentMaxIndexCountIndex30:\
    \ number[] = [];\n    let currentMaxIndexCountIndex31: number[] = [];\n    let\
    \ currentMaxIndexCountIndex32: number[] = [];\n    let currentMaxIndexCountIndex33:\
    \ number[] = [];\n    let currentMaxIndexCountIndex34: number[] = [];\n    let\
    \ currentMaxIndexCountIndex35: number[] = [];\n    let currentMaxIndexCountIndex36:\
    \ number[] = [];\n    let currentMaxIndexCountIndex37: number[] = [];\n    let\
    \ currentMaxIndexCountIndex38: number[] = [];\n    let currentMaxIndex\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2hb01bga.ts(64,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpet71gn98.js:29:12)\n    at Object.<anonymous> (/tmp/tmpet71gn98.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       } else {\n            result.push(numbers[i]);\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpqk7qv8va.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqk7qv8va.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_result: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > rolling_max_number) {\n   \
    \         rolling_max_number = numbers[i];\n            rolling_max_index = i;\n\
    \        }\n    }\n    rolling_max_result.push(rolling_max_number);\n    for (let\
    \ i = rolling_max_index + 1; i < numbers.length; i++) {\n        rolling_max_number\
    \ = Math.max(numbers[i - 1], numbers[i]);\n        rolling_max_result.push(rolling_max_number);\n\
    \    }\n    return rolling_max_result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpjzsf75wd.js:25:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpjzsf75wd.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7hj6sa6r.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7hj6sa6r.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.push(currentMax);\n            currentMax = numbers[i];\n\
    \        } else {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  result.push(currentMax);\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpgr97tda7.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpgr97tda7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp_kg0uiel.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_kg0uiel.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_element = numbers[0];\n  let max_index = 0;\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_element) {\n   \
    \   max_element = numbers[i];\n      max_index = i;\n    }\n  }\n  return numbers.slice(0,\
    \ max_index + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpvclhp4mz.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvclhp4mz.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let currentMax: number = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > currentMax)\
    \ {\n      currentMax = numbers[i];\n    }\n  }\n  result.push(currentMax);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpbpogb4sr.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbpogb4sr.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n        else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpqouxgrmt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpqouxgrmt.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1o0qqfb4.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1o0qqfb4.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n        result.push(max);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpbokssnhp.js:29:12)\n    at Object.<anonymous> (/tmp/tmpbokssnhp.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(max);\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7hj6sa6r.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7hj6sa6r.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let maxIndexCount: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        let index = numbers.indexOf(Math.max(...numbers));\n       \
    \ if (maxIndex.indexOf(index) === -1) {\n            maxIndex.push(index);\n \
    \           maxIndexCount.push(1);\n            max.push(Math.max(...numbers));\n\
    \        } else {\n            maxIndexCount[maxIndex.indexOf(index)] += 1;\n\
    \            if (maxIndexCount[maxIndex.indexOf(index)] > maxIndexCount[maxIndex.indexOf(index)\
    \ - 1]) {\n                maxIndexCount[maxIndex.indexOf(index) - 1] += 1;\n\
    \                maxIndex.push(index);\n                max.push(Math.max(...numbers));\n\
    \            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpfvnotyax.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfvnotyax.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let currentMax: number[] = [];\n\
    \    let currentIndex: number = 0;\n    let currentMaxIndex: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (currentMaxIndex < i)\
    \ {\n            currentMaxIndex = i;\n            currentMax = numbers[i];\n\
    \        }\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \        }\n    }\n    for (let i = numbers.length - 1; i >= 0; i--) {\n     \
    \   if (currentMaxIndex < i) {\n            currentMaxIndex = i;\n           \
    \ currentMax = numbers[i];\n        }\n        if (numbers[i] < currentMax) {\n\
    \            currentMax = numbers[i];\n        }\n    }\n    for (let i = numbers.length\
    \ - 1; i >= 0; i--) {\n        if (currentMaxIndex < i) {\n            currentMaxIndex\
    \ = i;\n            currentMax = numbers[i];\n        }\n        if (numbers[i]\
    \ > currentMax) {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  for (let i = numbers.length - 1; i >= 0; i--) {\n        if (currentMaxIndex\
    \ < i) {\n            currentMaxIndex = i;\n            currentMax = numbers[i];\n\
    \        }\n        if (numbers[i] < currentMax) {\n            currentMax = numbers[i];\n\
    \        }\n    }\n    for (let i = numbers.length - 1; i >= 0; i--) {\n     \
    \   if (currentMaxIndex < i) {\n            currentMaxIndex = i;\n           \
    \ currentMax = numbers[i];\n        }\n        if (numbers[i] > currentMax) {\n\
    \            currentMax = numbers[i];\n        }\n    }\n    for (let i = numbers.length\
    \ - 1; i >= 0; i--) {\n        if (currentMaxIndex < i) {\n            currentMaxIndex\
    \ = i;\n            currentMax = numbers[i];\n        }\n        if (numbers[i]\
    \ > currentMax) {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  for (let i = numbers.length - 1; i >= 0; i--) {\n        if (currentMaxIndex\
    \ < i) {\n            currentMaxIndex = i;\n            currentMax = numbers[i];\n\
    \        }\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \        }\n    }\n    for (let i = numbers.length - 1; i >= 0; i--) {\n     \
    \   if (currentMaxIndex < i) {\n            currentMaxIndex = i;\n           \
    \ currentMax = numbers[i];\n        }\n        if (numbers[i] > currentMax) {\n\
    \            currentMax = numbers[i];\n        }\n    }\n    for (let i = numbers.length\
    \ - 1; i >= 0; i--) {\n        if (currentMaxIndex < i) {\n            currentMaxIndex\
    \ = i;\n            currentMax = numbers[i];\n        }\n        if (numbers[i]\
    \ > currentMax) {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  for (let i = numbers.length - 1; i >= 0; i--) {\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjpsnh4po.ts(104,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpbokssnhp.js:29:12)\n    at Object.<anonymous> (/tmp/tmpbokssnhp.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_rolling_number: number[] = [];\n  let max_rolling_number_index:\
    \ number[] = [];\n  let max_rolling_number_index_index: number[] = [];\n  let\
    \ max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[] = [];\n  let max_rolling_number_index_index_index:\
    \ number[] = [];\n  let max_rolling_number_index_index_index: number[] = [];\n\
    \  let max_rolling_number_index_index_index: number[]\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqrl7mqti.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1o0qqfb4.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1o0qqfb4.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result = [];\n    let max = 0;\n    let currentMax = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n            currentMax = max;\n        }\n\
    \        if (numbers[i] > currentMax) {\n            result.push(currentMax);\n\
    \            currentMax = numbers[i];\n        }\n    }\n    result.push(currentMax);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmps7p2a82h.js:25:12)\n   \
    \ at Object.<anonymous> (/tmp/tmps7p2a82h.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       } else {\n            result.push(numbers[i]);\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmprsmvdyu4.js:28:12)\n    at Object.<anonymous> (/tmp/tmprsmvdyu4.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpvkf2atxs.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvkf2atxs.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max_element: number[] = [];\n    let max_index: number =\
    \ 0;\n    let min_index: number = 0;\n    let min_value: number = numbers[0];\n\
    \    let max_value: number = numbers[0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n        if (numbers[i] < min_value) {\n\
    \            min_value = numbers[i];\n            min_index = i;\n        }\n\
    \    }\n    for (let i = min_index; i <= max_index; i++) {\n        max_element.push(numbers[i]);\n\
    \    }\n    return max_element;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp5yd16jm6.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5yd16jm6.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_6ej9ura.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_6ej9ura.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_list: number[] = [];\n  let max_element: number\
    \ = 0;\n  let current_element: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    current_element = numbers[i];\n    if (current_element > max_element)\
    \ {\n      max_element = current_element;\n    }\n    rolling_max_list.push(max_element);\n\
    \  }\n  return rolling_max_list;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let rolling_max: number[] = [];\n\
    \    let index: number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_value:\
    \ number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > rolling_max_value) {\n            rolling_max_value = numbers[index];\n  \
    \          rolling_max_index = index;\n        }\n        index++;\n    }\n  \
    \  rolling_max.push(rolling_max_value);\n    rolling_max.push(rolling_max_index);\n\
    \    return rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpp6s6fz7b.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp6s6fz7b.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpc7un_4gf.js:28:12)\n    at Object.<anonymous> (/tmp/tmpc7un_4gf.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpet71gn98.js:29:12)\n    at Object.<anonymous> (/tmp/tmpet71gn98.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_rolling_index = 0;\n  let max_rolling_value = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_rolling_value)\
    \ {\n      max_rolling_index = i;\n      max_rolling_value = numbers[i];\n   \
    \ }\n  }\n  return numbers.slice(0, max_rolling_index + 1);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmphan4sb_e.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmphan4sb_e.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_value) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747954
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  const rolling_max_number:\
    \ number[] = [];\n  let rolling_max_number_index: number[] = [];\n  let rolling_max_number_index2:\
    \ number[] = [];\n  let rolling_max_number_index3: number[] = [];\n  let rolling_max_number_index4:\
    \ number[] = [];\n  let rolling_max_number_index5: number[] = [];\n  let rolling_max_number_index6:\
    \ number[] = [];\n  let rolling_max_number_index7: number[] = [];\n  let rolling_max_number_index8:\
    \ number[] = [];\n  let rolling_max_number_index9: number[] = [];\n  let rolling_max_number_index10:\
    \ number[] = [];\n  let rolling_max_number_index11: number[] = [];\n  let rolling_max_number_index12:\
    \ number[] = [];\n  let rolling_max_number_index13: number[] = [];\n  let rolling_max_number_index14:\
    \ number[] = [];\n  let rolling_max_number_index15: number[] = [];\n  let rolling_max_number_index16:\
    \ number[] = [];\n  let rolling_max_number_index17: number[] = [];\n  let rolling_max_number_index18:\
    \ number[] = [];\n  let rolling_max_number_index19: number[] = [];\n  let rolling_max_number_index20:\
    \ number[] = [];\n  let rolling_max_number_index21: number[] = [];\n  let rolling_max_number_index22:\
    \ number[] = [];\n  let rolling_max_number_index23: number[] = [];\n  let rolling_max_number_index24:\
    \ number[] = [];\n  let rolling_max_number_index25: number[] = [];\n  let rolling_max_number_index26:\
    \ number[] = [];\n  let rolling_max_number_index27: number[] = [];\n  let rolling_max_number_index28:\
    \ number[] = [];\n  let rolling_max_number_index29: number[] = [];\n  let rolling_max_number_index30:\
    \ number[] = [];\n  let rolling_max_number_index31: number[] = [];\n  let rolling_max_number_index32:\
    \ number[] = [];\n  let rolling_max_number_index33: number[] = [];\n  let rolling_max_number_index34:\
    \ number[] = [];\n  let rolling_max_number_index35: number[] = [];\n  let rolling_max_number_index36:\
    \ number[] = [];\n  let rolling_max_number_index37: number[] = [];\n  let rolling_max_number_index38:\
    \ number[] = [];\n  let rolling_max_number_index39: number[] = [];\n  let rolling_max_number_index40:\
    \ number[] = [];\n  let rolling_max_number_index41: number[] = [];\n  let rolling_max_number\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3j8tk2dz.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max_element: number[] = [];\n    let max_index: number[]\
    \ = [];\n    let current_index: number[] = [];\n    let current_element: number[]\
    \ = [];\n    let current_max: number[] = [];\n    let current_max_index: number[]\
    \ = [];\n    let current_max_element: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        current_index[i] = i;\n        current_element[i]\
    \ = numbers[i];\n        current_max[i] = numbers[i];\n        current_max_index[i]\
    \ = i;\n        current_max_element[i] = numbers[i];\n    }\n    for (let i =\
    \ 1; i < numbers.length; i++) {\n        if (current_max[i - 1] < current_max[i])\
    \ {\n            current_max[i] = current_max[i - 1];\n            current_max_index[i]\
    \ = current_max_index[i - 1];\n            current_max_element[i] = current_max_element[i\
    \ - 1];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      if (current_index[i] < current_max_index[i]) {\n            current_max_index[i]\
    \ = current_index[i];\n            current_max_element[i] = current_element[i];\n\
    \        }\n    }\n    for (let i = 0; i < numbers.length; i++) {\n        if\
    \ (current_max_index[i] > numbers.length - 1) {\n            max_element[current_max_index[i]]\
    \ = current_max_element[i];\n            max_index[current_max_index[i]] = current_max_index[i];\n\
    \        }\n    }\n    return max_element;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpo6ep3jjq.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpo6ep3jjq.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_value = numbers[0];\n  let max_index = 0;\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_value) {\n     \
    \ max_value = numbers[i];\n      max_index = i;\n    }\n  }\n  return numbers.slice(0,\
    \ max_index + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpwy51txu9.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwy51txu9.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var max: number = 0;\n    var\
    \ index: number = numbers.length - 1;\n    while (index >= 0) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        index--;\n \
    \   }\n    result.push(max);\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpo2ngnxmn.js:21:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpo2ngnxmn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_numbers: number[] = [];\n  let max_number: number\
    \ = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max_number) {\n      max_number = numbers[i];\n    }\n  }\n  rolling_max_numbers.push(max_number);\n\
    \  return rolling_max_numbers;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp4e9bkmu0.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4e9bkmu0.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax[0])\
    \ {\n      currentMax[0] = numbers[i];\n    }\n    if (numbers[i] > currentMax[1])\
    \ {\n      currentMax[1] = numbers[i];\n    }\n    if (numbers[i] > currentMax[2])\
    \ {\n      currentMax[2] = numbers[i];\n    }\n    if (numbers[i] > currentMax[3])\
    \ {\n      currentMax[3] = numbers[i];\n    }\n    if (numbers[i] > currentMax[4])\
    \ {\n      currentMax[4] = numbers[i];\n    }\n    if (numbers[i] > currentMax[5])\
    \ {\n      currentMax[5] = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    max.push(currentMax[i]);\n  }\n  return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined,\n  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp0_jvpg2g.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0_jvpg2g.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined, undefined, undefined ],\n  expected: [ 1, 2, 3, 4 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let max_element: number = 0;\n\
    \  let max_index: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max_element) {\n      max_element = numbers[i];\n      max_index\
    \ = i;\n    }\n  }\n  for (let i = max_index; i < numbers.length; i++) {\n   \
    \ rolling_max[max_index] = numbers[i];\n    max_element = numbers[i];\n    max_index\
    \ = i;\n  }\n  return rolling_max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <3 empty\
    \ items>,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmp2otyddbn.js:26:12)\n    at Object.<anonymous> (/tmp/tmp2otyddbn.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <3 empty\
    \ items>, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1d0c_dz3.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1d0c_dz3.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ maxIndexIndex: number[] = [];\n  let maxIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n  let\
    \ maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n  let max\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf7cau107.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp6bn_ta5k.js:29:12)\n    at Object.<anonymous> (/tmp/tmp6bn_ta5k.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_rolling_number: number[] = [];\n  let max_rolling_number_index:\
    \ number[] = [];\n  let current_rolling_number: number[] = [];\n  let current_rolling_number_index:\
    \ number[] = [];\n  let current_max_rolling_number: number[] = [];\n  let current_max_rolling_number_index:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    current_rolling_number.push(numbers[i]);\n\
    \    current_rolling_number_index.push(i);\n    current_max_rolling_number.push(numbers[i]);\n\
    \    current_max_rolling_number_index.push(i);\n  }\n  while (current_rolling_number_index.length\
    \ > 0) {\n    max_rolling_number = current_max_rolling_number;\n    max_rolling_number_index\
    \ = current_max_rolling_number_index;\n    current_rolling_number_index = [];\n\
    \    current_rolling_number = [];\n    current_max_rolling_number_index = [];\n\
    \    current_max_rolling_number = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n      if (numbers[i] >= max_rolling_number[max_rolling_number_index[i\
    \ - 1]]) {\n        current_rolling_number.push(numbers[i]);\n        current_rolling_number_index.push(i);\n\
    \        current_max_rolling_number.push(numbers[i]);\n        current_max_rolling_number_index.push(i);\n\
    \      }\n    }\n  }\n  return max_rolling_number;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpl1dty398.js:40:12)\n    at Object.<anonymous> (/tmp/tmpl1dty398.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747955
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var max: number = 0;\n    var\
    \ index: number = numbers.length - 1;\n    while (index >= 0) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        index--;\n \
    \   }\n    result.push(max);\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpo2ngnxmn.js:21:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpo2ngnxmn.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let max_element:\
    \ number = 0;\n    let current_index = 0;\n    while (current_index < numbers.length)\
    \ {\n        if (numbers[current_index] > max_element) {\n            max_element\
    \ = numbers[current_index];\n        }\n        rolling_max_array.push(max_element);\n\
    \        current_index++;\n    }\n    return rolling_max_array;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747956
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1d0c_dz3.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1d0c_dz3.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let maxIndexIndex: number[] = [];\n    let maxIndexIndexIndex: number[] =\
    \ [];\n    let maxIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndex: number[] = [];\n\
    \    let maxIndexIndexIndexIndexIndexIndexIndex: number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex: number[]\
    \ = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex:\
    \ number[] = [];\n    let maxIndexIndexIndexIndexIndexIndexIndexIndex\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkl7r46pp.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747956
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const max_rolling_number = numbers[0];\n  for (let i = 1; i <\
    \ numbers.length; i++) {\n    if (numbers[i] > max_rolling_number) {\n      max_rolling_number\
    \ = numbers[i];\n    }\n  }\n  return max_rolling_number;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw2pjxatu.ts(9,7): error TS2588: Cannot assign to
    ''max_rolling_number'' because it is a constant.

    ../../../../../tmp/tmpw2pjxatu.ts(12,3): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp_kg0uiel.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_kg0uiel.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_list: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n    rolling_max_list.push(rolling_max_value);\n\
    \  }\n  return rolling_max_list;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747956
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_value:\
    \ number;\n    let rolling_max_index: number;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        rolling_max_value = numbers[i];\n        rolling_max_index =\
    \ i;\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (numbers[j]\
    \ > rolling_max_value) {\n                rolling_max_value = numbers[j];\n  \
    \              rolling_max_index = j;\n            }\n        }\n        rolling_max_array.push(rolling_max_value);\n\
    \    }\n    return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpc9ubd2to.js:26:12)\n    at Object.<anonymous> (/tmp/tmpc9ubd2to.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747956
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_array: number[] = [];\n    let rolling_max_value:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    let rolling_max_index:\
    \ number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp29sxikwj.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747956
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let rolling_max: number[] = [];\n\
    \    let rolling_max_index: number[] = [];\n    let rolling_max_value: number[]\
    \ = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let rolling_max_value:\
    \ number[] = [];\n    let rolling_max_index: number[] = [];\n    let \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj4ixwaht.ts(64,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpj4ixwaht.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max_element: number[] = [];\n  let max_index: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (max_index >= numbers[i])\
    \ {\n      max_element = max_element.concat(max_element.slice(max_index + 1, numbers[i]));\n\
    \      max_index = numbers[i];\n    }\n  }\n  return max_element;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpfdg70rb6.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfdg70rb6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_numbers: number[] = [];\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    rolling_max_numbers.push(Math.max(...numbers));\n\
    \  }\n  return rolling_max_numbers;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpvbxtjom1.js:16:12)\n    at Object.<anonymous> (/tmp/tmpvbxtjom1.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpc7un_4gf.js:28:12)\n    at Object.<anonymous> (/tmp/tmpc7un_4gf.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  for (let i = 0; i <\
    \ numbers.length; i++) {\n    rolling_max_array.push(Math.max(...numbers));\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmppsh76n8v.js:16:12)\n    at Object.<anonymous> (/tmp/tmppsh76n8v.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax[0])\
    \ {\n      currentMax.push(numbers[i]);\n    } else {\n      max = currentMax;\n\
    \      currentMax = [numbers[i]];\n    }\n  }\n  return max;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmppgya4ddb.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmppgya4ddb.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let currentMax: number = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.push(numbers[i]);\n            currentMax = numbers[i];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpdixnjp6p.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdixnjp6p.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result: number[] = [];\n    let max: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprlpevq1t.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprlpevq1t.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    let currentMax = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n            currentMax = max;\n        }\n\
    \        else {\n            currentMax = currentMax + numbers[i];\n        }\n\
    \        result.push(currentMax);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  7,\n\
    \  9,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n \
    \   at test (/tmp/tmp0fxesm69.js:26:12)\n    at Object.<anonymous> (/tmp/tmp0fxesm69.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 7, 9,\
    \ 10 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1d0c_dz3.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1d0c_dz3.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\n  let rolling_max_index: number[]\
    \ = [];\n  let rolling_max_value: number[] = [];\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7lsoj9b5.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const rolling_max_result: number[] = [];\n    let rolling_max_number:\
    \ number = 0;\n    let rolling_max_index: number = 0;\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        if (rolling_max_number < numbers[i]) {\n   \
    \         rolling_max_number = numbers[i];\n            rolling_max_index = i;\n\
    \        }\n    }\n    rolling_max_result.push(rolling_max_number);\n    for (let\
    \ i = rolling_max_index + 1; i < numbers.length; i++) {\n        if (rolling_max_number\
    \ < numbers[i]) {\n            rolling_max_number = numbers[i];\n        }\n \
    \       rolling_max_result.push(rolling_max_number);\n    }\n    return rolling_max_result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpr10vdm6k.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpr10vdm6k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] === max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp2dlqxjs2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2dlqxjs2.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max_rolling_number: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_index2: number[] = [];\n    let max_rolling_number_index3:\
    \ number[] = [];\n    let max_rolling_number_index4: number[] = [];\n    let max_rolling_number_index5:\
    \ number[] = [];\n    let max_rolling_number_index6: number[] = [];\n    let max_rolling_number_index7:\
    \ number[] = [];\n    let max_rolling_number_index8: number[] = [];\n    let max_rolling_number_index9:\
    \ number[] = [];\n    let max_rolling_number_index10: number[] = [];\n    let\
    \ max_rolling_number_index11: number[] = [];\n    let max_rolling_number_index12:\
    \ number[] = [];\n    let max_rolling_number_index13: number[] = [];\n    let\
    \ max_rolling_number_index14: number[] = [];\n    let max_rolling_number_index15:\
    \ number[] = [];\n    let max_rolling_number_index16: number[] = [];\n    let\
    \ max_rolling_number_index17: number[] = [];\n    let max_rolling_number_index18:\
    \ number[] = [];\n    let max_rolling_number_index19: number[] = [];\n    let\
    \ max_rolling_number_index20: number[] = [];\n    let max_rolling_number_index21:\
    \ number[] = [];\n    let max_rolling_number_index22: number[] = [];\n    let\
    \ max_rolling_number_index23: number[] = [];\n    let max_rolling_number_index24:\
    \ number[] = [];\n    let max_rolling_number_index25: number[] = [];\n    let\
    \ max_rolling_number_index26: number[] = [];\n    let max_rolling_number_index27:\
    \ number[] = [];\n    let max_rolling_number_index28: number[] = [];\n    let\
    \ max_rolling_number_index29: number[] = [];\n    let max_rolling_number_index30:\
    \ number[] = [];\n    let max_rolling_number_index31: number[] = [];\n    let\
    \ max_rolling_number_index32: number[] = [];\n    let max_rolling_number_index33:\
    \ number[] = [];\n    let max_rolling_number_index34: number[] = [];\n    let\
    \ max_rolling_number_index35: number[] = [];\n    let max_rolling_number_index36:\
    \ number[] = [];\n    let max_rolling_number_index37: number[] = [];\n    let\
    \ max_rolling_number_index38: number[] = [];\n    let max_rolling_number_index39:\
    \ number[] = [];\n    let max_rolling_number_index40: number[] = [];\n    let\
    \ max_rolling_number_index41: number[] = [];\n    let max_rolling_number_index42:\
    \ number[] = [];\n    let max_roll\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1p2r5576.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       } else {\n            result.push(numbers[i]);\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmprsmvdyu4.js:28:12)\n    at Object.<anonymous> (/tmp/tmprsmvdyu4.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const max_element = numbers[0];\n  let max_index = 0;\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_element) {\n   \
    \   max_element = numbers[i];\n      max_index = i;\n    }\n  }\n  return numbers.slice(0,\
    \ max_index + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5lef84mi.ts(10,7): error TS2588: Cannot assign to
    ''max_element'' because it is a constant.

    '
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result: number[] = [];\n    var max: number = 0;\n    var\
    \ index: number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        result.push(numbers[index]);\n\
    \        index++;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpro6osogs.js:23:12)\n    at Object.<anonymous> (/tmp/tmpro6osogs.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_result: number[] = [];\n  let rolling_max_number:\
    \ number[] = [];\n  let rolling_max_index = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (rolling_max_index >= rolling_max_number[0]) {\n      rolling_max_result.push(rolling_max_number[0]);\n\
    \      rolling_max_index = 0;\n    }\n    rolling_max_number[0] = numbers[i];\n\
    \    rolling_max_number[1] = numbers[i];\n    rolling_max_index++;\n  }\n  return\
    \ rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpjdm1n88_.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjdm1n88_.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpjwyl0l3f.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjwyl0l3f.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let rolling_max: number[] = [];\n  let max_number: number = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_number)\
    \ {\n      rolling_max = [max_number];\n      max_number = numbers[i];\n    }\
    \ else {\n      rolling_max.push(max_number);\n      max_number = numbers[i];\n\
    \    }\n  }\n  rolling_max.push(max_number);\n  return rolling_max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpdw9dob_w.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdw9dob_w.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let\
    \ index: number = 0;\n    while (index < numbers.length) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n        }\n        if (numbers[index]\
    \ === max) {\n            result.push(max);\n        }\n        index++;\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpsxqldzvv.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsxqldzvv.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpbokssnhp.js:29:12)\n    at Object.<anonymous> (/tmp/tmpbokssnhp.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n   \
    \ } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpet71gn98.js:29:12)\n    at Object.<anonymous> (/tmp/tmpet71gn98.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let maxIndex: number[] = [];\n\
    \    let maxIndexCount: number[] = [];\n    let maxIndexCountIndex: number[] =\
    \ [];\n    let maxIndexCountIndexCount: number[] = [];\n    let maxIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCount: number[] = [];\n\
    \    let maxIndexCountIndexCountIndexCountIndex: number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndex: number[]\
    \ = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCount: number[]\
    \ = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndex: number[]\
    \ = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ number[] = [];\n    let maxIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1wpzvi01.ts(45,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747957
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_arr: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > rolling_max_value) {\n      rolling_max_value = numbers[i];\n    }\n    rolling_max_arr.push(rolling_max_value);\n\
    \  }\n  return rolling_max_arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747957
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  let\
    \ maxIndexCount: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max[maxIndexCount[maxIndex.length - 1]]) {\n      max[maxIndexCount[maxIndex.length\
    \ - 1]] = numbers[i];\n      maxIndex[maxIndexCount[maxIndex.length - 1]] = i;\n\
    \      maxIndexCount[maxIndex.length - 1]++;\n    }\n  }\n  return max;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp0iirw18x.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0iirw18x.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747957
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let current: number[] = [];\n  let\
    \ i: number;\n  let j: number;\n  let k: number;\n  let l: number;\n  let maxIndex:\
    \ number[] = [];\n  let maxIndexIndex: number[] = [];\n  let maxIndexIndex2: number[]\
    \ = [];\n  let maxIndexIndex3: number[] = [];\n  let maxIndexIndex4: number[]\
    \ = [];\n  let maxIndexIndex5: number[] = [];\n  let maxIndexIndex6: number[]\
    \ = [];\n  let maxIndexIndex7: number[] = [];\n  let maxIndexIndex8: number[]\
    \ = [];\n  let maxIndexIndex9: number[] = [];\n  let maxIndexIndex10: number[]\
    \ = [];\n  let maxIndexIndex11: number[] = [];\n  let maxIndexIndex12: number[]\
    \ = [];\n  let maxIndexIndex13: number[] = [];\n  let maxIndexIndex14: number[]\
    \ = [];\n  let maxIndexIndex15: number[] = [];\n  let maxIndexIndex16: number[]\
    \ = [];\n  let maxIndexIndex17: number[] = [];\n  let maxIndexIndex18: number[]\
    \ = [];\n  let maxIndexIndex19: number[] = [];\n  let maxIndexIndex20: number[]\
    \ = [];\n  let maxIndexIndex21: number[] = [];\n  let maxIndexIndex22: number[]\
    \ = [];\n  let maxIndexIndex23: number[] = [];\n  let maxIndexIndex24: number[]\
    \ = [];\n  let maxIndexIndex25: number[] = [];\n  let maxIndexIndex26: number[]\
    \ = [];\n  let maxIndexIndex27: number[] = [];\n  let maxIndexIndex28: number[]\
    \ = [];\n  let maxIndexIndex29: number[] = [];\n  let maxIndexIndex30: number[]\
    \ = [];\n  let maxIndexIndex31: number[] = [];\n  let maxIndexIndex32: number[]\
    \ = [];\n  let maxIndexIndex33: number[] = [];\n  let maxIndexIndex34: number[]\
    \ = [];\n  let maxIndexIndex35: number[] = [];\n  let maxIndexIndex36: number[]\
    \ = [];\n  let maxIndexIndex37: number[] = [];\n  let maxIndexIndex38: number[]\
    \ = [];\n  let maxIndexIndex39: number[] = [];\n  let maxIndexIndex40: number[]\
    \ = [];\n  let maxIndexIndex41: number[] = [];\n  let maxIndexIndex42: number[]\
    \ = [];\n  let maxIndexIndex43: number[] = [];\n  let maxIndexIndex44: number[]\
    \ = [];\n  let maxIndexIndex45: number[] = [];\n  let maxIndexIndex46: number[]\
    \ = [];\n  let maxIndexIndex47: number[] = [];\n  let maxIndexIndex48: number[]\
    \ = [];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa1zqofzq.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747958
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1o0qqfb4.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1o0qqfb4.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  let\
    \ currentIndex: number[] = [];\n  let currentIndexMax: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    currentMax.push(numbers[i]);\n    currentIndex.push(i);\n\
    \    currentIndexMax.push(numbers[i]);\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (currentIndex[j]\
    \ === currentIndexMax[j]) {\n        currentMax[j] = Math.max(currentMax[j], numbers[j]);\n\
    \        currentIndexMax[j] = currentIndexMax[j] + 1;\n      }\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    max.push(currentMax[i]);\n \
    \ }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp4mlp8hia.js:33:12)\n    at Object.<anonymous> (/tmp/tmp4mlp8hia.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747958
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let maxIndex: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max[maxIndex[0]])\
    \ {\n      maxIndex[0] = i;\n      max[0] = numbers[i];\n    } else {\n      maxIndex.push(i);\n\
    \    }\n  }\n  for (let i = 1; i < maxIndex.length; i++) {\n    if (numbers[maxIndex[i]]\
    \ > max[maxIndex[i - 1]]) {\n      maxIndex[i - 1]++;\n      max[maxIndex[i -\
    \ 1]] = numbers[maxIndex[i]];\n    } else {\n      maxIndex[i - 1]++;\n    }\n\
    \  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnb6htbui.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnb6htbui.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747958
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max: number[] = [];\n    let currentMax: number[] = [];\n\
    \    let currentIndex: number = 0;\n    let currentMaxIndex: number = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (currentMaxIndex ===\
    \ numbers.length - 1) {\n            currentMax.push(numbers[i]);\n          \
    \  currentMaxIndex = 0;\n        } else {\n            if (numbers[i] > currentMax[currentMaxIndex])\
    \ {\n                currentMax[currentMaxIndex] = numbers[i];\n             \
    \   currentMaxIndex++;\n            }\n        }\n    }\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (currentMaxIndex === numbers.length - 1)\
    \ {\n            currentMax.push(numbers[i]);\n            currentMaxIndex = 0;\n\
    \        } else {\n            if (numbers[i] > currentMax[currentMaxIndex]) {\n\
    \                currentMax[currentMaxIndex] = numbers[i];\n                currentMaxIndex++;\n\
    \            }\n        }\n    }\n    return currentMax;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprcb8hfmd.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmprcb8hfmd.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747958
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            result.push(max);\n   \
    \         max = numbers[i];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpvkf2atxs.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvkf2atxs.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n\
    \      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpc7un_4gf.js:28:12)\n    at Object.<anonymous> (/tmp/tmpc7un_4gf.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    const result = [];\n    let max = 0;\n    let maxIndex = 0;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n            maxIndex = i;\n        }\n   \
    \ }\n    for (let i = maxIndex; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpbu6fsebq.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbu6fsebq.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747958
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result = [];\n    let max = 0;\n    let index = 0;\n   \
    \ for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n            index = i;\n        }\n    }\n   \
    \ for (let i = index; i < numbers.length; i++) {\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprd30ah76.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprd30ah76.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747958
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let max_element: number\
    \ = 0;\n  let current_max_element: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max_element) {\n      max_element = numbers[i];\n\
    \      current_max_element = max_element;\n    } else {\n      current_max_element\
    \ = numbers[i];\n    }\n    rolling_max_array.push(current_max_element);\n  }\n\
    \  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpq807l5te.js:26:12)\n    at Object.<anonymous> (/tmp/tmpq807l5te.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747959
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let max_rolling_number: number[] = [];\n    let max_rolling_number_index:\
    \ number[] = [];\n    let max_rolling_number_index_index: number[] = [];\n   \
    \ let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[] = [];\n    let max_rolling_number_index_index_index:\
    \ number[] = [];\n    let max_rolling_number_index_index_index: number[] = [];\n\
    \    let max_rolling_number_index_index_index: number[]\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw07z2xil.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747958
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1d0c_dz3.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1d0c_dz3.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let currentMax: number = 0;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n\
    \      currentMax = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > currentMax) {\n      result.push(currentMax);\n\
    \      currentMax = numbers[i];\n    }\n  }\n  result.push(currentMax);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpu0f053s2.js:25:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpu0f053s2.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747959
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp_kg0uiel.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_kg0uiel.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let max_element: number\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max_element)\
    \ {\n      rolling_max_array.push(max_element);\n      max_element = numbers[i];\n\
    \    } else {\n      max_element = numbers[i];\n    }\n  }\n  rolling_max_array.push(max_element);\n\
    \  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpuqo_buw1.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpuqo_buw1.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747959
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 0
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_array: number[] = [];\n  let rolling_max_value:\
    \ number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rolling_max_value\
    \ = Math.max(rolling_max_value, numbers[i]);\n    rolling_max_array.push(rolling_max_value);\n\
    \  }\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747959
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const max_rolling_number = numbers[0];\n  let max_rolling_number_index\
    \ = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_rolling_number)\
    \ {\n      max_rolling_number = numbers[i];\n      max_rolling_number_index =\
    \ i;\n    }\n  }\n  return numbers.slice(0, max_rolling_number_index + 1);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzj7x2yx0.ts(10,7): error TS2588: Cannot assign to
    ''max_rolling_number'' because it is a constant.

    '
  timestamp: 1659747958
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const rolling_max_numbers: number[] = [];\n  let rolling_max_numbers_index\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (rolling_max_numbers_index\
    \ >= rolling_max_numbers.length) {\n      rolling_max_numbers.push(numbers[i]);\n\
    \    } else {\n      if (numbers[i] > rolling_max_numbers[rolling_max_numbers_index])\
    \ {\n        rolling_max_numbers[rolling_max_numbers_index] = numbers[i];\n  \
    \    }\n    }\n    rolling_max_numbers_index++;\n  }\n  return rolling_max_numbers;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp6u82mbb8.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6u82mbb8.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747959
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpp9m2byji.js:28:12)\n    at Object.<anonymous> (/tmp/tmpp9m2byji.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738566
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n  \
    \          max = numbers[i];\n        }\n    }\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] === max) {\n            result.push(max);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpr55i2xnw.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr55i2xnw.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747949
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let currentMax: number[] = [];\n  let\
    \ currentIndex: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    currentMax.push(numbers[i]);\n    currentIndex.push(i);\n  }\n  while (currentMax.length\
    \ > 0) {\n    let maxIndex: number = currentMax.indexOf(Math.max.apply(null, currentMax));\n\
    \    currentMax.splice(maxIndex, 1);\n    currentIndex.splice(maxIndex, 1);\n\
    \    max.push(Math.max.apply(null, currentMax));\n  }\n  return max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  1,\n  -Infinity\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmp1non_fha.js:25:12)\n    at Object.<anonymous> (/tmp/tmp1non_fha.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1,\
    \ -Infinity ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659747959
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let max: number[] = [];\n  let current: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    current.push(numbers[i]);\n    if\
    \ (i > 0) {\n      max = rolling_max(current);\n      if (max[max.length - 1]\
    \ < numbers[i]) {\n        max = rolling_max(current);\n      }\n    }\n  }\n\
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppfu5tx5a.js:9\n        current.push(numbers[i]);\n            \
    \    ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.push (<anonymous>)\n\
    \    at rolling_max (/tmp/tmppfu5tx5a.js:9:17)\n    at rolling_max (/tmp/tmppfu5tx5a.js:11:19)\n\
    \    at rolling_max (/tmp/tmppfu5tx5a.js:11:19)\n    at rolling_max (/tmp/tmppfu5tx5a.js:11:19)\n\
    \    at rolling_max (/tmp/tmppfu5tx5a.js:11:19)\n    at rolling_max (/tmp/tmppfu5tx5a.js:11:19)\n\
    \    at rolling_max (/tmp/tmppfu5tx5a.js:11:19)\n    at rolling_max (/tmp/tmppfu5tx5a.js:11:19)\n\
    \    at rolling_max (/tmp/tmppfu5tx5a.js:11:19)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747959
- exit_code: 2
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n    var result = [];\n    var currentMax = numbers[0];\n    var\
    \ currentIndex = 0;\n    var currentMaxIndex = 0;\n    var currentMaxIndexCount\
    \ = 0;\n    var currentMaxIndexCountMax = -1;\n    var currentMaxIndexCountMaxIndex\
    \ = -1;\n    var currentMaxIndexCountMaxIndex2 = -1;\n    var currentMaxIndexCountMaxIndex3\
    \ = -1;\n    var currentMaxIndexCountMaxIndex4 = -1;\n    var currentMaxIndexCountMaxIndex5\
    \ = -1;\n    var currentMaxIndexCountMaxIndex6 = -1;\n    var currentMaxIndexCountMaxIndex7\
    \ = -1;\n    var currentMaxIndexCountMaxIndex8 = -1;\n    var currentMaxIndexCountMaxIndex9\
    \ = -1;\n    var currentMaxIndexCountMaxIndex10 = -1;\n    var currentMaxIndexCountMaxIndex11\
    \ = -1;\n    var currentMaxIndexCountMaxIndex12 = -1;\n    var currentMaxIndexCountMaxIndex13\
    \ = -1;\n    var currentMaxIndexCountMaxIndex14 = -1;\n    var currentMaxIndexCountMaxIndex15\
    \ = -1;\n    var currentMaxIndexCountMaxIndex16 = -1;\n    var currentMaxIndexCountMaxIndex17\
    \ = -1;\n    var currentMaxIndexCountMaxIndex18 = -1;\n    var currentMaxIndexCountMaxIndex19\
    \ = -1;\n    var currentMaxIndexCountMaxIndex20 = -1;\n    var currentMaxIndexCountMaxIndex21\
    \ = -1;\n    var currentMaxIndexCountMaxIndex22 = -1;\n    var currentMaxIndexCountMaxIndex23\
    \ = -1;\n    var currentMaxIndexCountMaxIndex24 = -1;\n    var currentMaxIndexCountMaxIndex25\
    \ = -1;\n    var currentMaxIndexCountMaxIndex26 = -1;\n    var currentMaxIndexCountMaxIndex27\
    \ = -1;\n    var currentMaxIndexCountMaxIndex28 = -1;\n    var currentMaxIndexCountMaxIndex29\
    \ = -1;\n    var currentMaxIndexCountMaxIndex30 = -1;\n    var currentMaxIndexCountMaxIndex31\
    \ = -1;\n    var currentMaxIndexCountMaxIndex32 = -1;\n    var currentMaxIndexCountMaxIndex33\
    \ = -1;\n    var currentMaxIndexCountMaxIndex34 = -1;\n    var currentMaxIndexCountMaxIndex35\
    \ = -1;\n    var currentMaxIndexCountMaxIndex36 = -1;\n    var currentMaxIndexCountMaxIndex37\
    \ = -1;\n    var currentMaxIndexCountMaxIndex38 = -1;\n    var currentMaxIndexCountMaxIndex39\
    \ = -1;\n    var currentMaxIndexCountMaxIndex40 = -1;\n    var currentMaxIndexCountMaxIndex41\
    \ = -1;\n    var currentMaxIndexCountMaxIndex42 = -1;\n    var currentMaxIndexCountMaxIndex43\
    \ = -1;\n    var currentMaxIndexCountMaxIndex44 = -1;\n    var currentMax\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2zreeu48.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659747959
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  const result: number[] = [];\n  let max: number = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1d0c_dz3.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1d0c_dz3.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747951
- exit_code: 1
  program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
    \ number[] {\n  let result: number[] = [];\n  let currentMax = numbers[0];\n \
    \ for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > currentMax)\
    \ {\n      currentMax = numbers[i];\n    }\n  }\n  result.push(currentMax);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpwqbipyrw.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwqbipyrw.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747959
