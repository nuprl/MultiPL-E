completions:
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let\
  \ i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i];\n\
  \    }\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n\
  \    let sum = 0;\n    for (let j = 0; j < num; j++) {\n      if (isPrime(j)) {\n\
  \        sum += j;\n      }\n    }\n    if (sum > max) {\n      max = sum;\n   \
  \ }\n  }\n  return max;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    sum += prime.reduce((a, b) => a + b, 0);\n\
  \  }\n  return sum;\n}\n"
- "  let largestPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let num = lst[i];\n    let prime: boolean;\n    for (let j = i; j < lst.length;\
  \ j++) {\n      if (num % j === 0) {\n        prime = false;\n        break;\n \
  \     }\n      prime = true;\n    }\n    if (prime) {\n      largestPrime = num;\n\
  \      sum += num;\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    maxSum += lst[i];\n  }\n  return maxSum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] === maxPrime)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    let prime = true;\n    for (let j = i; j < lst.length;\
  \ j++) {\n      if (num % j === 0) {\n        prime = false;\n        break;\n \
  \     }\n    }\n    if (prime) {\n      sum += num;\n      if (sum > maxPrime) {\n\
  \        maxPrime = sum;\n      }\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n  for (let\
  \ i = 1; i < maxPrime; i++) {\n    if (lst.includes(i)) {\n      sum += i\n    }\n\
  \  }\n  return sum\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    sum += prime[prime.length - 1];\n  }\n\
  \  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let\
  \ num = lst[i];\n    let prime = primeFactors(num);\n    if (prime.length > max)\
  \ {\n      max = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++)\
  \ {\n      if (prime[j] > max) {\n        max = prime[j];\n      }\n    }\n    sum\
  \ += prime[prime.length - 1];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % lst[i] == 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum)\
  \ {\n      maxSum = sum;\n      maxPrime = lst[i];\n    }\n  }\n  return maxPrime;\n\
  }\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j]\
  \ % 2 === 0) {\n        sum += lst[i][j];\n      }\n    }\n    if (sum > maxSum)\
  \ {\n      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxSum;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] > lst[j]) {\n\
  \        let temp = lst[i];\n        lst[i] = lst[j];\n        lst[j] = temp;\n\
  \      }\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >\
  \ max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let sum = 0;\n\
  \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum\
  \ += lst[maxIndex];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++)\
  \ {\n      if (prime[j] > maxPrime) {\n        maxPrime = prime[j];\n      }\n \
  \   }\n    sum += prime[prime.length - 1];\n  }\n  return sum;\n}\n"
- "    let maxPrime: number = lst[0];\n    let sum: number = 0;\n    for (let i =\
  \ 0; i < lst.length; i++) {\n        let currentPrime: number = lst[i];\n      \
  \  if (currentPrime > maxPrime) {\n            maxPrime = currentPrime;\n      \
  \  }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        let currentPrime:\
  \ number = lst[i];\n        if (currentPrime == maxPrime) {\n            sum +=\
  \ currentPrime;\n        }\n    }\n    return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++)\
  \ {\n      if (prime[j] > maxPrime) {\n        maxPrime = prime[j];\n      }\n \
  \   }\n    sum += prime[prime.length - 1];\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = 1;\n  let sum: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    let currentPrime: number = lst[i];\n    for (let j = maxPrime; j *\
  \ j <= currentPrime; j++) {\n      if (currentPrime % j === 0) {\n        currentPrime\
  \ = j;\n        break;\n      }\n    }\n    maxPrime = currentPrime;\n    sum +=\
  \ currentPrime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n      }\n    }\n    if (prime > maxPrime)\
  \ {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % lst[i] == 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum)\
  \ {\n      maxSum = sum;\n      maxPrime = lst[i];\n    }\n  }\n  return maxPrime;\n\
  }\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let largestPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let num = lst[i];\n    let prime = true;\n    for (let j = i; j < lst.length;\
  \ j++) {\n      if (num % j == 0) {\n        prime = false;\n        break;\n  \
  \    }\n    }\n    if (prime) {\n      largestPrime = num;\n      sum += num;\n\
  \    }\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  let sum = 0;\n  for (let i = maxIndex; i >= 0; i--) {\n    if (lst[i] % max ===\
  \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = maxPrime; i > 0; i--) {\n    if (lst.includes(i)) {\n\
  \      sum += i;\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++)\
  \ {\n      sum += prime[j];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "    let maxPrime = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let prime = primeFactors(lst[i]);\n        if (prime.length > maxPrime)\
  \ {\n            maxPrime = prime.length;\n        }\n        sum += prime.length;\n\
  \    }\n    return sum;\n}\n"
- "  let maxPrime: number = lst[0]\n  let sum: number = 0\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n  for\
  \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum\
  \ += lst[i]\n    }\n  }\n  return sum\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n  for (let\
  \ i = 1; i < maxPrime; i++) {\n    if (lst.includes(i)) {\n      sum += i\n    }\n\
  \  }\n  return sum\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let primeSum = 0;\n    for (let j = lst[i]; j <= lst[i]; j++) {\n     \
  \ if (isPrime(j)) {\n        primeSum += j;\n      }\n    }\n    if (primeSum >\
  \ maxSum) {\n      maxSum = primeSum;\n      maxPrime = i;\n    }\n  }\n  return\
  \ maxSum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = maxPrime; i > 0; i--) {\n    if (lst.indexOf(i) === -1)\
  \ {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = null;\n  let sum: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    let prime: number = isPrime(lst[i]);\n    if (prime > maxPrime) {\n\
  \      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n  for (let\
  \ i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i]\n\
  \    }\n  }\n  return sum\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n  for (let\
  \ i = maxPrime; i > 0; i--) {\n    if (lst.indexOf(i) > -1) {\n      sum += i\n\
  \    }\n  }\n  return sum\n}\n"
- "  let largestPrime = 0;\n  let sumOfDigits = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    let currentDigit = lst[i];\n    let isPrime = true;\n    for (let\
  \ j = i; j < lst.length; j++) {\n      if (lst[j] % currentDigit === 0) {\n    \
  \    isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n    \
  \  sumOfDigits += currentDigit;\n      if (currentDigit > largestPrime) {\n    \
  \    largestPrime = currentDigit;\n      }\n    }\n  }\n  return sumOfDigits;\n\
  }\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    sum += prime.length;\n  }\n  return sum;\n\
  }\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).filter(x => x > 0).length;\n    if (prime\
  \ > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return\
  \ sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    let prime = true;\n    for (let j = Math.ceil(Math.sqrt(num));\
  \ j > 0; j--) {\n      if (num % j === 0) {\n        prime = false;\n        break;\n\
  \      }\n    }\n    if (prime) {\n      sum += num;\n      if (sum > maxPrime)\
  \ {\n        maxPrime = sum;\n      }\n    }\n  }\n  return maxPrime;\n}\n"
- "    let max: number = Math.max(...lst);\n    let maxIndex: number = lst.indexOf(max);\n\
  \    let sum: number = 0;\n    for (let i: number = maxIndex + 1; i < lst.length;\
  \ i++) {\n        if (lst[i] % max === 0) {\n            sum += lst[i];\n      \
  \  }\n    }\n    return sum;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (num\
  \ % j == 0) {\n        num = num / j;\n        break;\n      }\n    }\n    if (num\
  \ > max) {\n      max = num;\n      maxIndex = i;\n    }\n  }\n  return lst[maxIndex];\n\
  }\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 1; i < maxPrime; i++) {\n    if (lst[i] % maxPrime ===\
  \ 0) {\n      sum += lst[i] % maxPrime;\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j]\
  \ > maxPrime) {\n        maxPrime = lst[i][j];\n      }\n      sum += lst[i][j];\n\
  \    }\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n\
  }\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "    let max = 0;\n    let maxNum = 0;\n    let sum = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        let num = lst[i];\n        if (num > max) {\n  \
  \          max = num;\n            maxNum = i;\n        }\n    }\n    for (let i\
  \ = maxNum + 1; i < lst.length; i++) {\n        let num = lst[i];\n        if (num\
  \ > max) {\n            max = num;\n            maxNum = i;\n        }\n    }\n\
  \    for (let i = maxNum + 1; i < lst.length; i++) {\n        let num = lst[i];\n\
  \        if (num > max) {\n            max = num;\n            maxNum = i;\n   \
  \     }\n    }\n    for (let i = maxNum + 1; i < lst.length; i++) {\n        let\
  \ num = lst[i];\n        if (num > max) {\n            max = num;\n            maxNum\
  \ = i;\n        }\n    }\n    for (let i = maxNum + 1; i < lst.length; i++) {\n\
  \        let num = lst[i];\n        if (num > max) {\n            max = num;\n \
  \           maxNum = i;\n        }\n    }\n    for (let i = maxNum + 1; i < lst.length;\
  \ i++) {\n        let num = lst[i];\n        if (num > max) {\n            max =\
  \ num;\n            maxNum = i;\n        }\n    }\n    for (let i = maxNum + 1;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (num > max) {\n\
  \            max = num;\n            maxNum = i;\n        }\n    }\n    for (let\
  \ i = maxNum + 1; i < lst.length; i++) {\n        let num = lst[i];\n        if\
  \ (num > max) {\n            max = num;\n            maxNum = i;\n        }\n  \
  \  }\n    for (let i = maxNum + 1; i < lst.length; i++) {\n        let num = lst[i];\n\
  \        if (num > max) {\n            max = num;\n            maxNum = i;\n   \
  \     }\n    }\n    for (let i = maxNum + 1; i < lst.length; i++) {\n        let\
  \ num = lst[i];\n        if (num > max) {\n            max = num;\n            maxNum\
  \ = i;\n        }\n    }\n    for (let i = maxNum + 1; i < lst.length; i++) {\n\
  \        let num = lst[i];\n        if (num > max) {\n            max = num;\n \
  \           maxNum = i;\n        }\n    }\n    for (let i = maxNum + 1; i < lst.length;\
  \ i++) {\n        let num = lst[i];\n        if (num > max) {\n            max =\
  \ num;\n            maxNum = i;\n        }\n    }\n    for (let i = maxNum + 1;\
  \ i < lst.length; i++) {\n        let num = lst[i];\n        if (num > max) {\n\
  \            max = num;\n            maxNum = i;\n        }\n    }\n    for (let\
  \ i = maxNum + 1; i < lst.length; i++) {\n        let num = lst[i];\n        if\
  \ (num > max) {\n            max = num;\n            maxNum = i;\n        }\n  \
  \  }\n    for (let i = maxNum + 1; i < lst.length; i++) {\n        let num = lst"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let largestPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let num = lst[i];\n    let isPrime = true;\n    for (let j = 2; j < num;\
  \ j++) {\n      if (num % j === 0) {\n        isPrime = false;\n        break;\n\
  \      }\n    }\n    if (isPrime) {\n      sum += num;\n      if (sum > largestPrime)\
  \ {\n        largestPrime = sum;\n      }\n    }\n  }\n  return largestPrime;\n\
  }\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "    let maxPrime = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let prime = primeCheck(lst[i]);\n        if (prime > maxPrime) {\n\
  \            maxPrime = prime;\n        }\n        sum += lst[i];\n    }\n    return\
  \ sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    let prime = primeFactors(num);\n    if (prime.length\
  \ > maxPrime) {\n      maxPrime = prime.length;\n    }\n    for (let j = 0; j <\
  \ prime.length; j++) {\n      sum += prime[j];\n    }\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] === maxPrime)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n  for (let\
  \ i = maxPrime; i > 0; i--) {\n    if (lst.indexOf(i) === -1) {\n      sum += i\n\
  \    }\n  }\n  return sum\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  let maxNum = 0;\n  for (let i = 0; i < lst.length; i++) {\n \
  \   let num = lst[i];\n    if (num > max) {\n      max = num;\n      maxNum = i;\n\
  \    }\n  }\n  let sum = 0;\n  for (let i = maxNum + 1; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    if (num > max) {\n      sum += num - max;\n      max\
  \ = num;\n    } else {\n      sum += num;\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sumOfDigits: number = 0;\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n\
  \    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime)\
  \ {\n      sumOfDigits += lst[i];\n    }\n  }\n  return sumOfDigits;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    maxSum += prime;\n  }\n  return maxSum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let largestPrime = 0;\n  let sumOfDigits = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    let currentDigit = lst[i];\n    if (currentDigit % 2 === 0) {\n  \
  \    largestPrime = currentDigit;\n    }\n    if (currentDigit > largestPrime) {\n\
  \      largestPrime = currentDigit;\n    }\n    sumOfDigits += currentDigit;\n \
  \ }\n  return sumOfDigits;\n}\n"
- "  let maxPrime = lst[0];\n  let sum = 0;\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let\
  \ i = maxPrime; i > 0; i--) {\n    if (lst.indexOf(i) === -1) {\n      sum += i;\n\
  \    }\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    let currentPrime: number = lst[i];\n    if (currentPrime\
  \ > maxPrime) {\n      maxPrime = currentPrime;\n    }\n  }\n  for (let i = 1; i\
  \ < lst.length; i++) {\n    let currentPrime: number = lst[i];\n    if (currentPrime\
  \ == maxPrime) {\n      sum += currentPrime;\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    let sum = 0;\n    for (let i = maxIndex; i < lst.length;\
  \ i++) {\n        if (lst[i] % max === 0) {\n            sum += lst[i];\n      \
  \  }\n    }\n    return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    let prime = true;\n    for (let j = i; j < lst.length;\
  \ j++) {\n      if (num % j === 0) {\n        prime = false;\n        break;\n \
  \     }\n    }\n    if (prime) {\n      sum += num;\n      if (sum > maxPrime) {\n\
  \        maxPrime = sum;\n      }\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] === maxPrime)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n \
  \     max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if\
  \ (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i\
  \ = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n  \
  \  }\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 0; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    let prime = true;\n    for (let j = i; j < lst.length;\
  \ j++) {\n      if (num % j === 0) {\n        prime = false;\n        break;\n \
  \     }\n    }\n    if (prime) {\n      sum += num;\n      if (sum > maxPrime) {\n\
  \        maxPrime = sum;\n      }\n    }\n  }\n  return maxPrime;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] > lst[j]) {\n\
  \        let temp = lst[i];\n        lst[i] = lst[j];\n        lst[j] = temp;\n\
  \      }\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >\
  \ max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let sum = 0;\n\
  \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum\
  \ += lst[maxIndex];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0];\n  let sum = 0;\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let\
  \ i = maxPrime; i > 0; i--) {\n    if (lst.indexOf(i) === -1) {\n      sum += i;\n\
  \    }\n  }\n  return sum;\n}\n"
- "    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        if (lst[i] > max) {\n            max = lst[i];\n            maxIndex\
  \ = i;\n        }\n    }\n    let sum = 0;\n    for (let i = maxIndex; i >= 0; i--)\
  \ {\n        if (lst[i] % max === 0) {\n            sum += lst[i];\n        }\n\
  \    }\n    return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = null;\n  let maxSum: number = null;\n  for (let i = 0;\
  \ i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst.length;\
  \ j++) {\n      if (lst[j] % i === 0) {\n        sum += lst[j];\n      }\n    }\n\
  \    if (maxPrime === null || sum > maxSum) {\n      maxPrime = i;\n      maxSum\
  \ = sum;\n    }\n  }\n  return maxSum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let prime\
  \ = primeFactor(lst[i]);\n    if (prime == maxPrime) {\n      sum += prime;\n  \
  \  }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (num\
  \ % j === 0) {\n        num = num / j;\n      } else {\n        break;\n      }\n\
  \    }\n    if (num > max) {\n      max = num;\n      maxIndex = i;\n    }\n  }\n\
  \  return max;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\
  \  let sum = 0;\n  for (let i = maxIndex; i < lst.length; i++) {\n    if (lst[i]\
  \ % max === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "    let maxPrime = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let prime = primeFactors(lst[i]).find(p => p > 0);\n        if (prime\
  \ > maxPrime) {\n            maxPrime = prime;\n        }\n        sum += prime;\n\
  \    }\n    return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j]\
  \ % 2 === 0) {\n        sum += lst[i][j];\n      }\n    }\n    if (sum > maxSum)\
  \ {\n      maxSum = sum;\n      maxPrime = lst[i];\n    }\n  }\n  return maxPrime.reduce((a,\
  \ b) => a + b);\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0];\n  let sum = 0;\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let\
  \ i = 1; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i];\n\
  \    }\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max)\
  \ {\n      max = lst[i];\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return\
  \ sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0];\n  let sum = 0;\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let\
  \ i = maxPrime; i > 0; i--) {\n    if (lst.indexOf(i) === -1) {\n      sum += i;\n\
  \    }\n  }\n  return sum;\n}\n"
- "    let maxPrime: number = 1;\n    let sum: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        let prime: number = isPrime(lst[i]);\n        if\
  \ (prime > maxPrime) {\n            maxPrime = prime;\n        }\n        sum +=\
  \ lst[i];\n    }\n    return sum;\n}\n"
- "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    for (let j = i + 1; j < lst.length; j++) {\n      if\
  \ (num * j > max) {\n        max = num * j;\n        maxIndex = j;\n      }\n  \
  \  }\n  }\n  return max;\n}\n"
- "  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n\
  \    let isPrime = true;\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % cur === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n   \
  \ if (isPrime) {\n      max = Math.max(max, cur);\n    }\n  }\n  return max;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++)\
  \ {\n      if (prime[j] > maxPrime) {\n        maxPrime = prime[j];\n      }\n \
  \   }\n    sum += prime[prime.length - 1];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i +\
  \ 1; j < lst.length; j++) {\n      if (lst[i] % lst[j] === 0) {\n        max = lst[i]\
  \ + lst[j];\n        break;\n      }\n    }\n  }\n  return max;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = 1;\n  let sum: number = 0;\n  for (let i = 0; i < lst.length;\
  \ i++) {\n    let prime: number = lst[i];\n    for (let j = i; j < lst.length; j++)\
  \ {\n      if (lst[j] % prime === 0) {\n        prime = lst[j];\n        break;\n\
  \      }\n    }\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n \
  \   sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 1; i < maxPrime; i++) {\n    if (lst.indexOf(i) === -1)\
  \ {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n  for (let\
  \ i = 1; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n      sum += lst[i]\n\
  \    }\n  }\n  return sum\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).filter(p => p > 0);\n    if (prime.length\
  \ > maxPrime) {\n      maxPrime = prime.length;\n    }\n    for (let j = 0; j <\
  \ prime.length; j++) {\n      sum += prime[j];\n    }\n  }\n  return sum;\n}\n"
- "  let largestPrime: number = lst[0];\n  let sumOfDigits: number = 0;\n  for (let\
  \ i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime\
  \ = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i]\
  \ === largestPrime) {\n      sumOfDigits += lst[i];\n    }\n  }\n  return sumOfDigits;\n\
  }\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let\
  \ i = 0; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      sum += lst[i]\
  \ % maxPrime;\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "    let maxPrime = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let prime = primeFactors(lst[i])[0];\n        if (prime > maxPrime)\
  \ {\n            maxPrime = prime;\n        }\n    }\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        let prime = primeFactors(lst[i])[0];\n        if (prime == maxPrime)\
  \ {\n            sum += prime;\n        }\n    }\n    return sum;\n}\n</code>\n\
  <|/ a tags=algorithm,primes,javascript |>\n<| a |>\n<code>"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let primeSum = 0;\n    for (let j = lst[i]; j <= lst[i]; j++) {\n     \
  \ if (isPrime(j)) {\n        primeSum += j;\n      }\n    }\n    if (primeSum >\
  \ maxSum) {\n      maxSum = primeSum;\n      maxPrime = i;\n    }\n  }\n  return\
  \ maxSum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "    let maxPrime: number = 1;\n    let sum: number = 0;\n    for (let i = 0; i\
  \ < lst.length; i++) {\n        let currentPrime: number = lst[i];\n        for\
  \ (let j = maxPrime; j <= currentPrime; j++) {\n            if (currentPrime % j\
  \ === 0) {\n                maxPrime = j;\n                break;\n            }\n\
  \        }\n        sum += currentPrime;\n    }\n    return sum;\n}\n</code>\n<|/\
  \ a tags=algorithm,primes,javascript |>\n<| c |>\nThis is not correct. `maxPrime`\
  \ should be initialized to `lst[0]`.\n<|/ c |>\n<| c |>\nYes, you are right. I forgot\
  \ about that part. Thanks.\n<|/ c |>\n<| c |>\nThis doesn't work for `[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]`\n\
  <|/ c |>\n<| c |>\nIt works for me. `maxPrime` is initialized to `lst[0]`.\n<|/\
  \ c |>\n<| c |>\nIt works for me too. `maxPrime` is initialized to `lst[0]`.\n<|/\
  \ c |>\n<| a tags=algorithm,primes,javascript |>\n<code>"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let largestPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let prime = primeCheck(lst[i]);\n    if (prime > largestPrime) {\n    \
  \  largestPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime: number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i <\
  \ lst.length; i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n \
  \   }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime)\
  \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++)\
  \ {\n      if (prime[j] > maxPrime) {\n        maxPrime = prime[j];\n      }\n \
  \   }\n    sum += prime[prime.length - 1];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "    let maxPrime = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
  \ {\n        let num = lst[i];\n        let prime = true;\n        for (let j =\
  \ i; j < lst.length; j++) {\n            if (num % j == 0) {\n                prime\
  \ = false;\n                break;\n            }\n        }\n        if (prime)\
  \ {\n            sum += num;\n            if (sum > maxPrime) {\n              \
  \  maxPrime = sum;\n            }\n        }\n    }\n    return maxPrime;\n}\n</code>\n\
  <|/ a tags=javascript,typescript |>\n<| c |>\nThis code doesn't work. `maxPrime`\
  \ should be initialized to `0` before the loop, and `sum` should be initialized\
  \ to `0` before the loop. Otherwise `maxPrime` will never be updated.\n<|/ c |>\n\
  <| c |>\nThanks for pointing that out. I've updated the answer.\n<|/ c |>\n<| a\
  \ dscore=0 |>\n<code>"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let max = 0;\n  let maxNum = 0;\n  for (let i = 0; i < lst.length; i++) {\n \
  \   if (lst[i] > max) {\n      max = lst[i];\n      maxNum = i;\n    }\n  }\n  let\
  \ sum = 0;\n  for (let i = maxNum + 1; i < lst.length; i++) {\n    if (lst[i] >\
  \ max) {\n      sum += lst[i] - max;\n      max = lst[i];\n    }\n  }\n  return\
  \ sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]).length;\n    if (prime > maxPrime) {\n   \
  \   maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n  for (let\
  \ i = maxPrime; i >= 2; i--) {\n    if (lst.includes(i)) {\n      sum += i\n   \
  \ }\n  }\n  return sum\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    let prime = true;\n    for (let j = i; j < lst.length;\
  \ j++) {\n      if (num % j === 0) {\n        prime = false;\n        break;\n \
  \     }\n    }\n    if (prime) {\n      sum += num;\n      if (sum > maxPrime) {\n\
  \        maxPrime = sum;\n      }\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = lst[0];\n  let sum = 0;\n  for (let i = 1; i < lst.length; i++)\
  \ {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n  for (let\
  \ i = 1; i < maxPrime; i++) {\n    if (lst.indexOf(i) === -1) {\n      sum += i;\n\
  \    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let prime\
  \ = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      sum += prime % 10;\n\
  \    }\n  }\n  return sum;\n}\n"
- "  let largestPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let currentNum = lst[i];\n    let isPrime = true;\n    for (let j = i;\
  \ j < lst.length; j++) {\n      if (lst[j] % currentNum == 0) {\n        isPrime\
  \ = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      sum += currentNum;\n\
  \      if (currentNum > largestPrime) {\n        largestPrime = currentNum;\n  \
  \    }\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j]\
  \ % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n    }\n  \
  \  if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
  \  }\n  return sum;\n}\n"
- "    let maxPrime = 0;\n    let maxSum = 0;\n    for (let i = 0; i < lst.length;\
  \ i++) {\n        let sum = 0;\n        for (let j = 0; j < lst.length; j++) {\n\
  \            if (lst[j] % i === 0) {\n                sum += lst[j];\n         \
  \   }\n        }\n        if (sum > maxSum) {\n            maxSum = sum;\n     \
  \       maxPrime = i;\n        }\n    }\n    return maxPrime;\n}\n</code>\n<|/ a\
  \ dscore=0 |>\n<| a tags=algorithm,primes,javascript |>\n<code>"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    if (num > maxPrime) {\n      maxPrime = num;\n    }\n\
  \  }\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num\
  \ > maxPrime) {\n      sum += num - maxPrime;\n      maxPrime = num;\n    }\n  }\n\
  \  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])\n    if (prime.length > maxPrime) {\n    \
  \  maxPrime = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++) {\n\
  \      sum += prime[j];\n    }\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    for (let j = 0; j < prime.length; j++)\
  \ {\n      if (prime[j] > maxPrime) {\n        maxPrime = prime[j];\n      }\n \
  \   }\n    sum += prime[prime.length - 1];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += lst[i];\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i]);\n    if (prime.length > maxPrime) {\n   \
  \   maxPrime = prime.length;\n    }\n    sum += prime.reduce((a, b) => a + b);\n\
  \  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[j]\
  \ % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum > maxSum) {\n\
  \      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return maxPrime;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let num = lst[i];\n    let prime = primeFactors(num)[0];\n    if (prime > maxPrime)\
  \ {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let largestPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
  \ {\n    let prime = lst[i];\n    if (prime > largestPrime) {\n      largestPrime\
  \ = prime;\n    }\n    for (let j = prime; j > 0; j--) {\n      if (lst[i] % j ===\
  \ 0) {\n        sum += j;\n        break;\n      }\n    }\n  }\n  return sum;\n\
  }\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
- "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
  \    let prime = primeFactors(lst[i])[0];\n    if (prime > maxPrime) {\n      maxPrime\
  \ = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n"
language: ts
name: HumanEval_94_skjkasdkd
prompt: '//You are given a list of integers.

  // You need to find the largest prime value and return the sum of its digits.

  // Examples:

  // For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should
  be 10

  // For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25

  // For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should
  be 13

  // For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11

  // For lst = [0,81,12,3,1,21] the output should be 3

  // For lst = [0,8,1,2,1,7] the output should be 7

  function skjkasdkd(lst: number[]): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2,\
  \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0,\
  \ 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n\
  \  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191,\
  \ 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\
  \ntest();"
