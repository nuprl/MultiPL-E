name: HumanEval_94_skjkasdkd
language: humaneval_to_typescript.py
prompt: "//You are given a list of integers.\n// You need to find the largest prime\
  \ value and return the sum of its digits.\n// Examples:\n// For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n// For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n// For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n// For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n// For lst = [0,81,12,3,1,21] the output should be 3\n//\
  \ For lst = [0,8,1,2,1,7] the output should be 7\nfunction skjkasdkd(lst: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2,\
  \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0,\
  \ 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n\
  \  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191,\
  \ 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\
  \ntest();"
completions: ["  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n     \
    \ if (lst[j] % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum\
    \ > maxSum) {\n      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return\
    \ maxPrime;\n}\n", "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    let prime = primeFactor(lst[i]);\n    if (prime > maxPrime)\
    \ {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n}\n",
  "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if\
    \ (lst[j] % prime === 0) {\n        prime = lst[j];\n        break;\n      }\n\
    \    }\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum +=\
    \ prime;\n  }\n  return sum;\n}\n", "  let maxPrime = 0;\n  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    let prime = primeFactors(lst[i])[0];\n\
    \    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += lst[i];\n\
    \  }\n  return sum;\n}\n", "  let maxPrime = 0;\n  let sum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    let prime = primeCheck(lst[i]);\n    if (prime\
    \ > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += lst[i];\n  }\n  return\
    \ sum;\n}\n", "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n  \
    \    sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let max = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let sum = 0;\n   \
    \ for (let j = 0; j < num; j++) {\n      if (isPrime(j)) {\n        sum += j;\n\
    \      }\n    }\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return\
    \ max;\n}\n", "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let sum = 0;\n    for (let j = 0; j < lst.length; j++) {\n     \
    \ if (lst[j] % i === 0) {\n        sum += lst[j];\n      }\n    }\n    if (sum\
    \ > maxSum) {\n      maxSum = sum;\n      maxPrime = i;\n    }\n  }\n  return\
    \ maxPrime;\n}\n", "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    let prime = primeFactors(lst[i]);\n    if (prime.length\
    \ > maxPrime) {\n      maxPrime = prime.length;\n    }\n    sum += prime.reduce((a,\
    \ b) => a + b, 0);\n  }\n  return sum;\n}\n", "  let largestPrime = 0;\n  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n\
    \    let prime: boolean;\n    for (let j = i; j < lst.length; j++) {\n      if\
    \ (num % j === 0) {\n        prime = false;\n        break;\n      }\n      prime\
    \ = true;\n    }\n    if (prime) {\n      largestPrime = num;\n      sum += num;\n\
    \    }\n  }\n  return sum;\n}\n", "  let maxPrime = 0;\n  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    let prime = primeFactors(lst[i]).length;\n\
    \    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n\
    \  }\n  return sum;\n}\n", "  let maxPrime = 0;\n  let maxSum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    let prime = primeCheck(lst[i]);\n    if (prime\
    \ > maxPrime) {\n      maxPrime = prime;\n    }\n    maxSum += lst[i];\n  }\n\
    \  return maxSum;\n}\n", "  let maxPrime: number = lst[0];\n  let sum: number\
    \ = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxPrime) {\n\
    \      maxPrime = lst[i];\n    }\n  }\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] === maxPrime) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let num = lst[i];\n    let prime = true;\n    for (let j = i; j\
    \ < lst.length; j++) {\n      if (num % j === 0) {\n        prime = false;\n \
    \       break;\n      }\n    }\n    if (prime) {\n      sum += num;\n      if\
    \ (sum > maxPrime) {\n        maxPrime = sum;\n      }\n    }\n  }\n  return maxPrime;\n\
    }\n", "  let maxPrime = lst[0]\n  let sum = 0\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i]\n    }\n  }\n\
    \  for (let i = 1; i < maxPrime; i++) {\n    if (lst.includes(i)) {\n      sum\
    \ += i\n    }\n  }\n  return sum\n}\n", "  let maxPrime = 0;\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    let prime = primeFactors(lst[i]);\n\
    \    if (prime.length > maxPrime) {\n      maxPrime = prime.length;\n    }\n \
    \   sum += prime[prime.length - 1];\n  }\n  return sum;\n}\n", "  let maxPrime:\
    \ number = lst[0];\n  let sum: number = 0;\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] > maxPrime) {\n      maxPrime = lst[i];\n    }\n  }\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === maxPrime) {\n  \
    \    sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let max = 0;\n  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let\
    \ prime = primeFactors(num);\n    if (prime.length > max) {\n      max = prime.length;\n\
    \    }\n    for (let j = 0; j < prime.length; j++) {\n      if (prime[j] > max)\
    \ {\n        max = prime[j];\n      }\n    }\n    sum += prime[prime.length -\
    \ 1];\n  }\n  return sum;\n}\n", "  let maxPrime = 0;\n  let maxSum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = i; j\
    \ < lst.length; j++) {\n      if (lst[j] % lst[i] == 0) {\n        sum += lst[j];\n\
    \      }\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxPrime\
    \ = lst[i];\n    }\n  }\n  return maxPrime;\n}\n", "  let maxPrime = 0;\n  let\
    \ maxSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n  \
    \  for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n\
    \        sum += lst[i][j];\n      }\n    }\n    if (sum > maxSum) {\n      maxSum\
    \ = sum;\n      maxPrime = i;\n    }\n  }\n  return maxSum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
