language: ts
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ < 0) {\n      sum += Math.abs(arr[i]);\n    } else {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp6udfx8iq.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6udfx8iq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n      count += Math.floor(num\
    \ / 10);\n    } else {\n      count += Math.floor(num / 10);\n    }\n  }\n  return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe4yed03k.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    const digits\
    \ = String(num).split('');\n    for (let j = 0; j < digits.length; j++) {\n  \
    \    if (digits[j] === '0') {\n        count++;\n      }\n    }\n  }\n  return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv930lj0y.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ < 0) {\n      sum += Math.abs(arr[i]);\n    } else {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp6udfx8iq.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6udfx8iq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n      count += Math.floor(Math.log10(num));\n\
    \    } else {\n      count += Math.floor(Math.log10(Math.abs(num)));\n    }\n\
    \  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc68sa0ba.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmpc68sa0ba.ts(14,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    ../../../../../tmp/tmpc68sa0ba.ts(16,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpu432_3iq.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu432_3iq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i]\
    \ * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-120\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp1x20thp6.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1x20thp6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -120,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0)\
    \ {\n      count += Math.floor(Math.log10(num));\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3dci_w9x.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmp3dci_w9x.ts(16,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpu432_3iq.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu432_3iq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ < 0) {\n      sum += Math.abs(arr[i]);\n    } else {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp6udfx8iq.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6udfx8iq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i]\
    \ / 10);\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-2\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprcs79s05.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprcs79s05.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -2,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmpagv48xk7.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpagv48xk7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748582
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0)\
    \ {\n      count += Math.floor(num / 10);\n      num -= Math.floor(num / 10) *\
    \ 10;\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuzv6o0cl.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmpuzv6o0cl.ts(17,7): error TS2588: Cannot assign to ''num''
    because it is a constant.

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpu432_3iq.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu432_3iq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0)\
    \ {\n      count += Math.floor(Math.log10(num));\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3dci_w9x.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmp3dci_w9x.ts(16,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0)\
    \ {\n      count += Math.floor(Math.log10(num));\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3dci_w9x.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmp3dci_w9x.ts(16,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1659748581
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0)\
    \ {\n      count += Math.floor(Math.log10(num));\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3dci_w9x.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmp3dci_w9x.ts(16,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpu432_3iq.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu432_3iq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n      count += Math.floor(Math.log10(num));\n\
    \    } else {\n      count += Math.floor(Math.log10(Math.abs(num)));\n    }\n\
    \  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc68sa0ba.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmpc68sa0ba.ts(14,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    ../../../../../tmp/tmpc68sa0ba.ts(16,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      count += Math.abs(num);\n    } else\
    \ {\n      count += num;\n    }\n  }\n  return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkwl3r14v.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwl3r14v.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748582
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0)\
    \ {\n      count += Math.floor(Math.log10(num));\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3dci_w9x.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmp3dci_w9x.ts(16,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0)\
    \ {\n      count += Math.floor(Math.log10(num));\n    }\n  }\n  return count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3dci_w9x.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    ../../../../../tmp/tmp3dci_w9x.ts(16,32): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 2
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (num < 0) {\n      num *= -1;\n      count += Math.floor(num\
    \ / 10) + 1;\n    } else {\n      count += Math.floor(num / 10);\n    }\n  }\n\
    \  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfcfmsorz.ts(13,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    '
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i]\
    \ * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-120\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp1x20thp6.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1x20thp6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -120,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748581
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.abs(arr[i]);\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmps35v40gj.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps35v40gj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp9vtumy1q.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtumy1q.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmplneogcz4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplneogcz4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
- exit_code: 1
  program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]):\
    \ number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpox5vkiea.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox5vkiea.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738705
