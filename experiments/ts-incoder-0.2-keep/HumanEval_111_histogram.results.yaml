language: ts
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp2l839q7e.js:21:12)\n    at Object.<anonymous> (/tmp/tmp2l839q7e.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const counts: {[key: string]: number}\
    \ = {};\n  const splitted = test.split(' ');\n  for (const letter of splitted)\
    \ {\n    const count = counts[letter] ?? 0;\n    counts[letter] = count + 1;\n\
    \  }\n  return counts;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmporr31633.ts(14,35): error TS1109: Expression expected.

    ../../../../../tmp/tmporr31633.ts(14,38): error TS1005: '':'' expected.

    '
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    const count\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter] = count;\n\
    \  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpidf4hyrj.js:22:12)\n    at Object.<anonymous> (/tmp/tmpidf4hyrj.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const counts: {[key: string]: number}\
    \ = {};\n  for (const letter of test.split(' ')) {\n    counts[letter] = (counts[letter]\
    \ || 0) + 1;\n  }\n  return counts;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmprsj6uwvd.js:22:12)\n    at Object.<anonymous> (/tmp/tmprsj6uwvd.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  for (const\
    \ letter of test.toLowerCase().split(' ')) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpl77wuwnt.js:22:12)\n    at Object.<anonymous> (/tmp/tmpl77wuwnt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: { [key: string]: number\
    \ } = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n\
    \    if (histogram[letter] == null) {\n      histogram[letter] = 1;\n    } else\
    \ {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpvfn_l774.js:26:12)\n    at Object.<anonymous> (/tmp/tmpvfn_l774.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: {[key: string]: number}\
    \ = {};\n  const splitted = test.split(' ');\n  for (const letter of splitted)\
    \ {\n    histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1;\n\
    \  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpw87u8__n.js:23:12)\n    at Object.<anonymous> (/tmp/tmpw87u8__n.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    const\
    \ count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
    \ = count;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp0t1qe00i.js:22:12)\n    at Object.<anonymous> (/tmp/tmp0t1qe00i.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: {[key: string]: number}\
    \ = {};\n  for (const letter of test.toLowerCase().split(' ')) {\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp4zec4vnc.js:22:12)\n    at Object.<anonymous> (/tmp/tmp4zec4vnc.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: {[key: string]: number}\
    \ = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n\
    \    if (histogram[letter] == null) {\n      histogram[letter] = 0;\n    }\n \
    \   histogram[letter]++;\n  }\n  return histogram;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmp2gpce3l2.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2gpce3l2.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: { [key: string]: number\
    \ } = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpm7vnfeei.js:21:12)\n    at Object.<anonymous> (/tmp/tmpm7vnfeei.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  for (const\
    \ letter of test.toLowerCase().split(' ')) {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpl77wuwnt.js:22:12)\n    at Object.<anonymous> (/tmp/tmpl77wuwnt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 2
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const letters = test.split(' ').map(letter\
    \ => letter.toLowerCase());\n  const counts = letters.reduce((counts, letter)\
    \ => {\n    counts[letter] = (counts[letter] || 0) + 1;\n    return counts;\n\
    \  }, {});\n  return Object.entries(counts).reduce((result, [letter, count]) =>\
    \ {\n    if (count > result[1]) {\n      result = [letter, count];\n    }\n  \
    \  return result;\n  }, []);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqyiff32m.ts(16,17): error TS2339: Property ''entries''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  for (const\
    \ letter of test.split(' ')) {\n    histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n  }\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpbrh4oj6v.js:22:12)\n    at Object.<anonymous> (/tmp/tmpbrh4oj6v.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: { [key: string]: number\
    \ } = {};\n  test.split(' ').forEach((letter) => {\n    const count = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n    histogram[letter] = count;\n  });\n  return\
    \ histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp0dy0g2g9.js:22:12)\n    at Object.<anonymous> (/tmp/tmp0dy0g2g9.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: { [key: string]: number;\
    \ } = {};\n  test.split(' ').forEach(letter => {\n    histogram[letter] = (histogram[letter]\
    \ || 0) + 1;\n  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpxt188r7c.js:21:12)\n    at Object.<anonymous> (/tmp/tmpxt188r7c.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const counts: {[key: string]: number}\
    \ = {};\n  test.split(' ').forEach((letter: string) => {\n    counts[letter] =\
    \ counts[letter] ? counts[letter] + 1 : 1;\n  });\n  return counts;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpdjint4f7.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdjint4f7.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  test.split('\
    \ ').forEach(letter => {\n    const count = histogram[letter] ? histogram[letter]\
    \ + 1 : 1;\n    histogram[letter] = count;\n  });\n  return histogram;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp1iory_es.js:22:12)\n    at Object.<anonymous> (/tmp/tmp1iory_es.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  for (let\
    \ i = 0; i < test.length; i++) {\n    const letter = test[i];\n    histogram[letter]\
    \ = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  ' ': 3,\n\
    \  a: 2,\n  b: 2\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n  \
    \  at test (/tmp/tmpk7_7dqty.js:21:12)\n    at Object.<anonymous> (/tmp/tmpk7_7dqty.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, '\
    \ ': 3, b: 2 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
- exit_code: 1
  program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const histogram: any = {};\n  const letters\
    \ = test.split(' ');\n  letters.forEach(letter => {\n    if (histogram[letter]\
    \ == null) {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n\
    \  });\n  return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpg0igc_dl.js:25:12)\n    at Object.<anonymous> (/tmp/tmpg0igc_dl.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659738760
