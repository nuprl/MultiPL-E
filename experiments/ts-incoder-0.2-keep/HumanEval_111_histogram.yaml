completions:
- "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
  \ letter = test.charAt(i);\n    histogram[letter] = (histogram[letter] || 0) + 1;\n\
  \  }\n  return histogram;\n}\n"
- "  const counts: {[key: string]: number} = {};\n  const splitted = test.split('\
  \ ');\n  for (const letter of splitted) {\n    const count = counts[letter] ?? 0;\n\
  \    counts[letter] = count + 1;\n  }\n  return counts;\n}\n"
- "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
  \ letter = test[i];\n    const count = histogram[letter] ? histogram[letter] + 1\
  \ : 1;\n    histogram[letter] = count;\n  }\n  return histogram;\n}\n"
- "  const counts: {[key: string]: number} = {};\n  for (const letter of test.split('\
  \ ')) {\n    counts[letter] = (counts[letter] || 0) + 1;\n  }\n  return counts;\n\
  }\n"
- "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split('\
  \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
  }\n"
- "  const histogram: { [key: string]: number } = {};\n  for (let i = 0; i < test.length;\
  \ i++) {\n    const letter = test.charAt(i);\n    if (histogram[letter] == null)\
  \ {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n\
  \    }\n  }\n  return histogram;\n}\n"
- "  const histogram: {[key: string]: number} = {};\n  const splitted = test.split('\
  \ ');\n  for (const letter of splitted) {\n    histogram[letter] = histogram[letter]\
  \ ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n"
- "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
  \ letter = test.charAt(i);\n    const count = histogram[letter] ? histogram[letter]\
  \ + 1 : 1;\n    histogram[letter] = count;\n  }\n  return histogram;\n}\n"
- "  const histogram: {[key: string]: number} = {};\n  for (const letter of test.toLowerCase().split('\
  \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
  }\n"
- "  const histogram: {[key: string]: number} = {};\n  for (let i = 0; i < test.length;\
  \ i++) {\n    const letter = test.charAt(i);\n    if (histogram[letter] == null)\
  \ {\n      histogram[letter] = 0;\n    }\n    histogram[letter]++;\n  }\n  return\
  \ histogram;\n}\n"
- "  const histogram: { [key: string]: number } = {};\n  test.split(' ').forEach(letter\
  \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
  }\n"
- "  const histogram: any = {};\n  for (const letter of test.toLowerCase().split('\
  \ ')) {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n  return histogram;\n\
  }\n"
- "  const letters = test.split(' ').map(letter => letter.toLowerCase());\n  const\
  \ counts = letters.reduce((counts, letter) => {\n    counts[letter] = (counts[letter]\
  \ || 0) + 1;\n    return counts;\n  }, {});\n  return Object.entries(counts).reduce((result,\
  \ [letter, count]) => {\n    if (count > result[1]) {\n      result = [letter, count];\n\
  \    }\n    return result;\n  }, []);\n}\n"
- "  const histogram: any = {};\n  for (const letter of test.split(' ')) {\n    histogram[letter]\
  \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n"
- "  const histogram: { [key: string]: number } = {};\n  test.split(' ').forEach((letter)\
  \ => {\n    const count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
  \ = count;\n  });\n  return histogram;\n}\n"
- "  const histogram: { [key: string]: number; } = {};\n  test.split(' ').forEach(letter\
  \ => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
  }\n"
- "  const counts: {[key: string]: number} = {};\n  test.split(' ').forEach((letter:\
  \ string) => {\n    counts[letter] = counts[letter] ? counts[letter] + 1 : 1;\n\
  \  });\n  return counts;\n}\n"
- "  const histogram: any = {};\n  test.split(' ').forEach(letter => {\n    const\
  \ count = histogram[letter] ? histogram[letter] + 1 : 1;\n    histogram[letter]\
  \ = count;\n  });\n  return histogram;\n}\n"
- "  const histogram: any = {};\n  for (let i = 0; i < test.length; i++) {\n    const\
  \ letter = test[i];\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  }\n\
  \  return histogram;\n}\n"
- "  const histogram: any = {};\n  const letters = test.split(' ');\n  letters.forEach(letter\
  \ => {\n    if (histogram[letter] == null) {\n      histogram[letter] = 0;\n   \
  \ }\n    histogram[letter]++;\n  });\n  return histogram;\n}\n"
language: ts
name: HumanEval_111_histogram
prompt: '//Given a string representing a space separated lowercase letters, return
  a dictionary

  // of the letter with the most repetition and containing the corresponding count.

  // If several letters have the same occurrence, return all of them.

  // Example:

  // histogram(''a b c'') == {''a'': 1, ''b'': 1, ''c'': 1}

  // histogram(''a b b a'') == {''a'': 2, ''b'': 2}

  // histogram(''a b c a b'') == {''a'': 2, ''b'': 2}

  // histogram(''b b b b a'') == {''b'': 4}

  // histogram('''') == {}

  function histogram(test: string): {[key: string]: number} {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
