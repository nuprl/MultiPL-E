name: HumanEval_114_minSubArraySum
language: humaneval_to_typescript.py
prompt: "//Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\
  // minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
  \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
  \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
  \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
  \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
  \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
completions: ["  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n",
  "  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum\
    \ = Math.min(minSum, nums[i] + minSum);\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum\
    \ = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n", "  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}\n", "  let\
    \ minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum,\
    \ nums[i]);\n  }\n  return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const\
    \ currentSum = nums[i] + nums[minSumIndex];\n    if (currentSum < minSum) {\n\
    \      minSum = currentSum;\n      minSumIndex = i;\n    }\n  }\n  return minSum;\n\
    }\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length;\
    \ j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n   \
    \     minSum = currentSum;\n      }\n    }\n  }\n  return minSum;\n}\n", "  let\
    \ minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i +\
    \ 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum\
    \ < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n\
    \    }\n  }\n  return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n\
    \  }\n  return minSum;\n}\n", "  let minSum = nums[0];\n  for (let i = 1; i <\
    \ nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return\
    \ minSum;\n}\n", "  let minSum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n",
  "  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++)\
    \ {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum\
    \ = currentSum;\n      }\n    }\n  }\n  return minSum;\n}\n", "  let minSum =\
    \ nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum,\
    \ nums[i]);\n  }\n  return minSum;\n}\n", "  let minSum = nums[0];\n  for (let\
    \ i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n\
    \  return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums[i]\
    \ + nums[minSumIndex];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n\
    \      minSumIndex = i;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n\
    \  }\n  return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n  let\
    \ minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const currentSum\
    \ = nums[i] + nums[minIndex];\n    if (currentSum < minSum) {\n      minSum =\
    \ currentSum;\n      minIndex = i;\n    }\n  }\n  return minSum;\n}\n", "  let\
    \ minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum,\
    \ nums[i]);\n  }\n  return minSum;\n}\n", "  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum\
    \ = 0;\n    for (let j = 0; j < nums.length; j++) {\n      currentSum += nums[j];\n\
    \      if (currentSum < min) {\n        min = currentSum;\n        minIndex =\
    \ j;\n      }\n    }\n  }\n  return min;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n\
    \  }\n  return minSum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
