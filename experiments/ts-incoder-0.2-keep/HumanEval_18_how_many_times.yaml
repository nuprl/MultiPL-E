completions:
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.indexOf(substring,\
  \ i) !== -1) {\n            count++;\n        }\n    }\n    return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.includes(substring,\
  \ i)) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring,\
  \ i) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n"
- "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.indexOf(substring,\
  \ i) !== -1) {\n            count++;\n        }\n    }\n    return count;\n}\n"
language: ts
name: HumanEval_18_how_many_times
prompt: '//Find how many times a given substring can be found in the original string.
  Count overlaping cases.

  // >>> how_many_times('''', ''a'')

  // 0

  // >>> how_many_times(''aaa'', ''a'')

  // 3

  // >>> how_many_times(''aaaa'', ''aa'')

  // 3

  function how_many_times(string: string, substring: string): number {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\"\
  , \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
  cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n\
  }\n\ntest();"
