language: ts
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_lastIndex\
    \ = vowelsArr.lastIndexOf(word[word.length-1]);\n    let vowelsArr_lastChar =\
    \ vowelsArr[vowelsArr_lastIndex];\n    let vowelsArr_lastChar_length = vowelsArr_lastChar.length;\n\
    \    let vowelsArr_lastChar_lastIndex = vowelsArr_lastChar.lastIndexOf(vowelsArr_lastChar);\n\
    \    let vowelsArr_lastChar_lastChar = vowelsArr_lastChar[vowelsArr_lastChar_lastIndex];\n\
    \    let vowelsArr_lastChar_lastChar_length = vowelsArr_lastChar_lastChar.length;\n\
    \    let vowelsArr_lastChar_lastChar_lastIndex = vowelsArr_lastChar_lastChar.lastIndexOf(vowelsArr_lastChar_lastChar);\n\
    \    let vowelsArr_lastChar_lastChar_lastChar = vowelsArr_lastChar_lastChar[vowelsArr_lastChar_lastChar_lastIndex];\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_length = vowelsArr_lastChar_lastChar_lastChar.length;\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastIndex = vowelsArr_lastChar_lastChar_lastChar.lastIndexOf(vowelsArr_lastChar_lastChar_lastChar);\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastChar = vowelsArr_lastChar_lastChar_lastChar[vowelsArr_lastChar_lastChar_lastChar_lastIndex];\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastChar_length = vowelsArr_lastChar_lastChar_lastChar_lastChar.length;\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastChar_lastIndex = vowelsArr_lastChar_lastChar_lastChar_lastChar.lastIndexOf(vowelsArr_lastChar_lastChar_lastChar_lastChar);\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastChar_lastChar = vowelsArr_lastChar_lastChar_lastChar_lastChar[vowelsArr_lastChar_lastChar_lastChar_lastChar_lastChar_lastIndex];\n\
    \    let vowelsArr_last\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8as_pev8.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 3;\n    let vowels_count_from_middle4\
    \ = vowels_count / 4;\n    let vowels_count_from_middle5 = vowels_count / 5;\n\
    \    let vowels_count_from_middle6 = vowels_count / 6;\n    let vowels_count_from_middle7\
    \ = vowels_count / 7;\n    let vowels_count_from_middle8 = vowels_count / 8;\n\
    \    let vowels_count_from_middle9 = vowels_count / 9;\n    let vowels_count_from_middle10\
    \ = vowels_count / 10;\n    let vowels_count_from_middle11 = vowels_count / 11;\n\
    \    let vowels_count_from_middle12 = vowels_count / 12;\n    let vowels_count_from_middle13\
    \ = vowels_count / 13;\n    let vowels_count_from_middle14 = vowels_count / 14;\n\
    \    let vowels_count_from_middle15 = vowels_count / 15;\n    let vowels_count_from_middle16\
    \ = vowels_count / 16;\n    let vowels_count_from_middle17 = vowels_count / 17;\n\
    \    let vowels_count_from_middle18 = vowels_count / 18;\n    let vowels_count_from_middle19\
    \ = vowels_count / 19;\n    let vowels_count_from_middle20 = vowels_count / 20;\n\
    \    let vowels_count_from_middle21 = vowels_count / 21;\n    let vowels_count_from_middle22\
    \ = vowels_count / 22;\n    let vowels_count_from_middle23 = vowels_count / 23;\n\
    \    let vowels_count_from_middle24 = vowels_count / 24;\n    let vowels_count_from_middle25\
    \ = vowels_count / 25;\n    let vowels_count_from_middle26 = vowels_count / 26;\n\
    \    let vowels_count_from_middle27 = vowels_count / 27;\n    let vowels_count_from_middle28\
    \ = vowels_count / 28;\n    let vowels_count_from_middle29 = vowels_count / 29;\n\
    \    let vowels_count_from_middle30 = vowels_count / 30;\n    let vowels_count_from_middle31\
    \ = vowels_count / 31;\n    let vowels_count_from_middle32 = vowels_count / 32;\n\
    \    let vowels_count_from_middle33 = vowels_count / 33;\n    let vowels_count_from_middle\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2zk4alfa.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_left_to_right = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_middle = vowels_count_from_middle\
    \ - vowels_count_from_left;\n    let vowels_count_from_right_to_middle = vowels_count_from_middle\
    \ - vowels_count_from_right;\n    let vowels_count_from_middle_to_left = vowels_count_from_left\
    \ - vowels_count_from_middle;\n    let vowels_count_from_middle_to_right = vowels_count_from_right\
    \ - vowels_count_from_middle;\n    let vowels_count_from_right_to_left = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_left_to_middle = vowels_count_from_middle\
    \ - vowels_count_from_left;\n    let vowels_count_from_middle_to_right = vowels_count_from_right\
    \ - vowels_count_from_middle;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count_from_right_to_middle - vowels_count_from_left_to_middle;\n  \
    \  let vowels_count_from_left_to_middle_to_right = vowels_count_from_middle_to_right\
    \ - vowels_count_from_left_to_right;\n    let vowels_count_from_middle_to_left_to_right\
    \ = vowels_count_from_left_to_right - vowels_count_from_middle_to_right;\n   \
    \ let vowels_count_from_middle_to_right_to_left = vowels_count_from_right_to_left\
    \ - vowels_count_from_middle_to_left;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count_from_left_to_middle - vowels_count_from_middle_to_right;\n  \
    \  let vowels_count_from_middle_to_right_to_left = vowels_count_from_right_to_left\
    \ - vowels_count_from_middle_to_left;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_left_to_right_to_middle - vowels_count_from_middle_to_left_to_middle;\n\
    \    let vowels_count_from_middle_to_left_to_middle_to_right = vowels_count_from_middle_to_right_to_left\
    \ - vowels_count_from_middle_to_left_to_right;\n    let vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count_from_right_to_left_to_middle - vowels_count_from_middle_to_right_to_left;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_left_to_middle = vowels_count_from_left_to_right_to_left_to_middle\
    \ - vowels_count_from_middle_to_left_to_right_to_left;\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2n3f3mb4.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowel_position = 0;\n    let vowel_found = false;\n\
    \    let vowel_positions = [];\n    let vowel_founds = [];\n    let vowel_founds_count\
    \ = vowels_count;\n    let vowel_founds_position = 0;\n    let vowel_founds_positions\
    \ = [];\n    let vowel_founds_positions_count = vowels_count;\n    let vowel_founds_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions = [];\n    let vowel_founds_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_position = 0;\n  \
    \  let vowel_founds_positions_positions_positions = [];\n    let vowel_founds_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions = [];\n \
    \   let vowel_founds_positions_positions_positions_positions_count = vowels_count;\n\
    \    let vowel_founds_positions_positions_positions_positions_position = 0;\n\
    \    let vowel_founds_positions_positions_positions_positions_positions = [];\n\
    \    let vowel_founds_positions_positions_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions_positions_positions\
    \ = [];\n    let vowel_founds_positions_positions_positions_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions\
    \ = [];\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions\
    \ = [];\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions_positions\
    \ = [];\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsrx_pafj.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArrIndex = [];\n  let vowelsArrIndexLen = 0;\n  let vowelsArrIndexLenLen\
    \ = 0;\n  let vowelsArrIndexLenMax = vowelsArr.length - 1;\n  for (let i = 0;\
    \ i < vowelsArr.length; i++) {\n    if (vowelsArrIndex.indexOf(vowelsArr[i]) ==\
    \ -1) {\n      vowelsArrIndex.push(vowelsArr[i]);\n      vowelsArrIndexLenLen++;\n\
    \    }\n  }\n  for (let i = vowelsArrIndexLenLen; i >= 0; i--) {\n    if (vowelsArrIndexLen\
    \ > vowelsArrIndexLenMax) {\n      break;\n    }\n    if (vowelsArrIndexLen -\
    \ i == 1) {\n      vowelsArrIndexLenMax = vowelsArrIndexLenMax - 1;\n    }\n \
    \ }\n  let vowelsArrIndexLenMin = vowelsArrIndexLen - 1;\n  let vowelsArrIndexLenMaxMin\
    \ = vowelsArrIndexLen - 2;\n  let vowelsArrIndexLenMinMax = vowelsArrIndexLen\
    \ - 3;\n  let vowelsArrIndexLenMaxMinMax = vowelsArrIndexLen - 4;\n  let vowelsArrIndexLenMinMaxMax\
    \ = vowelsArrIndexLen - 5;\n  let vowelsArrIndexLenMinMaxMaxMax = vowelsArrIndexLen\
    \ - 6;\n  let vowelsArrIndexLenMinMaxMaxMax = vowelsArrIndexLen - 7;\n  let vowelsArrIndexLenMinMaxMaxMax\
    \ = vowelsArrIndexLen - 8;\n  let vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen\
    \ - 9;\n  let vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen - 10;\n  let\
    \ vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen - 11;\n  let vowelsArrIndexLenMinMaxMaxMaxMax\
    \ = vowelsArrIndexLen - 12;\n  let vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen\
    \ - 13;\n  let vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen - 14;\n  let\
    \ vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen - 15;\n  let vowelsArrIndexLenMinMaxMaxMaxMaxMax\
    \ = vowelsArrIndexLen - 16;\n  let vowelsArrIndexLenMinMaxMaxMaxMaxMax = vowelsArrIndexLen\
    \ - 17;\n  let vowelsArrIndexLenMinMaxMaxMaxMaxMax = vowels\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq8g2kz0e.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2 = vowelsIndex\
    \ + vowelsCount;\n    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n    let\
    \ vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    let vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    let vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    let vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    let vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    let vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    let vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    let vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    let vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    let vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    let vowelsIndex33 = \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp223t10hr.ts(47,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp223t10hr.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount\
    \ = vowels.length;\n  let vowelsCount2 = vowelsCount - 1;\n  let vowelsCount3\
    \ = vowelsCount - 2;\n  let vowelsCount4 = vowelsCount - 3;\n  let vowelsCount5\
    \ = vowelsCount - 4;\n  let vowelsCount6 = vowelsCount - 5;\n  let vowelsCount7\
    \ = vowelsCount - 6;\n  let vowelsCount8 = vowelsCount - 7;\n  let vowelsCount9\
    \ = vowelsCount - 8;\n  let vowelsCount10 = vowelsCount - 9;\n  let vowelsCount11\
    \ = vowelsCount - 10;\n  let vowelsCount12 = vowelsCount - 11;\n  let vowelsCount13\
    \ = vowelsCount - 12;\n  let vowelsCount14 = vowelsCount - 13;\n  let vowelsCount15\
    \ = vowelsCount - 14;\n  let vowelsCount16 = vowelsCount - 15;\n  let vowelsCount17\
    \ = vowelsCount - 16;\n  let vowelsCount18 = vowelsCount - 17;\n  let vowelsCount19\
    \ = vowelsCount - 18;\n  let vowelsCount20 = vowelsCount - 19;\n  let vowelsCount21\
    \ = vowelsCount - 20;\n  let vowelsCount22 = vowelsCount - 21;\n  let vowelsCount23\
    \ = vowelsCount - 22;\n  let vowelsCount24 = vowelsCount - 23;\n  let vowelsCount25\
    \ = vowelsCount - 24;\n  let vowelsCount26 = vowelsCount - 25;\n  let vowelsCount27\
    \ = vowelsCount - 26;\n  let vowelsCount28 = vowelsCount - 27;\n  let vowelsCount29\
    \ = vowelsCount - 28;\n  let vowelsCount30 = vowelsCount - 29;\n  let vowelsCount31\
    \ = vowelsCount - 30;\n  let vowelsCount32 = vowelsCount - 31;\n  let vowelsCount33\
    \ = vowelsCount - 32;\n  let vowelsCount34 = vowelsCount - 33;\n  let vowelsCount35\
    \ = vowelsCount - 34;\n  let vowelsCount36 = vowelsCount - 35;\n  let vowelsCount37\
    \ = vowelsCount - 36;\n  let vowelsCount38 = vowelsCount - 37;\n  let vowelsCount39\
    \ = vowelsCount - 38;\n  let vowelsCount40 = vowelsCount - 39;\n  let vowelsCount41\
    \ = vowelsCount - 40;\n  let vowels\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmakt4itb.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = 0;\n    let vowelsArrayIndex3 = 0;\n    let\
    \ vowelsArrayIndex4 = 0;\n    let vowelsArrayIndex5 = 0;\n    let vowelsArrayIndex6\
    \ = 0;\n    let vowelsArrayIndex7 = 0;\n    let vowelsArrayIndex8 = 0;\n    let\
    \ vowelsArrayIndex9 = 0;\n    let vowelsArrayIndex10 = 0;\n    let vowelsArrayIndex11\
    \ = 0;\n    let vowelsArrayIndex12 = 0;\n    let vowelsArrayIndex13 = 0;\n   \
    \ let vowelsArrayIndex14 = 0;\n    let vowelsArrayIndex15 = 0;\n    let vowelsArrayIndex16\
    \ = 0;\n    let vowelsArrayIndex17 = 0;\n    let vowelsArrayIndex18 = 0;\n   \
    \ let vowelsArrayIndex19 = 0;\n    let vowelsArrayIndex20 = 0;\n    let vowelsArrayIndex21\
    \ = 0;\n    let vowelsArrayIndex22 = 0;\n    let vowelsArrayIndex23 = 0;\n   \
    \ let vowelsArrayIndex24 = 0;\n    let vowelsArrayIndex25 = 0;\n    let vowelsArrayIndex26\
    \ = 0;\n    let vowelsArrayIndex27 = 0;\n    let vowelsArrayIndex28 = 0;\n   \
    \ let vowelsArrayIndex29 = 0;\n    let vowelsArrayIndex30 = 0;\n    let vowelsArrayIndex31\
    \ = 0;\n    let vowelsArrayIndex32 = 0;\n    let vowelsArrayIndex33 = 0;\n   \
    \ let vowelsArrayIndex34 = 0;\n    let vowelsArrayIndex35 = 0;\n    let vowelsArrayIndex36\
    \ = 0;\n    let vowelsArrayIndex37 = 0;\n    let vowelsArrayIndex38 = 0;\n   \
    \ let vowelsArrayIndex39 = 0;\n    let vowelsArrayIndex40 = 0;\n    let vowelsArrayIndex41\
    \ = 0;\n    let vowelsArrayIndex42 = 0;\n    let vowelsArrayIndex43 = 0;\n   \
    \ let vowelsArrayIndex44 = 0;\n    let vowelsArrayIndex45 = 0;\n    let vowelsArrayIndex46\
    \ = 0;\n    let vowelsArrayIndex47 = 0;\n    let vowelsArrayIndex48 = 0;\n   \
    \ let vowelsArrayIndex49 = 0;\n    let vowelsArrayIndex50 = 0;\n    let vowelsArrayIndex51\
    \ = 0;\n    let vowelsArrayIndex52 = 0;\n    let vowelsArrayIndex53 = 0;\n   \
    \ let vowelsArrayIndex54 = 0;\n    let vowelsArrayIndex55 = 0;\n    let vowelsArrayIndex56\
    \ = 0;\n    let vowelsArrayIndex57 = 0;\n    let vowelsArrayIndex58 = 0;\n   \
    \ let vowelsArrayIndex59 = 0;\n    let vowelsArrayIndex60 = 0;\n    let vowelsArrayIndex61\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkm0jz73j.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\"\n  let vowelsCount = vowels.split(\"\
    \").length\n  let vowelsIndex: number = 0\n  let vowelsIndex2: number = 0\n  let\
    \ vowelsIndex3: number = 0\n  let vowelsIndex4: number = 0\n  let vowelsIndex5:\
    \ number = 0\n  let vowelsIndex6: number = 0\n  let vowelsIndex7: number = 0\n\
    \  let vowelsIndex8: number = 0\n  let vowelsIndex9: number = 0\n  let vowelsIndex10:\
    \ number = 0\n  let vowelsIndex11: number = 0\n  let vowelsIndex12: number = 0\n\
    \  let vowelsIndex13: number = 0\n  let vowelsIndex14: number = 0\n  let vowelsIndex15:\
    \ number = 0\n  let vowelsIndex16: number = 0\n  let vowelsIndex17: number = 0\n\
    \  let vowelsIndex18: number = 0\n  let vowelsIndex19: number = 0\n  let vowelsIndex20:\
    \ number = 0\n  let vowelsIndex21: number = 0\n  let vowelsIndex22: number = 0\n\
    \  let vowelsIndex23: number = 0\n  let vowelsIndex24: number = 0\n  let vowelsIndex25:\
    \ number = 0\n  let vowelsIndex26: number = 0\n  let vowelsIndex27: number = 0\n\
    \  let vowelsIndex28: number = 0\n  let vowelsIndex29: number = 0\n  let vowelsIndex30:\
    \ number = 0\n  let vowelsIndex31: number = 0\n  let vowelsIndex32: number = 0\n\
    \  let vowelsIndex33: number = 0\n  let vowelsIndex34: number = 0\n  let vowelsIndex35:\
    \ number = 0\n  let vowelsIndex36: number = 0\n  let vowelsIndex37: number = 0\n\
    \  let vowelsIndex38: number = 0\n  let vowelsIndex39: number = 0\n  let vowelsIndex40:\
    \ number = 0\n  let vowelsIndex41: number = 0\n  let vowelsIndex42: number = 0\n\
    \  let vowelsIndex43: number = 0\n  let vowelsIndex44: number = 0\n  let vowelsIndex45:\
    \ number = 0\n  let vowelsIndex46: number = 0\n  let vowelsIndex47: number = 0\n\
    \  let vowelsIndex48: number = 0\n  let vowelsIndex49: number = 0\n  let vowelsIndex50:\
    \ number = 0\n  let vowelsIndex51: number = 0\n  let vowelsIndex52: number = 0\n\
    \  let vowelsIndex53: number = 0\n  let vowelsIndex54: number = 0\n  let vowelsIndex55:\
    \ number = 0\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4y_69eqw.ts(70,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp4y_69eqw.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"AEIOUaeiou\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr_length = vowelsArr.length;\n  let vowels_length = vowels.length;\n\
    \  let vowels_index = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb810u88h.ts(84,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpb810u88h.ts(105,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
