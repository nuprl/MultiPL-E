language: ts
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_lastIndex\
    \ = vowelsArr.lastIndexOf(word[word.length-1]);\n    let vowelsArr_lastChar =\
    \ vowelsArr[vowelsArr_lastIndex];\n    let vowelsArr_lastChar_length = vowelsArr_lastChar.length;\n\
    \    let vowelsArr_lastChar_lastIndex = vowelsArr_lastChar.lastIndexOf(vowelsArr_lastChar);\n\
    \    let vowelsArr_lastChar_lastChar = vowelsArr_lastChar[vowelsArr_lastChar_lastIndex];\n\
    \    let vowelsArr_lastChar_lastChar_length = vowelsArr_lastChar_lastChar.length;\n\
    \    let vowelsArr_lastChar_lastChar_lastIndex = vowelsArr_lastChar_lastChar.lastIndexOf(vowelsArr_lastChar_lastChar);\n\
    \    let vowelsArr_lastChar_lastChar_lastChar = vowelsArr_lastChar_lastChar[vowelsArr_lastChar_lastChar_lastIndex];\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_length = vowelsArr_lastChar_lastChar_lastChar.length;\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastIndex = vowelsArr_lastChar_lastChar_lastChar.lastIndexOf(vowelsArr_lastChar_lastChar_lastChar);\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastChar = vowelsArr_lastChar_lastChar_lastChar[vowelsArr_lastChar_lastChar_lastChar_lastIndex];\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastChar_length = vowelsArr_lastChar_lastChar_lastChar_lastChar.length;\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastChar_lastIndex = vowelsArr_lastChar_lastChar_lastChar_lastChar.lastIndexOf(vowelsArr_lastChar_lastChar_lastChar_lastChar);\n\
    \    let vowelsArr_lastChar_lastChar_lastChar_lastChar_lastChar = vowelsArr_lastChar_lastChar_lastChar_lastChar[vowelsArr_lastChar_lastChar_lastChar_lastChar_lastChar_lastIndex];\n\
    \    let vowelsArr_last\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8as_pev8.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 3;\n    let vowels_count_from_middle4\
    \ = vowels_count / 4;\n    let vowels_count_from_middle5 = vowels_count / 5;\n\
    \    let vowels_count_from_middle6 = vowels_count / 6;\n    let vowels_count_from_middle7\
    \ = vowels_count / 7;\n    let vowels_count_from_middle8 = vowels_count / 8;\n\
    \    let vowels_count_from_middle9 = vowels_count / 9;\n    let vowels_count_from_middle10\
    \ = vowels_count / 10;\n    let vowels_count_from_middle11 = vowels_count / 11;\n\
    \    let vowels_count_from_middle12 = vowels_count / 12;\n    let vowels_count_from_middle13\
    \ = vowels_count / 13;\n    let vowels_count_from_middle14 = vowels_count / 14;\n\
    \    let vowels_count_from_middle15 = vowels_count / 15;\n    let vowels_count_from_middle16\
    \ = vowels_count / 16;\n    let vowels_count_from_middle17 = vowels_count / 17;\n\
    \    let vowels_count_from_middle18 = vowels_count / 18;\n    let vowels_count_from_middle19\
    \ = vowels_count / 19;\n    let vowels_count_from_middle20 = vowels_count / 20;\n\
    \    let vowels_count_from_middle21 = vowels_count / 21;\n    let vowels_count_from_middle22\
    \ = vowels_count / 22;\n    let vowels_count_from_middle23 = vowels_count / 23;\n\
    \    let vowels_count_from_middle24 = vowels_count / 24;\n    let vowels_count_from_middle25\
    \ = vowels_count / 25;\n    let vowels_count_from_middle26 = vowels_count / 26;\n\
    \    let vowels_count_from_middle27 = vowels_count / 27;\n    let vowels_count_from_middle28\
    \ = vowels_count / 28;\n    let vowels_count_from_middle29 = vowels_count / 29;\n\
    \    let vowels_count_from_middle30 = vowels_count / 30;\n    let vowels_count_from_middle31\
    \ = vowels_count / 31;\n    let vowels_count_from_middle32 = vowels_count / 32;\n\
    \    let vowels_count_from_middle33 = vowels_count / 33;\n    let vowels_count_from_middle\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2zk4alfa.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_left_to_right = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_middle = vowels_count_from_middle\
    \ - vowels_count_from_left;\n    let vowels_count_from_right_to_middle = vowels_count_from_middle\
    \ - vowels_count_from_right;\n    let vowels_count_from_middle_to_left = vowels_count_from_left\
    \ - vowels_count_from_middle;\n    let vowels_count_from_middle_to_right = vowels_count_from_right\
    \ - vowels_count_from_middle;\n    let vowels_count_from_right_to_left = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_left_to_middle = vowels_count_from_middle\
    \ - vowels_count_from_left;\n    let vowels_count_from_middle_to_right = vowels_count_from_right\
    \ - vowels_count_from_middle;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count_from_right_to_middle - vowels_count_from_left_to_middle;\n  \
    \  let vowels_count_from_left_to_middle_to_right = vowels_count_from_middle_to_right\
    \ - vowels_count_from_left_to_right;\n    let vowels_count_from_middle_to_left_to_right\
    \ = vowels_count_from_left_to_right - vowels_count_from_middle_to_right;\n   \
    \ let vowels_count_from_middle_to_right_to_left = vowels_count_from_right_to_left\
    \ - vowels_count_from_middle_to_left;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count_from_left_to_middle - vowels_count_from_middle_to_right;\n  \
    \  let vowels_count_from_middle_to_right_to_left = vowels_count_from_right_to_left\
    \ - vowels_count_from_middle_to_left;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_left_to_right_to_middle - vowels_count_from_middle_to_left_to_middle;\n\
    \    let vowels_count_from_middle_to_left_to_middle_to_right = vowels_count_from_middle_to_right_to_left\
    \ - vowels_count_from_middle_to_left_to_right;\n    let vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count_from_right_to_left_to_middle - vowels_count_from_middle_to_right_to_left;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_left_to_middle = vowels_count_from_left_to_right_to_left_to_middle\
    \ - vowels_count_from_middle_to_left_to_right_to_left;\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2n3f3mb4.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowel_position = 0;\n    let vowel_found = false;\n\
    \    let vowel_positions = [];\n    let vowel_founds = [];\n    let vowel_founds_count\
    \ = vowels_count;\n    let vowel_founds_position = 0;\n    let vowel_founds_positions\
    \ = [];\n    let vowel_founds_positions_count = vowels_count;\n    let vowel_founds_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions = [];\n    let vowel_founds_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_position = 0;\n  \
    \  let vowel_founds_positions_positions_positions = [];\n    let vowel_founds_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions = [];\n \
    \   let vowel_founds_positions_positions_positions_positions_count = vowels_count;\n\
    \    let vowel_founds_positions_positions_positions_positions_position = 0;\n\
    \    let vowel_founds_positions_positions_positions_positions_positions = [];\n\
    \    let vowel_founds_positions_positions_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions_positions_positions\
    \ = [];\n    let vowel_founds_positions_positions_positions_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions\
    \ = [];\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions\
    \ = [];\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions_count\
    \ = vowels_count;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions_position\
    \ = 0;\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions_positions\
    \ = [];\n    let vowel_founds_positions_positions_positions_positions_positions_positions_positions_positions_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsrx_pafj.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArrIndex = [];\n  let vowelsArrIndexLen = 0;\n  let vowelsArrIndexLenLen\
    \ = 0;\n  let vowelsArrIndexLenMax = vowelsArr.length - 1;\n  for (let i = 0;\
    \ i < vowelsArr.length; i++) {\n    if (vowelsArrIndex.indexOf(vowelsArr[i]) ==\
    \ -1) {\n      vowelsArrIndex.push(vowelsArr[i]);\n      vowelsArrIndexLenLen++;\n\
    \    }\n  }\n  for (let i = vowelsArrIndexLenLen; i >= 0; i--) {\n    if (vowelsArrIndexLen\
    \ > vowelsArrIndexLenMax) {\n      break;\n    }\n    if (vowelsArrIndexLen -\
    \ i == 1) {\n      vowelsArrIndexLenMax = vowelsArrIndexLenMax - 1;\n    }\n \
    \ }\n  let vowelsArrIndexLenMin = vowelsArrIndexLen - 1;\n  let vowelsArrIndexLenMaxMin\
    \ = vowelsArrIndexLen - 2;\n  let vowelsArrIndexLenMinMax = vowelsArrIndexLen\
    \ - 3;\n  let vowelsArrIndexLenMaxMinMax = vowelsArrIndexLen - 4;\n  let vowelsArrIndexLenMinMaxMax\
    \ = vowelsArrIndexLen - 5;\n  let vowelsArrIndexLenMinMaxMaxMax = vowelsArrIndexLen\
    \ - 6;\n  let vowelsArrIndexLenMinMaxMaxMax = vowelsArrIndexLen - 7;\n  let vowelsArrIndexLenMinMaxMaxMax\
    \ = vowelsArrIndexLen - 8;\n  let vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen\
    \ - 9;\n  let vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen - 10;\n  let\
    \ vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen - 11;\n  let vowelsArrIndexLenMinMaxMaxMaxMax\
    \ = vowelsArrIndexLen - 12;\n  let vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen\
    \ - 13;\n  let vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen - 14;\n  let\
    \ vowelsArrIndexLenMinMaxMaxMaxMax = vowelsArrIndexLen - 15;\n  let vowelsArrIndexLenMinMaxMaxMaxMaxMax\
    \ = vowelsArrIndexLen - 16;\n  let vowelsArrIndexLenMinMaxMaxMaxMaxMax = vowelsArrIndexLen\
    \ - 17;\n  let vowelsArrIndexLenMinMaxMaxMaxMaxMax = vowels\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq8g2kz0e.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2 = vowelsIndex\
    \ + vowelsCount;\n    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n    let\
    \ vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    let vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    let vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    let vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    let vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    let vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    let vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    let vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    let vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    let vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    let vowelsIndex33 = \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp223t10hr.ts(47,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp223t10hr.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount\
    \ = vowels.length;\n  let vowelsCount2 = vowelsCount - 1;\n  let vowelsCount3\
    \ = vowelsCount - 2;\n  let vowelsCount4 = vowelsCount - 3;\n  let vowelsCount5\
    \ = vowelsCount - 4;\n  let vowelsCount6 = vowelsCount - 5;\n  let vowelsCount7\
    \ = vowelsCount - 6;\n  let vowelsCount8 = vowelsCount - 7;\n  let vowelsCount9\
    \ = vowelsCount - 8;\n  let vowelsCount10 = vowelsCount - 9;\n  let vowelsCount11\
    \ = vowelsCount - 10;\n  let vowelsCount12 = vowelsCount - 11;\n  let vowelsCount13\
    \ = vowelsCount - 12;\n  let vowelsCount14 = vowelsCount - 13;\n  let vowelsCount15\
    \ = vowelsCount - 14;\n  let vowelsCount16 = vowelsCount - 15;\n  let vowelsCount17\
    \ = vowelsCount - 16;\n  let vowelsCount18 = vowelsCount - 17;\n  let vowelsCount19\
    \ = vowelsCount - 18;\n  let vowelsCount20 = vowelsCount - 19;\n  let vowelsCount21\
    \ = vowelsCount - 20;\n  let vowelsCount22 = vowelsCount - 21;\n  let vowelsCount23\
    \ = vowelsCount - 22;\n  let vowelsCount24 = vowelsCount - 23;\n  let vowelsCount25\
    \ = vowelsCount - 24;\n  let vowelsCount26 = vowelsCount - 25;\n  let vowelsCount27\
    \ = vowelsCount - 26;\n  let vowelsCount28 = vowelsCount - 27;\n  let vowelsCount29\
    \ = vowelsCount - 28;\n  let vowelsCount30 = vowelsCount - 29;\n  let vowelsCount31\
    \ = vowelsCount - 30;\n  let vowelsCount32 = vowelsCount - 31;\n  let vowelsCount33\
    \ = vowelsCount - 32;\n  let vowelsCount34 = vowelsCount - 33;\n  let vowelsCount35\
    \ = vowelsCount - 34;\n  let vowelsCount36 = vowelsCount - 35;\n  let vowelsCount37\
    \ = vowelsCount - 36;\n  let vowelsCount38 = vowelsCount - 37;\n  let vowelsCount39\
    \ = vowelsCount - 38;\n  let vowelsCount40 = vowelsCount - 39;\n  let vowelsCount41\
    \ = vowelsCount - 40;\n  let vowels\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmakt4itb.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = 0;\n    let vowelsArrayIndex3 = 0;\n    let\
    \ vowelsArrayIndex4 = 0;\n    let vowelsArrayIndex5 = 0;\n    let vowelsArrayIndex6\
    \ = 0;\n    let vowelsArrayIndex7 = 0;\n    let vowelsArrayIndex8 = 0;\n    let\
    \ vowelsArrayIndex9 = 0;\n    let vowelsArrayIndex10 = 0;\n    let vowelsArrayIndex11\
    \ = 0;\n    let vowelsArrayIndex12 = 0;\n    let vowelsArrayIndex13 = 0;\n   \
    \ let vowelsArrayIndex14 = 0;\n    let vowelsArrayIndex15 = 0;\n    let vowelsArrayIndex16\
    \ = 0;\n    let vowelsArrayIndex17 = 0;\n    let vowelsArrayIndex18 = 0;\n   \
    \ let vowelsArrayIndex19 = 0;\n    let vowelsArrayIndex20 = 0;\n    let vowelsArrayIndex21\
    \ = 0;\n    let vowelsArrayIndex22 = 0;\n    let vowelsArrayIndex23 = 0;\n   \
    \ let vowelsArrayIndex24 = 0;\n    let vowelsArrayIndex25 = 0;\n    let vowelsArrayIndex26\
    \ = 0;\n    let vowelsArrayIndex27 = 0;\n    let vowelsArrayIndex28 = 0;\n   \
    \ let vowelsArrayIndex29 = 0;\n    let vowelsArrayIndex30 = 0;\n    let vowelsArrayIndex31\
    \ = 0;\n    let vowelsArrayIndex32 = 0;\n    let vowelsArrayIndex33 = 0;\n   \
    \ let vowelsArrayIndex34 = 0;\n    let vowelsArrayIndex35 = 0;\n    let vowelsArrayIndex36\
    \ = 0;\n    let vowelsArrayIndex37 = 0;\n    let vowelsArrayIndex38 = 0;\n   \
    \ let vowelsArrayIndex39 = 0;\n    let vowelsArrayIndex40 = 0;\n    let vowelsArrayIndex41\
    \ = 0;\n    let vowelsArrayIndex42 = 0;\n    let vowelsArrayIndex43 = 0;\n   \
    \ let vowelsArrayIndex44 = 0;\n    let vowelsArrayIndex45 = 0;\n    let vowelsArrayIndex46\
    \ = 0;\n    let vowelsArrayIndex47 = 0;\n    let vowelsArrayIndex48 = 0;\n   \
    \ let vowelsArrayIndex49 = 0;\n    let vowelsArrayIndex50 = 0;\n    let vowelsArrayIndex51\
    \ = 0;\n    let vowelsArrayIndex52 = 0;\n    let vowelsArrayIndex53 = 0;\n   \
    \ let vowelsArrayIndex54 = 0;\n    let vowelsArrayIndex55 = 0;\n    let vowelsArrayIndex56\
    \ = 0;\n    let vowelsArrayIndex57 = 0;\n    let vowelsArrayIndex58 = 0;\n   \
    \ let vowelsArrayIndex59 = 0;\n    let vowelsArrayIndex60 = 0;\n    let vowelsArrayIndex61\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkm0jz73j.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\"\n  let vowelsCount = vowels.split(\"\
    \").length\n  let vowelsIndex: number = 0\n  let vowelsIndex2: number = 0\n  let\
    \ vowelsIndex3: number = 0\n  let vowelsIndex4: number = 0\n  let vowelsIndex5:\
    \ number = 0\n  let vowelsIndex6: number = 0\n  let vowelsIndex7: number = 0\n\
    \  let vowelsIndex8: number = 0\n  let vowelsIndex9: number = 0\n  let vowelsIndex10:\
    \ number = 0\n  let vowelsIndex11: number = 0\n  let vowelsIndex12: number = 0\n\
    \  let vowelsIndex13: number = 0\n  let vowelsIndex14: number = 0\n  let vowelsIndex15:\
    \ number = 0\n  let vowelsIndex16: number = 0\n  let vowelsIndex17: number = 0\n\
    \  let vowelsIndex18: number = 0\n  let vowelsIndex19: number = 0\n  let vowelsIndex20:\
    \ number = 0\n  let vowelsIndex21: number = 0\n  let vowelsIndex22: number = 0\n\
    \  let vowelsIndex23: number = 0\n  let vowelsIndex24: number = 0\n  let vowelsIndex25:\
    \ number = 0\n  let vowelsIndex26: number = 0\n  let vowelsIndex27: number = 0\n\
    \  let vowelsIndex28: number = 0\n  let vowelsIndex29: number = 0\n  let vowelsIndex30:\
    \ number = 0\n  let vowelsIndex31: number = 0\n  let vowelsIndex32: number = 0\n\
    \  let vowelsIndex33: number = 0\n  let vowelsIndex34: number = 0\n  let vowelsIndex35:\
    \ number = 0\n  let vowelsIndex36: number = 0\n  let vowelsIndex37: number = 0\n\
    \  let vowelsIndex38: number = 0\n  let vowelsIndex39: number = 0\n  let vowelsIndex40:\
    \ number = 0\n  let vowelsIndex41: number = 0\n  let vowelsIndex42: number = 0\n\
    \  let vowelsIndex43: number = 0\n  let vowelsIndex44: number = 0\n  let vowelsIndex45:\
    \ number = 0\n  let vowelsIndex46: number = 0\n  let vowelsIndex47: number = 0\n\
    \  let vowelsIndex48: number = 0\n  let vowelsIndex49: number = 0\n  let vowelsIndex50:\
    \ number = 0\n  let vowelsIndex51: number = 0\n  let vowelsIndex52: number = 0\n\
    \  let vowelsIndex53: number = 0\n  let vowelsIndex54: number = 0\n  let vowelsIndex55:\
    \ number = 0\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4y_69eqw.ts(70,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp4y_69eqw.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"AEIOUaeiou\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr_length = vowelsArr.length;\n  let vowels_length = vowels.length;\n\
    \  let vowels_index = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let\
    \ vowels_index_length = -1;\n  let vowels_index_length = -1;\n  let vowels_index_length\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb810u88h.ts(84,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpb810u88h.ts(105,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let vowelsCount: number[] = [0, 0, 0, 0, 0];\n    let vowelsIndex:\
    \ number[] = [-1, -1];\n    let vowelsIndexCount: number[] = [0, 0];\n    let\
    \ vowelsIndexCountIndex: number[] = [0, 0];\n    let vowelsIndexCountIndex2: number[]\
    \ = [0, 0];\n    let vowelsIndexCountIndex3: number[] = [0, 0];\n    let vowelsIndexCountIndex4:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex5: number[] = [0, 0];\n   \
    \ let vowelsIndexCountIndex6: number[] = [0, 0];\n    let vowelsIndexCountIndex7:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex8: number[] = [0, 0];\n   \
    \ let vowelsIndexCountIndex9: number[] = [0, 0];\n    let vowelsIndexCountIndex10:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex11: number[] = [0, 0];\n  \
    \  let vowelsIndexCountIndex12: number[] = [0, 0];\n    let vowelsIndexCountIndex13:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex14: number[] = [0, 0];\n  \
    \  let vowelsIndexCountIndex15: number[] = [0, 0];\n    let vowelsIndexCountIndex16:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex17: number[] = [0, 0];\n  \
    \  let vowelsIndexCountIndex18: number[] = [0, 0];\n    let vowelsIndexCountIndex19:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex20: number[] = [0, 0];\n  \
    \  let vowelsIndexCountIndex21: number[] = [0, 0];\n    let vowelsIndexCountIndex22:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex23: number[] = [0, 0];\n  \
    \  let vowelsIndexCountIndex24: number[] = [0, 0];\n    let vowelsIndexCountIndex25:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex26: number[] = [0, 0];\n  \
    \  let vowelsIndexCountIndex27: number[] = [0, 0];\n    let vowelsIndexCountIndex28:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex29: number[] = [0, 0];\n  \
    \  let vowelsIndexCountIndex30: number[] = [0, 0];\n    let vowelsIndexCountIndex31:\
    \ number[] = [0, 0];\n    let vowelsIndexCountIndex32: number[] = [0, 0];\n  \
    \  let vowelsIndexCountIndex33: number[] = [0, 0];\n    let vowels\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf3btys45.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for (let\
    \ i = 0; i < vowelsCount; i++) {\n        let index = word.indexOf(vowels[i]);\n\
    \        if (index > -1) {\n            vowelsIndex.push(index);\n        }\n\
    \    }\n    let vowelsCount = vowelsIndex.length;\n    let vowelsIndexMax = Math.max.apply(null,\
    \ vowelsIndex);\n    let vowelsIndexMin = Math.min.apply(null, vowelsIndex);\n\
    \    let vowelsIndexMaxInd = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinInd\
    \ = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndInd = vowelsIndex.indexOf(vowelsIndexMaxInd);\n\
    \    let vowelsIndexMinIndInd = vowelsIndex.indexOf(vowelsIndexMinInd);\n    let\
    \ vowelsIndexMaxIndIndInd = vowelsIndex.indexOf(vowelsIndexMaxIndInd);\n    let\
    \ vowelsIndexMinIndIndInd = vowelsIndex.indexOf(vowelsIndexMinIndInd);\n    let\
    \ vowelsIndexMaxIndIndIndInd = vowelsIndex.indexOf(vowelsIndexMaxIndIndInd);\n\
    \    let vowelsIndexMinIndIndIndIndInd = vowelsIndex.indexOf(vowelsIndexMinIndIndIndInd);\n\
    \    let vowelsIndexMaxIndIndIndIndInd = vowelsIndex.indexOf(vowelsIndexMaxIndIndIndIndInd);\n\
    \    let vowelsIndexMinIndIndIndIndIndInd = vowelsIndex.indexOf(vowelsIndexMinIndIndIndIndIndInd);\n\
    \    let vowelsIndexMaxIndIndIndIndIndIndInd = vowelsIndex.indexOf(vowelsIndexMaxIndIndIndIndIndIndInd);\n\
    \    let vowelsIndexMinIndIndIndIndIndIndIndInd = vowelsIndex.indexOf(vowelsIndexMinIndIndIndIndIndIndInd);\n\
    \    let vowelsIndexMaxIndIndIndIndIndIndIndIndInd = vowelsIndex.indexOf(vowelsIndexMaxIndIndIndIndIndIndIndIndInd);\n\
    \    let vowelsIndexMinIndIndIndIndIndInd\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvx28oo29.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2\
    \ = vowelsIndex + vowelsCount;\n    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n\
    \    let vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    let vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    let vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    let vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    let vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    let vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    let vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    let vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    let vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    let vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    let vowelsIndex33\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpusckid8w.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjwqwwtgj.ts(98,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_min_index = 0;\n    let vowels_index_count_max_index\
    \ = 0;\n    let vowels_index_count_max_index_count = 0;\n    let vowels_index_count_max_index_count_max\
    \ = 0;\n    let vowels_index_count_max_index_count_min = 0;\n    let vowels_index_count_max_index_count_min_index\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index = 0;\n    let vowels_index_count_max_index_count_max_index_count\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_count_max = 0;\n\
    \    let vowels_index_count_max_index_count_max_index_min = 0;\n    let vowels_index_count_max_index_count_max_index_min_index\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count = 0;\n\
    \    let vowels_index_count_max_index_count_max_index_min_count_max = 0;\n   \
    \ let vowels_index_count_max_index_count_max_index_min_count_min = 0;\n    let\
    \ vowels_index_count_max_index_count_max_index_min_count_min_index = 0;\n    let\
    \ vowels_index_count_max_index_count_max_index_min_count_max_index = 0;\n    let\
    \ vowels_index_count_max_index_count_max_index_min_count_max_index_count = 0;\n\
    \    let vowels_index_count_max_index_count_max_index_min_count_max_index_count_max\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_index\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count_max\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count_min\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count_min_index\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count_max_index\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count_max_index_count\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count_max_index_count_max\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count_max_index_min\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_count_max_index_min_index\
    \ = 0;\n    let vowels_index_count_max_index_count_max_index_min_count_max_index_min_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1k7rlg_d.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArb41 = vowels.split(\"\
    \");\n  let vowelsArb42 = vowels.split(\"\");\n  let vowelsArb43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_gkgccz1.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmp_gkgccz1.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUp = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpAndDown\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAnd\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2navc1l3.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - word.length;\n\
    \    let vowels_count_from_left = vowels_count - word.length - 1;\n    let vowels_count_from_middle\
    \ = vowels_count - word.length - 2;\n    let vowels_count_from_left_to_right =\
    \ vowels_count - word.length - 1;\n    let vowels_count_from_right_to_left = vowels_count\
    \ - word.length - 2;\n    let vowels_count_from_middle_to_right = vowels_count\
    \ - word.length - 1;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - word.length - 2;\n    let vowels_count_from_right_to_middle = vowels_count\
    \ - word.length - 1;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - word.length - 2;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - word.length - 1;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - word.length - 2;\n    let vowels_count_from_middle_to_right_to_left = vowels_count\
    \ - word.length - 1;\n    let vowels_count_from_left_to_middle_to_right = vowels_count\
    \ - word.length - 2;\n    let vowels_count_from_right_to_middle_to_left = vowels_count\
    \ - word.length - 1;\n    let vowels_count_from_middle_to_left_to_right = vowels_count\
    \ - word.length - 2;\n    let vowels_count_from_left_to_right_to_middle_to_middle\
    \ = vowels_count - word.length - 1;\n    let vowels_count_from_right_to_left_to_middle_to_middle\
    \ = vowels_count - word.length - 2;\n    let vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count - word.length - 1;\n    let vowels_count_from_left_to_middle_to_right_to_middle\
    \ = vowels_count - word.length - 2;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - word.length - 1;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - word.length - 2;\n    let vowels_count_from_left_to_right_to_middle_to_middle_to_left\
    \ = vowels_count - word.length - 1;\n    let vowels_count_from_right_to_left_to_middle_to_middle_to_right\
    \ = vowels_count - word.length - 2;\n    let vowels_count_from_middle_to_right_to_left_to_middle_to_middle\
    \ = vowels_count - word.length - 1;\n    let vowels_count_from_left_to_middle_to_right_to_middle_to_middle\
    \ = vowels_count - word.length - 2;\n    let vowels_count_from_right_to_middle_to_left_to_middle_to_middle\
    \ = vowels_count - word.length - 1;\n    let vowels_count_from_middle_\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2cnf6zf8.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let vowelsCount = vowels.length;\n    let vowelsIndex: number[] = [];\n\
    \    let vowelsIndexCount: number[] = [];\n    for (let i = 0; i < word.length;\
    \ i++) {\n        let vowelIndex = word.indexOf(vowels[i], i);\n        if (vowelIndex\
    \ > -1) {\n            vowelsIndex.push(vowelIndex);\n            vowelsIndexCount.push(vowelsIndex.length);\n\
    \        }\n    }\n    let minIndex: number = Math.min(...vowelsIndexCount);\n\
    \    let minIndexVowel: number = vowelsIndex[minIndex];\n    let minIndexVowelCount:\
    \ number = vowelsIndexCount[minIndex];\n    let minIndexVowelIndex: number = vowelsIndex[minIndex];\n\
    \    let minIndexVowelIndexCount: number = vowelsIndexCount[minIndex];\n    let\
    \ minIndexVowelIndexCountMinus1: number = vowelsIndexCount[minIndex] - 1;\n  \
    \  let minIndexVowelIndexCountMinus2: number = vowelsIndexCount[minIndex] - 2;\n\
    \    let minIndexVowelIndexCountMinus3: number = vowelsIndexCount[minIndex] -\
    \ 3;\n    let minIndexVowelIndexCountMinus4: number = vowelsIndexCount[minIndex]\
    \ - 4;\n    let minIndexVowelIndexCountMinus5: number = vowelsIndexCount[minIndex]\
    \ - 5;\n    let minIndexVowelIndexCountMinus6: number = vowelsIndexCount[minIndex]\
    \ - 6;\n    let minIndexVowelIndexCountMinus7: number = vowelsIndexCount[minIndex]\
    \ - 7;\n    let minIndexVowelIndexCountMinus8: number = vowelsIndexCount[minIndex]\
    \ - 8;\n    let minIndexVowelIndexCountMinus9: number = vowelsIndexCount[minIndex]\
    \ - 9;\n    let minIndexVowelIndexCountMinus10: number = vowelsIndexCount[minIndex]\
    \ - 10;\n    let minIndexVowelIndexCountMinus11: number = vowelsIndexCount[minIndex]\
    \ - 11;\n    let minIndexVowelIndexCountMinus12: number = vowelsIndexCount[minIndex]\
    \ - 12;\n    let minIndexVowelIndexCountMinus13: number = vowelsIndexCount[minIndex]\
    \ - 13;\n    let minIndexVowelIndexCountMinus14: number = vowelsIndexCount[minIndex]\
    \ - 14;\n    let minIndexVowelIndexCountMinus15: number = vowelsIndexCount[minIndex]\
    \ - 15;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3c3df3vq.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - word.length;\n    let vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right_to_left\
    \ = vowels_count_from_left_to_right - vowels_count_from_right_to_left;\n    let\
    \ vowels_count_from_right_to_left_to_right = vowels_count_from_right_to_left -\
    \ vowels_count_from_left_to_right;\n    let vowels_count_from_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left - vowels_count_from_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left - vowels_count_from_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_left_to_right_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn936ywl3.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUp\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndUp = vowelsCount -\
    \ 6;\n    let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n   \
    \ let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUp\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRightAndUpAndDownAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndLeftAndRightAndUpAndDownAndLeft\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyk92hj27.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowels_length = word.length\
    \ - 1;\n    let vowels_index = -1;\n    let vowels_index_length = -1;\n    let\
    \ vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n    let vowels_index_value\
    \ = -1;\n    let vowels_index_value_length = -1;\n    let vowels_index_value =\
    \ -1;\n    let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n\
    \    let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n \
    \   let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n  \
    \  let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n   \
    \ let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n    let\
    \ vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n    let vowels_index_value_length\
    \ = -1;\n    let vowels_index_value = -1;\n    let vowels_index_value_length =\
    \ -1;\n    let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n\
    \    let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n \
    \   let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n  \
    \  let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n   \
    \ let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n    let\
    \ vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n    let vowels_index_value\
    \ = -1;\n    let vowels_index_value_length = -1;\n    let vowels_index_value =\
    \ -1;\n    let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n\
    \    let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n \
    \   let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n  \
    \  let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n   \
    \ let vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n    let\
    \ vowels_index_value_length = -1;\n    let vowels_index_value = -1;\n    let vowels_index_value_length\
    \ = -1;\n    let vowels_index_value = -1;\n    let vowels_index_value_length =\
    \ -1;\n    let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n\
    \    let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n \
    \   let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n  \
    \  let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n   \
    \ let vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n    let\
    \ vowels_index_value = -1;\n    let vowel\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplo5o5a7l.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n\
    \    let vowelsCount3 = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount -\
    \ 3;\n    let vowelsCount5 = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount\
    \ - 5;\n    let vowelsCount7 = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount\
    \ - 7;\n    let vowelsCount9 = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount\
    \ - 9;\n    let vowelsCount11 = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount\
    \ - 11;\n    let vowelsCount13 = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount\
    \ - 13;\n    let vowelsCount15 = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount\
    \ - 15;\n    let vowelsCount17 = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount\
    \ - 17;\n    let vowelsCount19 = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount\
    \ - 19;\n    let vowelsCount21 = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount\
    \ - 21;\n    let vowelsCount23 = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount\
    \ - 23;\n    let vowelsCount25 = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount\
    \ - 25;\n    let vowelsCount27 = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount\
    \ - 27;\n    let vowelsCount29 = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount\
    \ - 29;\n    let vowelsCount31 = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount\
    \ - 31;\n    let vowelsCount33 = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount\
    \ - 33;\n    let vowelsCount35 = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount\
    \ - 35;\n    let vowelsCount37 = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount\
    \ - 37;\n    let vowelsCount39 = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount\
    \ - 39;\n    let vowelsCount41 = vowelsCount - 40;\n    let vowel\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb1m48_g9.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\"\n  let vowelsArr = vowels.split(\"\
    \")\n  let vowelsArr2 = vowels.split(\"\")\n  let vowelsArr3 = vowels.split(\"\
    \")\n  let vowelsArr4 = vowels.split(\"\")\n  let vowelsArr5 = vowels.split(\"\
    \")\n  let vowelsArr6 = vowels.split(\"\")\n  let vowelsArr7 = vowels.split(\"\
    \")\n  let vowelsArr8 = vowels.split(\"\")\n  let vowelsArr9 = vowels.split(\"\
    \")\n  let vowelsArr10 = vowels.split(\"\")\n  let vowelsArr11 = vowels.split(\"\
    \")\n  let vowelsArr12 = vowels.split(\"\")\n  let vowelsArr13 = vowels.split(\"\
    \")\n  let vowelsArr14 = vowels.split(\"\")\n  let vowelsArr15 = vowels.split(\"\
    \")\n  let vowelsArr16 = vowels.split(\"\")\n  let vowelsArr17 = vowels.split(\"\
    \")\n  let vowelsArr18 = vowels.split(\"\")\n  let vowelsArr19 = vowels.split(\"\
    \")\n  let vowelsArr20 = vowels.split(\"\")\n  let vowelsArr21 = vowels.split(\"\
    \")\n  let vowelsArr22 = vowels.split(\"\")\n  let vowelsArr23 = vowels.split(\"\
    \")\n  let vowelsArr24 = vowels.split(\"\")\n  let vowelsArr25 = vowels.split(\"\
    \")\n  let vowelsArr26 = vowels.split(\"\")\n  let vowelsArr27 = vowels.split(\"\
    \")\n  let vowelsArr28 = vowels.split(\"\")\n  let vowelsArr29 = vowels.split(\"\
    \")\n  let vowelsArr30 = vowels.split(\"\")\n  let vowelsArr31 = vowels.split(\"\
    \")\n  let vowelsArr32 = vowels.split(\"\")\n  let vowelsArr33 = vowels.split(\"\
    \")\n  let vowelsArr34 = vowels.split(\"\")\n  let vowelsArr35 = vowels.split(\"\
    \")\n  let vowelsArr36 = vowels.split(\"\")\n  let vowelsArr37 = vowels.split(\"\
    \")\n  let vowelsArr38 = vowels.split(\"\")\n  let vowelsArr39 = vowels.split(\"\
    \")\n  let vowelsArr40 = vowels.split(\"\")\n  let vowelsArb41 = vowels.split(\"\
    \")\n  let vowelsArb42 = vowels.split(\"\")\n  let vowelsArb43 = vowels.split(\"\
    \")\n  let vowelsArr44 = vowels.split(\"\")\n  let vowelsArr45 = vowels.split(\"\
    \")\n  let vowelsArr46 = vowels.split(\"\")\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgwe8s1zt.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpgwe8s1zt.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArrs41 = vowels.split(\"\
    \");\n    let vowelsArrs42 = vowels.split(\"\");\n    let vowelsArrs43 = vowels.split(\"\
    \");\n    let vowelsArrs44 = vowels.split(\"\");\n    let vowelsArrs45 = vowels.split(\"\
    \");\n    let vowelsArrs46 = vowels.split(\"\");\n    let vowel\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpev9ww6tu.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_max_min = 0;\n    let vowels_index_count_max_min_index\
    \ = 0;\n    let vowels_index_count_max_min_index2 = 0;\n    let vowels_index_count_max_min_index3\
    \ = 0;\n    let vowels_index_count_max_min_index4 = 0;\n    let vowels_index_count_max_min_index5\
    \ = 0;\n    let vowels_index_count_max_min_index6 = 0;\n    let vowels_index_count_max_min_index7\
    \ = 0;\n    let vowels_index_count_max_min_index8 = 0;\n    let vowels_index_count_max_min_index9\
    \ = 0;\n    let vowels_index_count_max_min_index10 = 0;\n    let vowels_index_count_max_min_index11\
    \ = 0;\n    let vowels_index_count_max_min_index12 = 0;\n    let vowels_index_count_max_min_index13\
    \ = 0;\n    let vowels_index_count_max_min_index14 = 0;\n    let vowels_index_count_max_min_index15\
    \ = 0;\n    let vowels_index_count_max_min_index16 = 0;\n    let vowels_index_count_max_min_index17\
    \ = 0;\n    let vowels_index_count_max_min_index18 = 0;\n    let vowels_index_count_max_min_index19\
    \ = 0;\n    let vowels_index_count_max_min_index20 = 0;\n    let vowels_index_count_max_min_index21\
    \ = 0;\n    let vowels_index_count_max_min_index22 = 0;\n    let vowels_index_count_max_min_index23\
    \ = 0;\n    let vowels_index_count_max_min_index24 = 0;\n    let vowels_index_count_max_min_index25\
    \ = 0;\n    let vowels_index_count_max_min_index26 = 0;\n    let vowels_index_count_max_min_index27\
    \ = 0;\n    let vowels_index_count_max_min_index28 = 0;\n    let vowels_index_count_max_min_index29\
    \ = 0;\n    let vowels_index_count_max_min_index30 = 0;\n    let vowels_index_count_max_min_index31\
    \ = 0;\n    let vowels_index_count_max_min_index32 = 0;\n    let vowels_index_count_max_min_index33\
    \ = 0;\n    let vowels_index_count_max_min_index34 = 0;\n    let vowels_index_count_max_min_index35\
    \ = 0;\n    let vowels_index_count_max_min_index36 = 0;\n    let vowels_index_count_max_min_index37\
    \ = 0;\n    let vowels_index_count_max_min_index38 = 0;\n    let vowels_index_count_max_min_index39\
    \ = 0;\n    let vowels_index_count_max_min_index40 = 0;\n    let vowels_index_count_max_min_index41\
    \ = 0;\n    let vowels_index_count_max_min_index42 = 0;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7kq7qi9e.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnj3iionz.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - word.length;\n    let vowels_count_from_middle\
    \ = word.length - vowels_count_from_right;\n    let vowels_count_from_middle2\
    \ = word.length - vowels_count_from_left;\n    let vowels_count_from_middle3 =\
    \ word.length - vowels_count_from_middle;\n    let vowels_count_from_middle4 =\
    \ word.length - vowels_count_from_middle2;\n    let vowels_count_from_middle5\
    \ = word.length - vowels_count_from_middle3;\n    let vowels_count_from_middle6\
    \ = word.length - vowels_count_from_middle4;\n    let vowels_count_from_middle7\
    \ = word.length - vowels_count_from_middle5;\n    let vowels_count_from_middle8\
    \ = word.length - vowels_count_from_middle6;\n    let vowels_count_from_middle9\
    \ = word.length - vowels_count_from_middle7;\n    let vowels_count_from_middle10\
    \ = word.length - vowels_count_from_middle8;\n    let vowels_count_from_middle11\
    \ = word.length - vowels_count_from_middle9;\n    let vowels_count_from_middle12\
    \ = word.length - vowels_count_from_middle10;\n    let vowels_count_from_middle13\
    \ = word.length - vowels_count_from_middle11;\n    let vowels_count_from_middle14\
    \ = word.length - vowels_count_from_middle12;\n    let vowels_count_from_middle15\
    \ = word.length - vowels_count_from_middle13;\n    let vowels_count_from_middle16\
    \ = word.length - vowels_count_from_middle14;\n    let vowels_count_from_middle17\
    \ = word.length - vowels_count_from_middle15;\n    let vowels_count_from_middle18\
    \ = word.length - vowels_count_from_middle16;\n    let vowels_count_from_middle19\
    \ = word.length - vowels_count_from_middle17;\n    let vowels_count_from_middle20\
    \ = word.length - vowels_count_from_middle18;\n    let vowels_count_from_middle21\
    \ = word.length - vowels_count_from_middle19;\n    let vowels_count_from_middle22\
    \ = word.length - vowels_count_from_middle20;\n    let vowels_count_from_middle23\
    \ = word.length - vowels_count_from_middle21;\n    let vowels_count_from_middle24\
    \ = word.length - vowels_count_from_middle22;\n    let vowels_count_from_middle25\
    \ = word.length - vowels_count_from_middle23;\n    let vowels_count_from_middle26\
    \ = word.length - vowels_count_from_middle24;\n    let vowels_count_from_middle27\
    \ = word.length - vowels_count_from_middle25;\n    let vowels_count_from_middle28\
    \ = word.length - vowels_count_from_middle26;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt4dsr_ll.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt8lks6x8.ts(70,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpt8lks6x8.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowels\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxo74lbbs.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = vowels.length;\n\
    \  let vowels_count_from_right = word.length - vowels_count;\n  let vowels_count_from_left\
    \ = vowels_count - 1;\n  let vowels_count_from_middle = vowels_count / 2;\n  let\
    \ vowels_count_from_middle2 = vowels_count / 2;\n  let vowels_count_from_middle3\
    \ = vowels_count / 2;\n  let vowels_count_from_middle4 = vowels_count / 2;\n \
    \ let vowels_count_from_middle5 = vowels_count / 2;\n  let vowels_count_from_middle6\
    \ = vowels_count / 2;\n  let vowels_count_from_middle7 = vowels_count / 2;\n \
    \ let vowels_count_from_middle8 = vowels_count / 2;\n  let vowels_count_from_middle9\
    \ = vowels_count / 2;\n  let vowels_count_from_middle10 = vowels_count / 2;\n\
    \  let vowels_count_from_middle11 = vowels_count / 2;\n  let vowels_count_from_middle12\
    \ = vowels_count / 2;\n  let vowels_count_from_middle13 = vowels_count / 2;\n\
    \  let vowels_count_from_middle14 = vowels_count / 2;\n  let vowels_count_from_middle15\
    \ = vowels_count / 2;\n  let vowels_count_from_middle16 = vowels_count / 2;\n\
    \  let vowels_count_from_middle17 = vowels_count / 2;\n  let vowels_count_from_middle18\
    \ = vowels_count / 2;\n  let vowels_count_from_middle19 = vowels_count / 2;\n\
    \  let vowels_count_from_middle20 = vowels_count / 2;\n  let vowels_count_from_middle21\
    \ = vowels_count / 2;\n  let vowels_count_from_middle22 = vowels_count / 2;\n\
    \  let vowels_count_from_middle23 = vowels_count / 2;\n  let vowels_count_from_middle24\
    \ = vowels_count / 2;\n  let vowels_count_from_middle25 = vowels_count / 2;\n\
    \  let vowels_count_from_middle26 = vowels_count / 2;\n  let vowels_count_from_middle27\
    \ = vowels_count / 2;\n  let vowels_count_from_middle28 = vowels_count / 2;\n\
    \  let vowels_count_from_middle29 = vowels_count / 2;\n  let vowels_count_from_middle30\
    \ = vowels_count / 2;\n  let vowels_count_from_middle31 = vowels_count / 2;\n\
    \  let vowels_count_from_middle32 = vowels_count / 2;\n  let vowels_count_from_middle33\
    \ = vowels_count / 2;\n  let vowels_count_from_middle34 = vowels_count / 2;\n\
    \  let vowels_count_from_middle35\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ttog2vc.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjwqwwtgj.ts(98,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"AEIOUaeiou\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp63s3xjtf.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmp63s3xjtf.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_sorted = vowelsArr.sort();\n\
    \    let vowelsArr_sorted_len = vowelsArr_sorted.length;\n    let vowelsArr_sorted_last\
    \ = vowelsArr_sorted[vowelsArr_sorted_len - 1];\n    let vowelsArr_sorted_last_index\
    \ = vowelsArr.indexOf(vowelsArr_sorted_last);\n    let vowelsArr_sorted_last_index_len\
    \ = vowelsArr_sorted_last_index - vowelsArr_sorted_len;\n    let vowelsArr_sorted_last_index_last_index\
    \ = vowelsArr_sorted_last_index - 1;\n    let vowelsArr_sorted_last_index_last_index_len\
    \ = vowelsArr_sorted_last_index_last_index - vowelsArr_sorted_last_index_len;\n\
    \    let vowelsArr_sorted_last_index_last_index_last_index = vowelsArr_sorted_last_index_last_index\
    \ - 2;\n    let vowelsArr_sorted_last_index_last_index_last_index_len = vowelsArr_sorted_last_index_last_index_last_index\
    \ - vowelsArr_sorted_last_index_last_index_len;\n    let vowelsArr_sorted_last_index_last_index_last_index_last_index\
    \ = vowelsArr_sorted_last_index_last_index_last_index - 3;\n    let vowelsArr_sorted_last_index_last_index_last_index_last_index_len\
    \ = vowelsArr_sorted_last_index_last_index_last_index_last_index - vowelsArr_sorted_last_index_last_index_last_index_len;\n\
    \    let vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index\
    \ = vowelsArr_sorted_last_index_last_index_last_index_last_index - 4;\n    let\
    \ vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index_len\
    \ = vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index -\
    \ vowelsArr_sorted_last_index_last_index_last_index_last_index_len;\n    let vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index_last_index\
    \ = vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index_last_index\
    \ - 5;\n    let vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index_last_index_len\
    \ = vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index_last_index_last_index\
    \ - vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index_last_index_len;\n\
    \    let vowelsArr_sorted_last_index_last_index_last_index_last_index_last_index_last_index_last_index_len\
    \ = vowelsArr_sorted_last_index_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0rblz3mn.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount\
    \ = vowels.length;\n  let vowelsCount2 = vowelsCount - 1;\n  let vowelsCount3\
    \ = vowelsCount - 2;\n  let vowelsCount4 = vowelsCount - 3;\n  let vowelsCount5\
    \ = vowelsCount - 4;\n  let vowelsCount6 = vowelsCount - 5;\n  let vowelsCount7\
    \ = vowelsCount - 6;\n  let vowelsCount8 = vowelsCount - 7;\n  let vowelsCount9\
    \ = vowelsCount - 8;\n  let vowelsCount10 = vowelsCount - 9;\n  let vowelsCount11\
    \ = vowelsCount - 10;\n  let vowelsCount12 = vowelsCount - 11;\n  let vowelsCount13\
    \ = vowelsCount - 12;\n  let vowelsCount14 = vowelsCount - 13;\n  let vowelsCount15\
    \ = vowelsCount - 14;\n  let vowelsCount16 = vowelsCount - 15;\n  let vowelsCount17\
    \ = vowelsCount - 16;\n  let vowelsCount18 = vowelsCount - 17;\n  let vowelsCount19\
    \ = vowelsCount - 18;\n  let vowelsCount20 = vowelsCount - 19;\n  let vowelsCount21\
    \ = vowelsCount - 20;\n  let vowelsCount22 = vowelsCount - 21;\n  let vowelsCount23\
    \ = vowelsCount - 22;\n  let vowelsCount24 = vowelsCount - 23;\n  let vowelsCount25\
    \ = vowelsCount - 24;\n  let vowelsCount26 = vowelsCount - 25;\n  let vowelsCount27\
    \ = vowelsCount - 26;\n  let vowelsCount28 = vowelsCount - 27;\n  let vowelsCount29\
    \ = vowelsCount - 28;\n  let vowelsCount30 = vowelsCount - 29;\n  let vowelsCount31\
    \ = vowelsCount - 30;\n  let vowelsCount32 = vowelsCount - 31;\n  let vowelsCount33\
    \ = vowelsCount - 32;\n  let vowelsCount34 = vowelsCount - 33;\n  let vowelsCount35\
    \ = vowelsCount - 34;\n  let vowelsCount36 = vowelsCount - 35;\n  let vowelsCount37\
    \ = vowelsCount - 36;\n  let vowelsCount38 = vowelsCount - 37;\n  let vowelsCount39\
    \ = vowelsCount - 38;\n  let vowelsCount40 = vowelsCount - 39;\n  let vowelsCount41\
    \ = vowelsCount - 40;\n  let vowels\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmakt4itb.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo =\
    \ vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusTwentyTen\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzh9b50e2.ts(46,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpzh9b50e2.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp33zcuuh4.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let vowelsCount: number[] = [1, 2, 3];\n    let vowelsCountIndex: number[]\
    \ = [0, 2, 4];\n    let vowelsCountIndex2: number[] = [1, 3, 5];\n    let vowelsCountIndex3:\
    \ number[] = [0, 3, 5];\n    let vowelsCountIndex4: number[] = [1, 4, 5];\n  \
    \  let vowelsCountIndex5: number[] = [0, 4, 5];\n    let vowelsCountIndex6: number[]\
    \ = [1, 5, 5];\n    let vowelsCountIndex7: number[] = [0, 5, 5];\n    let vowelsCountIndex8:\
    \ number[] = [1, 6, 5];\n    let vowelsCountIndex9: number[] = [0, 6, 5];\n  \
    \  let vowelsCountIndex10: number[] = [1, 7, 5];\n    let vowelsCountIndex11:\
    \ number[] = [0, 7, 5];\n    let vowelsCountIndex12: number[] = [1, 8, 5];\n \
    \   let vowelsCountIndex13: number[] = [0, 8, 5];\n    let vowelsCountIndex14:\
    \ number[] = [1, 9, 5];\n    let vowelsCountIndex15: number[] = [0, 9, 5];\n \
    \   let vowelsCountIndex16: number[] = [1, 10, 5];\n    let vowelsCountIndex17:\
    \ number[] = [0, 10, 5];\n    let vowelsCountIndex18: number[] = [1, 11, 5];\n\
    \    let vowelsCountIndex19: number[] = [0, 11, 5];\n    let vowelsCountIndex20:\
    \ number[] = [1, 12, 5];\n    let vowelsCountIndex21: number[] = [0, 12, 5];\n\
    \    let vowelsCountIndex22: number[] = [1, 13, 5];\n    let vowelsCountIndex23:\
    \ number[] = [0, 13, 5];\n    let vowelsCountIndex24: number[] = [1, 14, 5];\n\
    \    let vowelsCountIndex25: number[] = [0, 14, 5];\n    let vowelsCountIndex26:\
    \ number[] = [1, 15, 5];\n    let vowelsCountIndex27: number[] = [0, 15, 5];\n\
    \    let vowelsCountIndex28: number[] = [1, 16, 5];\n    let vowelsCountIndex29:\
    \ number[] = [0, 16, 5];\n    let vowelsCountIndex30: number[] = [1, 17, 5];\n\
    \    let vowelsCountIndex31: number[] = [0, 17, 5];\n    let vowelsCountIndex32:\
    \ number[] = [1, 18, 5];\n    let vowelsCountIndex33: number[]\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppo3q6tup.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        let index = word.indexOf(vowels[i]);\n        if (index > -1)\
    \ {\n            vowelsIndex.push(index);\n        }\n    }\n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMiddle\
    \ = Math.floor(vowelsIndexMax / 2);\n    let vowelsIndexMiddle2 = Math.floor(vowelsIndexMin\
    \ / 2);\n    let vowelsIndexMiddle3 = Math.floor(vowelsIndexMiddle / 2);\n   \
    \ let vowelsIndexMiddle4 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle5\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle6 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle7 = Math.floor(vowelsIndexMiddle / 2);\n   \
    \ let vowelsIndexMiddle8 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle9\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle10 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle11 = Math.floor(vowelsIndexMiddle / 2);\n  \
    \  let vowelsIndexMiddle12 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle13\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle14 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle15 = Math.floor(vowelsIndexMiddle / 2);\n  \
    \  let vowelsIndexMiddle16 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle17\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle18 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle19 = Math.floor(vowelsIndexMiddle / 2);\n  \
    \  let vowelsIndexMiddle20 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle21\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle22 = Math.floor(vowelsIndexMiddle\
    \ / 2);\n    let vowelsIndexMiddle23 = Math.floor(vowelsIndexMiddle / 2);\n  \
    \  let vowelsIndexMiddle24 = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle25\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddle26 = Math.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeo82nhgu.ts(49,36): error TS1003: Identifier expected.

    ../../../../../tmp/tmpeo82nhgu.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArrIndex = 0;\n    let vowelsArrLength = vowelsArr.length;\n\
    \    let vowelsArrIndex2 = vowelsArrIndex + 1;\n    let vowelsArrLength2 = vowelsArrLength\
    \ - 1;\n    let vowelsArrIndex3 = vowelsArrIndex2 + 1;\n    let vowelsArrLength3\
    \ = vowelsArrLength2 - 1;\n    let vowelsArrIndex4 = vowelsArrIndex3 + 1;\n  \
    \  let vowelsArrLength4 = vowelsArrLength3 - 1;\n    let vowelsArrIndex5 = vowelsArrIndex4\
    \ + 1;\n    let vowelsArrLength5 = vowelsArrLength4 - 1;\n    let vowelsArrIndex6\
    \ = vowelsArrIndex5 + 1;\n    let vowelsArrLength6 = vowelsArrLength5 - 1;\n \
    \   let vowelsArrIndex7 = vowelsArrIndex6 + 1;\n    let vowelsArrLength7 = vowelsArrLength6\
    \ - 1;\n    let vowelsArrIndex8 = vowelsArrIndex7 + 1;\n    let vowelsArrLength8\
    \ = vowelsArrLength7 - 1;\n    let vowelsArrIndex9 = vowelsArrIndex8 + 1;\n  \
    \  let vowelsArrLength9 = vowelsArrLength8 - 1;\n    let vowelsArrIndex10 = vowelsArrIndex9\
    \ + 1;\n    let vowelsArrLength10 = vowelsArrLength9 - 1;\n    let vowelsArrIndex11\
    \ = vowelsArrIndex10 + 1;\n    let vowelsArrLength11 = vowelsArrLength10 - 1;\n\
    \    let vowelsArrIndex12 = vowelsArrIndex11 + 1;\n    let vowelsArrLength12 =\
    \ vowelsArrLength11 - 1;\n    let vowelsArrIndex13 = vowelsArrIndex12 + 1;\n \
    \   let vowelsArrLength13 = vowelsArrLength12 - 1;\n    let vowelsArrIndex14 =\
    \ vowelsArrIndex13 + 1;\n    let vowelsArrLength14 = vowelsArrLength13 - 1;\n\
    \    let vowelsArrIndex15 = vowelsArrIndex14 + 1;\n    let vowelsArrLength15 =\
    \ vowelsArrLength14 - 1;\n    let vowelsArrIndex16 = vowelsArrIndex15 + 1;\n \
    \   let vowelsArrLength16 = vowelsArrLength15 - 1;\n    let vowelsArrIndex17 =\
    \ vowelsArrIndex16 + 1;\n    let vowelsArrLength17 = vowelsArrLength16 - 1;\n\
    \    let vowelsArrIndex18 = vowelsArrIndex17 + 1;\n    let vowelsArrLength18 =\
    \ vowelsArrLength17 - 1;\n    let vowelsArrIndex19 = vowel\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp92vbjjf.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj8tddz_b.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_array =\
    \ vowels.split(\"\");\n    let vowels_array_length = vowels_array.length;\n  \
    \  let vowels_array_reverse = vowels_array.reverse();\n    let vowels_array_reverse_length\
    \ = vowels_array_reverse.length;\n    let vowels_array_reverse_length = vowels_array_reverse_length\
    \ - 1;\n    let vowels_array_reverse_length_2 = vowels_array_reverse_length *\
    \ 2;\n    let vowels_array_reverse_length_3 = vowels_array_reverse_length * 3;\n\
    \    let vowels_array_reverse_length_4 = vowels_array_reverse_length * 4;\n  \
    \  let vowels_array_reverse_length_5 = vowels_array_reverse_length * 5;\n    let\
    \ vowels_array_reverse_length_6 = vowels_array_reverse_length * 6;\n    let vowels_array_reverse_length_7\
    \ = vowels_array_reverse_length * 7;\n    let vowels_array_reverse_length_8 =\
    \ vowels_array_reverse_length * 8;\n    let vowels_array_reverse_length_9 = vowels_array_reverse_length\
    \ * 9;\n    let vowels_array_reverse_length_10 = vowels_array_reverse_length *\
    \ 10;\n    let vowels_array_reverse_length_11 = vowels_array_reverse_length *\
    \ 11;\n    let vowels_array_reverse_length_12 = vowels_array_reverse_length *\
    \ 12;\n    let vowels_array_reverse_length_13 = vowels_array_reverse_length *\
    \ 13;\n    let vowels_array_reverse_length_14 = vowels_array_reverse_length *\
    \ 14;\n    let vowels_array_reverse_length_15 = vowels_array_reverse_length *\
    \ 15;\n    let vowels_array_reverse_length_16 = vowels_array_reverse_length *\
    \ 16;\n    let vowels_array_reverse_length_17 = vowels_array_reverse_length *\
    \ 17;\n    let vowels_array_reverse_length_18 = vowels_array_reverse_length *\
    \ 18;\n    let vowels_array_reverse_length_19 = vowels_array_reverse_length *\
    \ 19;\n    let vowels_array_reverse_length_20 = vowels_array_reverse_length *\
    \ 20;\n    let vowels_array_reverse_length_21 = vowels_array_reverse_length *\
    \ 21;\n    let vowels_array_reverse_length_22 = vowels_array_reverse_length *\
    \ 22;\n    let vowels_array_reverse_length_23 = vowels_array_reverse_length *\
    \ 23;\n    let vowels_array_reverse_length_24 = vowels_array_reverse_length *\
    \ 24;\n    let vowels_array_reverse_length_25 = vowels_array_reverse_length *\
    \ 25;\n    let vowels_array_reverse_length_26 = vowels_array_reverse_length *\
    \ 26;\n    let vowels_array_reverse_length_27 = vowels_array_reverse_length *\
    \ 27;\n    let vowels_array_reverse_length_28 = vowels_array_reverse_length *\
    \ 28;\n    let vowels_array_reverse_length_29 = vowels_array_reverse_length *\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphpwkg369.ts(46,9): error TS1005: '','' expected.

    ../../../../../tmp/tmphpwkg369.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len2 = vowelsArr_len - 1;\n    let vowelsArr_len3 = vowelsArr_len\
    \ - 2;\n    let vowelsArr_len4 = vowelsArr_len - 3;\n    let vowelsArr_len5 =\
    \ vowelsArr_len - 4;\n    let vowelsArr_len6 = vowelsArr_len - 5;\n    let vowelsArr_len7\
    \ = vowelsArr_len - 6;\n    let vowelsArr_len8 = vowelsArr_len - 7;\n    let vowelsArr_len9\
    \ = vowelsArr_len - 8;\n    let vowelsArr_len10 = vowelsArr_len - 9;\n    let\
    \ vowelsArr_len11 = vowelsArr_len - 10;\n    let vowelsArr_len12 = vowelsArr_len\
    \ - 11;\n    let vowelsArr_len13 = vowelsArr_len - 12;\n    let vowelsArr_len14\
    \ = vowelsArr_len - 13;\n    let vowelsArr_len15 = vowelsArr_len - 14;\n    let\
    \ vowelsArr_len16 = vowelsArr_len - 15;\n    let vowelsArr_len17 = vowelsArr_len\
    \ - 16;\n    let vowelsArr_len18 = vowelsArr_len - 17;\n    let vowelsArr_len19\
    \ = vowelsArr_len - 18;\n    let vowelsArr_len20 = vowelsArr_len - 19;\n    let\
    \ vowelsArr_len21 = vowelsArr_len - 20;\n    let vowelsArr_len22 = vowelsArr_len\
    \ - 21;\n    let vowelsArr_len23 = vowelsArr_len - 22;\n    let vowelsArr_len24\
    \ = vowelsArr_len - 23;\n    let vowelsArr_len25 = vowelsArr_len - 24;\n    let\
    \ vowelsArr_len26 = vowelsArr_len - 25;\n    let vowelsArr_len27 = vowelsArr_len\
    \ - 26;\n    let vowelsArr_len28 = vowelsArr_len - 27;\n    let vowelsArr_len29\
    \ = vowelsArr_len - 28;\n    let vowelsArr_len30 = vowelsArr_len - 29;\n    let\
    \ vowelsArr_len31 = vowelsArr_len - 30;\n    let vowelsArr_len32 = vowelsArr_len\
    \ - 31;\n    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy5in4gko.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length;\n    let vowels_length = vowelsArr_length - 1;\n    let vowels_length_2\
    \ = vowelsArr_length - 2;\n    let vowels_length_3 = vowelsArr_length - 3;\n \
    \   let vowels_length_4 = vowelsArr_length - 4;\n    let vowels_length_5 = vowelsArr_length\
    \ - 5;\n    let vowels_length_6 = vowelsArr_length - 6;\n    let vowels_length_7\
    \ = vowelsArr_length - 7;\n    let vowels_length_8 = vowelsArr_length - 8;\n \
    \   let vowels_length_9 = vowelsArr_length - 9;\n    let vowels_length_10 = vowelsArr_length\
    \ - 10;\n    let vowels_length_11 = vowelsArr_length - 11;\n    let vowels_length_12\
    \ = vowelsArr_length - 12;\n    let vowels_length_13 = vowelsArr_length - 13;\n\
    \    let vowels_length_14 = vowelsArr_length - 14;\n    let vowels_length_15 =\
    \ vowelsArr_length - 15;\n    let vowels_length_16 = vowelsArr_length - 16;\n\
    \    let vowels_length_17 = vowelsArr_length - 17;\n    let vowels_length_18 =\
    \ vowelsArr_length - 18;\n    let vowels_length_19 = vowelsArr_length - 19;\n\
    \    let vowels_length_20 = vowelsArr_length - 20;\n    let vowels_length_21 =\
    \ vowelsArr_length - 21;\n    let vowels_length_22 = vowelsArr_length - 22;\n\
    \    let vowels_length_23 = vowelsArr_length - 23;\n    let vowels_length_24 =\
    \ vowelsArr_length - 24;\n    let vowels_length_25 = vowelsArr_length - 25;\n\
    \    let vowels_length_26 = vowelsArr_length - 26;\n    let vowels_length_27 =\
    \ vowelsArr_length - 27;\n    let vowels_length_28 = vowelsArr_length - 28;\n\
    \    let vowels_length_29 = vowelsArr_length - 29;\n    let vowels_length_30 =\
    \ vowelsArr_length - 30;\n    let vowels_length_31 = vowelsArr_length - 31;\n\
    \    let vowels_length_32 = vowelsArr_length - 32;\n    let vowels_length_33 =\
    \ vowelsArr_length - 33;\n    let vowels_length_34 = vowelsArr_length - 34;\n\
    \    let vowels_length_35 = vowelsArr_length - 35;\n    let vowels_length_36 =\
    \ vowelsArr_length - 36\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgmlvvlv3.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_arr = [];\n\
    \    for (let i = 0; i < vowelsArr_len; i++) {\n        vowelsArr_arr.push(vowelsArr[i]);\n\
    \    }\n    let vowelsArr_arr2 = [];\n    for (let i = vowelsArr_len - 1; i >=\
    \ 0; i--) {\n        vowelsArr_arr2.push(vowelsArr[i]);\n    }\n    let vowelsArr_arr3\
    \ = [];\n    for (let i = vowelsArr_len - 1; i >= 0; i--) {\n        vowelsArr_arr3.push(vowelsArr[i]);\n\
    \    }\n    let vowelsArr_arr4 = [];\n    for (let i = vowelsArr_len - 1; i >=\
    \ 0; i--) {\n        vowelsArr_arr4.push(vowelsArr[i]);\n    }\n    let vowelsArr_arr5\
    \ = [];\n    for (let i = vowelsArr_len - 1; i >= 0; i--) {\n        vowelsArr_arr5.push(vowelsArr[i]);\n\
    \    }\n    let vowelsArr_arr6 = [];\n    for (let i = vowelsArr_len - 1; i >=\
    \ 0; i--) {\n        vowelsArr_arr6.push(vowelsArr[i]);\n    }\n    let vowelsArr_arr7\
    \ = [];\n    for (let i = vowelsArr_len - 1; i >= 0; i--) {\n        vowelsArr_arr7.push(vowelsArr[i]);\n\
    \    }\n    let vowelsArr_arr8 = [];\n    for (let i = vowelsArr_len - 1; i >=\
    \ 0; i--) {\n        vowelsArr_arr8.push(vowelsArr[i]);\n    }\n    let vowelsArr_arr9\
    \ = [];\n    for (let i = vowelsArr_len - 1; i >= 0; i--) {\n        vowelsArr_arr9.push(vowelsArr[i]);\n\
    \    }\n    let vowelsArr_arr10 = [];\n    for (let i = vowelsArr_len - 1; i >=\
    \ 0; i--) {\n        vowelsArr_arr10.push(vowelsArr[i]);\n    }\n    let vowelsArr_arr11\
    \ = [];\n    for (let i = vowelsArr_len - 1; i >= 0; i--) {\n        vowelsArr_arr11.push(vowelsArr[i]);\n\
    \    }\n    let vowelsArr_arr12 = [];\n    for (let i = vowelsArr_len - 1; i >=\
    \ 0; i--) {\n        vowelsArr_arr12.push(vowelsArr[i]);\n    }\n    let vowelsArr_arr13\
    \ = [];\n    for (let i = vowelsArr_len - 1; i >= \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdh8fzd70.ts(65,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpdh8fzd70.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj8tddz_b.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjdgof5yw.ts(98,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowels_count_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvua6pktq.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp08d0ux09.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowel_found = false;\n    let vowel_found_index =\
    \ 0;\n    let vowel_found_index = 0;\n    let vowel_found_count = 0;\n    let\
    \ vowel_found_word = \"\";\n    let vowel_found_word_index = 0;\n    let vowel_found_word_count\
    \ = 0;\n    let vowel_found_word_index2 = 0;\n    let vowel_found_word_count2\
    \ = 0;\n    let vowel_found_word_index3 = 0;\n    let vowel_found_word_count3\
    \ = 0;\n    let vowel_found_word_index4 = 0;\n    let vowel_found_word_count4\
    \ = 0;\n    let vowel_found_word_index5 = 0;\n    let vowel_found_word_count5\
    \ = 0;\n    let vowel_found_word_index6 = 0;\n    let vowel_found_word_count6\
    \ = 0;\n    let vowel_found_word_index7 = 0;\n    let vowel_found_word_count7\
    \ = 0;\n    let vowel_found_word_index8 = 0;\n    let vowel_found_word_count8\
    \ = 0;\n    let vowel_found_word_index9 = 0;\n    let vowel_found_word_count9\
    \ = 0;\n    let vowel_found_word_index10 = 0;\n    let vowel_found_word_count10\
    \ = 0;\n    let vowel_found_word_index11 = 0;\n    let vowel_found_word_count11\
    \ = 0;\n    let vowel_found_word_index12 = 0;\n    let vowel_found_word_count12\
    \ = 0;\n    let vowel_found_word_index13 = 0;\n    let vowel_found_word_count13\
    \ = 0;\n    let vowel_found_word_index14 = 0;\n    let vowel_found_word_count14\
    \ = 0;\n    let vowel_found_word_index15 = 0;\n    let vowel_found_word_count15\
    \ = 0;\n    let vowel_found_word_index16 = 0;\n    let vowel_found_word_count16\
    \ = 0;\n    let vowel_found_word_index17 = 0;\n    let vowel_found_word_count17\
    \ = 0;\n    let vowel_found_word_index18 = 0;\n    let vowel_found_word_count18\
    \ = 0;\n    let vowel_found_word_index19 = 0;\n    let vowel_found_word_count19\
    \ = 0;\n    let vowel_found_word_index20 = 0;\n    let vowel_found_word_count20\
    \ = 0;\n    let vowel_found_word_index21 = 0;\n    let vowel_found_word_count21\
    \ = 0;\n    let vowel_found_word_index22 = 0;\n    let vowel_found_word_count22\
    \ = 0;\n    let vowel_found_word_index23 = 0;\n    let vowel_found_word_count23\
    \ = 0;\n    let vowel_found_word_index24 = 0;\n    let vowel_found_word_count24\
    \ = 0;\n    let vowel_found_word_index25 = 0;\n    let vowel_found_word_count25\
    \ = 0;\n    let vowel_found_word_index26 = 0;\n    let vowel_found_word_count26\
    \ = 0;\n    let vowel_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxl4e00rl.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp33zcuuh4.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2 = vowelsIndex\
    \ + vowelsCount;\n    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n    let\
    \ vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    let vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    let vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    let vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    let vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    let vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    let vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    let vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    let vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    let vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    let vowelsIndex33 = \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp223t10hr.ts(47,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp223t10hr.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = vowels.split(\"\
    \").length\n  let vowels_count_from_right = vowels_count - word.length\n  let\
    \ vowels_count_from_left = vowels_count - word.length - 1\n  let vowels_count_from_right_to_left\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_left_to_right = vowels_count\
    \ - word.length\n  let vowels_count_from_right_to_left = vowels_count - word.length\n\
    \  let vowels_count_from_left_to_right = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length - 1\n  let vowels_count_from_left_to_right_to_left\
    \ = vowels_count - word.length\n  let vowels_count_from_right_to_left_to_right\
    \ = vowels_count - word.length - 1\n  let vowel\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps_2u2sht.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnj3iionz.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = word.length - vowelsCount;\n   \
    \ let vowelsCountRight = vowelsCount - 1;\n    let vowelsCountRight1 = vowelsCount\
    \ - 1;\n    let vowelsCountRight2 = vowelsCount - 1;\n    let vowelsCountRight3\
    \ = vowelsCount - 1;\n    let vowelsCountRight4 = vowelsCount - 1;\n    let vowelsCountRight5\
    \ = vowelsCount - 1;\n    let vowelsCountRight6 = vowelsCount - 1;\n    let vowelsCountRight7\
    \ = vowelsCount - 1;\n    let vowelsCountRight8 = vowelsCount - 1;\n    let vowelsCountRight9\
    \ = vowelsCount - 1;\n    let vowelsCountRight10 = vowelsCount - 1;\n    let vowelsCountRight11\
    \ = vowelsCount - 1;\n    let vowelsCountRight12 = vowelsCount - 1;\n    let vowelsCountRight13\
    \ = vowelsCount - 1;\n    let vowelsCountRight14 = vowelsCount - 1;\n    let vowelsCountRight15\
    \ = vowelsCount - 1;\n    let vowelsCountRight16 = vowelsCount - 1;\n    let vowelsCountRight17\
    \ = vowelsCount - 1;\n    let vowelsCountRight18 = vowelsCount - 1;\n    let vowelsCountRight19\
    \ = vowelsCount - 1;\n    let vowelsCountRight20 = vowelsCount - 1;\n    let vowelsCountRight21\
    \ = vowelsCount - 1;\n    let vowelsCountRight22 = vowelsCount - 1;\n    let vowelsCountRight23\
    \ = vowelsCount - 1;\n    let vowelsCountRight24 = vowelsCount - 1;\n    let vowelsCountRight25\
    \ = vowelsCount - 1;\n    let vowelsCountRight26 = vowelsCount - 1;\n    let vowelsCountRight27\
    \ = vowelsCount - 1;\n    let vowelsCountRight28 = vowelsCount - 1;\n    let vowelsCountRight29\
    \ = vowelsCount - 1;\n    let vowelsCountRight30 = vowelsCount - 1;\n    let vowelsCountRight31\
    \ = vowelsCount - 1;\n    let vowelsCountRight32 = vowelsCount - 1;\n    let vowelsCountRight33\
    \ = vowelsCount - 1;\n    let vowelsCountRight34 = vowelsCount - 1;\n    let vowelsCountRight35\
    \ = vowelsCount - 1;\n    let vowelsCountRight36 = vowelsCount - 1;\n    let vowelsCountRight37\
    \ = vowelsCount - 1;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxbqj5duq.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = word.lastIndexOf(vowels);\n    let vowels_index_2\
    \ = word.lastIndexOf(\"e\");\n    let vowels_index_3 = word.lastIndexOf(\"i\"\
    );\n    let vowels_index_4 = word.lastIndexOf(\"o\");\n    let vowels_index_5\
    \ = word.lastIndexOf(\"u\");\n    let vowels_index_6 = word.lastIndexOf(\"A\"\
    );\n    let vowels_index_7 = word.lastIndexOf(\"E\");\n    let vowels_index_8\
    \ = word.lastIndexOf(\"I\");\n    let vowels_index_9 = word.lastIndexOf(\"O\"\
    );\n    let vowels_index_10 = word.lastIndexOf(\"U\");\n    let vowels_index_11\
    \ = word.lastIndexOf(\"a\");\n    let vowels_index_12 = word.lastIndexOf(\"e\"\
    );\n    let vowels_index_13 = word.lastIndexOf(\"i\");\n    let vowels_index_14\
    \ = word.lastIndexOf(\"o\");\n    let vowels_index_15 = word.lastIndexOf(\"u\"\
    );\n    let vowels_index_16 = word.lastIndexOf(\"A\");\n    let vowels_index_17\
    \ = word.lastIndexOf(\"E\");\n    let vowels_index_18 = word.lastIndexOf(\"I\"\
    );\n    let vowels_index_19 = word.lastIndexOf(\"O\");\n    let vowels_index_20\
    \ = word.lastIndexOf(\"U\");\n    let vowels_index_21 = word.lastIndexOf(\"a\"\
    );\n    let vowels_index_22 = word.lastIndexOf(\"e\");\n    let vowels_index_23\
    \ = word.lastIndexOf(\"i\");\n    let vowels_index_24 = word.lastIndexOf(\"o\"\
    );\n    let vowels_index_25 = word.lastIndexOf(\"u\");\n    let vowels_index_26\
    \ = word.lastIndexOf(\"A\");\n    let vowels_index_27 = word.lastIndexOf(\"E\"\
    );\n    let vowels_index_28 = word.lastIndexOf(\"I\");\n    let vowels_index_29\
    \ = word.lastIndexOf(\"O\");\n    let vowels_index_30 = word.lastIndexOf(\"U\"\
    );\n    let vowels_index_31 = word.lastIndexOf(\"a\");\n    let vowels_index_32\
    \ = word.lastIndexOf(\"e\");\n    let vowels_index_33 = word.lastIndexOf(\"i\"\
    );\n    let vowels_index_34 = word.lastIndexOf(\"o\");\n    let vowels_index_35\
    \ = word.lastIndexOf(\"u\");\n    let vowels_index_36 = word.lastIndexOf(\"A\"\
    );\n    let vowels_index_37 = word.lastIndexOf(\"E\");\n    let vowels_index_38\
    \ = word.lastIndexOf(\"I\");\n    let vowels_index_39 = word.lastIndexOf(\"O\"\
    );\n    let vowels_index_40 = \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvzipjey9.ts(54,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpvzipjey9.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowels\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiilo6n1o.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsCount2 = vowelsCount / 2;\n\
    \    let vowelsCount3 = vowelsCount / 3;\n    let vowelsCount4 = vowelsCount /\
    \ 4;\n    let vowelsCount5 = vowelsCount / 5;\n    let vowelsCount6 = vowelsCount\
    \ / 6;\n    let vowelsCount7 = vowelsCount / 7;\n    let vowelsCount8 = vowelsCount\
    \ / 8;\n    let vowelsCount9 = vowelsCount / 9;\n    let vowelsCount10 = vowelsCount\
    \ / 10;\n    let vowelsCount11 = vowelsCount / 11;\n    let vowelsCount12 = vowelsCount\
    \ / 12;\n    let vowelsCount13 = vowelsCount / 13;\n    let vowelsCount14 = vowelsCount\
    \ / 14;\n    let vowelsCount15 = vowelsCount / 15;\n    let vowelsCount16 = vowelsCount\
    \ / 16;\n    let vowelsCount17 = vowelsCount / 17;\n    let vowelsCount18 = vowelsCount\
    \ / 18;\n    let vowelsCount19 = vowelsCount / 19;\n    let vowelsCount20 = vowelsCount\
    \ / 20;\n    let vowelsCount21 = vowelsCount / 21;\n    let vowelsCount22 = vowelsCount\
    \ / 22;\n    let vowelsCount23 = vowelsCount / 23;\n    let vowelsCount24 = vowelsCount\
    \ / 24;\n    let vowelsCount25 = vowelsCount / 25;\n    let vowelsCount26 = vowelsCount\
    \ / 26;\n    let vowelsCount27 = vowelsCount / 27;\n    let vowelsCount28 = vowelsCount\
    \ / 28;\n    let vowelsCount29 = vowelsCount / 29;\n    let vowelsCount30 = vowelsCount\
    \ / 30;\n    let vowelsCount31 = vowelsCount / 31;\n    let vowelsCount32 = vowelsCount\
    \ / 32;\n    let vowelsCount33 = vowelsCount / 33;\n    let vowelsCount34 = vowelsCount\
    \ / 34;\n    let vowelsCount35 = vowelsCount / 35;\n    let vowelsCount36 = vowelsCount\
    \ / 36;\n    let vowelsCount37 = vowelsCount / 37;\n    let vowelsCount38 = vowelsCount\
    \ / 38;\n    let vowelsCount39 = vowelsCount / 39;\n    let vowelsCount40 = vowelsCount\
    \ / 40;\n    let vowelsCount41 = vowelsCount / 41;\n    let \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf9je0uhb.ts(55,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpf9je0uhb.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 1;\n    let vowelsCountFromRightFromLeft = vowelsCount - 1;\n\
    \    let vowelsCountFromLeftFromRight = vowelsCount - 1;\n    let vowelsCountFromRightFromLeftFromRight\
    \ = vowelsCount - 1;\n    let vowelsCountFromLeftFromRightFromRight = vowelsCount\
    \ - 1;\n    let vowelsCountFromRightFromLeftFromRight = vowelsCount - 1;\n   \
    \ let vowelsCountFromLeftFromRightFromRight = vowelsCount - 1;\n    let vowelsCountFromRightFromLeftFromRight\
    \ = vowelsCount - 1;\n    let vowelsCountFromLeftFromRightFromRight = vowelsCount\
    \ - 1;\n    let vowelsCountFromRightFromLeftFromRight = vowelsCount - 1;\n   \
    \ let vowelsCountFromLeftFromRightFromRight = vowelsCount - 1;\n    let vowelsCountFromRightFromLeftFromRight\
    \ = vowelsCount - 1;\n    let vowelsCountFromLeftFromRightFromRight = vowelsCount\
    \ - 1;\n    let vowelsCountFromRightFromLeftFromRight = vowelsCount - 1;\n   \
    \ let vowelsCountFromLeftFromRightFromRight = vowelsCount - 1;\n    let vowelsCountFromRightFromLeftFromRight\
    \ = vowelsCount - 1;\n    let vowelsCountFromLeftFromRightFromRight = vowelsCount\
    \ - 1;\n    let vowelsCountFromRightFromLeftFromRight = vowelsCount - 1;\n   \
    \ let vowelsCountFromLeftFromRightFromRight = vowelsCount - 1;\n    let vowelsCountFromRightFromLeftFromRight\
    \ = vowelsCount - 1;\n    let vowelsCountFromLeftFromRightFromRight = vowelsCount\
    \ - 1;\n    let vowelsCountFromRightFromLeftFromRight = vowelsCount - 1;\n   \
    \ let vowelsCountFromLeftFromRightFromRight = vowelsCount - 1;\n    let vowelsCountFromRightFromLeftFromRight\
    \ = vowelsCount - 1;\n    let vowelsCountFromLeftFromRightFromRight = vowelsCount\
    \ - 1;\n    let vowelsCountFromRightFromLeftFromRight = vowelsCount - 1;\n   \
    \ let vowelsCountFromLeftFromRightFromRight = vowelsCount - 1;\n    let vowelsCountFromRightFromLeftFromRight\
    \ = vowelsCount - 1;\n    let vowelsCountFromLeftFromRightFromRight = vowelsCount\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1rxufw1s.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArray = vowels.split(\"\
    \");\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex =\
    \ 0;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayIndex4\
    \ = 0;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayIndex7\
    \ = 0;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayIndex10\
    \ = 0;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayIndex13\
    \ = 0;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayIndex16\
    \ = 0;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayIndex19\
    \ = 0;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayIndex22\
    \ = 0;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayIndex25\
    \ = 0;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayIndex28\
    \ = 0;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayIndex31\
    \ = 0;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayIndex34\
    \ = 0;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayIndex37\
    \ = 0;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayIndex40\
    \ = 0;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayIndex43\
    \ = 0;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayIndex46\
    \ = 0;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayIndex49\
    \ = 0;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayIndex52\
    \ = 0;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayIndex55\
    \ = 0;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayIndex58\
    \ = 0;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayIndex61\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphbevvw8i.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = 0;\n    let vowelsArrayIndex3 = 0;\n    let\
    \ vowelsArrayIndex4 = 0;\n    let vowelsArrayIndex5 = 0;\n    let vowelsArrayIndex6\
    \ = 0;\n    let vowelsArrayIndex7 = 0;\n    let vowelsArrayIndex8 = 0;\n    let\
    \ vowelsArrayIndex9 = 0;\n    let vowelsArrayIndex10 = 0;\n    let vowelsArrayIndex11\
    \ = 0;\n    let vowelsArrayIndex12 = 0;\n    let vowelsArrayIndex13 = 0;\n   \
    \ let vowelsArrayIndex14 = 0;\n    let vowelsArrayIndex15 = 0;\n    let vowelsArrayIndex16\
    \ = 0;\n    let vowelsArrayIndex17 = 0;\n    let vowelsArrayIndex18 = 0;\n   \
    \ let vowelsArrayIndex19 = 0;\n    let vowelsArrayIndex20 = 0;\n    let vowelsArrayIndex21\
    \ = 0;\n    let vowelsArrayIndex22 = 0;\n    let vowelsArrayIndex23 = 0;\n   \
    \ let vowelsArrayIndex24 = 0;\n    let vowelsArrayIndex25 = 0;\n    let vowelsArrayIndex26\
    \ = 0;\n    let vowelsArrayIndex27 = 0;\n    let vowelsArrayIndex28 = 0;\n   \
    \ let vowelsArrayIndex29 = 0;\n    let vowelsArrayIndex30 = 0;\n    let vowelsArrayIndex31\
    \ = 0;\n    let vowelsArrayIndex32 = 0;\n    let vowelsArrayIndex33 = 0;\n   \
    \ let vowelsArrayIndex34 = 0;\n    let vowelsArrayIndex35 = 0;\n    let vowelsArrayIndex36\
    \ = 0;\n    let vowelsArrayIndex37 = 0;\n    let vowelsArrayIndex38 = 0;\n   \
    \ let vowelsArrayIndex39 = 0;\n    let vowelsArrayIndex40 = 0;\n    let vowelsArrayIndex41\
    \ = 0;\n    let vowelsArrayIndex42 = 0;\n    let vowelsArrayIndex43 = 0;\n   \
    \ let vowelsArrayIndex44 = 0;\n    let vowelsArrayIndex45 = 0;\n    let vowelsArrayIndex46\
    \ = 0;\n    let vowelsArrayIndex47 = 0;\n    let vowelsArrayIndex48 = 0;\n   \
    \ let vowelsArrayIndex49 = 0;\n    let vowelsArrayIndex50 = 0;\n    let vowelsArrayIndex51\
    \ = 0;\n    let vowelsArrayIndex52 = 0;\n    let vowelsArrayIndex53 = 0;\n   \
    \ let vowelsArrayIndex54 = 0;\n    let vowelsArrayIndex55 = 0;\n    let vowelsArrayIndex56\
    \ = 0;\n    let vowelsArrayIndex57 = 0;\n    let vowelsArrayIndex58 = 0;\n   \
    \ let vowelsArrayIndex59 = 0;\n    let vowelsArrayIndex60 = 0;\n    let vowelsArrayIndex61\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkm0jz73j.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexMax = vowelsCount - 1;\n    let vowelsIndexMin = 0;\n    let\
    \ vowelsIndexMinIndex = 0;\n    let vowelsIndexMaxIndex = 0;\n    let vowelsIndexMinIndexCount\
    \ = 0;\n    let vowelsIndexMaxIndexCount = 0;\n    let vowelsIndexMinIndexCountMax\
    \ = vowelsIndexMaxIndexCount - 1;\n    let vowelsIndexMinIndexCountMax = vowelsIndexMaxIndexCount\
    \ - 1;\n    let vowelsIndexMaxIndexCountMax = vowelsIndexMaxIndexCount - 1;\n\
    \    let vowelsIndexMinIndexCountMax = vowelsIndexMaxIndexCount - 1;\n    let\
    \ vowelsIndexMinIndexCountMin = vowelsIndexMinIndexCount - 1;\n    let vowelsIndexMaxIndexCountMin\
    \ = vowelsIndexMaxIndexCount - 1;\n    let vowelsIndexMinIndexCountMin = vowelsIndexMinIndexCount\
    \ - 1;\n    let vowelsIndexMaxIndexCountMin = vowelsIndexMaxIndexCount - 1;\n\
    \    let vowelsIndexMinIndexCountMax = vowelsIndexMinIndexCount - 1;\n    let\
    \ vowelsIndexMaxIndexCountMax = vowelsIndexMaxIndexCount - 1;\n    let vowelsIndexMinIndexCountMin\
    \ = vowelsIndexMinIndexCount - 1;\n    let vowelsIndexMaxIndexCountMax = vowelsIndexMaxIndexCount\
    \ - 1;\n    let vowelsIndexMinIndexCountMax = vowelsIndexMinIndexCount - 1;\n\
    \    let vowelsIndexMaxIndexCountMin = vowelsIndexMaxIndexCount - 1;\n    let\
    \ vowelsIndexMinIndexCountMin = vowelsIndexMinIndexCount - 1;\n    let vowelsIndexMaxIndexCountMax\
    \ = vowelsIndexMaxIndexCount - 1;\n    let vowelsIndexMinIndexCountMin = vowelsIndexMinIndexCount\
    \ - 1;\n    let vowelsIndexMaxIndexCountMax = vowelsIndexMaxIndexCount - 1;\n\
    \    let vowelsIndexMinIndexCountMax = vowelsIndexMinIndexCount - 1;\n    let\
    \ vowelsIndexMaxIndexCountMin = vowelsIndexMaxIndexCount - 1;\n    let vowelsIndexMinIndexCountMin\
    \ = vowelsIndexMinIndexCount - 1;\n    let vowelsIndexMaxIndexCountMax = vowelsIndexMaxIndexCount\
    \ - 1;\n    let vowelsIndexMinIndexCountMax = vowelsIndexMinIndexCount - 1;\n\
    \    let vowelsIndexMaxIndexCountMin = vowelsIndexMax\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg950hy49.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowels_count\
    \ = vowels.length;\n  let vowels_count_from_right = vowels_count - 1;\n  let vowels_count_from_left\
    \ = vowels_count - 2;\n  let vowels_count_from_middle = vowels_count - 3;\n  let\
    \ vowels_count_from_middle2 = vowels_count - 4;\n  let vowels_count_from_middle3\
    \ = vowels_count - 5;\n  let vowels_count_from_middle4 = vowels_count - 6;\n \
    \ let vowels_count_from_middle5 = vowels_count - 7;\n  let vowels_count_from_middle6\
    \ = vowels_count - 8;\n  let vowels_count_from_middle7 = vowels_count - 9;\n \
    \ let vowels_count_from_middle8 = vowels_count - 10;\n  let vowels_count_from_middle9\
    \ = vowels_count - 11;\n  let vowels_count_from_middle10 = vowels_count - 12;\n\
    \  let vowels_count_from_middle11 = vowels_count - 13;\n  let vowels_count_from_middle12\
    \ = vowels_count - 14;\n  let vowels_count_from_middle13 = vowels_count - 15;\n\
    \  let vowels_count_from_middle14 = vowels_count - 16;\n  let vowels_count_from_middle15\
    \ = vowels_count - 17;\n  let vowels_count_from_middle16 = vowels_count - 18;\n\
    \  let vowels_count_from_middle17 = vowels_count - 19;\n  let vowels_count_from_middle18\
    \ = vowels_count - 20;\n  let vowels_count_from_middle19 = vowels_count - 21;\n\
    \  let vowels_count_from_middle20 = vowels_count - 22;\n  let vowels_count_from_middle21\
    \ = vowels_count - 23;\n  let vowels_count_from_middle22 = vowels_count - 24;\n\
    \  let vowels_count_from_middle23 = vowels_count - 25;\n  let vowels_count_from_middle24\
    \ = vowels_count - 26;\n  let vowels_count_from_middle25 = vowels_count - 27;\n\
    \  let vowels_count_from_middle26 = vowels_count - 28;\n  let vowels_count_from_middle27\
    \ = vowels_count - 29;\n  let vowels_count_from_middle28 = vowels_count - 30;\n\
    \  let vowels_count_from_middle29 = vowels_count - 31;\n  let vowels_count_from_middle30\
    \ = vowels_count - 32;\n  let vowels_count_from_middle31 = vowels_count - 33;\n\
    \  let vowels_count_from_middle32 = vowels_count - 34;\n  let vowels_count_from_middle33\
    \ = vowels_count - 35;\n  let vowel\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnf_w8b4m.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo =\
    \ vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusThirty\
    \ = vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4fnqve6j.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748638
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArrs41 = vowels.split(\"\
    \");\n    let vowelsArrs42 = vowels.split(\"\");\n    let vowelsArrs43 = vowels.split(\"\
    \");\n    let vowelsArrs44 = vowels.split(\"\");\n    let vowelsArrs45 = vowels.split(\"\
    \");\n    let vowelsArrs46 = vowels.split(\"\");\n    let vowel\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpev9ww6tu.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2\
    \ = 0;\n    let vowelsIndex3 = 0;\n    let vowelsIndex4 = 0;\n    let vowelsIndex5\
    \ = 0;\n    let vowelsIndex6 = 0;\n    let vowelsIndex7 = 0;\n    let vowelsIndex8\
    \ = 0;\n    let vowelsIndex9 = 0;\n    let vowelsIndex10 = 0;\n    let vowelsIndex11\
    \ = 0;\n    let vowelsIndex12 = 0;\n    let vowelsIndex13 = 0;\n    let vowelsIndex14\
    \ = 0;\n    let vowelsIndex15 = 0;\n    let vowelsIndex16 = 0;\n    let vowelsIndex17\
    \ = 0;\n    let vowelsIndex18 = 0;\n    let vowelsIndex19 = 0;\n    let vowelsIndex20\
    \ = 0;\n    let vowelsIndex21 = 0;\n    let vowelsIndex22 = 0;\n    let vowelsIndex23\
    \ = 0;\n    let vowelsIndex24 = 0;\n    let vowelsIndex25 = 0;\n    let vowelsIndex26\
    \ = 0;\n    let vowelsIndex27 = 0;\n    let vowelsIndex28 = 0;\n    let vowelsIndex29\
    \ = 0;\n    let vowelsIndex30 = 0;\n    let vowelsIndex31 = 0;\n    let vowelsIndex32\
    \ = 0;\n    let vowelsIndex33 = 0;\n    let vowelsIndex34 = 0;\n    let vowelsIndex35\
    \ = 0;\n    let vowelsIndex36 = 0;\n    let vowelsIndex37 = 0;\n    let vowelsIndex38\
    \ = 0;\n    let vowelsIndex39 = 0;\n    let vowelsIndex40 = 0;\n    let vowelsIndex41\
    \ = 0;\n    let vowelsIndex42 = 0;\n    let vowelsIndex43 = 0;\n    let vowelsIndex44\
    \ = 0;\n    let vowelsIndex45 = 0;\n    let vowelsIndex46 = 0;\n    let vowelsIndex47\
    \ = 0;\n    let vowelsIndex48 = 0;\n    let vowelsIndex49 = 0;\n    let vowelsIndex50\
    \ = 0;\n    let vowelsIndex51 = 0;\n    let vowelsIndex52 = 0;\n    let vowelsIndex53\
    \ = 0;\n    let vowelsIndex54 = 0;\n    let vowelsIndex55 = 0;\n    let vowelsIndex56\
    \ = 0;\n    let vowelsIndex57 = 0;\n    let vowelsIndex58 = 0;\n    let vowelsIndex59\
    \ = 0;\n    let vowelsIndex60 = 0;\n    let vowelsIndex61 = 0;\n    let vowelsIndex62\
    \ = 0;\n    let vowelsIndex63 = 0;\n    let vowelsIndex64 = 0;\n    let vowelsIndex65\
    \ = 0;\n    let vowelsIndex66 = 0;\n    let vowelsIndex67 = 0;\n    let vowelsIndex68\
    \ = 0;\n    let vowelsIndex69 = 0;\n    let vowelsIndex70 = 0;\n    let vowelsIndex71\
    \ = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdq95w7_w.ts(107,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748638
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_array =\
    \ vowels.split(\"\");\n    let vowels_array_length = vowels_array.length;\n  \
    \  let vowels_array_reverse = vowels_array.reverse();\n    let vowels_array_reverse_length\
    \ = vowels_array_reverse.length;\n    let vowels_array_reverse_length = vowels_array_reverse_length\
    \ - 1;\n    let vowels_array_reverse_length_2 = vowels_array_reverse_length *\
    \ 2;\n    let vowels_array_reverse_length_3 = vowels_array_reverse_length * 3;\n\
    \    let vowels_array_reverse_length_4 = vowels_array_reverse_length * 4;\n  \
    \  let vowels_array_reverse_length_5 = vowels_array_reverse_length * 5;\n    let\
    \ vowels_array_reverse_length_6 = vowels_array_reverse_length * 6;\n    let vowels_array_reverse_length_7\
    \ = vowels_array_reverse_length * 7;\n    let vowels_array_reverse_length_8 =\
    \ vowels_array_reverse_length * 8;\n    let vowels_array_reverse_length_9 = vowels_array_reverse_length\
    \ * 9;\n    let vowels_array_reverse_length_10 = vowels_array_reverse_length *\
    \ 10;\n    let vowels_array_reverse_length_11 = vowels_array_reverse_length *\
    \ 11;\n    let vowels_array_reverse_length_12 = vowels_array_reverse_length *\
    \ 12;\n    let vowels_array_reverse_length_13 = vowels_array_reverse_length *\
    \ 13;\n    let vowels_array_reverse_length_14 = vowels_array_reverse_length *\
    \ 14;\n    let vowels_array_reverse_length_15 = vowels_array_reverse_length *\
    \ 15;\n    let vowels_array_reverse_length_16 = vowels_array_reverse_length *\
    \ 16;\n    let vowels_array_reverse_length_17 = vowels_array_reverse_length *\
    \ 17;\n    let vowels_array_reverse_length_18 = vowels_array_reverse_length *\
    \ 18;\n    let vowels_array_reverse_length_19 = vowels_array_reverse_length *\
    \ 19;\n    let vowels_array_reverse_length_20 = vowels_array_reverse_length *\
    \ 20;\n    let vowels_array_reverse_length_21 = vowels_array_reverse_length *\
    \ 21;\n    let vowels_array_reverse_length_22 = vowels_array_reverse_length *\
    \ 22;\n    let vowels_array_reverse_length_23 = vowels_array_reverse_length *\
    \ 23;\n    let vowels_array_reverse_length_24 = vowels_array_reverse_length *\
    \ 24;\n    let vowels_array_reverse_length_25 = vowels_array_reverse_length *\
    \ 25;\n    let vowels_array_reverse_length_26 = vowels_array_reverse_length *\
    \ 26;\n    let vowels_array_reverse_length_27 = vowels_array_reverse_length *\
    \ 27;\n    let vowels_array_reverse_length_28 = vowels_array_reverse_length *\
    \ 28;\n    let vowels_array_reverse_length_29 = vowels_array_reverse_length *\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphpwkg369.ts(46,9): error TS1005: '','' expected.

    ../../../../../tmp/tmphpwkg369.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp33zcuuh4.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowel_positions = [];\n    let vowel_positions_count\
    \ = word.length - 1;\n    let vowel_positions_count_temp = 0;\n    let vowel_positions_count_temp2\
    \ = 0;\n    let vowel_positions_count_temp3 = 0;\n    let vowel_positions_count_temp4\
    \ = 0;\n    let vowel_positions_count_temp5 = 0;\n    let vowel_positions_count_temp6\
    \ = 0;\n    let vowel_positions_count_temp7 = 0;\n    let vowel_positions_count_temp8\
    \ = 0;\n    let vowel_positions_count_temp9 = 0;\n    let vowel_positions_count_temp10\
    \ = 0;\n    let vowel_positions_count_temp11 = 0;\n    let vowel_positions_count_temp12\
    \ = 0;\n    let vowel_positions_count_temp13 = 0;\n    let vowel_positions_count_temp14\
    \ = 0;\n    let vowel_positions_count_temp15 = 0;\n    let vowel_positions_count_temp16\
    \ = 0;\n    let vowel_positions_count_temp17 = 0;\n    let vowel_positions_count_temp18\
    \ = 0;\n    let vowel_positions_count_temp19 = 0;\n    let vowel_positions_count_temp20\
    \ = 0;\n    let vowel_positions_count_temp21 = 0;\n    let vowel_positions_count_temp22\
    \ = 0;\n    let vowel_positions_count_temp23 = 0;\n    let vowel_positions_count_temp24\
    \ = 0;\n    let vowel_positions_count_temp25 = 0;\n    let vowel_positions_count_temp26\
    \ = 0;\n    let vowel_positions_count_temp27 = 0;\n    let vowel_positions_count_temp28\
    \ = 0;\n    let vowel_positions_count_temp29 = 0;\n    let vowel_positions_count_temp30\
    \ = 0;\n    let vowel_positions_count_temp31 = 0;\n    let vowel_positions_count_temp32\
    \ = 0;\n    let vowel_positions_count_temp33 = 0;\n    let vowel_positions_count_temp34\
    \ = 0;\n    let vowel_positions_count_temp35 = 0;\n    let vowel_positions_count_temp36\
    \ = 0;\n    let vowel_positions_count_temp37 = 0;\n    let vowel_positions_count_temp38\
    \ = 0;\n    let vowel_positions_count_temp39 = 0;\n    let vowel_positions_count_temp40\
    \ = 0;\n    let vowel_positions_count_temp41 = 0;\n    let vowel_positions_count_temp42\
    \ = 0;\n    let vowel_positions_count_temp43 = 0;\n    let vowel_positions_count_temp44\
    \ = 0;\n    let vowel_positions_count_temp45 = 0;\n    let vowel_positions_count_temp46\
    \ = 0;\n    let vowel_positions_count_temp47 = 0;\n    let vowel_positions_count_temp48\
    \ = 0;\n    let vowel_position\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp30tacmdv.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArrIndex: number[] = [];\n    for (let i = 0; i < vowelsArr.length;\
    \ i++) {\n        vowelsArrIndex.push(i);\n    }\n    let vowelsArrIndexLength\
    \ = vowelsArrIndex.length;\n    let vowelsArrIndexMax = vowelsArrIndex[vowelsArrIndex.length\
    \ - 1];\n    let vowelsArrIndexMin = vowelsArrIndex[0];\n    let vowelsArrIndexMaxIndex:\
    \ number = vowelsArrIndexMax - 1;\n    let vowelsArrIndexMinIndex: number = vowelsArrIndexMin\
    \ + 1;\n    let vowelsArrIndexMaxIndexIndex: number = vowelsArrIndexMaxIndex -\
    \ 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex + 1;\n\
    \    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex +\
    \ 1;\n    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex +\
    \ 1;\n    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex +\
    \ 1;\n    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex +\
    \ 1;\n    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex +\
    \ 1;\n    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex +\
    \ 1;\n    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex +\
    \ 1;\n    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArrIndexMinIndex +\
    \ 1;\n    let vowelsArrIndexMaxIndexIndexIndex: number = vowelsArrIndexMaxIndexIndex\
    \ - 1;\n    let vowelsArrIndexMinIndexIndex: number = vowelsArr\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyvfqi0cm.ts(64,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_sorted = vowelsArr.sort();\n\
    \    let vowelsArr_sorted_len = vowelsArr_sorted.length;\n    let vowelsArr_sorted_last\
    \ = vowelsArr_sorted[vowelsArr_sorted_len - 1];\n    let vowelsArr_sorted_first\
    \ = vowelsArr_sorted[0];\n    let vowelsArr_sorted_first_len = vowelsArr_sorted_first.length;\n\
    \    let vowelsArr_sorted_last_len = vowelsArr_sorted_last.length;\n    let vowelsArr_sorted_first_last_len\
    \ = vowelsArr_sorted_first_len + vowelsArr_sorted_last_len;\n    let vowelsArr_sorted_first_last_last_len\
    \ = vowelsArr_sorted_first_last_len + vowelsArr_sorted_last_last_len;\n    let\
    \ vowelsArr_sorted_first_last_last_last_len = vowelsArr_sorted_first_last_last_len\
    \ + vowelsArr_sorted_last_last_last_len;\n    let vowelsArr_sorted_first_last_last_last_last_len\
    \ = vowelsArr_sorted_first_last_last_last_len + vowelsArr_sorted_last_last_last_last_len;\n\
    \    let vowelsArr_sorted_first_last_last_last_last_last_len = vowelsArr_sorted_first_last_last_last_last_len\
    \ + vowelsArr_sorted_last_last_last_last_last_len;\n    let vowelsArr_sorted_first_last_last_last_last_last_last_len\
    \ = vowelsArr_sorted_first_last_last_last_last_last_len + vowelsArr_sorted_last_last_last_last_last_last_len;\n\
    \    let vowelsArr_sorted_first_last_last_last_last_last_last_last_len = vowelsArr_sorted_first_last_last_last_last_last_last_last_len\
    \ + vowelsArr_sorted_last_last_last_last_last_last_last_len;\n    let vowelsArr_sorted_first_last_last_last_last_last_last_last_last_len\
    \ = vowelsArr_sorted_first_last_last_last_last_last_last_last_last_len + vowelsArr_sorted_last_last_last_last_last_last_last_last_len;\n\
    \    let vowelsArr_sorted_first_last_last_last_last_last_last_last_last_last_len\
    \ = vowelsArr_sorted_first_last_last_last_last_last_last_last_last_last_last_len\
    \ + vowelsArr_sorted_last_last_last_last_last_last_last_last_last_last_last_len;\n\
    \    let vowelsArr_sorted_first_last_last_last_last_last_last_last_last_last_last_len\
    \ = vowelsArr_sorted_first_last_last_last_last_last_last_last_last_last_last_last_len\
    \ + vowelsArr_sorted_last_last_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj032poyl.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\"\n  let vowelsArr = vowels.split(\"\
    \")\n  let vowelsArr2 = vowels.split(\"\")\n  let vowelsArr3 = vowels.split(\"\
    \")\n  let vowelsArr4 = vowels.split(\"\")\n  let vowelsArr5 = vowels.split(\"\
    \")\n  let vowelsArr6 = vowels.split(\"\")\n  let vowelsArr7 = vowels.split(\"\
    \")\n  let vowelsArr8 = vowels.split(\"\")\n  let vowelsArr9 = vowels.split(\"\
    \")\n  let vowelsArr10 = vowels.split(\"\")\n  let vowelsArr11 = vowels.split(\"\
    \")\n  let vowelsArr12 = vowels.split(\"\")\n  let vowelsArr13 = vowels.split(\"\
    \")\n  let vowelsArr14 = vowels.split(\"\")\n  let vowelsArr15 = vowels.split(\"\
    \")\n  let vowelsArr16 = vowels.split(\"\")\n  let vowelsArr17 = vowels.split(\"\
    \")\n  let vowelsArr18 = vowels.split(\"\")\n  let vowelsArr19 = vowels.split(\"\
    \")\n  let vowelsArr20 = vowels.split(\"\")\n  let vowelsArr21 = vowels.split(\"\
    \")\n  let vowelsArr22 = vowels.split(\"\")\n  let vowelsArr23 = vowels.split(\"\
    \")\n  let vowelsArr24 = vowels.split(\"\")\n  let vowelsArr25 = vowels.split(\"\
    \")\n  let vowelsArr26 = vowels.split(\"\")\n  let vowelsArr27 = vowels.split(\"\
    \")\n  let vowelsArr28 = vowels.split(\"\")\n  let vowelsArr29 = vowels.split(\"\
    \")\n  let vowelsArr30 = vowels.split(\"\")\n  let vowelsArr31 = vowels.split(\"\
    \")\n  let vowelsArr32 = vowels.split(\"\")\n  let vowelsArr33 = vowels.split(\"\
    \")\n  let vowelsArr34 = vowels.split(\"\")\n  let vowelsArr35 = vowels.split(\"\
    \")\n  let vowelsArr36 = vowels.split(\"\")\n  let vowelsArr37 = vowels.split(\"\
    \")\n  let vowelsArr38 = vowels.split(\"\")\n  let vowelsArr39 = vowels.split(\"\
    \")\n  let vowelsArr40 = vowels.split(\"\")\n  let vowelsArf41 = vowels.split(\"\
    \")\n  let vowelsArf42 = vowels.split(\"\")\n  let vowelsArf43 = vowels.split(\"\
    \")\n  let vowelsArr44 = vowels.split(\"\")\n  let vowelsArr45 = vowels.split(\"\
    \")\n  let vowelsArr46 = vowels.split(\"\")\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9q5ghs78.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmp9q5ghs78.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr_length = vowelsArr.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowels_found = false;\n  let vowels_found_index = 0;\n  let vowels_found_index2\
    \ = 0;\n  let vowels_found_index3 = 0;\n  let vowels_found_index4 = 0;\n  let\
    \ vowels_found_index5 = 0;\n  let vowels_found_index6 = 0;\n  let vowels_found_index7\
    \ = 0;\n  let vowels_found_index8 = 0;\n  let vowels_found_index9 = 0;\n  let\
    \ vowels_found_index10 = 0;\n  let vowels_found_index11 = 0;\n  let vowels_found_index12\
    \ = 0;\n  let vowels_found_index13 = 0;\n  let vowels_found_index14 = 0;\n  let\
    \ vowels_found_index15 = 0;\n  let vowels_found_index16 = 0;\n  let vowels_found_index17\
    \ = 0;\n  let vowels_found_index18 = 0;\n  let vowels_found_index19 = 0;\n  let\
    \ vowels_found_index20 = 0;\n  let vowels_found_index21 = 0;\n  let vowels_found_index22\
    \ = 0;\n  let vowels_found_index23 = 0;\n  let vowels_found_index24 = 0;\n  let\
    \ vowels_found_index25 = 0;\n  let vowels_found_index26 = 0;\n  let vowels_found_index27\
    \ = 0;\n  let vowels_found_index28 = 0;\n  let vowels_found_index29 = 0;\n  let\
    \ vowels_found_index30 = 0;\n  let vowels_found_index31 = 0;\n  let vowels_found_index32\
    \ = 0;\n  let vowels_found_index33 = 0;\n  let vowels_found_index34 = 0;\n  let\
    \ vowels_found_index35 = 0;\n  let vowels_found_index36 = 0;\n  let vowels_found_index37\
    \ = 0;\n  let vowels_found_index38 = 0;\n  let vowels_found_index39 = 0;\n  let\
    \ vowels_found_index40 = 0;\n  let vowels_found_index41 = 0;\n  let vowels_found_index42\
    \ = 0;\n  let vowels_found_index43 = 0;\n  let vowels_found_index44 = 0;\n  let\
    \ vowels_found_index45 = 0;\n  let vowels_found_index46 = 0;\n  let vowels_found_index47\
    \ = 0;\n  let vowels_found_index48 = 0;\n  let vowels_found_index49 = 0;\n  let\
    \ vowels_found_index50 = 0;\n  let vowels_found_index51 = 0;\n  let vowels_found_index52\
    \ = 0;\n  let vowels_found_index53 = 0;\n  let vowels_found_index54 = 0;\n  let\
    \ vowels_found_index55 = 0;\n  let vowels_found_index56 = 0;\n  let vowels_found_index57\
    \ = 0;\n  let vowels_found_index58 = 0;\n  let vowels_found_index59\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1rngbg05.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 2;\n    let vowels_count_from_middle4\
    \ = vowels_count / 2;\n    let vowels_count_from_middle5 = vowels_count / 2;\n\
    \    let vowels_count_from_middle6 = vowels_count / 2;\n    let vowels_count_from_middle7\
    \ = vowels_count / 2;\n    let vowels_count_from_middle8 = vowels_count / 2;\n\
    \    let vowels_count_from_middle9 = vowels_count / 2;\n    let vowels_count_from_middle10\
    \ = vowels_count / 2;\n    let vowels_count_from_middle11 = vowels_count / 2;\n\
    \    let vowels_count_from_middle12 = vowels_count / 2;\n    let vowels_count_from_middle13\
    \ = vowels_count / 2;\n    let vowels_count_from_middle14 = vowels_count / 2;\n\
    \    let vowels_count_from_middle15 = vowels_count / 2;\n    let vowels_count_from_middle16\
    \ = vowels_count / 2;\n    let vowels_count_from_middle17 = vowels_count / 2;\n\
    \    let vowels_count_from_middle18 = vowels_count / 2;\n    let vowels_count_from_middle19\
    \ = vowels_count / 2;\n    let vowels_count_from_middle20 = vowels_count / 2;\n\
    \    let vowels_count_from_middle21 = vowels_count / 2;\n    let vowels_count_from_middle22\
    \ = vowels_count / 2;\n    let vowels_count_from_middle23 = vowels_count / 2;\n\
    \    let vowels_count_from_middle24 = vowels_count / 2;\n    let vowels_count_from_middle25\
    \ = vowels_count / 2;\n    let vowels_count_from_middle26 = vowels_count / 2;\n\
    \    let vowels_count_from_middle27 = vowels_count / 2;\n    let vowels_count_from_middle28\
    \ = vowels_count / 2;\n    let vowels_count_from_middle29 = vowels_count / 2;\n\
    \    let vowels_count_from_middle30 = vowels_count / 2;\n    let vowels_count_from_middle31\
    \ = vowels_count / 2;\n    let vowels_count_from_middle32 = vowels_count / 2;\n\
    \    let vowels_count_from_middle33 = vowels_count / 2;\n    let vowels_count_from_middle34\
    \ = vowels_count / 2;\n    let vowels_count_from_middle35\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwuk2eqa.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_lastIndex\
    \ = vowelsArr.length - 1;\n    let vowelsArr_firstIndex = vowelsArr.length - 2;\n\
    \    let vowelsArr_firstIndex2 = vowelsArr.length - 3;\n    let vowelsArr_lastIndex2\
    \ = vowelsArr.length - 4;\n    let vowelsArr_firstIndex3 = vowelsArr.length -\
    \ 5;\n    let vowelsArr_lastIndex3 = vowelsArr.length - 6;\n    let vowelsArr_firstIndex4\
    \ = vowelsArr.length - 7;\n    let vowelsArr_lastIndex4 = vowelsArr.length - 8;\n\
    \    let vowelsArr_firstIndex5 = vowelsArr.length - 9;\n    let vowelsArr_lastIndex5\
    \ = vowelsArr.length - 10;\n    let vowelsArr_firstIndex6 = vowelsArr.length -\
    \ 11;\n    let vowelsArr_lastIndex6 = vowelsArr.length - 12;\n    let vowelsArr_firstIndex7\
    \ = vowelsArr.length - 13;\n    let vowelsArr_lastIndex7 = vowelsArr.length -\
    \ 14;\n    let vowelsArr_firstIndex8 = vowelsArr.length - 15;\n    let vowelsArr_lastIndex8\
    \ = vowelsArr.length - 16;\n    let vowelsArr_firstIndex9 = vowelsArr.length -\
    \ 17;\n    let vowelsArr_lastIndex9 = vowelsArr.length - 18;\n    let vowelsArr_firstIndex10\
    \ = vowelsArr.length - 19;\n    let vowelsArr_lastIndex10 = vowelsArr.length -\
    \ 20;\n    let vowelsArr_firstIndex11 = vowelsArr.length - 21;\n    let vowelsArr_lastIndex11\
    \ = vowelsArr.length - 22;\n    let vowelsArr_firstIndex12 = vowelsArr.length\
    \ - 23;\n    let vowelsArr_lastIndex12 = vowelsArr.length - 24;\n    let vowelsArr_firstIndex13\
    \ = vowelsArr.length - 25;\n    let vowelsArr_lastIndex13 = vowelsArr.length -\
    \ 26;\n    let vowelsArr_firstIndex14 = vowelsArr.length - 27;\n    let vowelsArr_lastIndex14\
    \ = vowelsArr.length - 28;\n    let vowelsArr_firstIndex15 = vowelsArr.length\
    \ - 29;\n    let vowelsArr_lastIndex15 = vowelsArr.length - 30;\n    let vowelsArr_firstIndex16\
    \ = vowelsArr.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5p3p_okr.ts(45,44): error TS1003: Identifier expected.

    ../../../../../tmp/tmp5p3p_okr.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowels_count =\
    \ vowels.length;\n    let vowel_positions = [];\n    let vowel_positions_count\
    \ = vowel_positions.length;\n    let vowel_position = 0;\n    let vowel_position_count\
    \ = 0;\n    let vowel_position_index = 0;\n    let vowel_position_index2 = 0;\n\
    \    let vowel_position_index3 = 0;\n    let vowel_position_index4 = 0;\n    let\
    \ vowel_position_index5 = 0;\n    let vowel_position_index6 = 0;\n    let vowel_position_index7\
    \ = 0;\n    let vowel_position_index8 = 0;\n    let vowel_position_index9 = 0;\n\
    \    let vowel_position_index10 = 0;\n    let vowel_position_index11 = 0;\n  \
    \  let vowel_position_index12 = 0;\n    let vowel_position_index13 = 0;\n    let\
    \ vowel_position_index14 = 0;\n    let vowel_position_index15 = 0;\n    let vowel_position_index16\
    \ = 0;\n    let vowel_position_index17 = 0;\n    let vowel_position_index18 =\
    \ 0;\n    let vowel_position_index19 = 0;\n    let vowel_position_index20 = 0;\n\
    \    let vowel_position_index21 = 0;\n    let vowel_position_index22 = 0;\n  \
    \  let vowel_position_index23 = 0;\n    let vowel_position_index24 = 0;\n    let\
    \ vowel_position_index25 = 0;\n    let vowel_position_index26 = 0;\n    let vowel_position_index27\
    \ = 0;\n    let vowel_position_index28 = 0;\n    let vowel_position_index29 =\
    \ 0;\n    let vowel_position_index30 = 0;\n    let vowel_position_index31 = 0;\n\
    \    let vowel_position_index32 = 0;\n    let vowel_position_index33 = 0;\n  \
    \  let vowel_position_index34 = 0;\n    let vowel_position_index35 = 0;\n    let\
    \ vowel_position_index36 = 0;\n    let vowel_position_index37 = 0;\n    let vowel_position_index38\
    \ = 0;\n    let vowel_position_index39 = 0;\n    let vowel_position_index40 =\
    \ 0;\n    let vowel_position_index41 = 0;\n    let vowel_position_index42 = 0;\n\
    \    let vowel_position_index43 = 0;\n    let vowel_position_index44 = 0;\n  \
    \  let vowel_position_index45 = 0;\n    let vowel_position_index46 = 0;\n    let\
    \ vowel_position_index47 = 0;\n    let vowel_position_index48 = 0;\n    let vowel_position_index49\
    \ = 0;\n    let vowel_position_index50 = 0;\n    let vowel_position_index51 =\
    \ 0;\n    let vowel_position_index52 = 0;\n    let vowel_position_index53 = 0;\n\
    \    let vowel_position_index54 = 0;\n    let vowel_position_index55 = 0;\n  \
    \  let vowel_position_index56 = 0;\n    let vowel_position_index57 = 0;\n    let\
    \ vowel_position_index58 = 0;\n    let vowel_position_index59\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoef1tglf.ts(98,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt8lks6x8.ts(70,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpt8lks6x8.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = 0;\n    let vowelsArrayIndex3 = 0;\n    let\
    \ vowelsArrayIndex4 = 0;\n    let vowelsArrayIndex5 = 0;\n    let vowelsArrayIndex6\
    \ = 0;\n    let vowelsArrayIndex7 = 0;\n    let vowelsArrayIndex8 = 0;\n    let\
    \ vowelsArrayIndex9 = 0;\n    let vowelsArrayIndex10 = 0;\n    let vowelsArrayIndex11\
    \ = 0;\n    let vowelsArrayIndex12 = 0;\n    let vowelsArrayIndex13 = 0;\n   \
    \ let vowelsArrayIndex14 = 0;\n    let vowelsArrayIndex15 = 0;\n    let vowelsArrayIndex16\
    \ = 0;\n    let vowelsArrayIndex17 = 0;\n    let vowelsArrayIndex18 = 0;\n   \
    \ let vowelsArrayIndex19 = 0;\n    let vowelsArrayIndex20 = 0;\n    let vowelsArrayIndex21\
    \ = 0;\n    let vowelsArrayIndex22 = 0;\n    let vowelsArrayIndex23 = 0;\n   \
    \ let vowelsArrayIndex24 = 0;\n    let vowelsArrayIndex25 = 0;\n    let vowelsArrayIndex26\
    \ = 0;\n    let vowelsArrayIndex27 = 0;\n    let vowelsArrayIndex28 = 0;\n   \
    \ let vowelsArrayIndex29 = 0;\n    let vowelsArrayIndex30 = 0;\n    let vowelsArrayIndex31\
    \ = 0;\n    let vowelsArrayIndex32 = 0;\n    let vowelsArrayIndex33 = 0;\n   \
    \ let vowelsArrayIndex34 = 0;\n    let vowelsArrayIndex35 = 0;\n    let vowelsArrayIndex36\
    \ = 0;\n    let vowelsArrayIndex37 = 0;\n    let vowelsArrayIndex38 = 0;\n   \
    \ let vowelsArrayIndex39 = 0;\n    let vowelsArrayIndex40 = 0;\n    let vowelsArrayIndex41\
    \ = 0;\n    let vowelsArrayIndex42 = 0;\n    let vowelsArrayIndex43 = 0;\n   \
    \ let vowelsArrayIndex44 = 0;\n    let vowelsArrayIndex45 = 0;\n    let vowelsArrayIndex46\
    \ = 0;\n    let vowelsArrayIndex47 = 0;\n    let vowelsArrayIndex48 = 0;\n   \
    \ let vowelsArrayIndex49 = 0;\n    let vowelsArrayIndex50 = 0;\n    let vowelsArrayIndex51\
    \ = 0;\n    let vowelsArrayIndex52 = 0;\n    let vowelsArrayIndex53 = 0;\n   \
    \ let vowelsArrayIndex54 = 0;\n    let vowelsArrayIndex55 = 0;\n    let vowelsArrayIndex56\
    \ = 0;\n    let vowelsArrayIndex57 = 0;\n    let vowelsArrayIndex58 = 0;\n   \
    \ let vowelsArrayIndex59 = 0;\n    let vowelsArrayIndex60 = 0;\n    let vowelsArrayIndex61\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkm0jz73j.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowel_positions = [];\n    let vowel_positions_count\
    \ = vowel_positions.length;\n    let vowel_position = 0;\n    let vowel_position_count\
    \ = 0;\n    let vowel_position_max = 0;\n    let vowel_position_max_count = 0;\n\
    \    let vowel_position_min = 0;\n    let vowel_position_min_count = 0;\n    let\
    \ vowel_position_min_max = 0;\n    let vowel_position_min_max_count = 0;\n   \
    \ let vowel_position_min_max_min = 0;\n    let vowel_position_min_max_min_count\
    \ = 0;\n    let vowel_position_min_max_min_max = 0;\n    let vowel_position_min_max_min_max_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min = 0;\n    let vowel_position_min_max_min_max_min_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max = 0;\n    let vowel_position_min_max_min_max_min_max_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min = 0;\n    let vowel_position_min_max_min_max_min_max_min_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min = 0;\n    let\
    \ vowel_position_min_max_min_max_min_max_min_max_min_count = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_count =\
    \ 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_min = 0;\n\
    \    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_count = 0;\n\
    \    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n\
    \    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max_min_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n    let vowel_position_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_count\
    \ = 0;\n    let vowel_position_min_max_min_max_min_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdu1znu4u.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount; i++) {\n    \
    \    vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for (let i = 0; i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for\
    \ (let i = 0; i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n    }\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for (let\
    \ i = 0; i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0;\
    \ i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount; i++) {\n    \
    \    vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for (let i = 0; i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for\
    \ (let i = 0; i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n    }\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for (let\
    \ i = 0; i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0;\
    \ i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount; i++) {\n    \
    \    vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for (let i = 0; i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for\
    \ (let i = 0; i < vowelsCount; i++) {\n        vowelsIndex.push(i);\n    }\n \
    \   let vowelsCount = \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkto2zn14.ts(94,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpkto2zn14.ts(115,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowels\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiilo6n1o.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_sorted = vowelsArr.sort();\n\
    \    let vowelsArr_sorted_len = vowelsArr_sorted.length;\n    let vowelsArr_sorted_last\
    \ = vowelsArr_sorted[vowelsArr_sorted_len - 1];\n    let vowelsArr_sorted_last_index\
    \ = vowelsArr_sorted.indexOf(vowelsArr_sorted_last);\n    let vowelsArr_sorted_last_index_len\
    \ = vowelsArr_sorted_last_index - 1;\n    let vowelsArr_sorted_last_index_last_char\
    \ = vowelsArr_sorted[vowelsArr_sorted_last_index_len];\n    let vowelsArr_sorted_last_index_last_char_len\
    \ = vowelsArr_sorted_last_index_last_char.length - 1;\n    let vowelsArr_sorted_last_index_last_char_last_char\
    \ = vowelsArr_sorted[vowelsArr_sorted_last_index_len - 1];\n    let vowelsArr_sorted_last_index_last_char_last_char_len\
    \ = vowelsArr_sorted_last_index_last_char_last_char.length - 1;\n    let vowelsArr_sorted_last_index_last_char_last_char_last_char\
    \ = vowelsArr_sorted[vowelsArr_sorted_last_index_len - 2];\n    let vowelsArr_sorted_last_index_last_char_last_char_last_char_len\
    \ = vowelsArr_sorted_last_index_last_char_last_char_last_char.length - 1;\n  \
    \  let vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char = vowelsArr_sorted[vowelsArr_sorted_last_index_len\
    \ - 3];\n    let vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char_len\
    \ = vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char.length\
    \ - 1;\n    let vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char_last_char\
    \ = vowelsArr_sorted[vowelsArr_sorted_last_index_len - 4];\n    let vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char_last_char_len\
    \ = vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char_last_char.length\
    \ - 1;\n    let vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char_last_char_last_char\
    \ = vowelsArr_sorted[vowelsArr_sorted_last_index_len - 5];\n    let vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char_last_char_last_char_len\
    \ = vowelsArr_sorted_last_index_last_char_last_char_last_char_last_char_last_char_last_char.length\
    \ - 1;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjqpny378.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount / 2;\n    let vowelsCount3\
    \ = vowelsCount - vowelsCount2;\n    let vowelsCount4 = vowelsCount - vowelsCount3;\n\
    \    let vowelsCount5 = vowelsCount - vowelsCount4;\n    let vowelsCount6 = vowelsCount\
    \ - vowelsCount5;\n    let vowelsCount7 = vowelsCount - vowelsCount6;\n    let\
    \ vowelsCount8 = vowelsCount - vowelsCount7;\n    let vowelsCount9 = vowelsCount\
    \ - vowelsCount8;\n    let vowelsCount10 = vowelsCount - vowelsCount9;\n    let\
    \ vowelsCount11 = vowelsCount - vowelsCount10;\n    let vowelsCount12 = vowelsCount\
    \ - vowelsCount11;\n    let vowelsCount13 = vowelsCount - vowelsCount12;\n   \
    \ let vowelsCount14 = vowelsCount - vowelsCount13;\n    let vowelsCount15 = vowelsCount\
    \ - vowelsCount14;\n    let vowelsCount16 = vowelsCount - vowelsCount15;\n   \
    \ let vowelsCount17 = vowelsCount - vowelsCount16;\n    let vowelsCount18 = vowelsCount\
    \ - vowelsCount17;\n    let vowelsCount19 = vowelsCount - vowelsCount18;\n   \
    \ let vowelsCount20 = vowelsCount - vowelsCount19;\n    let vowelsCount21 = vowelsCount\
    \ - vowelsCount20;\n    let vowelsCount22 = vowelsCount - vowelsCount21;\n   \
    \ let vowelsCount23 = vowelsCount - vowelsCount22;\n    let vowelsCount24 = vowelsCount\
    \ - vowelsCount23;\n    let vowelsCount25 = vowelsCount - vowelsCount24;\n   \
    \ let vowelsCount26 = vowelsCount - vowelsCount25;\n    let vowelsCount27 = vowelsCount\
    \ - vowelsCount26;\n    let vowelsCount28 = vowelsCount - vowelsCount27;\n   \
    \ let vowelsCount29 = vowelsCount - vowelsCount28;\n    let vowelsCount30 = vowelsCount\
    \ - vowelsCount29;\n    let vowelsCount31 = vowelsCount - vowelsCount30;\n   \
    \ let vowelsCount32 = vowelsCount - vowelsCount31;\n    let vowelsCount33 = vowelsCount\
    \ - vowelsCount32;\n    let vowelsCount34 = vowelsCount - vowelsCount\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk75bwich.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2 = vowelsIndex\
    \ + vowelsCount;\n    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n    let\
    \ vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    let vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    let vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    let vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    let vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    let vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    let vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    let vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    let vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    let vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    let vowelsIndex33 = \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp223t10hr.ts(47,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp223t10hr.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = 0;\n    let vowelsArrayIndex3 = 0;\n    let\
    \ vowelsArrayIndex4 = 0;\n    let vowelsArrayIndex5 = 0;\n    let vowelsArrayIndex6\
    \ = 0;\n    let vowelsArrayIndex7 = 0;\n    let vowelsArrayIndex8 = 0;\n    let\
    \ vowelsArrayIndex9 = 0;\n    let vowelsArrayIndex10 = 0;\n    let vowelsArrayIndex11\
    \ = 0;\n    let vowelsArrayIndex12 = 0;\n    let vowelsArrayIndex13 = 0;\n   \
    \ let vowelsArrayIndex14 = 0;\n    let vowelsArrayIndex15 = 0;\n    let vowelsArrayIndex16\
    \ = 0;\n    let vowelsArrayIndex17 = 0;\n    let vowelsArrayIndex18 = 0;\n   \
    \ let vowelsArrayIndex19 = 0;\n    let vowelsArrayIndex20 = 0;\n    let vowelsArrayIndex21\
    \ = 0;\n    let vowelsArrayIndex22 = 0;\n    let vowelsArrayIndex23 = 0;\n   \
    \ let vowelsArrayIndex24 = 0;\n    let vowelsArrayIndex25 = 0;\n    let vowelsArrayIndex26\
    \ = 0;\n    let vowelsArrayIndex27 = 0;\n    let vowelsArrayIndex28 = 0;\n   \
    \ let vowelsArrayIndex29 = 0;\n    let vowelsArrayIndex30 = 0;\n    let vowelsArrayIndex31\
    \ = 0;\n    let vowelsArrayIndex32 = 0;\n    let vowelsArrayIndex33 = 0;\n   \
    \ let vowelsArrayIndex34 = 0;\n    let vowelsArrayIndex35 = 0;\n    let vowelsArrayIndex36\
    \ = 0;\n    let vowelsArrayIndex37 = 0;\n    let vowelsArrayIndex38 = 0;\n   \
    \ let vowelsArrayIndex39 = 0;\n    let vowelsArrayIndex40 = 0;\n    let vowelsArrayIndex41\
    \ = 0;\n    let vowelsArrayIndex42 = 0;\n    let vowelsArrayIndex43 = 0;\n   \
    \ let vowelsArrayIndex44 = 0;\n    let vowelsArrayIndex45 = 0;\n    let vowelsArrayIndex46\
    \ = 0;\n    let vowelsArrayIndex47 = 0;\n    let vowelsArrayIndex48 = 0;\n   \
    \ let vowelsArrayIndex49 = 0;\n    let vowelsArrayIndex50 = 0;\n    let vowelsArrayIndex51\
    \ = 0;\n    let vowelsArrayIndex52 = 0;\n    let vowelsArrayIndex53 = 0;\n   \
    \ let vowelsArrayIndex54 = 0;\n    let vowelsArrayIndex55 = 0;\n    let vowelsArrayIndex56\
    \ = 0;\n    let vowelsArrayIndex57 = 0;\n    let vowelsArrayIndex58 = 0;\n   \
    \ let vowelsArrayIndex59 = 0;\n    let vowelsArrayIndex60 = 0;\n    let vowelsArrayIndex61\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkm0jz73j.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArb41 = vowels.split(\"\
    \");\n  let vowelsArb42 = vowels.split(\"\");\n  let vowelsArb43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_gkgccz1.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmp_gkgccz1.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex: number = 0;\n    let\
    \ vowelsIndexCount: number = 0;\n    let vowelsIndexMin: number = 0;\n    let\
    \ vowelsIndexMax: number = 0;\n    let vowelsIndexMinCount: number = 0;\n    let\
    \ vowelsIndexMaxCount: number = 0;\n    let vowelsIndexMinCount2: number = 0;\n\
    \    let vowelsIndexMaxCount2: number = 0;\n    let vowelsIndexMinCount3: number\
    \ = 0;\n    let vowelsIndexMaxCount3: number = 0;\n    let vowelsIndexMinCount4:\
    \ number = 0;\n    let vowelsIndexMaxCount4: number = 0;\n    let vowelsIndexMinCount5:\
    \ number = 0;\n    let vowelsIndexMaxCount5: number = 0;\n    let vowelsIndexMinCount6:\
    \ number = 0;\n    let vowelsIndexMaxCount6: number = 0;\n    let vowelsIndexMinCount7:\
    \ number = 0;\n    let vowelsIndexMaxCount7: number = 0;\n    let vowelsIndexMinCount8:\
    \ number = 0;\n    let vowelsIndexMaxCount8: number = 0;\n    let vowelsIndexMinCount9:\
    \ number = 0;\n    let vowelsIndexMaxCount9: number = 0;\n    let vowelsIndexMinCount10:\
    \ number = 0;\n    let vowelsIndexMaxCount10: number = 0;\n    let vowelsIndexMinCount11:\
    \ number = 0;\n    let vowelsIndexMaxCount11: number = 0;\n    let vowelsIndexMinCount12:\
    \ number = 0;\n    let vowelsIndexMaxCount12: number = 0;\n    let vowelsIndexMinCount13:\
    \ number = 0;\n    let vowelsIndexMaxCount13: number = 0;\n    let vowelsIndexMinCount14:\
    \ number = 0;\n    let vowelsIndexMaxCount14: number = 0;\n    let vowelsIndexMinCount15:\
    \ number = 0;\n    let vowelsIndexMaxCount15: number = 0;\n    let vowelsIndexMinCount16:\
    \ number = 0;\n    let vowelsIndexMaxCount16: number = 0;\n    let vowelsIndexMinCount17:\
    \ number = 0;\n    let vowelsIndexMaxCount17: number = 0;\n    let vowelsIndexMinCount18:\
    \ number = 0;\n    let vowelsIndexMaxCount18: number = 0;\n    let vowelsIndexMinCount19:\
    \ number = 0;\n    let vowelsIndexMaxCount19: number = 0;\n    let vowelsIndexMinCount20:\
    \ number = 0;\n    let vowelsIndexMaxCount20: number = 0;\n    let vowelsIndexMinCount21:\
    \ number = 0;\n    let vowelsIndexMaxCount21: number = 0;\n    let vowelsIndexMin\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpawed7yp9.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = 0;\n    let vowelsArrayIndex3 = 0;\n    let\
    \ vowelsArrayIndex4 = 0;\n    let vowelsArrayIndex5 = 0;\n    let vowelsArrayIndex6\
    \ = 0;\n    let vowelsArrayIndex7 = 0;\n    let vowelsArrayIndex8 = 0;\n    let\
    \ vowelsArrayIndex9 = 0;\n    let vowelsArrayIndex10 = 0;\n    let vowelsArrayIndex11\
    \ = 0;\n    let vowelsArrayIndex12 = 0;\n    let vowelsArrayIndex13 = 0;\n   \
    \ let vowelsArrayIndex14 = 0;\n    let vowelsArrayIndex15 = 0;\n    let vowelsArrayIndex16\
    \ = 0;\n    let vowelsArrayIndex17 = 0;\n    let vowelsArrayIndex18 = 0;\n   \
    \ let vowelsArrayIndex19 = 0;\n    let vowelsArrayIndex20 = 0;\n    let vowelsArrayIndex21\
    \ = 0;\n    let vowelsArrayIndex22 = 0;\n    let vowelsArrayIndex23 = 0;\n   \
    \ let vowelsArrayIndex24 = 0;\n    let vowelsArrayIndex25 = 0;\n    let vowelsArrayIndex26\
    \ = 0;\n    let vowelsArrayIndex27 = 0;\n    let vowelsArrayIndex28 = 0;\n   \
    \ let vowelsArrayIndex29 = 0;\n    let vowelsArrayIndex30 = 0;\n    let vowelsArrayIndex31\
    \ = 0;\n    let vowelsArrayIndex32 = 0;\n    let vowelsArrayIndex33 = 0;\n   \
    \ let vowelsArrayIndex34 = 0;\n    let vowelsArrayIndex35 = 0;\n    let vowelsArrayIndex36\
    \ = 0;\n    let vowelsArrayIndex37 = 0;\n    let vowelsArrayIndex38 = 0;\n   \
    \ let vowelsArrayIndex39 = 0;\n    let vowelsArrayIndex40 = 0;\n    let vowelsArrayIndex41\
    \ = 0;\n    let vowelsArrayIndex42 = 0;\n    let vowelsArrayIndex43 = 0;\n   \
    \ let vowelsArrayIndex44 = 0;\n    let vowelsArrayIndex45 = 0;\n    let vowelsArrayIndex46\
    \ = 0;\n    let vowelsArrayIndex47 = 0;\n    let vowelsArrayIndex48 = 0;\n   \
    \ let vowelsArrayIndex49 = 0;\n    let vowelsArrayIndex50 = 0;\n    let vowelsArrayIndex51\
    \ = 0;\n    let vowelsArrayIndex52 = 0;\n    let vowelsArrayIndex53 = 0;\n   \
    \ let vowelsArrayIndex54 = 0;\n    let vowelsArrayIndex55 = 0;\n    let vowelsArrayIndex56\
    \ = 0;\n    let vowelsArrayIndex57 = 0;\n    let vowelsArrayIndex58 = 0;\n   \
    \ let vowelsArrayIndex59 = 0;\n    let vowelsArrayIndex60 = 0;\n    let vowelsArrayIndex61\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkm0jz73j.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjdgof5yw.ts(98,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_lastIndex\
    \ = vowelsArr.length - 1;\n    let vowelsArr_firstIndex = vowelsArr.length - 2;\n\
    \    let vowelsArr_middleIndex = vowelsArr.length - 3;\n    let vowelsArr_firstIndex2\
    \ = vowelsArr.length - 4;\n    let vowelsArr_lastIndex2 = vowelsArr.length - 5;\n\
    \    let vowelsArr_middleIndex2 = vowelsArr.length - 6;\n    let vowelsArr_firstIndex3\
    \ = vowelsArr.length - 7;\n    let vowelsArr_lastIndex3 = vowelsArr.length - 8;\n\
    \    let vowelsArr_middleIndex3 = vowelsArr.length - 9;\n    let vowelsArr_firstIndex4\
    \ = vowelsArr.length - 10;\n    let vowelsArr_lastIndex4 = vowelsArr.length -\
    \ 11;\n    let vowelsArr_middleIndex4 = vowelsArr.length - 12;\n    let vowelsArr_firstIndex5\
    \ = vowelsArr.length - 13;\n    let vowelsArr_lastIndex5 = vowelsArr.length -\
    \ 14;\n    let vowelsArr_middleIndex5 = vowelsArr.length - 15;\n    let vowelsArr_firstIndex6\
    \ = vowelsArr.length - 16;\n    let vowelsArr_lastIndex6 = vowelsArr.length -\
    \ 17;\n    let vowelsArr_middleIndex6 = vowelsArr.length - 18;\n    let vowelsArr_firstIndex7\
    \ = vowelsArr.length - 19;\n    let vowelsArr_lastIndex7 = vowelsArr.length -\
    \ 20;\n    let vowelsArr_middleIndex7 = vowelsArr.length - 21;\n    let vowelsArr_firstIndex8\
    \ = vowelsArr.length - 22;\n    let vowelsArr_lastIndex8 = vowelsArr.length -\
    \ 23;\n    let vowelsArr_middleIndex8 = vowelsArr.length - 24;\n    let vowelsArr_firstIndex9\
    \ = vowelsArr.length - 25;\n    let vowelsArr_lastIndex9 = vowelsArr.length -\
    \ 26;\n    let vowelsArr_middleIndex9 = vowelsArr.length - 27;\n    let vowelsArr_firstIndex10\
    \ = vowelsArr.length - 28;\n    let vowelsArr_lastIndex10 = vowelsArr.length -\
    \ 29;\n    let vowelsArr_middleIndex10 = vowelsArr.length - 30;\n    let vowelsArr_firstIndex11\
    \ = vowelsArr.length - 31;\n    let vowelsAr\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmalx71na.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArrs41 = vowels.split(\"\
    \");\n  let vowelsArrs42 = vowels.split(\"\");\n  let vowelsArrs43 = vowels.split(\"\
    \");\n  let vowelsArrs44 = vowels.split(\"\");\n  let vowelsArrs45 = vowels.split(\"\
    \");\n  let vowelsArrs46 = vowels.split(\"\");\n  let vowel\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq5hdx41k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"AEIOUaeiou\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr_length = vowelsArr.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowelsArr_length = word.length;\n  let vowelsArr_length = word.length;\n\
    \  let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp49i7qzqn.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp33zcuuh4.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount\
    \ = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n  let vowelsCountFromRightAndLeft = vowelsCount - 3;\n \
    \ let vowelsCountFromLeftAndRight = vowelsCount - 4;\n  let vowelsCountFromLeftAndRightAndLeft\
    \ = vowelsCount - 5;\n  let vowelsCountFromLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 6;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeft = vowelsCount\
    \ - 7;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 8;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 9;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 10;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 11;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 12;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 13;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 14;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 15;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 16;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 17;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 18;\n  let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_j7kmeyx.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2\
    \ = vowelsIndex + vowelsCount;\n    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n\
    \    let vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    let vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    let vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    let vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    let vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    let vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    let vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    let vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    let vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    let vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    let vowelsIndex33\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpusckid8w.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount\
    \ = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsCountIndex = 0;\n  let\
    \ vowelsCountMin = vowelsCount;\n  let vowelsCountMax = vowelsCount;\n  let vowelsCountMinIndex\
    \ = 0;\n  let vowelsCountMaxIndex = 0;\n  let vowelsCountMinIndexIndex = 0;\n\
    \  let vowelsCountMaxIndexIndex = 0;\n  let vowelsCountMinIndexMax = vowelsCount;\n\
    \  let vowelsCountMaxIndexMin = vowelsCount;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMaxIndexMinIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex = 0;\n  let vowelsCountMinIndexMaxIndex\
    \ = 0;\n  let vowelsCountMinIndexMaxIndex\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_u_4vjkf.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length\
    \ = vowelsArr.length;\n    let vowelsArr_length = vowelsArr.length;\n    let vowels\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiilo6n1o.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUp = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpAndDown\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUp = vowelsCount\
    \ - 6;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDown = vowelsCount\
    \ - 7;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUp = vowelsCount\
    \ - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkeb7fmmr.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2\
    \ = vowelsIndex + vowelsCount;\n    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n\
    \    let vowelsIndex4 = vowelsIndex3 + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4\
    \ + vowelsCount;\n    let vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let\
    \ vowelsIndex7 = vowelsIndex6 + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7\
    \ + vowelsCount;\n    let vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let\
    \ vowelsIndex10 = vowelsIndex9 + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10\
    \ + vowelsCount;\n    let vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let\
    \ vowelsIndex13 = vowelsIndex12 + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13\
    \ + vowelsCount;\n    let vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let\
    \ vowelsIndex16 = vowelsIndex15 + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16\
    \ + vowelsCount;\n    let vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let\
    \ vowelsIndex19 = vowelsIndex18 + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19\
    \ + vowelsCount;\n    let vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let\
    \ vowelsIndex22 = vowelsIndex21 + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22\
    \ + vowelsCount;\n    let vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let\
    \ vowelsIndex25 = vowelsIndex24 + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25\
    \ + vowelsCount;\n    let vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let\
    \ vowelsIndex28 = vowelsIndex27 + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28\
    \ + vowelsCount;\n    let vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let\
    \ vowelsIndex31 = vowelsIndex30 + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31\
    \ + vowelsCount;\n    let vowelsIndex33\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpusckid8w.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n\
    \    let vowelsCount3 = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount -\
    \ 3;\n    let vowelsCount5 = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount\
    \ - 5;\n    let vowelsCount7 = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount\
    \ - 7;\n    let vowelsCount9 = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount\
    \ - 9;\n    let vowelsCount11 = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount\
    \ - 11;\n    let vowelsCount13 = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount\
    \ - 13;\n    let vowelsCount15 = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount\
    \ - 15;\n    let vowelsCount17 = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount\
    \ - 17;\n    let vowelsCount19 = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount\
    \ - 19;\n    let vowelsCount21 = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount\
    \ - 21;\n    let vowelsCount23 = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount\
    \ - 23;\n    let vowelsCount25 = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount\
    \ - 25;\n    let vowelsCount27 = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount\
    \ - 27;\n    let vowelsCount29 = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount\
    \ - 29;\n    let vowelsCount31 = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount\
    \ - 31;\n    let vowelsCount33 = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount\
    \ - 33;\n    let vowelsCount35 = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount\
    \ - 35;\n    let vowelsCount37 = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount\
    \ - 37;\n    let vowelsCount39 = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount\
    \ - 39;\n    let vowelsCount41 = vowelsCount - 40;\n    let vowel\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb1m48_g9.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = vowelsArray.length - 1;\n    let vowelsArrayIndex3\
    \ = vowelsArray.length - 2;\n    let vowelsArrayIndex4 = vowelsArray.length -\
    \ 3;\n    let vowelsArrayIndex5 = vowelsArray.length - 4;\n    let vowelsArrayIndex6\
    \ = vowelsArray.length - 5;\n    let vowelsArrayIndex7 = vowelsArray.length -\
    \ 6;\n    let vowelsArrayIndex8 = vowelsArray.length - 7;\n    let vowelsArrayIndex9\
    \ = vowelsArray.length - 8;\n    let vowelsArrayIndex10 = vowelsArray.length -\
    \ 9;\n    let vowelsArrayIndex11 = vowelsArray.length - 10;\n    let vowelsArrayIndex12\
    \ = vowelsArray.length - 11;\n    let vowelsArrayIndex13 = vowelsArray.length\
    \ - 12;\n    let vowelsArrayIndex14 = vowelsArray.length - 13;\n    let vowelsArrayIndex15\
    \ = vowelsArray.length - 14;\n    let vowelsArrayIndex16 = vowelsArray.length\
    \ - 15;\n    let vowelsArrayIndex17 = vowelsArray.length - 16;\n    let vowelsArrayIndex18\
    \ = vowelsArray.length - 17;\n    let vowelsArrayIndex19 = vowelsArray.length\
    \ - 18;\n    let vowelsArrayIndex20 = vowelsArray.length - 19;\n    let vowelsArrayIndex21\
    \ = vowelsArray.length - 20;\n    let vowelsArrayIndex22 = vowelsArray.length\
    \ - 21;\n    let vowelsArrayIndex23 = vowelsArray.length - 22;\n    let vowelsArrayIndex24\
    \ = vowelsArray.length - 23;\n    let vowelsArrayIndex25 = vowelsArray.length\
    \ - 24;\n    let vowelsArrayIndex26 = vowelsArray.length - 25;\n    let vowelsArrayIndex27\
    \ = vowelsArray.length - 26;\n    let vowelsArrayIndex28 = vowelsArray.length\
    \ - 27;\n    let vowelsArrayIndex29 = vowelsArray.length - 28;\n    let vowelsArrayIndex30\
    \ = vowelsArray.length - 29;\n    let vowelsArrayIndex31 = vowelsArray.length\
    \ - 30;\n    let vowelsArrayIndex32 = vowelsArray.length - 31;\n    let vowelsArrayIndex33\
    \ = vowelsArray.length - 32;\n    let vowelsArrayIndex34 = vowelsArray.length\
    \ - 33;\n    let vowelsArrayIndex35 = vowelsArray.length - 34;\n    let vowelsArrayIndex36\
    \ = vowelsArray.length - 35;\n    let vowelsArrayIndex37 = vowelsArray.length\
    \ - 36;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpydwbj3ig.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj8tddz_b.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = vowelsArrayLength - 1;\n    let vowelsArrayIndex3\
    \ = vowelsArrayLength - 2;\n    let vowelsArrayIndex4 = vowelsArrayLength - 3;\n\
    \    let vowelsArrayIndex5 = vowelsArrayLength - 4;\n    let vowelsArrayIndex6\
    \ = vowelsArrayLength - 5;\n    let vowelsArrayIndex7 = vowelsArrayLength - 6;\n\
    \    let vowelsArrayIndex8 = vowelsArrayLength - 7;\n    let vowelsArrayIndex9\
    \ = vowelsArrayLength - 8;\n    let vowelsArrayIndex10 = vowelsArrayLength - 9;\n\
    \    let vowelsArrayIndex11 = vowelsArrayLength - 10;\n    let vowelsArrayIndex12\
    \ = vowelsArrayLength - 11;\n    let vowelsArrayIndex13 = vowelsArrayLength -\
    \ 12;\n    let vowelsArrayIndex14 = vowelsArrayLength - 13;\n    let vowelsArrayIndex15\
    \ = vowelsArrayLength - 14;\n    let vowelsArrayIndex16 = vowelsArrayLength -\
    \ 15;\n    let vowelsArrayIndex17 = vowelsArrayLength - 16;\n    let vowelsArrayIndex18\
    \ = vowelsArrayLength - 17;\n    let vowelsArrayIndex19 = vowelsArrayLength -\
    \ 18;\n    let vowelsArrayIndex20 = vowelsArrayLength - 19;\n    let vowelsArrayIndex21\
    \ = vowelsArrayLength - 20;\n    let vowelsArrayIndex22 = vowelsArrayLength -\
    \ 21;\n    let vowelsArrayIndex23 = vowelsArrayLength - 22;\n    let vowelsArrayIndex24\
    \ = vowelsArrayLength - 23;\n    let vowelsArrayIndex25 = vowelsArrayLength -\
    \ 24;\n    let vowelsArrayIndex26 = vowelsArrayLength - 25;\n    let vowelsArrayIndex27\
    \ = vowelsArrayLength - 26;\n    let vowelsArrayIndex28 = vowelsArrayLength -\
    \ 27;\n    let vowelsArrayIndex29 = vowelsArrayLength - 28;\n    let vowelsArrayIndex30\
    \ = vowelsArrayLength - 29;\n    let vowelsArrayIndex31 = vowelsArrayLength -\
    \ 30;\n    let vowelsArrayIndex32 = vowelsArrayLength - 31;\n    let vowelsArrayIndex33\
    \ = vowelsArrayLength - 32;\n    let vowelsArrayIndex34 = vowelsArrayLength -\
    \ 33;\n    let vowelsArrayIndex35 = vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqzdzb8u9.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjdgof5yw.ts(98,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjdgof5yw.ts(98,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_max2 = 0;\n    let vowels_index_count_min2 = 0;\n  \
    \  let vowels_index_count_max3 = 0;\n    let vowels_index_count_min3 = 0;\n  \
    \  let vowels_index_count_max4 = 0;\n    let vowels_index_count_min4 = 0;\n  \
    \  let vowels_index_count_max5 = 0;\n    let vowels_index_count_min5 = 0;\n  \
    \  let vowels_index_count_max6 = 0;\n    let vowels_index_count_min6 = 0;\n  \
    \  let vowels_index_count_max7 = 0;\n    let vowels_index_count_min7 = 0;\n  \
    \  let vowels_index_count_max8 = 0;\n    let vowels_index_count_min8 = 0;\n  \
    \  let vowels_index_count_max9 = 0;\n    let vowels_index_count_min9 = 0;\n  \
    \  let vowels_index_count_max10 = 0;\n    let vowels_index_count_min10 = 0;\n\
    \    let vowels_index_count_max11 = 0;\n    let vowels_index_count_min11 = 0;\n\
    \    let vowels_index_count_max12 = 0;\n    let vowels_index_count_min12 = 0;\n\
    \    let vowels_index_count_max13 = 0;\n    let vowels_index_count_min13 = 0;\n\
    \    let vowels_index_count_max14 = 0;\n    let vowels_index_count_min14 = 0;\n\
    \    let vowels_index_count_max15 = 0;\n    let vowels_index_count_min15 = 0;\n\
    \    let vowels_index_count_max16 = 0;\n    let vowels_index_count_min16 = 0;\n\
    \    let vowels_index_count_max17 = 0;\n    let vowels_index_count_min17 = 0;\n\
    \    let vowels_index_count_max18 = 0;\n    let vowels_index_count_min18 = 0;\n\
    \    let vowels_index_count_max19 = 0;\n    let vowels_index_count_min19 = 0;\n\
    \    let vowels_index_count_max20 = 0;\n    let vowels_index_count_min20 = 0;\n\
    \    let vowels_index_count_max21 = 0;\n    let vowels_index_count_min21 = 0;\n\
    \    let vowels_index_count_max22 = 0;\n    let vowels_index_count_min22 = 0;\n\
    \    let vowels_index_count_max23 = 0;\n    let vowels_index_count_min23 = 0;\n\
    \    let vowels_index_count_max24 = 0;\n    let vowels_index_count_min24 = 0;\n\
    \    let vowels_index_count_max25 = 0;\n    let vowels_index_count_min25 = 0;\n\
    \    let vowels_index_count_max26 = 0;\n    let vowels_index_count_min26 = 0;\n\
    \    let vowels_index_count_max27 = 0;\n    let vowels_index_count_min27 = 0;\n\
    \    let vowels_index_count_max28\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4707idos.ts(92,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - word.length;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 3;\n    let vowels_count_from_middle4\
    \ = vowels_count / 4;\n    let vowels_count_from_middle5 = vowels_count / 5;\n\
    \    let vowels_count_from_middle6 = vowels_count / 6;\n    let vowels_count_from_middle7\
    \ = vowels_count / 7;\n    let vowels_count_from_middle8 = vowels_count / 8;\n\
    \    let vowels_count_from_middle9 = vowels_count / 9;\n    let vowels_count_from_middle10\
    \ = vowels_count / 10;\n    let vowels_count_from_middle11 = vowels_count / 11;\n\
    \    let vowels_count_from_middle12 = vowels_count / 12;\n    let vowels_count_from_middle13\
    \ = vowels_count / 13;\n    let vowels_count_from_middle14 = vowels_count / 14;\n\
    \    let vowels_count_from_middle15 = vowels_count / 15;\n    let vowels_count_from_middle16\
    \ = vowels_count / 16;\n    let vowels_count_from_middle17 = vowels_count / 17;\n\
    \    let vowels_count_from_middle18 = vowels_count / 18;\n    let vowels_count_from_middle19\
    \ = vowels_count / 19;\n    let vowels_count_from_middle20 = vowels_count / 20;\n\
    \    let vowels_count_from_middle21 = vowels_count / 21;\n    let vowels_count_from_middle22\
    \ = vowels_count / 22;\n    let vowels_count_from_middle23 = vowels_count / 23;\n\
    \    let vowels_count_from_middle24 = vowels_count / 24;\n    let vowels_count_from_middle25\
    \ = vowels_count / 25;\n    let vowels_count_from_middle26 = vowels_count / 26;\n\
    \    let vowels_count_from_middle27 = vowels_count / 27;\n    let vowels_count_from_middle28\
    \ = vowels_count / 28;\n    let vowels_count_from_middle29 = vowels_count / 29;\n\
    \    let vowels_count_from_middle30 = vowels_count / 30;\n    let vowels_count_from_middle31\
    \ = vowels_count / 31;\n    let vowels_count_from_middle32 = vowels_count / 32;\n\
    \    let vowels_count_from_middle33 = vowels_count / 33;\n    let vowels_count_from_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpei131_bx.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowelsArr_len = word.length;\n    let vowelsArr_len = word.length;\n\
    \    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnj3iionz.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let vowelsCount: number[] = [0, 0, 0, 0, 0];\n    for (let i = 0; i\
    \ < word.length; i++) {\n        let char = word[i];\n        if (vowels.indexOf(char)\
    \ >= 0) {\n            vowelsCount[vowels.indexOf(char)]++;\n        }\n    }\n\
    \    let maxVowelsCount = Math.max(...vowelsCount);\n    let maxVowelIndex = vowelsCount.indexOf(maxVowelsCount);\n\
    \    let maxVowel = vowels[maxVowelIndex];\n    for (let i = 0; i < word.length;\
    \ i++) {\n        let char = word[i];\n        if (vowels.indexOf(char) >= 0)\
    \ {\n            if (vowelsCount[vowels.indexOf(char)] == maxVowelsCount) {\n\
    \                return char;\n            }\n        }\n    }\n    return \"\"\
    ;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpg1murstj.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg1murstj.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowels_length = word.length\
    \ - 1;\n    let vowels_index = -1;\n    let vowels_index_length = -1;\n    let\
    \ vowels_index_value = -1;\n    let vowels_index_value_length = -1;\n    let vowels_index_value_value\
    \ = -1;\n    let vowels_index_value_value_length = -1;\n    let vowels_index_value_value_value\
    \ = -1;\n    let vowels_index_value_value_value_length = -1;\n    let vowels_index_value_value_value_value\
    \ = -1;\n    let vowels_index_value_value_value_value_length = -1;\n    let vowels_index_value_value_value_value_value\
    \ = -1;\n    let vowels_index_value_value_value_value_value_length = -1;\n   \
    \ let vowels_index_value_value_value_value_value_value = -1;\n    let vowels_index_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_length = -1;\n\
    \    let vowels_index_value_value_value_value_value_value_length = -1;\n    let\
    \ vowels_index_value_value_value_value_value_value_value_length = -1;\n    let\
    \ vowels_index_value_value_value_value_value_value_value_value_length = -1;\n\
    \    let vowels_index_value_value_value_value_value_value_value_value_length =\
    \ -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_length\
    \ = -1;\n    let vowels_index_value_value_value_value_value_value_value_value_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuz8ewhyj.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowels_count = vowels.length;\n    let vowels_count_from_right = vowels_count\
    \ - 1;\n    let vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let \ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpheyonjyh.ts(50,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpheyonjyh.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArrIndex = 0;\n    let vowelsArrLength = vowelsArr.length;\n\
    \    let vowelsArrIndex2 = 0;\n    let vowelsArrLength2 = vowelsArr.length;\n\
    \    let vowelsArrIndex3 = 0;\n    let vowelsArrLength3 = vowelsArr.length;\n\
    \    let vowelsArrIndex4 = 0;\n    let vowelsArrLength4 = vowelsArr.length;\n\
    \    let vowelsArrIndex5 = 0;\n    let vowelsArrLength5 = vowelsArr.length;\n\
    \    let vowelsArrIndex6 = 0;\n    let vowelsArrLength6 = vowelsArr.length;\n\
    \    let vowelsArrIndex7 = 0;\n    let vowelsArrLength7 = vowelsArr.length;\n\
    \    let vowelsArrIndex8 = 0;\n    let vowelsArrLength8 = vowelsArr.length;\n\
    \    let vowelsArrIndex9 = 0;\n    let vowelsArrLength9 = vowelsArr.length;\n\
    \    let vowelsArrIndex10 = 0;\n    let vowelsArrLength10 = vowelsArr.length;\n\
    \    let vowelsArrIndex11 = 0;\n    let vowelsArrLength11 = vowelsArr.length;\n\
    \    let vowelsArrIndex12 = 0;\n    let vowelsArrLength12 = vowelsArr.length;\n\
    \    let vowelsArrIndex13 = 0;\n    let vowelsArrLength13 = vowelsArr.length;\n\
    \    let vowelsArrIndex14 = 0;\n    let vowelsArrLength14 = vowelsArr.length;\n\
    \    let vowelsArrIndex15 = 0;\n    let vowelsArrLength15 = vowelsArr.length;\n\
    \    let vowelsArrIndex16 = 0;\n    let vowelsArrLength16 = vowelsArr.length;\n\
    \    let vowelsArrIndex17 = 0;\n    let vowelsArrLength17 = vowelsArr.length;\n\
    \    let vowelsArrIndex18 = 0;\n    let vowelsArrLength18 = vowelsArr.length;\n\
    \    let vowelsArrIndex19 = 0;\n    let vowelsArrLength19 = vowelsArr.length;\n\
    \    let vowelsArrIndex20 = 0;\n    let vowelsArrLength20 = vowelsArr.length;\n\
    \    let vowelsArrIndex21 = 0;\n    let vowelsArrLength21 = vowelsArr.length;\n\
    \    let vowelsArrIndex22 = 0;\n    let vowelsArrLength22 = vowelsArr.length;\n\
    \    let vowelsArrIndex23 = 0;\n    let vowelsArrLength23 = vowelsArr.length;\n\
    \    let vowelsArrIndex24 = 0;\n    let vowelsArrLength24 = vowelsArr.length;\n\
    \    let vowelsArrIndex25\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjjgl5ung.ts(84,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n    let vowelsArr_len = vowelsArr.length;\n\
    \    let vowelsArr_len = vowelsArr.length;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4viw0hae.ts(77,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n    let vowelsArr_length\
    \ = word.length - 1;\n    let vowelsArr_length = word.length - 1;\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpta8f_v9o.ts(85,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748641
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_length =\
    \ word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowelsArr_length = word.length;\n    let vowelsArr_length\
    \ = word.length;\n    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj8tddz_b.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = vowelsArrayLength - 1;\n    let vowelsArrayIndex3\
    \ = vowelsArrayLength - 2;\n    let vowelsArrayIndex4 = vowelsArrayLength - 3;\n\
    \    let vowelsArrayIndex5 = vowelsArrayLength - 4;\n    let vowelsArrayIndex6\
    \ = vowelsArrayLength - 5;\n    let vowelsArrayIndex7 = vowelsArrayLength - 6;\n\
    \    let vowelsArrayIndex8 = vowelsArrayLength - 7;\n    let vowelsArrayIndex9\
    \ = vowelsArrayLength - 8;\n    let vowelsArrayIndex10 = vowelsArrayLength - 9;\n\
    \    let vowelsArrayIndex11 = vowelsArrayLength - 10;\n    let vowelsArrayIndex12\
    \ = vowelsArrayLength - 11;\n    let vowelsArrayIndex13 = vowelsArrayLength -\
    \ 12;\n    let vowelsArrayIndex14 = vowelsArrayLength - 13;\n    let vowelsArrayIndex15\
    \ = vowelsArrayLength - 14;\n    let vowelsArrayIndex16 = vowelsArrayLength -\
    \ 15;\n    let vowelsArrayIndex17 = vowelsArrayLength - 16;\n    let vowelsArrayIndex18\
    \ = vowelsArrayLength - 17;\n    let vowelsArrayIndex19 = vowelsArrayLength -\
    \ 18;\n    let vowelsArrayIndex20 = vowelsArrayLength - 19;\n    let vowelsArrayIndex21\
    \ = vowelsArrayLength - 20;\n    let vowelsArrayIndex22 = vowelsArrayLength -\
    \ 21;\n    let vowelsArrayIndex23 = vowelsArrayLength - 22;\n    let vowelsArrayIndex24\
    \ = vowelsArrayLength - 23;\n    let vowelsArrayIndex25 = vowelsArrayLength -\
    \ 24;\n    let vowelsArrayIndex26 = vowelsArrayLength - 25;\n    let vowelsArrayIndex27\
    \ = vowelsArrayLength - 26;\n    let vowelsArrayIndex28 = vowelsArrayLength -\
    \ 27;\n    let vowelsArrayIndex29 = vowelsArrayLength - 28;\n    let vowelsArrayIndex30\
    \ = vowelsArrayLength - 29;\n    let vowelsArrayIndex31 = vowelsArrayLength -\
    \ 30;\n    let vowelsArrayIndex32 = vowelsArrayLength - 31;\n    let vowelsArrayIndex33\
    \ = vowelsArrayLength - 32;\n    let vowelsArrayIndex34 = vowelsArrayLength -\
    \ 33;\n    let vowelsArrayIndex35 = vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqzdzb8u9.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748639
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let vowelsCount = vowels.length;\n    let vowelsIndex: number[] = [];\n\
    \    let vowelsIndexCount: number = 0;\n    let vowelsIndexMax: number = 0;\n\
    \    let vowelsIndexMin: number = 0;\n    let vowelsIndexMaxIndex: number = 0;\n\
    \    let vowelsIndexMinIndex: number = 0;\n    let vowelsIndexMaxIndex2: number\
    \ = 0;\n    let vowelsIndexMinIndex2: number = 0;\n    let vowelsIndexMaxIndex3:\
    \ number = 0;\n    let vowelsIndexMinIndex3: number = 0;\n    let vowelsIndexMaxIndex4:\
    \ number = 0;\n    let vowelsIndexMinIndex4: number = 0;\n    let vowelsIndexMaxIndex5:\
    \ number = 0;\n    let vowelsIndexMinIndex5: number = 0;\n    let vowelsIndexMaxIndex6:\
    \ number = 0;\n    let vowelsIndexMinIndex6: number = 0;\n    let vowelsIndexMaxIndex7:\
    \ number = 0;\n    let vowelsIndexMinIndex7: number = 0;\n    let vowelsIndexMaxIndex8:\
    \ number = 0;\n    let vowelsIndexMinIndex8: number = 0;\n    let vowelsIndexMaxIndex9:\
    \ number = 0;\n    let vowelsIndexMinIndex9: number = 0;\n    let vowelsIndexMaxIndex10:\
    \ number = 0;\n    let vowelsIndexMinIndex10: number = 0;\n    let vowelsIndexMaxIndex11:\
    \ number = 0;\n    let vowelsIndexMinIndex11: number = 0;\n    let vowelsIndexMaxIndex12:\
    \ number = 0;\n    let vowelsIndexMinIndex12: number = 0;\n    let vowelsIndexMaxIndex13:\
    \ number = 0;\n    let vowelsIndexMinIndex13: number = 0;\n    let vowelsIndexMaxIndex14:\
    \ number = 0;\n    let vowelsIndexMinIndex14: number = 0;\n    let vowelsIndexMaxIndex15:\
    \ number = 0;\n    let vowelsIndexMinIndex15: number = 0;\n    let vowelsIndexMaxIndex16:\
    \ number = 0;\n    let vowelsIndexMinIndex16: number = 0;\n    let vowelsIndexMaxIndex17:\
    \ number = 0;\n    let vowelsIndexMinIndex17: number = 0;\n    let vowelsIndexMaxIndex18:\
    \ number = 0;\n    let vowelsIndexMinIndex18: number = 0;\n    let vowelsIndexMaxIndex19:\
    \ number = 0;\n    let vowelsIndexMinIndex19: number = 0;\n    let vowelsIndexMaxIndex20:\
    \ number = 0;\n    let vowelsIndexMinIndex20: number = 0;\n    let vowelsIndexMaxIndex21:\
    \ number = 0;\n    let vowelsIndexMinIndex21: number = 0;\n    let \ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfc4ja8tr.ts(61,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpfc4ja8tr.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex: number = 0;\n    let vowelsCountIndex:\
    \ number = 0;\n    let vowelsCountMinusOne: number = vowelsCount - 1;\n    let\
    \ vowelsCountMinusTwo: number = vowelsCount - 2;\n    let vowelsCountMinusThree:\
    \ number = vowelsCount - 3;\n    let vowelsCountMinusFour: number = vowelsCount\
    \ - 4;\n    let vowelsCountMinusFive: number = vowelsCount - 5;\n    let vowelsCountMinusSix:\
    \ number = vowelsCount - 6;\n    let vowelsCountMinusSeven: number = vowelsCount\
    \ - 7;\n    let vowelsCountMinusEight: number = vowelsCount - 8;\n    let vowelsCountMinusNine:\
    \ number = vowelsCount - 9;\n    let vowelsCountMinusTen: number = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven: number = vowelsCount - 11;\n    let vowelsCountMinusTwelve:\
    \ number = vowelsCount - 12;\n    let vowelsCountMinusThirteen: number = vowelsCount\
    \ - 13;\n    let vowelsCountMinusFourteen: number = vowelsCount - 14;\n    let\
    \ vowelsCountMinusFifteen: number = vowelsCount - 15;\n    let vowelsCountMinusSixteen:\
    \ number = vowelsCount - 16;\n    let vowelsCountMinusSeventeen: number = vowelsCount\
    \ - 17;\n    let vowelsCountMinusEighteen: number = vowelsCount - 18;\n    let\
    \ vowelsCountMinusNineteen: number = vowelsCount - 19;\n    let vowelsCountMinusTwenty:\
    \ number = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne: number = vowelsCount\
    \ - 21;\n    let vowelsCountMinusTwentyTwo: number = vowelsCount - 22;\n    let\
    \ vowelsCountMinusTwentyThree: number = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour:\
    \ number = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive: number = vowelsCount\
    \ - 25;\n    let vowelsCountMinusTwentySix: number = vowelsCount - 26;\n    let\
    \ vowelsCountMinusTwentySeven: number = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight:\
    \ number = vowelsCount - \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0f7l34sp.ts(44,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp0f7l34sp.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748641
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArr = vowels.split(\"\
    \");\n  let vowelsArr2 = vowels.split(\"\");\n  let vowelsArr3 = vowels.split(\"\
    \");\n  let vowelsArr4 = vowels.split(\"\");\n  let vowelsArr5 = vowels.split(\"\
    \");\n  let vowelsArr6 = vowels.split(\"\");\n  let vowelsArr7 = vowels.split(\"\
    \");\n  let vowelsArr8 = vowels.split(\"\");\n  let vowelsArr9 = vowels.split(\"\
    \");\n  let vowelsArr10 = vowels.split(\"\");\n  let vowelsArr11 = vowels.split(\"\
    \");\n  let vowelsArr12 = vowels.split(\"\");\n  let vowelsArr13 = vowels.split(\"\
    \");\n  let vowelsArr14 = vowels.split(\"\");\n  let vowelsArr15 = vowels.split(\"\
    \");\n  let vowelsArr16 = vowels.split(\"\");\n  let vowelsArr17 = vowels.split(\"\
    \");\n  let vowelsArr18 = vowels.split(\"\");\n  let vowelsArr19 = vowels.split(\"\
    \");\n  let vowelsArr20 = vowels.split(\"\");\n  let vowelsArr21 = vowels.split(\"\
    \");\n  let vowelsArr22 = vowels.split(\"\");\n  let vowelsArr23 = vowels.split(\"\
    \");\n  let vowelsArr24 = vowels.split(\"\");\n  let vowelsArr25 = vowels.split(\"\
    \");\n  let vowelsArr26 = vowels.split(\"\");\n  let vowelsArr27 = vowels.split(\"\
    \");\n  let vowelsArr28 = vowels.split(\"\");\n  let vowelsArr29 = vowels.split(\"\
    \");\n  let vowelsArr30 = vowels.split(\"\");\n  let vowelsArr31 = vowels.split(\"\
    \");\n  let vowelsArr32 = vowels.split(\"\");\n  let vowelsArr33 = vowels.split(\"\
    \");\n  let vowelsArr34 = vowels.split(\"\");\n  let vowelsArr35 = vowels.split(\"\
    \");\n  let vowelsArr36 = vowels.split(\"\");\n  let vowelsArr37 = vowels.split(\"\
    \");\n  let vowelsArr38 = vowels.split(\"\");\n  let vowelsArr39 = vowels.split(\"\
    \");\n  let vowelsArr40 = vowels.split(\"\");\n  let vowelsArf41 = vowels.split(\"\
    \");\n  let vowelsArf42 = vowels.split(\"\");\n  let vowelsArf43 = vowels.split(\"\
    \");\n  let vowelsArr44 = vowels.split(\"\");\n  let vowelsArr45 = vowels.split(\"\
    \");\n  let vowelsArr46 = vowels.split(\"\");\n  let vowelsArr47 = vowels.\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu4har_9e.ts(59,28): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu4har_9e.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let\
    \ vowelsCount = vowels.length;\n  let vowelsCountRight = vowelsCount - 1;\n  let\
    \ vowelsCountLeft = vowelsCount - 2;\n  let vowelsCountRightLeft = vowelsCount\
    \ - 3;\n  let vowelsCountRightRight = vowelsCount - 4;\n  let vowelsCountRightLeft\
    \ = vowelsCount - 5;\n  let vowelsCountLeftRight = vowelsCount - 6;\n  let vowelsCountLeftLeft\
    \ = vowelsCount - 7;\n  let vowelsCountLeftRight = vowelsCount - 8;\n  let vowelsCountRightLeft\
    \ = vowelsCount - 9;\n  let vowelsCountRightRight = vowelsCount - 10;\n  let vowelsCountRightLeft\
    \ = vowelsCount - 11;\n  let vowelsCountLeftRight = vowelsCount - 12;\n  let vowelsCountLeftLeft\
    \ = vowelsCount - 13;\n  let vowelsCountLeftRight = vowelsCount - 14;\n  let vowelsCountRightLeft\
    \ = vowelsCount - 15;\n  let vowelsCountRightRight = vowelsCount - 16;\n  let\
    \ vowelsCountRightLeft = vowelsCount - 17;\n  let vowelsCountLeftRight = vowelsCount\
    \ - 18;\n  let vowelsCountLeftLeft = vowelsCount - 19;\n  let vowelsCountLeftRight\
    \ = vowelsCount - 20;\n  let vowelsCountRightLeft = vowelsCount - 21;\n  let vowelsCountRightRight\
    \ = vowelsCount - 22;\n  let vowelsCountRightLeft = vowelsCount - 23;\n  let vowelsCountLeftRight\
    \ = vowelsCount - 24;\n  let vowelsCountLeftLeft = vowelsCount - 25;\n  let vowelsCountLeftRight\
    \ = vowelsCount - 26;\n  let vowelsCountRightLeft = vowelsCount - 27;\n  let vowelsCountRightRight\
    \ = vowelsCount - 28;\n  let vowelsCountRightLeft = vowelsCount - 29;\n  let vowelsCountLeftRight\
    \ = vowelsCount - 30;\n  let vowelsCountLeftLeft = vowelsCount - 31;\n  let vowelsCountLeftRight\
    \ = vowelsCount - 32;\n  let vowelsCountRightLeft = vowelsCount - 33;\n  let vowelsCountRightRight\
    \ = vowelsCount - 34;\n  let vowelsCountRightLeft = vowelsCount - 35;\n  let vowelsCountLeftRight\
    \ = vowelsCount - 36;\n  let vowelsCountLeftLeft = vowelsCount - 37;\n  let vowelsCountLeftRight\
    \ = vowelsCount - 38;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf0m9tl7m.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748640
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = \"aeiouAEIOU\";\n  let vowelsArray = vowels.split(\"\
    \");\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex =\
    \ 0;\n  let vowelsArrayIndex2 = vowelsArrayLength - 1;\n  let vowelsArrayIndex3\
    \ = vowelsArrayLength - 2;\n  let vowelsArrayIndex4 = vowelsArrayLength - 3;\n\
    \  let vowelsArrayIndex5 = vowelsArrayLength - 4;\n  let vowelsArrayIndex6 = vowelsArrayLength\
    \ - 5;\n  let vowelsArrayIndex7 = vowelsArrayLength - 6;\n  let vowelsArrayIndex8\
    \ = vowelsArrayLength - 7;\n  let vowelsArrayIndex9 = vowelsArrayLength - 8;\n\
    \  let vowelsArrayIndex10 = vowelsArrayLength - 9;\n  let vowelsArrayIndex11 =\
    \ vowelsArrayLength - 10;\n  let vowelsArrayIndex12 = vowelsArrayLength - 11;\n\
    \  let vowelsArrayIndex13 = vowelsArrayLength - 12;\n  let vowelsArrayIndex14\
    \ = vowelsArrayLength - 13;\n  let vowelsArrayIndex15 = vowelsArrayLength - 14;\n\
    \  let vowelsArrayIndex16 = vowelsArrayLength - 15;\n  let vowelsArrayIndex17\
    \ = vowelsArrayLength - 16;\n  let vowelsArrayIndex18 = vowelsArrayLength - 17;\n\
    \  let vowelsArrayIndex19 = vowelsArrayLength - 18;\n  let vowelsArrayIndex20\
    \ = vowelsArrayLength - 19;\n  let vowelsArrayIndex21 = vowelsArrayLength - 20;\n\
    \  let vowelsArrayIndex22 = vowelsArrayLength - 21;\n  let vowelsArrayIndex23\
    \ = vowelsArrayLength - 22;\n  let vowelsArrayIndex24 = vowelsArrayLength - 23;\n\
    \  let vowelsArrayIndex25 = vowelsArrayLength - 24;\n  let vowelsArrayIndex26\
    \ = vowelsArrayLength - 25;\n  let vowelsArrayIndex27 = vowelsArrayLength - 26;\n\
    \  let vowelsArrayIndex28 = vowelsArrayLength - 27;\n  let vowelsArrayIndex29\
    \ = vowelsArrayLength - 28;\n  let vowelsArrayIndex30 = vowelsArrayLength - 29;\n\
    \  let vowelsArrayIndex31 = vowelsArrayLength - 30;\n  let vowelsArrayIndex32\
    \ = vowelsArrayLength - 31;\n  let vowelsArrayIndex33 = vowelsArrayLength - 32;\n\
    \  let vowelsArrayIndex34 = vowelsArrayLength - 33;\n  let vowelsArrayIndex35\
    \ = vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt7bgais8.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748641
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex\
    \ = 0;\n    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo\
    \ = vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusThirty\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph8ilfkh4.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748641
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArray = vowels.split(\"\
    \");\n    let vowelsArrayLength = vowelsArray.length;\n    let vowelsArrayIndex\
    \ = 0;\n    let vowelsArrayIndex2 = 0;\n    let vowelsArrayIndex3 = 0;\n    let\
    \ vowelsArrayIndex4 = 0;\n    let vowelsArrayIndex5 = 0;\n    let vowelsArrayIndex6\
    \ = 0;\n    let vowelsArrayIndex7 = 0;\n    let vowelsArrayIndex8 = 0;\n    let\
    \ vowelsArrayIndex9 = 0;\n    let vowelsArrayIndex10 = 0;\n    let vowelsArrayIndex11\
    \ = 0;\n    let vowelsArrayIndex12 = 0;\n    let vowelsArrayIndex13 = 0;\n   \
    \ let vowelsArrayIndex14 = 0;\n    let vowelsArrayIndex15 = 0;\n    let vowelsArrayIndex16\
    \ = 0;\n    let vowelsArrayIndex17 = 0;\n    let vowelsArrayIndex18 = 0;\n   \
    \ let vowelsArrayIndex19 = 0;\n    let vowelsArrayIndex20 = 0;\n    let vowelsArrayIndex21\
    \ = 0;\n    let vowelsArrayIndex22 = 0;\n    let vowelsArrayIndex23 = 0;\n   \
    \ let vowelsArrayIndex24 = 0;\n    let vowelsArrayIndex25 = 0;\n    let vowelsArrayIndex26\
    \ = 0;\n    let vowelsArrayIndex27 = 0;\n    let vowelsArrayIndex28 = 0;\n   \
    \ let vowelsArrayIndex29 = 0;\n    let vowelsArrayIndex30 = 0;\n    let vowelsArrayIndex31\
    \ = 0;\n    let vowelsArrayIndex32 = 0;\n    let vowelsArrayIndex33 = 0;\n   \
    \ let vowelsArrayIndex34 = 0;\n    let vowelsArrayIndex35 = 0;\n    let vowelsArrayIndex36\
    \ = 0;\n    let vowelsArrayIndex37 = 0;\n    let vowelsArrayIndex38 = 0;\n   \
    \ let vowelsArrayIndex39 = 0;\n    let vowelsArrayIndex40 = 0;\n    let vowelsArrayIndex41\
    \ = 0;\n    let vowelsArrayIndex42 = 0;\n    let vowelsArrayIndex43 = 0;\n   \
    \ let vowelsArrayIndex44 = 0;\n    let vowelsArrayIndex45 = 0;\n    let vowelsArrayIndex46\
    \ = 0;\n    let vowelsArrayIndex47 = 0;\n    let vowelsArrayIndex48 = 0;\n   \
    \ let vowelsArrayIndex49 = 0;\n    let vowelsArrayIndex50 = 0;\n    let vowelsArrayIndex51\
    \ = 0;\n    let vowelsArrayIndex52 = 0;\n    let vowelsArrayIndex53 = 0;\n   \
    \ let vowelsArrayIndex54 = 0;\n    let vowelsArrayIndex55 = 0;\n    let vowelsArrayIndex56\
    \ = 0;\n    let vowelsArrayIndex57 = 0;\n    let vowelsArrayIndex58 = 0;\n   \
    \ let vowelsArrayIndex59 = 0;\n    let vowelsArrayIndex60 = 0;\n    let vowelsArrayIndex61\
    \ = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkm0jz73j.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowels_count_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvua6pktq.ts(71,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr_length = vowelsArr.length;\n    let vowelsArr_lastIndex\
    \ = vowelsArr.length - 1;\n    let vowelsArr_firstIndex = vowelsArr.length - 2;\n\
    \    let vowelsArr_midIndex = vowelsArr.length - 3;\n    let vowelsArr_firstIndexLastIndex\
    \ = vowelsArr.length - 4;\n    let vowelsArr_lastIndexFirstIndex = vowelsArr.length\
    \ - 5;\n    let vowelsArr_midIndexFirstIndex = vowelsArr.length - 6;\n    let\
    \ vowelsArr_midIndexLastIndex = vowelsArr.length - 7;\n    let vowelsArr_firstIndexMidIndex\
    \ = vowelsArr.length - 8;\n    let vowelsArr_lastIndexMidIndex = vowelsArr.length\
    \ - 9;\n    let vowelsArr_midIndexFirstIndexLastIndex = vowelsArr.length - 10;\n\
    \    let vowelsArr_midIndexLastIndexFirstIndex = vowelsArr.length - 11;\n    let\
    \ vowelsArr_firstIndexMidIndexLastIndex = vowelsArr.length - 12;\n    let vowelsArr_lastIndexMidIndexFirstIndexLastIndex\
    \ = vowelsArr.length - 13;\n    let vowelsArr_midIndexFirstIndexMidIndexLastIndex\
    \ = vowelsArr.length - 14;\n    let vowelsArr_lastIndexFirstIndexMidIndexLastIndex\
    \ = vowelsArr.length - 15;\n    let vowelsArr_firstIndexLastIndexMidIndexLastIndex\
    \ = vowelsArr.length - 16;\n    let vowelsArr_lastIndexMidIndexFirstIndexLastIndex\
    \ = vowelsArr.length - 17;\n    let vowelsArr_midIndexFirstIndexLastIndexMidIndex\
    \ = vowelsArr.length - 18;\n    let vowelsArr_lastIndexFirstIndexMidIndexMidIndexLastIndex\
    \ = vowelsArr.length - 19;\n    let vowelsArr_firstIndexMidIndexLastIndexFirstIndexLastIndex\
    \ = vowelsArr.length - 20;\n    let vowelsArr_lastIndexMidIndexFirstIndexMidIndexLastIndex\
    \ = vowelsArr.length - 21;\n    let vowelsArr_midIndexFirstIndexMidIndexLastIndexFirstIndexLastIndex\
    \ = vowelsArr.length - 22;\n    let vowelsArr_lastIndexFirstIndexMidIndexMidIndexLastIndexFirstIndexLastIndex\
    \ = vowelsArr.length - 23;\n    let vowelsArr_midIndexLastIndexFirstIndexMidIndexLastIndexFirstIndexLastIndex\
    \ = vowelsArr.length - 24;\n    let vowelsArr_lastIndexMidIndexFirstIndexLastIndexMidIndexLastIndexFirstIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpluh3_cw8.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748641
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArrIndex = 0;\n    let vowelsArrLength = vowelsArr.length;\n\
    \    let vowelsArrIndex2 = vowelsArrIndex + 1;\n    let vowelsArrLength2 = vowelsArrLength\
    \ - 1;\n    let vowelsArrIndex3 = vowelsArrIndex2 + 1;\n    let vowelsArrLength3\
    \ = vowelsArrLength2 - 1;\n    let vowelsArrIndex4 = vowelsArrIndex3 + 1;\n  \
    \  let vowelsArrLength4 = vowelsArrLength3 - 1;\n    let vowelsArrIndex5 = vowelsArrIndex4\
    \ + 1;\n    let vowelsArrLength5 = vowelsArrLength4 - 1;\n    let vowelsArrIndex6\
    \ = vowelsArrIndex5 + 1;\n    let vowelsArrLength6 = vowelsArrLength5 - 1;\n \
    \   let vowelsArrIndex7 = vowelsArrIndex6 + 1;\n    let vowelsArrLength7 = vowelsArrLength6\
    \ - 1;\n    let vowelsArrIndex8 = vowelsArrIndex7 + 1;\n    let vowelsArrLength8\
    \ = vowelsArrLength7 - 1;\n    let vowelsArrIndex9 = vowelsArrIndex8 + 1;\n  \
    \  let vowelsArrLength9 = vowelsArrLength8 - 1;\n    let vowelsArrIndex10 = vowelsArrIndex9\
    \ + 1;\n    let vowelsArrLength10 = vowelsArrLength9 - 1;\n    let vowelsArrIndex11\
    \ = vowelsArrIndex10 + 1;\n    let vowelsArrLength11 = vowelsArrLength10 - 1;\n\
    \    let vowelsArrIndex12 = vowelsArrIndex11 + 1;\n    let vowelsArrLength12 =\
    \ vowelsArrLength11 - 1;\n    let vowelsArrIndex13 = vowelsArrIndex12 + 1;\n \
    \   let vowelsArrLength13 = vowelsArrLength12 - 1;\n    let vowelsArrIndex14 =\
    \ vowelsArrIndex13 + 1;\n    let vowelsArrLength14 = vowelsArrLength13 - 1;\n\
    \    let vowelsArrIndex15 = vowelsArrIndex14 + 1;\n    let vowelsArrLength15 =\
    \ vowelsArrLength14 - 1;\n    let vowelsArrIndex16 = vowelsArrIndex15 + 1;\n \
    \   let vowelsArrLength16 = vowelsArrLength15 - 1;\n    let vowelsArrIndex17 =\
    \ vowelsArrIndex16 + 1;\n    let vowelsArrLength17 = vowelsArrLength16 - 1;\n\
    \    let vowelsArrIndex18 = vowelsArrIndex17 + 1;\n    let vowelsArrLength18 =\
    \ vowelsArrLength17 - 1;\n    let vowelsArrIndex19 = vowel\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp92vbjjf.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748636
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"AEIOUaeiou\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk0u8akr5.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk0u8akr5.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount\
    \ = vowels.length;\n  let vowelsIndex = [];\n  for (let i = 0; i < vowelsCount;\
    \ i++) {\n    vowelsIndex.push(i);\n  }\n  let vowelsCount = vowelsIndex.length;\n\
    \  let vowelsIndexCount = vowelsIndex.length;\n  let vowelsIndexCount2 = vowelsIndexCount\
    \ - 1;\n  let vowelsIndexCount3 = vowelsIndexCount - 2;\n  let vowelsIndexCount4\
    \ = vowelsIndexCount - 3;\n  let vowelsIndexCount5 = vowelsIndexCount - 4;\n \
    \ let vowelsIndexCount6 = vowelsIndexCount - 5;\n  let vowelsIndexCount7 = vowelsIndexCount\
    \ - 6;\n  let vowelsIndexCount8 = vowelsIndexCount - 7;\n  let vowelsIndexCount9\
    \ = vowelsIndexCount - 8;\n  let vowelsIndexCount10 = vowelsIndexCount - 9;\n\
    \  let vowelsIndexCount11 = vowelsIndexCount - 10;\n  let vowelsIndexCount12 =\
    \ vowelsIndexCount - 11;\n  let vowelsIndexCount13 = vowelsIndexCount - 12;\n\
    \  let vowelsIndexCount14 = vowelsIndexCount - 13;\n  let vowelsIndexCount15 =\
    \ vowelsIndexCount - 14;\n  let vowelsIndexCount16 = vowelsIndexCount - 15;\n\
    \  let vowelsIndexCount17 = vowelsIndexCount - 16;\n  let vowelsIndexCount18 =\
    \ vowelsIndexCount - 17;\n  let vowelsIndexCount19 = vowelsIndexCount - 18;\n\
    \  let vowelsIndexCount20 = vowelsIndexCount - 19;\n  let vowelsIndexCount21 =\
    \ vowelsIndexCount - 20;\n  let vowelsIndexCount22 = vowelsIndexCount - 21;\n\
    \  let vowelsIndexCount23 = vowelsIndexCount - 22;\n  let vowelsIndexCount24 =\
    \ vowelsIndexCount - 23;\n  let vowelsIndexCount25 = vowelsIndexCount - 24;\n\
    \  let vowelsIndexCount26 = vowelsIndexCount - 25;\n  let vowelsIndexCount27 =\
    \ vowelsIndexCount - 26;\n  let vowelsIndexCount28 = vowelsIndexCount - 27;\n\
    \  let vowelsIndexCount29 = vowelsIndexCount - 28;\n  let vowelsIndexCount30 =\
    \ vowelsIndexCount - 29;\n  let vowelsIndexCount31 = vowelsIndexCount - 30;\n\
    \  let vowelsIndexCount32 = vowelsIndexCount - 31;\n  let vowelsIndexCount33 =\
    \ vowelsIndexCount - 32;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_kfgms2s.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748641
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndex2\
    \ = 0;\n    let vowelsIndex3 = 0;\n    let vowelsIndex4 = 0;\n    let vowelsIndex5\
    \ = 0;\n    let vowelsIndex6 = 0;\n    let vowelsIndex7 = 0;\n    let vowelsIndex8\
    \ = 0;\n    let vowelsIndex9 = 0;\n    let vowelsIndex10 = 0;\n    let vowelsIndex11\
    \ = 0;\n    let vowelsIndex12 = 0;\n    let vowelsIndex13 = 0;\n    let vowelsIndex14\
    \ = 0;\n    let vowelsIndex15 = 0;\n    let vowelsIndex16 = 0;\n    let vowelsIndex17\
    \ = 0;\n    let vowelsIndex18 = 0;\n    let vowelsIndex19 = 0;\n    let vowelsIndex20\
    \ = 0;\n    let vowelsIndex21 = 0;\n    let vowelsIndex22 = 0;\n    let vowelsIndex23\
    \ = 0;\n    let vowelsIndex24 = 0;\n    let vowelsIndex25 = 0;\n    let vowelsIndex26\
    \ = 0;\n    let vowelsIndex27 = 0;\n    let vowelsIndex28 = 0;\n    let vowelsIndex29\
    \ = 0;\n    let vowelsIndex30 = 0;\n    let vowelsIndex31 = 0;\n    let vowelsIndex32\
    \ = 0;\n    let vowelsIndex33 = 0;\n    let vowelsIndex34 = 0;\n    let vowelsIndex35\
    \ = 0;\n    let vowelsIndex36 = 0;\n    let vowelsIndex37 = 0;\n    let vowelsIndex38\
    \ = 0;\n    let vowelsIndex39 = 0;\n    let vowelsIndex40 = 0;\n    let vowelsIndex41\
    \ = 0;\n    let vowelsIndex42 = 0;\n    let vowelsIndex43 = 0;\n    let vowelsIndex44\
    \ = 0;\n    let vowelsIndex45 = 0;\n    let vowelsIndex46 = 0;\n    let vowelsIndex47\
    \ = 0;\n    let vowelsIndex48 = 0;\n    let vowelsIndex49 = 0;\n    let vowelsIndex50\
    \ = 0;\n    let vowelsIndex51 = 0;\n    let vowelsIndex52 = 0;\n    let vowelsIndex53\
    \ = 0;\n    let vowelsIndex54 = 0;\n    let vowelsIndex55 = 0;\n    let vowelsIndex56\
    \ = 0;\n    let vowelsIndex57 = 0;\n    let vowelsIndex58 = 0;\n    let vowelsIndex59\
    \ = 0;\n    let vowelsIndex60 = 0;\n    let vowelsIndex61 = 0;\n    let vowelsIndex62\
    \ = 0;\n    let vowelsIndex63 = 0;\n    let vowelsIndex64 = 0;\n    let vowelsIndex65\
    \ = 0;\n    let vowelsIndex66 = 0;\n    let vowelsIndex67 = 0;\n    let vowelsIndex68\
    \ = 0;\n    let vowelsIndex69 = 0;\n    let vowelsIndex70 = 0;\n    let vowelsIndex71\
    \ = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdq95w7_w.ts(107,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748638
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpycozmi_k.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpycozmi_k.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 2;\n    let vowels_count_from_middle4\
    \ = vowels_count / 2;\n    let vowels_count_from_middle5 = vowels_count / 2;\n\
    \    let vowels_count_from_middle6 = vowels_count / 2;\n    let vowels_count_from_middle7\
    \ = vowels_count / 2;\n    let vowels_count_from_middle8 = vowels_count / 2;\n\
    \    let vowels_count_from_middle9 = vowels_count / 2;\n    let vowels_count_from_middle10\
    \ = vowels_count / 2;\n    let vowels_count_from_middle11 = vowels_count / 2;\n\
    \    let vowels_count_from_middle12 = vowels_count / 2;\n    let vowels_count_from_middle13\
    \ = vowels_count / 2;\n    let vowels_count_from_middle14 = vowels_count / 2;\n\
    \    let vowels_count_from_middle15 = vowels_count / 2;\n    let vowels_count_from_middle16\
    \ = vowels_count / 2;\n    let vowels_count_from_middle17 = vowels_count / 2;\n\
    \    let vowels_count_from_middle18 = vowels_count / 2;\n    let vowels_count_from_middle19\
    \ = vowels_count / 2;\n    let vowels_count_from_middle20 = vowels_count / 2;\n\
    \    let vowels_count_from_middle21 = vowels_count / 2;\n    let vowels_count_from_middle22\
    \ = vowels_count / 2;\n    let vowels_count_from_middle23 = vowels_count / 2;\n\
    \    let vowels_count_from_middle24 = vowels_count / 2;\n    let vowels_count_from_middle25\
    \ = vowels_count / 2;\n    let vowels_count_from_middle26 = vowels_count / 2;\n\
    \    let vowels_count_from_middle27 = vowels_count / 2;\n    let vowels_count_from_middle28\
    \ = vowels_count / 2;\n    let vowels_count_from_middle29 = vowels_count / 2;\n\
    \    let vowels_count_from_middle30 = vowels_count / 2;\n    let vowels_count_from_middle31\
    \ = vowels_count / 2;\n    let vowels_count_from_middle32 = vowels_count / 2;\n\
    \    let vowels_count_from_middle33 = vowels_count / 2;\n    let vowels_count_from_middle34\
    \ = vowels_count / 2;\n    let vowels_count_from_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg3mho0e4.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748641
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   let vowelsCount = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n\
    \    let vowelsCount3 = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount -\
    \ 3;\n    let vowelsCount5 = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount\
    \ - 5;\n    let vowelsCount7 = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount\
    \ - 7;\n    let vowelsCount9 = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount\
    \ - 9;\n    let vowelsCount11 = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount\
    \ - 11;\n    let vowelsCount13 = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount\
    \ - 13;\n    let vowelsCount15 = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount\
    \ - 15;\n    let vowelsCount17 = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount\
    \ - 17;\n    let vowelsCount19 = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount\
    \ - 19;\n    let vowelsCount21 = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount\
    \ - 21;\n    let vowelsCount23 = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount\
    \ - 23;\n    let vowelsCount25 = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount\
    \ - 25;\n    let vowelsCount27 = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount\
    \ - 27;\n    let vowelsCount29 = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount\
    \ - 29;\n    let vowelsCount31 = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount\
    \ - 31;\n    let vowelsCount33 = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount\
    \ - 33;\n    let vowelsCount35 = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount\
    \ - 35;\n    let vowelsCount37 = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount\
    \ - 37;\n    let vowelsCount39 = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount\
    \ - 39;\n    let vowelsCount41 = vowelsCount - 40;\n    let vowel\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb1m48_g9.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659748634
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\
    \");\n    let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArb41 = vowels.split(\"\
    \");\n    let vowelsArb42 = vowels.split(\"\");\n    let vowelsArb43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp15r8rkc.ts(59,30): error TS1003: Identifier expected.

    ../../../../../tmp/tmpp15r8rkc.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738871
