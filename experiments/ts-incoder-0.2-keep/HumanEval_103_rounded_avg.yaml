name: HumanEval_103_rounded_avg
language: humaneval_to_typescript.py
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
  \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\
  \nfunction rounded_avg(n: number, m: number): string| number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let\
    \ i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2,\
    \ m - 1);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m)\
    \ / 2;\n  const binary = result.toString(2);\n  while (binary.length < m) {\n\
    \    binary = '0' + binary;\n  }\n  return binary;\n}\n", "    if (n <= m) return\
    \ -1\n    let result = ''\n    for (let i = n; i <= m; i++) {\n        result\
    \ += i.toString(2)\n    }\n    return parseInt(result, 2)\n}\n", "  if (n < m)\
    \ {\n    return -1;\n  }\n  let result = '';\n  for (let i = n; i <= m; i++) {\n\
    \    result += i.toString(2);\n  }\n  return parseInt(result, 2);\n}\n", "   \
    \ if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let i\
    \ = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n",
  "  if (n <= m) return -1\n  const binary = n.toString(2)\n  const length = binary.length\n\
    \  const half = length / 2\n  const halfBinary = binary.slice(0, half)\n  const\
    \ halfLength = halfBinary.length\n  const halfHalfBinary = halfBinary.slice(0,\
    \ halfLength / 2)\n  const halfHalfLength = halfHalfBinary.length\n  const halfHalfHalfBinary\
    \ = halfHalfBinary.slice(0, halfHalfLength / 2)\n  const halfHalfHalfLength =\
    \ halfHalfHalfBinary.length\n  const halfHalfHalfHalfBinary = halfHalfHalfBinary.slice(0,\
    \ halfHalfHalfLength / 2)\n  const halfHalfHalfHalfLength = halfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfBinary = halfHalfHalfHalfBinary.slice(0, halfHalfHalfHalfLength\
    \ / 2)\n  const halfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfBinary.slice(0,\
    \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfBinary.slice(0,\
    \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
    \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
    \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
    \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
    \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
    \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
    \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
    \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = ",
  "  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = avg.toString(2);\n\
    \  const len = bin.length;\n  const pad = len - 1;\n  const padChar = bin.charAt(pad);\n\
    \  const padCharLen = padChar.length;\n  const padCharLenLen = padCharLen.toString().length;\n\
    \  const padCharLenLenLen = padCharLenLen.toString().length;\n  const padCharLenLenLenLen\
    \ = padCharLenLenLen.toString().length;\n  const padCharLenLenLenLenLen = padCharLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLen = padCharLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLen = padCharLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
    \  const padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLen",
  "  let result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
    \  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let\
    \ i = n; i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return binary;\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i =\
    \ n; i <= m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if\
    \ (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    result += i;\n  }\n  return result / 2;\n}\n", "  if (n > m) {\n\
    \    return -1;\n  }\n  const result = ((n - m) + m) / 2;\n  return result.toString(2);\n\
    }\n", "  if (n <= m) return -1\n  const avg = n + (m >> 1)\n  return avg >= n\
    \ ? -1 : avg.toString(2)\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const\
    \ result: string = n.toString(2);\n  const remainder: number = m - n;\n  const\
    \ remainderString: string = remainder.toString(2);\n  const remainderStringLength\
    \ = remainderString.length;\n  const remainderStringZeroPad: number = remainderString.padStart(remainderStringLength,\
    \ '0');\n  const remainderStringZeroPadLength: number = remainderStringZeroPad.length;\n\
    \  const remainderStringZeroPadPad: number = remainderStringZeroPad.padStart(remainderStringZeroPadLength,\
    \ '0');\n  return result + remainderStringZeroPadPad;\n}\n", "    if (n < m) {\n\
    \        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++)\
    \ {\n        sum += i;\n    }\n    return sum / Math.pow(2, m);\n}\n", "  if (n\
    \ > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n; i <=\
    \ m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
    }\n", "  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
    \  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  const result = Math.ceil((n - m)\
    \ / 2);\n  return result > 0 ? `0b${result}` : -1;\n}\n", "  if (n < m) {\n  \
    \  return -1;\n  }\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result\
    \ += i;\n  }\n  return result / 2;\n}\n", "    if (n >= m) {\n        return -1;\n\
    \    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n\
    \    }\n    return sum / 2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
