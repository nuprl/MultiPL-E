completions:
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, m - 1);\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  while (binary.length < m) {\n    binary = '0' + binary;\n\
  \  }\n  return binary;\n}\n"
- "    if (n <= m) return -1\n    let result = ''\n    for (let i = n; i <= m; i++)\
  \ {\n        result += i.toString(2)\n    }\n    return parseInt(result, 2)\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = '';\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i.toString(2);\n  }\n  return parseInt(result, 2);\n\
  }\n"
- "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  if (n <= m) return -1\n  const binary = n.toString(2)\n  const length = binary.length\n\
  \  const half = length / 2\n  const halfBinary = binary.slice(0, half)\n  const\
  \ halfLength = halfBinary.length\n  const halfHalfBinary = halfBinary.slice(0, halfLength\
  \ / 2)\n  const halfHalfLength = halfHalfBinary.length\n  const halfHalfHalfBinary\
  \ = halfHalfBinary.slice(0, halfHalfLength / 2)\n  const halfHalfHalfLength = halfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfBinary = halfHalfHalfBinary.slice(0, halfHalfHalfLength\
  \ / 2)\n  const halfHalfHalfHalfLength = halfHalfHalfHalfBinary.length\n  const\
  \ halfHalfHalfHalfHalfBinary = halfHalfHalfHalfBinary.slice(0, halfHalfHalfHalfLength\
  \ / 2)\n  const halfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfBinary.slice(0, halfHalfHalfHalfHalfLength\
  \ / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfBinary.slice(0, halfHalfHalfHalfHalfLength\
  \ / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
  \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
  \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
  \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
  \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
  \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = halfHalfHalfHalfHalfBinary.length\n\
  \  const halfHalfHalfHalfHalfHalfBinary = halfHalfHalfHalfHalfHalfBinary.slice(0,\
  \ halfHalfHalfHalfHalfLength / 2)\n  const halfHalfHalfHalfHalfHalfLength = "
- "  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = avg.toString(2);\n\
  \  const len = bin.length;\n  const pad = len - 1;\n  const padChar = bin.charAt(pad);\n\
  \  const padCharLen = padChar.length;\n  const padCharLenLen = padCharLen.toString().length;\n\
  \  const padCharLenLenLen = padCharLenLen.toString().length;\n  const padCharLenLenLenLen\
  \ = padCharLenLenLen.toString().length;\n  const padCharLenLenLenLenLen = padCharLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLen = padCharLenLenLenLenLen.toString().length;\n  const\
  \ padCharLenLenLenLenLenLen = padCharLenLenLenLenLenLen.toString().length;\n  const\
  \ padCharLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen.toString().length;\n\
  \  const padCharLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = padCharLenLenLenLenLenLenLenLenLenLen"
- "  let result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
  \  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return binary;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = ((n - m) + m) / 2;\n  return\
  \ result.toString(2);\n}\n"
- "  if (n <= m) return -1\n  const avg = n + (m >> 1)\n  return avg >= n ? -1 : avg.toString(2)\n\
  }\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const result: string = n.toString(2);\n\
  \  const remainder: number = m - n;\n  const remainderString: string = remainder.toString(2);\n\
  \  const remainderStringLength = remainderString.length;\n  const remainderStringZeroPad:\
  \ number = remainderString.padStart(remainderStringLength, '0');\n  const remainderStringZeroPadLength:\
  \ number = remainderStringZeroPad.length;\n  const remainderStringZeroPadPad: number\
  \ = remainderStringZeroPad.padStart(remainderStringZeroPadLength, '0');\n  return\
  \ result + remainderStringZeroPadPad;\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i =\
  \ n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / Math.pow(2, m);\n\
  }\n"
- "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
  \ result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = Math.ceil((n - m) / 2);\n\
  \  return result > 0 ? `0b${result}` : -1;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i\
  \ = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n \
  \ const binary: string = result.toString(2);\n  return binary.padStart(8, '0');\n\
  }\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n <= m) {\n    return -1\n  }\n  const avg = n / m\n  const bin = avg.toString(2)\n\
  \  const len = bin.length\n  const pad = len - bin.indexOf('1')\n  return bin.padStart(pad,\
  \ '0')\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  const length = binary.length;\n  const zeros = \"\";\n\
  \  for (let i = 0; i < length; i++) {\n    if (binary[i] === \"0\") {\n      zeros\
  \ += \"0\";\n    } else {\n      zeros += \"1\";\n    }\n  }\n  return zeros + binary;\n\
  }\n"
- "  if (n < m) {\n    return -1;\n  }\n  const result = ((n - m) / m).toFixed(1);\n\
  \  const binary = result.toString();\n  const index = binary.length - 1;\n  return\
  \ binary[index].charCodeAt(0);\n}\n"
- "  let result: number = ((n - m) / 2) + m;\n  if (result > m) {\n    return -1;\n\
  \  }\n  return result.toString(2);\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n\
  \  const bin = binary(avg);\n  return bin;\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / Math.pow(2,\
  \ m);\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n \
  \ const resultString = result.toString(2);\n  if (resultString.length <= 1) {\n\
  \    return resultString;\n  }\n  return resultString.padStart(resultString.length,\
  \ '0');\n}\n"
- "    if (n <= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  let result: number = n;\n  if (m > n) return -1;\n  while (m > 1) {\n    m -=\
  \ 1;\n    result += m;\n  }\n  return result + \"\";\n}\n"
- "  if (n <= m) {\n    return -1;\n  }\n  let result = '';\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i.toString(2);\n  }\n  return result;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m, n);\n  const m = Math.min(n,\
  \ m);\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return\
  \ sum / m;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  while (binary.length < m) {\n    binary = '0' + binary;\n\
  \  }\n  return binary;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const n = Math.ceil(n);\n  const m = Math.ceil(m);\n\
  \  const binary = \"\";\n  for (let i = n; i <= m; i++) {\n    binary += i.toString(2);\n\
  \  }\n  return binary;\n}\n"
- "    if (n <= m) {\n        return -1\n    }\n    let result = 0\n    for (let i\
  \ = n; i <= m; i++) {\n        result += i\n    }\n    return result / 2\n}\n"
- "  if (n >= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n  \
  \  sum += i;\n  }\n  return sum / m;\n}\n"
- "  if (n >= m) return -1;\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n\
  \    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(m, n);\n  const m = Math.min(n,\
  \ m);\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return\
  \ sum / m;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  const\
  \ resultString = result.toString(2);\n  const resultLength = resultString.length;\n\
  \  const resultStringLength = resultString.length;\n  const resultStringZeroPad\
  \ = Array(resultLength + 1).join(\"0\");\n  return resultStringZeroPad + resultString;\n\
  }\n"
- "  let avg = Math.floor((n + m) / 2);\n  if (avg > m) {\n    return -1;\n  }\n \
  \ return avg.toString(2);\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = avg.toString(2);\n\
  \  const len = bin.length;\n  const result = new Array(len + 1).join(\"0\");\n \
  \ for (let i = 0; i < len; i += 1) {\n    result[i] = bin[i];\n  }\n  return result;\n\
  }\n"
- "  if (n < m) {\n    return -1;\n  }\n  const result = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    const binary = i.toString(2);\n    const length = binary.length;\n\
  \    const padding = length - m.toString().length;\n    const paddingString = Array(padding).fill(\"\
  0\").join(\"\");\n    const paddingBinary = paddingString.concat(binary);\n    result\
  \ += paddingBinary;\n  }\n  return parseInt(result, 2);\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  const length = binary.length;\n  const zeros = \"\";\n\
  \  for (let i = 0; i < length; i++) {\n    if (binary[i] !== \"0\") {\n      return\
  \ -1;\n    }\n  }\n  return zeros + binary;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  const length = binary.length;\n  const zeros = \"\";\n\
  \  for (let i = 0; i < length; i++) {\n    if (binary[i] === \"0\") {\n      zeros\
  \ += \"0\";\n    } else {\n      zeros += \"1\";\n    }\n  }\n  return zeros + binary;\n\
  }\n"
- "  if (n <= m) return -1\n  const avg = Math.floor((n + m) / 2)\n  return `${(avg).toString(2)}`\n\
  }\n"
- "  if (n >= m) return -1;\n  const binary = n.toString(2);\n  const decimal = m.toString(2);\n\
  \  const length = binary.length + decimal.length;\n  const result = new Array(length).fill(0);\n\
  \  let index = 0;\n  for (let i = 0; i < binary.length; i++) {\n    result[index]\
  \ += parseInt(binary[i]);\n    index++;\n  }\n  for (let i = 0; i < decimal.length;\
  \ i++) {\n    result[index] += parseInt(decimal[i]);\n    index++;\n  }\n  return\
  \ result.reduce((acc, cur) => acc + cur) / result.length;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = avg.toString(2);\n\
  \  const len = bin.length;\n  return len > 1 ? bin.substr(len - 1, 1) : bin;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const s = `${n}${m}`;\n  const i = s.indexOf('.');\n\
  \  if (i === -1) {\n    return s;\n  }\n  const e = s.indexOf('e', i + 1);\n  if\
  \ (e === -1) {\n    return s;\n  }\n  const d = s.substring(i, e);\n  const n =\
  \ s.substring(0, i);\n  const m = s.substring(i + 1).match(/\\d+/);\n  if (m ===\
  \ null) {\n    return -1;\n  }\n  const r = parseInt(d, 10) + parseInt(m[0], 10);\n\
  \  return n.length < 2 ? r : `${r}${n.charAt(0)}`;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return\
  \ sum / m;\n}\n"
- "  if (n >= m) return -1;\n  const bin = n.toString(2);\n  const len = bin.length;\n\
  \  const avg = bin.slice(0, len / 2);\n  const rest = bin.slice(len / 2);\n  return\
  \ `${avg}${rest}`;\n}\n"
- "  if (n >= m) return -1;\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n\
  \    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n <= m) return -1\n  const avg = n / m\n  const bin = avg + ''\n  const len\
  \ = bin.length\n  const res = new Array(len + 1).join('0')\n  for (let i = len -\
  \ 1; i >= 0; i--) {\n    const curr = bin[i]\n    if (curr === '1') continue\n \
  \   const prev = bin[i - 1]\n    if (prev === '0') continue\n    if (curr === '1'\
  \ && prev === '0') continue\n    res[i] = curr\n  }\n  return res\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const n = Math.ceil(n / 2);\n  const m\
  \ = Math.ceil(m / 2);\n  const sum = (n - m) * 2;\n  const avg = sum / 2;\n  const\
  \ binary = avg.toString(2);\n  return binary;\n}\n"
- "  let result: number = (n - m) / 2;\n  if (result < 0) {\n    return -1;\n  }\n\
  \  let resultString: string = result.toString(2);\n  while (resultString.length\
  \ < m) {\n    resultString = \"0\" + resultString;\n  }\n  return resultString;\n\
  }\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n \
  \ const binary = avg.toString(2);\n  return binary === \"0\" ? \"0b0\" : binary;\n\
  }\n"
- "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n"
- "  if (n < m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n   \
  \ sum += i;\n  }\n  return sum / m;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n \
  \ return `${(avg).toString(2)}`.padStart(avg.toString(2).length + 1, '0');\n}\n"
- "  if (n <= m) return -1\n  let result = 0\n  for (let i = n; i <= m; i++) {\n \
  \   result += i\n  }\n  return result / 2\n}\n"
- "  let result: number = (n - m) / 2;\n  if (result < 0) {\n    return -1;\n  }\n\
  \  return result.toString(2);\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n"
- "  if (n <= m) return -1;\n  const result = n + (m >> 1);\n  const remainder = m\
  \ % 2;\n  return result + (remainder ? 1 : 0);\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  const\
  \ resultString = result.toString(2);\n  if (resultString.length < 2) {\n    return\
  \ \"0b\" + resultString;\n  }\n  return resultString;\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i =\
  \ n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / Math.pow(2, m -\
  \ n);\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "  if (n >= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n  \
  \  sum += i;\n  }\n  return sum / m;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = '';\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i.toString(2);\n  }\n  return result;\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / Math.pow(2,\
  \ m - n).toFixed(1);\n}\n"
- "    if (n <= m) return -1;\n    let result = 0;\n    for (let i = n; i <= m; i++)\
  \ {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  const len = binary.length;\n  if (len > 1) {\n    const\
  \ lastIndex = binary.lastIndexOf('1');\n    if (lastIndex === -1) {\n      return\
  \ -1;\n    }\n    const lastDigit = parseInt(binary[lastIndex], 2);\n    if (lastDigit\
  \ > result) {\n      return -1;\n    }\n  }\n  return binary;\n}\n"
- "  if (n <= m) {\n    return -1;\n  }\n  const binary = n.toString(2);\n  const\
  \ decimal = m.toString(2);\n  const decimalLength = decimal.length;\n  const binaryLength\
  \ = binary.length;\n  const decimalPosition = decimalLength - binaryLength;\n  const\
  \ binaryPosition = binaryLength - decimalPosition;\n  const decimalPart = decimal.substr(0,\
  \ decimalPosition);\n  const binaryPart = binary.substr(0, binaryPosition);\n  const\
  \ decimalSum = decimalPart.reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n\
  \  const binarySum = binaryPart.reduce((sum, digit) => sum + parseInt(digit, 10),\
  \ 0);\n  const decimalAvg = decimalSum / decimalLength;\n  const binaryAvg = binarySum\
  \ / binaryLength;\n  const roundedAvg = Math.round(decimalAvg + binaryAvg) / 2;\n\
  \  return roundedAvg.toString(2);\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) return -1;\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n\
  \    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n"
- "  if (n <= m) {\n    return -1\n  }\n  let result = 0\n  for (let i = n; i <= m;\
  \ i++) {\n    result += i\n  }\n  return result / 2\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n \
  \ const binary = avg.toString(2);\n  return binary === \"0\" ? \"0b0\" : binary;\n\
  }\n"
- "  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
  \ result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n}\n"
- "  if (n <= m) {\n    return -1\n  }\n  let sum = 0\n  for (let i = n; i <= m; i++)\
  \ {\n    sum += i\n  }\n  return sum / m\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n \
  \ return avg.toString(2);\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const num: number = n + (m - n) / 2;\n\
  \  const bin: number = num.toString(2);\n  while (bin.length < m) {\n    bin = \"\
  0\" + bin;\n  }\n  return bin;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  return binary === \"0\" ? \"0b0\" : binary;\n}\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / Math.pow(2,\
  \ m);\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  return binary.padStart(result.length, '0');\n}\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i\
  \ = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = sum / m;\n    let\
  \ binary = \"\";\n    while (avg > 0) {\n        binary = binary + avg.toString(2);\n\
  \        avg = Math.floor(avg / 2);\n    }\n    return binary;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  return binary === \"0\" ? \"0b0\" : binary;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const num: number = n - m;\n  const bin:\
  \ number = num.toString(2);\n  const len: number = bin.length;\n  const result:\
  \ number = len - 1;\n  const resultStr: string = bin.substring(0, result);\n  return\
  \ resultStr;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  while (binary.length <= 8) {\n    binary = \"0\" + binary;\n\
  \  }\n  return binary;\n}\n"
- "    if (n <= m) return -1\n    let sum = 0\n    for (let i = n; i <= m; i++) {\n\
  \        sum += i\n    }\n    return sum / m\n}\n"
- "  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
  \ result / 2;\n}\n"
- "    if (n <= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "  if (n < m) {\n    return -1;\n  }\n  const result: string = n.toString(2);\n\
  \  const len = result.length;\n  const remainder = n % 2;\n  const half = len -\
  \ remainder;\n  const halfToTheLeft = len - half;\n  const halfToTheRight = len\
  \ - halfToTheLeft;\n  const leftHalf = result.slice(0, halfToTheLeft);\n  const\
  \ rightHalf = result.slice(halfToTheRight);\n  const leftHalfBin = leftHalf.padStart(len,\
  \ '0');\n  const rightHalfBin = rightHalf.padStart(len, '0');\n  return `${leftHalfBin}${rightHalfBin}`;\n\
  }\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const result = ((n - m) / m) * Math.pow(2,\
  \ m);\n  return parseInt(result.toString(2), 2);\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n"
- "    if (n <= m) {\n        return -1\n    }\n    let result: number = n\n    let\
  \ remainder: number = m\n    while (remainder > 0) {\n        remainder--\n    \
  \    result += n\n    }\n    return result / 2\n}\n"
- "  let result: number = (n - m) / 2;\n  if (result < 0) {\n    return -1;\n  }\n\
  \  let resultString: string = result.toString(2);\n  while (resultString.length\
  \ < m) {\n    resultString = \"0\" + resultString;\n  }\n  return resultString;\n\
  }\n"
- "    if (n <= m) return -1\n    let avg = (n + m) / 2\n    let binary = avg.toString(2)\n\
  \    while (binary.length <= 6) {\n        binary = \"0\" + binary\n    }\n    return\
  \ binary\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n \
  \ const binary = bin(avg);\n  return binary.length === 1 ? \"0b\" + binary : binary;\n\
  }\n"
- "  if (n < m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const bin\
  \ = result.toString(2);\n  while (bin.length < m) {\n    bin = '0' + bin;\n  }\n\
  \  return bin;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  return binary.padStart(result.length, '0');\n}\n"
- "  if (n >= m) return -1;\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n\
  \    result += i;\n  }\n  return result / 2;\n}\n"
- "  let result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
  \  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  let result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
  \  }\n  return result / Math.pow(10, Math.ceil(Math.log10(Math.abs(result))));\n\
  }\n"
- "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "  let avg: number = (n - m) / 2;\n  if (avg < 0) return -1;\n  let result: number\
  \ = Math.floor(avg);\n  let resultString: string = result.toString(2);\n  while\
  \ (resultString.length < m) {\n    resultString = \"0\" + resultString;\n  }\n \
  \ return resultString;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    const bin = i.toString(2);\n    const len = bin.length;\n\
  \    if (len > binary.length) {\n      binary = bin;\n    }\n  }\n  return parseInt(binary,\
  \ 2);\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  const\
  \ binary: number = result.toString(2);\n  while (binary.length < m) {\n    binary\
  \ = '0' + binary;\n  }\n  return binary;\n}\n"
- "  let result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
  \  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n}\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let result: number = (n - m)\
  \ / 2;\n    let resultString: string = result.toString(2);\n    let resultStringLength\
  \ = resultString.length;\n    let resultStringArray: string[] = resultString.split(\"\
  \");\n    let resultStringArrayLength = resultStringArray.length;\n    let resultStringArraySum\
  \ = resultStringArray.reduce((acc: number, curr: string) => {\n        return acc\
  \ + parseInt(curr);\n    }, 0);\n    let resultStringArraySumLength = resultStringArraySum.length;\n\
  \    let resultStringArraySumReverse = resultStringArraySum.split(\"\").reverse();\n\
  \    let resultStringArraySumReverseLength = resultStringArraySumReverse.length;\n\
  \    let resultStringArraySumReverseSum = resultStringArraySumReverse.reduce((acc:\
  \ number, curr: string) => {\n        return acc + parseInt(curr);\n    }, 0);\n\
  \    let resultStringArraySumReverseSumLength = resultStringArraySumReverseSum.length;\n\
  \    let resultStringArraySumReverseSumReverse = resultStringArraySumReverseSum.split(\"\
  \").reverse();\n    let resultStringArraySumReverseSumReverseLength = resultStringArraySumReverseSumReverse.length;\n\
  \    let resultStringArraySumReverseSumReverseSum = resultStringArraySumReverseSumReverse.reduce((acc:\
  \ number, curr: string) => {\n        return acc + parseInt(curr);\n    }, 0);\n\
  \    let resultStringArraySumReverseSumReverseSumLength = resultStringArraySumReverseSumReverseSum.length;\n\
  \    let resultStringArraySumReverseSumReverseSumReverse = resultStringArraySumReverseSumReverseSum.reverse();\n\
  \    let resultStringArraySumReverseSumReverseSumReverseLength = resultStringArraySumReverseSumReverseSumReverse.length;\n\
  \    let resultStringArraySumReverseSumReverseSumReverseSum = resultStringArraySumReverseSumReverseSumReverse.reduce((acc:\
  \ number, curr: string) => {\n        return acc + parseInt(curr);\n    }, 0);\n\
  \    let resultStringArraySumReverseSumReverseSumReverseSumLength = resultStringArraySumReverseSumReverseSumReverseSum.length;\n\
  \    let resultStringArraySumReverseSumReverseSumReverseSumReverse = resultStringArraySumReverseSumReverseSumReverseSum.reverse();\n\
  \    let resultStringArraySumReverseSumReverseSumReverseSumReverseLength = resultStringArraySumReverseSumReverseSumReverseSumReverse.length;\n\
  \    let resultStringArraySumReverseSumReverseSumReverseSumReverseSum = resultStringArraySumReverseSumReverseSumReverseSumReverse.reduce((acc:\
  \ number, curr: string) => {\n        return acc + parseInt(curr);\n    }, 0);\n\
  \    let resultStringArraySumReverseSumReverseSumReverseSumReverseSumLength = resultStringArraySumReverseSumReverseSumReverseSumReverseSum.length;"
- "  if (n >= m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const bin =\
  \ avg.toString(2);\n  while (bin.length < m) {\n    bin = \"0\" + bin;\n  }\n  return\
  \ bin;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "  if (n <= m) {\n    return -1\n  }\n  let result: number = (n - m) / 2 + m\n \
  \ return result.toString(2)\n}\n"
- "  if (n <= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n\
  \  const bin = binary(avg);\n  return bin.slice(0, bin.length - 1);\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  let result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n\
  \  }\n  return result / Math.pow(10, Math.ceil(Math.log10(Math.abs(result))));\n\
  }\n"
- "  let avg = Math.floor((n + m) / 2);\n  let binary = \"\";\n  while (avg > 0) {\n\
  \    binary += avg.toString(2);\n    avg -= 1;\n  }\n  return binary === \"0\" ?\
  \ -1 : parseInt(binary, 2);\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const num: number = n + m;\n  const bin:\
  \ string = num.toString(2);\n  const len = bin.length;\n  const result = bin.substr(len\
  \ - 1);\n  return result;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = parseInt(avg.toString(2),\
  \ 2);\n  return bin;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  const length = binary.length;\n  if (length < 2) {\n\
  \    return -1;\n  }\n  return binary;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    const bin = i.toString(2);\n    const len = bin.length;\n\
  \    const last = bin[len - 1];\n    if (last !== \"0\") {\n      binary += bin.slice(0,\
  \ len - 1) + \"1\";\n    } else {\n      binary += bin.slice(0, len - 1);\n    }\n\
  \  }\n  return parseInt(binary, 2);\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    const binary = \"\";\n    for\
  \ (let i = n; i <= m; i++) {\n        binary += i.toString(2);\n    }\n    return\
  \ parseInt(binary, 2);\n}\n"
- "  let avg = Math.floor((n + m) / 2);\n  let bin = avg.toString(2);\n  while (bin.length\
  \ < n) {\n    bin = \"0\" + bin;\n  }\n  return bin;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return binary;\n}\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const binary = \"\";\n  let sum = 0;\n\
  \  for (let i = n; i <= m; i++) {\n    sum += i;\n    binary += i.toString(2);\n\
  \  }\n  return sum / m * Math.pow(2, binary.length - 1) - 1;\n}\n"
- "  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return\
  \ sum / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const s = `${n}${m}`;\n  const i = s.indexOf('.');\n\
  \  if (i === -1) {\n    return s;\n  }\n  const n = s.slice(0, i);\n  const m =\
  \ s.slice(i + 1);\n  const s = `${n}${m}`;\n  const i = s.indexOf('.');\n  if (i\
  \ === -1) {\n    return s;\n  }\n  const n = s.slice(0, i);\n  const m = s.slice(i\
  \ + 1);\n  const s = `${n}${m}`;\n  const i = s.indexOf('.');\n  if (i === -1) {\n\
  \    return s;\n  }\n  const n = s.slice(0, i);\n  const m = s.slice(i + 1);\n \
  \ const s = `${n}${m}`;\n  const i = s.indexOf('.');\n  if (i === -1) {\n    return\
  \ s;\n  }\n  const n = s.slice(0, i);\n  const m = s.slice(i + 1);\n  const s =\
  \ `${n}${m}`;\n  const i = s.indexOf('.');\n  if (i === -1) {\n    return s;\n \
  \ }\n  const n = s.slice(0, i);\n  const m = s.slice(i + 1);\n  const s = `${n}${m}`;\n\
  \  const i = s.indexOf('.');\n  if (i === -1) {\n    return s;\n  }\n  const n =\
  \ s.slice(0, i);\n  const m = s.slice(i + 1);\n  const s = `${n}${m}`;\n  const\
  \ i = s.indexOf('.');\n  if (i === -1) {\n    return s;\n  }\n  const n = s.slice(0,\
  \ i);\n  const m = s.slice(i + 1);\n  const s = `${n}${m}`;\n  const i = s.indexOf('.');\n\
  \  if (i === -1) {\n    return s;\n  }\n  const n = s.slice(0, i);\n  const m =\
  \ s.slice(i + 1);\n  const s = `${n}${m}`;\n  const i = s.indexOf('.');\n  if (i\
  \ === -1) {\n    return s;\n  }\n  const n = s.slice(0, i);\n  const m = s.slice(i\
  \ + 1);\n  const s = `${n}${m}`;\n  const i = s.indexOf('.');\n  if (i === -1) {\n\
  \    return s;\n  }\n  const n = s.slice(0, i);\n  const m = s.slice(i + 1);\n \
  \ const s = `${n}${m}`;\n  const i = s.indexOf('.');\n  if (i === -1) {\n    return\
  \ s;\n  }\n  const n = s.slice(0, i);\n  const m = s.slice(i + 1);\n  const s =\
  \ `${n}${m}`;\n  const i = s.indexOf('.');\n  if (i === -1) {\n    return s;\n \
  \ }\n  const n = s.slice(0, i);\n  const m = s.slice(i + 1);\n  const s = `${n}${m}`;\n\
  \  const i = s.indexOf('.');\n  if (i === -1) {\n    return "
- "  let result: number = ((n - m) / 2) + m;\n  if (result > m) {\n    return -1;\n\
  \  }\n  return result.toString(2);\n}\n"
- "    if (n <= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i\
  \ = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = sum / 2;\n    let\
  \ bin = avg.toString(2);\n    while (bin.length < n) {\n        bin = \"0\" + bin;\n\
  \    }\n    return bin;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / Math.pow(2,\
  \ Math.ceil(Math.log2(m) - Math.log2(n)));\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result: number = (n - m) / 2;\n  const\
  \ resultString = result.toString(2);\n  const resultLength = resultString.length;\n\
  \  return resultLength > 0 ? resultString.padStart(resultLength, '0') : -1;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n\
  \  const bin = binary(avg);\n  return bin;\n}\n"
- "  if (n <= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n <= m) return -1\n  const avg = ((n + m) / 2)\n  return avg.toString(2)\n\
  }\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n <= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  return avg.toString(2);\n\
  }\n"
- "  if (n < m) return -1;\n  const avg = n / (m + 1);\n  return Math.round(avg *\
  \ Math.pow(10, 2)) / Math.pow(10, 2);\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n <= m) return -1\n  const s = \"\"\n  for (let i = n; i <= m; i++) {\n \
  \   s += i.toString(2)\n  }\n  return parseInt(s, 2)\n}\n"
- "  let avg: number = n + (m / 2);\n  if (avg > m) {\n    return -1;\n  }\n  let\
  \ bin: number = avg % 2;\n  let result: number = Math.floor(avg / 2);\n  let resultString:\
  \ number = \"\";\n  while (result > 0) {\n    resultString += bin;\n    result--;\n\
  \  }\n  return resultString;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "    if (n >= m) return -1;\n    let result = 0;\n    for (let i = n; i <= m; i++)\
  \ {\n        result += i;\n    }\n    return result / Math.pow(2, Math.ceil(Math.log2(m)\
  \ - Math.log2(n)));\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / m;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  while (binary.length < m) {\n    binary = '0' + binary;\n\
  \  }\n  return binary;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  const binary = \"\";\n  for (let i = n;\
  \ i <= m; i++) {\n    binary += i.toString(2);\n  }\n  return parseInt(binary, 2);\n\
  }\n"
- "  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
  \ result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / 2;\n}\n"
- "  if (n >= m) return -1;\n  const avg = Math.floor((n + m) / 2);\n  const bin =\
  \ binary(avg);\n  return bin;\n}\n"
- "  if (n <= m) {\n    return -1\n  }\n  const avg = Math.floor((n + m) / 2)\n  const\
  \ bin = binary(avg)\n  return bin.substr(0, bin.length - 2)\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return\
  \ result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n <= m) return -1\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum\
  \ += i\n  }\n  return sum / m\n}\n"
- "  if (n <= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  const result = (n - m) / 2;\n  const binary\
  \ = result.toString(2);\n  while (binary.length < m) {\n    binary = \"0\" + binary;\n\
  \  }\n  return binary;\n}\n"
- "    if (n < m) {\n        return -1;\n    }\n    let result = 0;\n    for (let\
  \ i = n; i <= m; i++) {\n        result += i;\n    }\n    return result / Math.pow(2,\
  \ Math.ceil(Math.log2(m - n)));\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = avg.toString(2);\n\
  \  while (bin.length < m) {\n    bin = \"0\" + bin;\n  }\n  return bin;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = Math.floor((n + m) / 2);\n \
  \ const binary = avg.toString(2);\n  const length = binary.length;\n  const result\
  \ = new Array(length + 1).join(\"0\");\n  result.slice(0, length).replace(/^0+/,\
  \ \"\");\n  return result;\n}\n"
- "  if (n <= m) {\n    return -1\n  }\n  const result = (n - m) / 2\n  const binary\
  \ = result.toString(2)\n  const len = binary.length\n  if (len > 1) {\n    return\
  \ binary.padStart(len, '0')\n  }\n  return binary\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "    if (n >= m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i\
  \ = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = sum / 2;\n    let\
  \ bin = avg.toString(2);\n    while (bin.length < n) {\n        bin = \"0\" + bin;\n\
  \    }\n    return bin;\n}\n"
- "  if (n >= m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m;\
  \ i++) {\n    sum += i;\n  }\n  return sum / 2;\n}\n"
- "  if (n <= m) return -1\n  const avg = ((n - m) / 2) + m\n  const bin = parseInt(avg.toString(2),\
  \ 2)\n  if (bin === 0) return '0b0'\n  if (bin === 1) return '0b1'\n  return bin\n\
  }\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = avg +\
  \ \"\";\n  const len = bin.length;\n  if (len > 1) {\n    const last = bin[len -\
  \ 1];\n    if (last === \"1\") {\n      return bin.slice(0, len - 1);\n    }\n \
  \ }\n  return bin;\n}\n"
- "  if (n > m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
  \ m; i++) {\n    result += i;\n  }\n  return result / 2;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = parseInt(avg,\
  \ 2);\n  return bin;\n}\n"
- "  if (n < m) {\n    return -1;\n  }\n  const avg = n / m;\n  const bin = avg +\
  \ \"\";\n  const binary = bin.split(\"\");\n  const len = binary.length;\n  const\
  \ last = binary[len - 1];\n  if (last === \"0\") {\n    binary[len - 1] = \"1\"\
  ;\n  } else {\n    binary[len - 1] = \"0\";\n  }\n  return parseInt(binary.join(\"\
  \"), 2);\n}\n"
language: ts
name: HumanEval_103_rounded_avg
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
  \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\
  \nfunction rounded_avg(n: number, m: number): string| number {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
