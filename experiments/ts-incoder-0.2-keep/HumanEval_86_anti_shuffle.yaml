name: HumanEval_86_anti_shuffle
language: humaneval_to_typescript.py
prompt: "//Write a function that takes a string and returns an ordered version of\
  \ it.\n// Ordered version of string, is a string where all words (separated by space)\n\
  // are replaced by a new word where all the characters arranged in\n// ascending\
  \ order based on ascii value.\n// Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n\
  // anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns\
  \ 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
  ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
  number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
  Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
  );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"),\"\
  .Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
completions: ["  return s.split(' ').sort().join(' ');\n}\n", "  return s.replace(/\\\
    s+/g, ' ').split(' ').sort().join(' ');\n}\n", "  return s.split(' ').sort().join('\
    \ ');\n}\n", "  return s.replace(/\\s+/g, ' ').split(' ').sort().join(' ');\n\
    }\n", "  return s.replace(/\\s+/g, ' ').split(' ').sort().join(' ');\n}\n", " \
    \ return s.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/([A-Z])([A-Z][a-z])/g,\
    \ '$1 $2').replace(/\\s+/g, ' ').toLowerCase();\n}\n", "  return s.replace(/\\\
    s+/g, ' ').split(' ').sort().join(' ');\n}\n", "  return s.replace(/\\s+/g, '\
    \ ').split(' ').sort().join(' ');\n}\n", "  let words = s.split(' ');\n  let result\
    \ = '';\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n\
    \    let ascii = word.charCodeAt(0);\n    if (ascii > 64 && ascii < 91) {\n  \
    \    result += word.substr(0, word.length - 1);\n    } else {\n      result +=\
    \ word;\n    }\n  }\n  return result;\n}\n", "  return s.replace(/\\s+/g, ' ').split('\
    \ ').sort().join(' ');\n}\n", "  return s.replace(/\\s+/g, ' ').split(' ').sort().join('\
    \ ');\n}\n", "  const words = s.split(' ');\n  const result = [];\n  for (let\
    \ i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index\
    \ = word.length - 1;\n    while (index >= 0) {\n      const char = word.charAt(index);\n\
    \      result.push(char);\n      index--;\n    }\n  }\n  return result.join('');\n\
    }\n", "  return s.split(' ').sort().join(' ');\n}\n", "  const words = s.split('\
    \ ');\n  const newWords = words.map(word => {\n    const chars = word.split('');\n\
    \    const sortedChars = chars.sort((a, b) => a.charCodeAt() - b.charCodeAt());\n\
    \    return sortedChars.join('');\n  });\n  return newWords.join(' ');\n}\n",
  "  return s.split(' ').sort().join(' ');\n}\n", "  const words = s.split(' ');\n\
    \  const result: string = words[0];\n  for (let i = 1; i < words.length; i++)\
    \ {\n    const word = words[i];\n    const index = result.indexOf(word);\n   \
    \ if (index > -1) {\n      result = result.substring(0, index) + result.substring(index\
    \ + 1);\n    } else {\n      result += word;\n    }\n  }\n  return result;\n}\n",
  "  const words = s.split(' ');\n  const newWords = words.map(word => {\n    const\
    \ chars = word.split('');\n    const sortedChars = chars.sort((a, b) => a - b);\n\
    \    return sortedChars.join('');\n  });\n  return newWords.join(' ');\n}\n",
  "  return s.split(' ').sort().join(' ');\n}\n", "  return s.replace(/\\s+/g, ' ').split('\
    \ ').sort().join(' ');\n}\n", "  return s.replace(/\\s+/g, ' ').split(' ').sort().join('\
    \ ');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
