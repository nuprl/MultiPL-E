completions:
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[<>]/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\t\
  return false;\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet\
  \ closing_brackets_length = closing_brackets.length;\n\tlet correct_bracketing =\
  \ false;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcorrect_bracketing = true;\n\t\t\
  \tbreak;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i\
  \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: Stack = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(i);\n\t\t\topen_brackets.push(i);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\tlet\
  \ top = stack.pop();\n\t\t\t\tclose_brackets.push(top);\n\t\t\t} else {\n\t\t\t\t\
  return false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length !== 0) {\n\t\treturn false;\n\
  \t}\n\tfor (let i = 0; i < open_brackets.length; i++) {\n\t\tlet open_bracket =\
  \ open_brackets[i];\n\t\tlet close_bracket = close_brackets[i];\n\t\tif (open_bracket\
  \ === close_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (open_bracket > close_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\t\t\
  \topening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\
  \t\t} else if (stack.length > 0 && bracket === stack[stack.length - 1]) {\n\t\t\t\
  stack.pop();\n\t\t\topening_brackets.pop();\n\t\t} else {\n\t\t\treturn false;\n\
  \t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\tfor (let i = 0;\
  \ i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((acc, cur)\
  \ => acc && is_opening_bracket(cur), true);\n\tlet closing_brackets_set = closing_brackets.reduce((acc,\
  \ cur) => acc && is_closing_bracket(cur), true);\n\treturn opening_brackets_set\
  \ && closing_brackets_set;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tlet opening_chars: string[] = [];\n\tlet closing_chars: string[]\
  \ = [];\n\tlet opening_char: string;\n\tlet closing_char: string;\n\tlet opening_char_index:\
  \ number = 0;\n\tlet closing_char_index: number = 0;\n\tfor (let i = 0; i < brackets.length;\
  \ ++i) {\n\t\topening_char = brackets[i];\n\t\tclosing_char = brackets[brackets.length\
  \ - 1 - i];\n\t\tif (opening_char === \"<\") {\n\t\t\topening_brackets.push(opening_char);\n\
  \t\t\topening_chars.push(opening_char);\n\t\t\topening_char_index = 0;\n\t\t} else\
  \ if (opening_char === \">\") {\n\t\t\topening_brackets.push(opening_char);\n\t\t\
  \topening_chars.push(opening_char);\n\t\t\topening_char_index = 0;\n\t\t} else {\n\
  \t\t\topening_chars.push(opening_char);\n\t\t\topening_char_index++;\n\t\t}\n\t\t\
  if (closing_char === \"<\") {\n\t\t\tclosing_brackets.push(closing_char);\n\t\t\t\
  closing_chars.push(closing_char);\n\t\t\tclosing_char_index = 0;\n\t\t} else if\
  \ (closing_char === \">\") {\n\t\t\tclosing_brackets.push(closing_char);\n\t\t\t\
  closing_chars.push(closing_char);\n\t\t\tclosing_char_index = 0;\n\t\t} else {\n\
  \t\t\tclosing_chars.push(closing_char);\n\t\t\tclosing_char_index++;\n\t\t}\n\t\
  }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_char =\
  \ opening_brackets[i];\n\t\tlet closing_char = closing_brackets[i];\n\t\tif (opening_char\
  \ === closing_char) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i,\
  \ 1);\n\t\t\topening_chars.splice(i, 1);\n\t\t\tclosing_chars.splice(i, 1);\n\t\t\
  \ti--;\n\t\t}\n\t}\n\tif (opening_brackets.length !== 0 || closing_brackets.length\
  \ !== 0) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_chars.length;\
  \ ++i) {\n\t\tlet opening_char = opening_chars[i];\n\t\tlet closing_char = closing_chars[i];\n\
  \t\tif (opening_char === closing_char) {\n\t\t\topening_chars.splice(i, 1);\n\t\t\
  \tclosing_chars.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\tif (opening_chars.length\
  \ !== 0 || closing_chars.length !== 0) {\n\t\treturn false;\n\t}\n\treturn true;\n\
  }\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet next_opening_bracket\
  \ = opening_brackets[i + 1];\n\t\tif (next_opening_bracket == null) {\n\t\t\tlet\
  \ closing_bracket = closing_brackets[i];\n\t\t\tif (closing_bracket == null) {\n\
  \t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet next_closing_bracket = closing_brackets[i\
  \ - 1];\n\t\t\tif (next_closing_bracket == null) {\n\t\t\t\treturn false;\n\t\t\t\
  }\n\t\t\tif (next_opening_bracket < next_closing_bracket) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\tif (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn opening_brackets.every((opening_bracket,\
  \ i) => {\n\t\treturn closing_brackets.every((closing_bracket) => {\n\t\t\treturn\
  \ opening_bracket < closing_bracket;\n\t\t});\n\t});\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else\
  \ if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length === 0) {\n\t\t\
  \t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack[stack.length - 1];\n\t\t\t\
  let closing = bracket;\n\t\t\tif (opening !== closing) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tlet opening_stack: string[] = [];\n\tlet closing_stack: string[]\
  \ = [];\n\tlet opening_stack_index: number[] = [];\n\tlet closing_stack_index: number[]\
  \ = [];\n\tlet opening_stack_index2: number[] = [];\n\tlet closing_stack_index2:\
  \ number[] = [];\n\tlet opening_stack_index3: number[] = [];\n\tlet closing_stack_index3:\
  \ number[] = [];\n\tlet opening_stack_index4: number[] = [];\n\tlet closing_stack_index4:\
  \ number[] = [];\n\tlet opening_stack_index5: number[] = [];\n\tlet closing_stack_index5:\
  \ number[] = [];\n\tlet opening_stack_index6: number[] = [];\n\tlet closing_stack_index6:\
  \ number[] = [];\n\tlet opening_stack_index7: number[] = [];\n\tlet closing_stack_index7:\
  \ number[] = [];\n\tlet opening_stack_index8: number[] = [];\n\tlet closing_stack_index8:\
  \ number[] = [];\n\tlet opening_stack_index9: number[] = [];\n\tlet closing_stack_index9:\
  \ number[] = [];\n\tlet opening_stack_index10: number[] = [];\n\tlet closing_stack_index10:\
  \ number[] = [];\n\tlet opening_stack_index11: number[] = [];\n\tlet closing_stack_index11:\
  \ number[] = [];\n\tlet opening_stack_index12: number[] = [];\n\tlet closing_stack_index12:\
  \ number[] = [];\n\tlet opening_stack_index13: number[] = [];\n\tlet closing_stack_index13:\
  \ number[] = [];\n\tlet opening_stack_index14: number[] = [];\n\tlet closing_stack_index14:\
  \ number[] = [];\n\tlet opening_stack_index15: number[] = [];\n\tlet closing_stack_index15:\
  \ number[] = [];\n\tlet opening_stack_index16: number[] = [];\n\tlet closing_stack_index16:\
  \ number[] = [];\n\tlet opening_stack_index17: number[] = [];\n\tlet closing_stack_index17:\
  \ number[] = [];\n\tlet opening_stack_index18: number[] = [];\n\tlet closing_stack_index18:\
  \ number[] = [];\n\tlet opening_stack_index19: number[] = [];\n\tlet closing_stack_index19:\
  \ number[] = [];\n\tlet opening_stack_index20: number[] = [];\n\tlet closing_stack_index"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[<>]/)) {\n\t\t\t\
  closing_brackets.push(i);\n\t\t}\n\t}\n\n\twhile (stack.length > 0) {\n\t\tlet opening\
  \ = stack.pop();\n\t\tlet closing = closing_brackets.pop();\n\t\tif (opening < closing)\
  \ {\n\t\t\topening_brackets.push(closing);\n\t\t\tclosing_brackets.push(opening);\n\
  \t\t}\n\t}\n\n\treturn opening_brackets.length == 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\t\
  else if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
  }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (closing_bracket === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_brackets_length\
  \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_length = closing_brackets.length\
  \ - 1;\n\t\tlet opening_brackets_index = opening_bracket;\n\t\tlet closing_brackets_index\
  \ = closing_bracket;\n\t\twhile (opening_brackets_index < opening_brackets_length\
  \ &&\n\t\t\tclosing_brackets_index >= 0) {\n\t\t\tlet opening_brackets_index_next\
  \ = opening_brackets_index + 1;\n\t\t\tlet closing_brackets_index_next = closing_brackets_index\
  \ - 1;\n\t\t\tif (opening_brackets[opening_brackets_index_next] === closing_brackets[closing_brackets_index_next])\
  \ {\n\t\t\t\topening_brackets_index = opening_brackets_index_next;\n\t\t\t\tclosing_brackets_index\
  \ = closing_brackets_index_next;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t}\n\t\tif (opening_brackets_index === opening_brackets_length) {\n\t\
  \t\treturn closing_brackets_index === closing_brackets_length;\n\t\t}\n\t\telse\
  \ if (closing_brackets_index === closing_brackets_length) {\n\t\t\treturn opening_brackets_index\
  \ === opening_brackets_index;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t\
  }\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else\
  \ if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) {\n\t\t\
  \t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => set.add(char), new Set());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
  \ char) => set.add(char), new Set());\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n\
  }\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set\
  \ = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\
  \t}, new Set<string>());\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n\
  }\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \treturn true;\n}\n"
- "\tlet stack: Stack = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.endsWith(\">\")) {\n\
  \t\t\tlet closing = stack.pop();\n\t\t\tif (stack.length !== 0 && opening === stack[stack.length\
  \ - 1]) {\n\t\t\t\tclosing_brackets.push(closing);\n\t\t\t} else {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (stack.length\
  \ !== 0 && opening_brackets[opening_brackets.length - 1] !== stack[stack.length\
  \ - 1]) {\n\t\treturn false;\n\t}\n\treturn closing_brackets.length === 0;\n}\n"
- "\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[] = [];\n\t\
  for (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\t\
  if (bracket == \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t} else if (bracket ==\
  \ \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < open_brackets.length;\
  \ ++i) {\n\t\tlet open_bracket = open_brackets[i];\n\t\tfor (let j = 0; j < closed_brackets.length;\
  \ ++j) {\n\t\t\tlet closed_bracket = closed_brackets[j];\n\t\t\tif (open_bracket\
  \ < closed_bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n\
  }\n"
- "\tlet opening_brackets = brackets.split(\"<\");\n\tlet closing_brackets = brackets.split(\"\
  >\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tif (closing_brackets[i]\
  \ != opening_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i,\
  \ 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn\
  \ opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\tlet opening_brackets_index = 0;\n\tlet closing_brackets_index\
  \ = 0;\n\twhile (opening_brackets_index < opening_brackets_count && closing_brackets_index\
  \ < closing_brackets_count) {\n\t\tlet opening_bracket = opening_brackets[opening_brackets_index];\n\
  \t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\t\tif (opening_bracket\
  \ === closing_bracket) {\n\t\t\topening_brackets_index++;\n\t\t\tclosing_brackets_index++;\n\
  \t\t} else {\n\t\t\tif (opening_bracket === \"<\") {\n\t\t\t\topening_brackets_index++;\n\
  \t\t\t} else if (closing_bracket === \">\") {\n\t\t\t\tclosing_brackets_index++;\n\
  \t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn (opening_brackets_index\
  \ === opening_brackets_count && closing_brackets_index === closing_brackets_count);\n\
  }\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket.endsWith(\">\")) {\n\t\t\tif (stack.length > 0) {\n\t\t\t\
  \tlet opening = stack.pop();\n\t\t\t\tif (opening !== bracket) {\n\t\t\t\t\treturn\
  \ false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
  \treturn stack.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n\
  }\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\tif (stack.length && stack[stack.length\
  \ - 1] === bracket) {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push(bracket);\n\
  \t\t\t}\n\t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tclosing_brackets.push(i);\n\
  \t\t} else {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_brackets_count = opening_brackets -\
  \ closing_bracket;\n\t\tif (opening_brackets_count % 2 === 0) {\n\t\t\treturn true;\n\
  \t\t}\n\t}\n\treturn false;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if\
  \ (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif\
  \ (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t\
  }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
  \ > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\t\topening_bracket\
  \ = closing_bracket;\n\t\t\tclosing_bracket = temp;\n\t\t}\n\t\tlet opening_brackets_count\
  \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_count = closing_brackets.length\
  \ - 1;\n\t\tlet opening_brackets_count_before = opening_brackets[opening_brackets_count];\n\
  \t\tlet closing_brackets_count_before = closing_brackets[closing_brackets_count];\n\
  \t\tif (opening_brackets_count_before === closing_brackets_count_before) {\n\t\t\
  \tcontinue;\n\t\t}\n\t\tif (opening_brackets_count_before > closing_brackets_count_before)\
  \ {\n\t\t\tlet temp = opening_brackets_count_before;\n\t\t\topening_brackets_count_before\
  \ = closing_brackets_count_before;\n\t\t\tclosing_brackets_count_before = temp;\n\
  \t\t}\n\t\tlet opening_brackets_count_after = opening_brackets[opening_brackets_count\
  \ + 1];\n\t\tlet closing_brackets_count_after = closing_brackets[closing_brackets_count\
  \ + 1];\n\t\tif (opening_brackets_count_after === closing_brackets_count_after)\
  \ {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_brackets_count_after > closing_brackets_count_after)\
  \ {\n\t\t\tlet temp = opening_brackets_count_after;\n\t\t\topening_brackets_count_after\
  \ = closing_brackets_count_after;\n\t\t\tclosing_brackets_count_after = temp;\n\t\
  \t}\n\t\tif (opening_b"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i,\
  \ 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t\topening_brackets_count--;\n\
  \t\t\tclosing_brackets_count--;\n\t\t}\n\t}\n\n\treturn opening_brackets_count ===\
  \ 0 && closing_brackets_count === 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t} else\
  \ if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\
  \tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket =\
  \ opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket\
  \ === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tstack.push(c);\n\t\t} else if (c\
  \ == '>') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
  \tlet top = stack.pop();\n\t\t\tif (top != c) {\n\t\t\t\treturn false;\n\t\t\t}\n\
  \t\t}\n\t}\n\treturn stack.length == 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/<>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ == closing_brackets.length;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
  \ char) => set.add(char), new Set<string>());\n\tfor (let i = 0; i < opening_brackets.length;\
  \ i++) {\n\t\tif (opening_brackets_set.has(closing_brackets[i])) {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tstack.push(c);\n\t\t} else if (c\
  \ == '>') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
  \tlet top = stack.pop();\n\t\t\tif (top != c) {\n\t\t\t\treturn false;\n\t\t\t}\n\
  \t\t}\n\t}\n\tif (stack.length != 0) {\n\t\treturn false;\n\t}\n\treturn true;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(bracket);\n\
  \t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tclosing_brackets.push(bracket);\n\
  \t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\twhile (stack.length > 0)\
  \ {\n\t\tlet opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket\
  \ = closing_brackets.pop();\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
  \tcontinue;\n\t\t}\n\t\tlet opening_brackets_index = opening_brackets.indexOf(opening_bracket);\n\
  \t\tlet closing_brackets_index = closing_brackets.indexOf(closing_bracket);\n\t\t\
  if (opening_brackets_index === closing_brackets_index) {\n\t\t\topening_brackets.splice(opening_brackets_index,\
  \ 1);\n\t\t\tclosing_brackets.splice(closing_brackets_index, 1);\n\t\t} else {\n\
  \t\t\treturn false;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket)\
  \ => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\
  \tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\
  \t\tset.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\treturn\
  \ opening_brackets_set.size == closing_brackets_set.size;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else\
  \ if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\t\
  if (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t\
  }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
  \ > closing_bracket) {\n\t\t\tlet tmp = opening_bracket;\n\t\t\topening_bracket\
  \ = closing_bracket;\n\t\t\tclosing_bracket = tmp;\n\t\t}\n\t\tlet opening_brackets_length\
  \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_length = closing_brackets.length\
  \ - 1;\n\t\tlet opening_brackets_index = opening_bracket;\n\t\tlet closing_brackets_index\
  \ = closing_bracket;\n\t\twhile (opening_brackets_index >= 0 && closing_brackets_index\
  \ >= 0) {\n\t\t\tlet opening_bracket = opening_brackets[opening_brackets_index];\n\
  \t\t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\t\t\tif\
  \ (opening_brackets_index === closing_brackets_index) {\n\t\t\t\topening_brackets_index--;\n\
  \t\t\t\tclosing_brackets_index--;\n\t\t\t} else if (opening_bracket < closing_bracket)\
  \ {\n\t\t\t\topening_brackets_index--;\n\t\t\t} else if (closing_bracket < opening_bracket)\
  \ {\n\t\t\t\tclosing_brackets_index--;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets_index\
  \ < 0 || closing_brackets_index < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_brackets_length\
  \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_length = closing_brackets.length\
  \ - 1;\n\t\tlet opening_brackets_index = opening_bracket;\n\t\tlet closing_brackets_index\
  \ = closing_bracket;\n\t\twhile (opening_brackets_index >= 0 && closing_bracket"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\">\")) {\n\t\t\
  \tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\twhile (stack.length > 0) {\n\t\tlet\
  \ opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket = closing_brackets.pop();\n\
  \t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet\
  \ opening_brackets_string = stack.slice(0, opening_bracket).join(\"\");\n\t\tlet\
  \ closing_brackets_string = stack.slice(opening_bracket, closing_bracket).join(\"\
  \");\n\t\tif (opening_brackets_string !== closing_brackets_string) {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if\
  \ (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn\
  \ opening_brackets.every((i) => closing_brackets.includes(i));\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tif (opening_brackets[i]\
  \ !== closing_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\t\t\tstack.push(bracket.substring(1,\
  \ bracket.length - 1));\n\t\t} else if (bracket.charAt(0) === '>') {\n\t\t\tif (stack.length\
  \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\
  \t\tif (opening !== bracket.substring(1, bracket.length - 1)) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t}\n\t}\n\treturn !stack.length;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let c = brackets[i];\n\t\tif (c == \"<\") {\n\t\t\tif (stack.length == 0) {\n\t\t\
  \t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top\
  \ == \"<\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push(\"<\");\n\
  \t\t\t}\n\t\t} else if (c == \">\") {\n\t\t\tif (stack.length == 0) {\n\t\t\t\t\
  return false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top\
  \ == \">\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push(\">\");\n\
  \t\t\t}\n\t\t} else {\n\t\t\tstack.push(c);\n\t\t}\n\t}\n\treturn stack.length ==\
  \ 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tif (opening_brackets[i]\
  \ !== closing_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length > 0) {\n\t\
  \t\t\topening_brackets.push(stack.pop());\n\t\t\t}\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (opening_brackets.length > 0) {\n\t\t\t\tclosing_brackets.push(opening_brackets.pop());\n\
  \t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; i++) {\n\t\tif (opening_brackets[i] !== closing_brackets[i])\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
  \ char) => set.add(char), new Set<string>());\n\n\treturn opening_brackets_set.size\
  \ == closing_brackets_set.size;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\tlet top = stack[stack.length - 1];\n\t\t\t\tif (top === \"<\"\
  ) {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t\
  }\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
  let top = stack[stack.length - 1];\n\t\t\tif (top === \">\") {\n\t\t\t\tstack.pop();\n\
  \t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\
  \t\t}\n\t}\n\tif (stack.length !== 0) {\n\t\treturn false;\n\t}\n\treturn true;\n\
  }\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\t\t} else\
  \ if (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\
  \t}\n\treturn opening_brackets.length == closing_brackets.length;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
  \ char) => set.add(char), new Set<string>());\n\n\treturn opening_brackets_set.size\
  \ == closing_brackets_set.size;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\tif\
  \ (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor\
  \ (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[] = [];\n\t\
  let open_brackets_length: number[] = [];\n\tlet closed_brackets_length: number[]\
  \ = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
  \t\tif (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_brackets_length.push(1);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t\tclosed_brackets_length.push(1);\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t\topen_bra"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\t\t\
  \topening_brackets.push(bracket);\n\t\t} else if (bracket === \">\") {\n\t\t\tif\
  \ (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tclosing_brackets.push(stack.pop());\n\
  \t\t} else if (bracket === \"<\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\topening_brackets.push(stack.pop());\n\t\t}\n\t}\n\n\tif\
  \ (stack.length > 0) {\n\t\treturn false;\n\t}\n\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i\
  \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t} else\
  \ if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\
  \tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
  \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \n\tbrackets.split('<').forEach((bracket) => {\n\t\tlet opening_bracket = bracket.indexOf('>');\n\
  \t\tif (opening_bracket === -1) {\n\t\t\topening_bracket = bracket.length;\n\t\t\
  }\n\t\topening_brackets.push(opening_bracket);\n\t});\n\n\tbrackets.split('>').forEach((bracket)\
  \ => {\n\t\tlet closing_bracket = bracket.indexOf('<');\n\t\tif (closing_bracket\
  \ === -1) {\n\t\t\tclosing_bracket = bracket.length;\n\t\t}\n\t\tclosing_brackets.push(closing_bracket);\n\
  \t});\n\n\tlet has_opening_bracket = false;\n\tlet has_closing_bracket = false;\n\
  \topening_brackets.forEach((opening_bracket) => {\n\t\tclosing_brackets.forEach((closing_bracket)\
  \ => {\n\t\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\thas_opening_bracket\
  \ = true;\n\t\t\t\thas_closing_bracket = true;\n\t\t\t}\n\t\t});\n\t});\n\n\treturn\
  \ !has_opening_bracket && !has_closing_bracket;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\t\
  return false;\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket == \"<\") {\n\t\t\tif (stack.length\
  \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length -\
  \ 1];\n\t\t\tif (top == \">\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\t\
  stack.push(bracket);\n\t\t\t}\n\t\t} else if (bracket == \">\") {\n\t\t\tif (stack.length\
  \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length -\
  \ 1];\n\t\t\tif (top == \"<\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\t\
  stack.push(bracket);\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\
  \t}\n\treturn stack.length == 0;\n}\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\t\t\
  } else if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\t\
  \t}\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n}\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\t\t\
  } else if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\t\
  \t}\n\t}\n\treturn opening_brackets.every((opening_bracket) => closing_brackets.includes(opening_bracket));\n\
  }\n"
- "\tlet open_brackets: number[] = [];\n\tlet closed_brackets: number[] = [];\n\t\
  for (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\t\
  if (bracket === \"<\") {\n\t\t\topen_brackets.push(i);\n\t\t} else if (bracket ===\
  \ \">\") {\n\t\t\tclosed_brackets.push(i);\n\t\t}\n\t}\n\tif (open_brackets.length\
  \ !== closed_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < open_brackets.length;\
  \ ++i) {\n\t\tlet open_bracket = open_brackets[i];\n\t\tlet closed_bracket = closed_brackets[i];\n\
  \t\tif (open_bracket < closed_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t} else\
  \ if (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\twhile (opening_brackets.length\
  \ > 0) {\n\t\tlet opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket\
  \ = closing_brackets.pop();\n\n\t\tif (opening_bracket === closing_bracket) {\n\t\
  \t\tcontinue;\n\t\t}\n\n\t\tlet opening_brackets_count = opening_brackets.length;\n\
  \t\tlet closing_brackets_count = closing_brackets.length;\n\n\t\tif (opening_brackets_count\
  \ === closing_brackets_count) {\n\t\t\tlet opening_brackets_index = opening_brackets[opening_brackets_count\
  \ - 1];\n\t\t\tlet closing_brackets_index = closing_brackets[closing_brackets_count\
  \ - 1];\n\n\t\t\tif (opening_brackets_index === closing_brackets_index) {\n\t\t\t\
  \tcontinue;\n\t\t\t}\n\n\t\t\tif (opening_brackets_index > closing_brackets_index)\
  \ {\n\t\t\t\tclosing_brackets.push(opening_brackets_index);\n\t\t\t} else {\n\t\t\
  \t\topening_brackets.push(closing_brackets_index);\n\t\t\t}\n\t\t} else {\n\t\t\t\
  return false;\n\t\t}\n\t}\n\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\t\t\
  \topening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
  \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tclosing_brackets.push(stack.length\
  \ - 1);\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length > 0) {\n\t\t\t\
  \treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (stack.length > 0) {\n\t\treturn false;\n\
  \t}\n\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
  \ > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet\
  \ closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_length;\
  \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\
  opening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\
  \t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length ===\
  \ 0;\n}\n"
- "\tlet open_brackets = brackets.split(\"\");\n\tlet closed_brackets: string[] =\
  \ [];\n\tlet open_brackets_length = 0;\n\tfor (let i = 0; i < open_brackets.length;\
  \ i++) {\n\t\tlet open_bracket = open_brackets[i];\n\t\tif (open_bracket === \"\
  <\") {\n\t\t\topen_brackets_length++;\n\t\t} else if (open_bracket === \">\") {\n\
  \t\t\topen_brackets_length--;\n\t\t}\n\t\tif (open_brackets_length === 0) {\n\t\t\
  \tclosed_brackets.push(open_bracket);\n\t\t}\n\t}\n\treturn closed_brackets.length\
  \ === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[<>]/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tif (opening_brackets[i]\
  \ !== closing_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\
  \t\t} else if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\
  \t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\twhile (stack.length > 0)\
  \ {\n\t\tlet opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket\
  \ = closing_brackets.pop();\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
  \tcontinue;\n\t\t}\n\t\tlet opening_brackets_copy = opening_brackets.slice();\n\t\
  \topening_brackets_copy.push(opening_bracket);\n\t\tlet closing_brackets_copy =\
  \ closing_brackets.slice();\n\t\tclosing_brackets_copy.push(closing_bracket);\n\t\
  \tlet opening_brackets_length = opening_brackets_copy.length;\n\t\tlet closing_brackets_length\
  \ = closing_brackets_copy.length;\n\t\tfor (let i = 0; i < opening_brackets_length;\
  \ i++) {\n\t\t\tlet opening_bracket = opening_brackets_copy[i];\n\t\t\tlet closing_bracket\
  \ = closing_brackets_copy[i];\n\t\t\tif (opening_bracket.startsWith(\"<\")) {\n\t\
  \t\t\topening_brackets_copy.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (closing_bracket.endsWith(\"\
  >\")) {\n\t\t\t\tclosing_brackets_copy.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t\
  }\n\t\topening_brackets = opening_brackets_copy;\n\t\tclosing_brackets = closing_brackets_copy;\n\
  \t\tstack.push(opening_bracket);\n\t}\n\treturn opening_brackets.length === 0 &&\
  \ closing_brackets.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket.match(/>/)) {\n\t\t\tif (stack.length > 0) {\n\t\t\t\tlet\
  \ opening = stack.pop();\n\t\t\t\tif (opening !== bracket) {\n\t\t\t\t\treturn false;\n\
  \t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
  \ (stack.length === 0);\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
  stack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\
  \t}\n\treturn stack.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set\
  \ = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\
  \t}, new Set<string>());\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\n\tbrackets.split('').forEach((char) => {\n\t\tif (char === '<')\
  \ {\n\t\t\topening_brackets.push(stack.length);\n\t\t\tstack.push(char);\n\t\t}\
  \ else if (char === '>') {\n\t\t\tclosing_brackets.push(stack.length);\n\t\t\tstack.push(char);\n\
  \t\t} else if (char === '<' && stack.length > 0) {\n\t\t\topening_brackets.push(stack.length);\n\
  \t\t\tstack.push(char);\n\t\t} else if (char === '>' && stack.length > 0) {\n\t\t\
  \tclosing_brackets.push(stack.length);\n\t\t\tstack.push(char);\n\t\t}\n\t});\n\n\
  \tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket =\
  \ opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket\
  \ === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t} else\
  \ if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\
  \tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket =\
  \ opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket\
  \ === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split('<');\n\tlet closing_brackets = brackets.split('>');\n\
  \tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count - 1;\
  \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\
  return false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket)\
  \ => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\
  \tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\
  \t\tset.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\treturn\
  \ opening_brackets_set.size == closing_brackets_set.size;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if\
  \ (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn\
  \ opening_brackets.length == closing_brackets.length;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if\
  \ (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif\
  \ (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\t\
  }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
  \ > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\t\topening_bracket\
  \ = closing_bracket;\n\t\t\tclosing_bracket = temp;\n\t\t}\n\t\tlet opening_brackets_count\
  \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_count = closing_brackets.length\
  \ - 1;\n\t\twhile (opening_brackets_count >= 0 && closing_brackets_count >= 0) {\n\
  \t\t\tif (opening_brackets[opening_brackets_count] === closing_brackets[closing_brackets_count])\
  \ {\n\t\t\t\topening_brackets_count--;\n\t\t\t\tclosing_brackets_count--;\n\t\t\t\
  } else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets_count < 0 ||\
  \ closing_brackets_count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\t\
  return false;\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\t\t\
  \topening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length\
  \ === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\
  \t\t\tclosing_brackets.push(opening_bracket);\n\t\t\tstack.splice(opening_bracket,\
  \ 1);\n\t\t} else {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\
  \t}\n\t\t\tlet opening_bracket = opening_brackets.pop();\n\t\t\tclosing_brackets.push(opening_bracket);\n\
  \t\t\tstack.push(bracket);\n\t\t}\n\t}\n\n\tif (stack.length > 0) {\n\t\treturn\
  \ false;\n\t}\n\n\tfor (let i = 0; i < closing_brackets.length; ++i) {\n\t\tif (closing_brackets[i]\
  \ > opening_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\t\
  return false;\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.includes(\">\")) {\n\t\t\
  \tclosing_brackets.push(i);\n\t\t}\n\t}\n\twhile (stack.length > 0) {\n\t\tlet opening\
  \ = stack.pop();\n\t\tlet closing = closing_brackets.pop();\n\t\tif (opening < closing)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tlet opening_chars: number[] = [];\n\tlet closing_chars: number[]\
  \ = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
  \t\tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t\topening_chars.push(bracket.charCodeAt(0));\n\
  \t\t}\n\t\tif (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t\
  \tclosing_chars.push(bracket.charCodeAt(0));\n\t\t}\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet opening_char = opening_chars[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tlet closing_char = closing_chars[i];\n\t\tif (opening_char < closing_char) {\n\
  \t\t\tstack.push(opening_bracket);\n\t\t\tstack.push(closing_char);\n\t\t} else\
  \ {\n\t\t\tstack.push(closing_char);\n\t\t\tstack.push(opening_bracket);\n\t\t}\n\
  \t}\n\treturn stack.length % 2 === 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn opening_brackets.every((opening_bracket,\
  \ i) => {\n\t\treturn closing_brackets.some((closing_bracket) => {\n\t\t\treturn\
  \ opening_bracket < closing_bracket;\n\t\t});\n\t});\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let c = brackets[i];\n\t\tif (c == '<') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\
  \treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top\
  \ == '>') {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push('>');\n\t\t\
  \t}\n\t\t} else if (c == '>') {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top == '<')\
  \ {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\tstack.push('<');\n\t\t\t}\n\t\
  \t} else {\n\t\t\tstack.push(c);\n\t\t}\n\t}\n\tif (stack.length != 0) {\n\t\treturn\
  \ false;\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[<>]/)) {\n\
  \t\t\topening_brackets.push(bracket.charCodeAt(0));\n\t\t} else {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\
  \t\t}\n\t});\n\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tif (opening_brackets_count < closing_brackets_count)\
  \ {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_index = 0;\n\tlet closing_brackets_index\
  \ = 0;\n\n\twhile (opening_brackets_index < opening_brackets_count && closing_brackets_index\
  \ < closing_brackets_count) {\n\t\tlet opening_bracket = opening_brackets[opening_brackets_index];\n\
  \t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\n\t\tif (opening_bracket\
  \ === closing_bracket) {\n\t\t\topening_brackets_index++;\n\t\t\tclosing_brackets_index++;\n\
  \t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket)\
  \ => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\
  \tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\
  \t\tset.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet\
  \ result = opening_brackets_set.size === closing_brackets_set.size;\n\treturn result;\n\
  }\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
  \ char) => set.add(char), new Set<string>());\n\n\treturn opening_brackets_set.size\
  \ == closing_brackets_set.size;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet open_brackets = brackets.split(\"\");\n\tlet closed_brackets = \"\";\n\t\
  for (let i = 0; i < open_brackets.length; i++) {\n\t\tif (open_brackets[i] == \"\
  <\") {\n\t\t\tclosed_brackets += \">\";\n\t\t} else {\n\t\t\tclosed_brackets +=\
  \ \"<\";\n\t\t}\n\t}\n\treturn closed_brackets == brackets;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\tlet opening_brackets_index = 0;\n\tlet closing_brackets_index\
  \ = 0;\n\twhile (opening_brackets_index < opening_brackets_count && closing_brackets_index\
  \ < closing_brackets_count) {\n\t\tlet opening_bracket = opening_brackets[opening_brackets_index];\n\
  \t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\t\tif (opening_bracket\
  \ === closing_bracket) {\n\t\t\topening_brackets_index++;\n\t\t\tclosing_brackets_index++;\n\
  \t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (opening_brackets_index\
  \ === opening_brackets_count && closing_brackets_index === closing_brackets_count);\n\
  }\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set\
  \ = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\
  \t}, new Set<string>());\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n\
  }\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\t\t\
  } else if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\t\
  \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket)\
  \ => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\
  \tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\
  \t\tset.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\treturn\
  \ opening_brackets_set.size == closing_brackets_set.size;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet\
  \ closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet j = 0;\n\
  \tlet k = 0;\n\tlet brackets_length = brackets.length;\n\tlet opening_brackets_counter\
  \ = 0;\n\tlet closing_brackets_counter = 0;\n\tlet opening_brackets_counter2 = 0;\n\
  \tlet closing_brackets_counter2 = 0;\n\tlet opening_brackets_counter3 = 0;\n\tlet\
  \ closing_brackets_counter3 = 0;\n\tlet opening_brackets_counter4 = 0;\n\tlet closing_brackets_counter4\
  \ = 0;\n\tlet opening_brackets_counter5 = 0;\n\tlet closing_brackets_counter5 =\
  \ 0;\n\tlet opening_brackets_counter6 = 0;\n\tlet closing_brackets_counter6 = 0;\n\
  \tlet opening_brackets_counter7 = 0;\n\tlet closing_brackets_counter7 = 0;\n\tlet\
  \ opening_brackets_counter8 = 0;\n\tlet closing_brackets_counter8 = 0;\n\tlet opening_brackets_counter9\
  \ = 0;\n\tlet closing_brackets_counter9 = 0;\n\tlet opening_brackets_counter10 =\
  \ 0;\n\tlet closing_brackets_counter10 = 0;\n\tlet opening_brackets_counter11 =\
  \ 0;\n\tlet closing_brackets_counter11 = 0;\n\tlet opening_brackets_counter12 =\
  \ 0;\n\tlet closing_brackets_counter12 = 0;\n\tlet opening_brackets_counter13 =\
  \ 0;\n\tlet closing_brackets_counter13 = 0;\n\tlet opening_brackets_counter14 =\
  \ 0;\n\tlet closing_brackets_counter14 = 0;\n\tlet opening_brackets_counter15 =\
  \ 0;\n\tlet closing_brackets_counter15 = 0;\n\tlet opening_brackets_counter16 =\
  \ 0;\n\tlet closing_brackets_counter16 = 0;\n\tlet opening_brackets_counter17 =\
  \ 0;\n\tlet closing_brackets_counter17 = 0;\n\tlet opening_brackets_counter18 =\
  \ 0;\n\tlet closing_brackets_counter18 = 0;\n\tlet opening_brackets_counter19 =\
  \ 0;\n\tlet closing_brackets_counter19 = 0;\n\tlet opening_b"
- "\tlet open_brackets = brackets.split(\"\");\n\tlet closed_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < open_brackets.length; i++) {\n\t\tif (open_brackets[i]\
  \ !== closed_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.startsWith(\">\")) {\n\t\
  \t\tif (stack.length > 0) {\n\t\t\t\tclosing_brackets.push(stack.pop());\n\t\t\t\
  }\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\tfor (let i =\
  \ 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\tcontinue;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.charAt(0) == '<') {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.charAt(0) == '>') {\n\t\t\
  \tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening_bracket\
  \ = opening_brackets.pop();\n\t\t\tclosing_brackets.push(opening_bracket);\n\t\t\
  \tstack.splice(opening_bracket, 1);\n\t\t}\n\t}\n\tif (stack.length != 0) {\n\t\t\
  return false;\n\t}\n\tfor (let i = 0; i < closing_brackets.length; ++i) {\n\t\t\
  let bracket = brackets[closing_brackets[i]];\n\t\tif (bracket.charAt(0) == '<')\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n\
  }\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(bracket.substr(1));\n\
  \t\t} else if (bracket.startsWith(\">\")) {\n\t\t\tclosing_brackets.push(bracket.substr(1));\n\
  \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
  \ char) => set.add(char), new Set<string>());\n\treturn opening_brackets_set.size\
  \ == closing_brackets_set.size;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket)\
  \ => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\
  \tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\
  \t\tset.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\treturn\
  \ opening_brackets_set.size == closing_brackets_set.size;\n}\n"
- "\tlet open_brackets = brackets.split(\"<\");\n\tlet closed_brackets = brackets.split(\"\
  >\");\n\tlet open_brackets_count = open_brackets.length;\n\tlet closed_brackets_count\
  \ = closed_brackets.length;\n\tfor (let i = 0; i < open_brackets_count; i++) {\n\
  \t\tlet open_bracket = open_brackets[i];\n\t\tlet closed_bracket = closed_brackets[i];\n\
  \t\tif (open_bracket != closed_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (closing_bracket < opening_bracket) {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\t\
  else if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
  }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
  \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_brackets_count\
  \ = opening_brackets.length;\n\t\tlet closing_brackets_count = closing_brackets.length;\n\
  \t\twhile (opening_brackets_count > 0 && closing_brackets_count > 0) {\n\t\t\tlet\
  \ opening_bracket = opening_brackets[opening_brackets_count - 1];\n\t\t\tlet closing_bracket\
  \ = closing_brackets[closing_brackets_count - 1];\n\t\t\tif (opening_bracket ===\
  \ closing_bracket) {\n\t\t\t\topening_brackets.pop();\n\t\t\t\tclosing_brackets.pop();\n\
  \t\t\t\topening_brackets_count--;\n\t\t\t\tclosing_brackets_count--;\n\t\t\t}\n\t\
  \t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (opening_brackets_count === 0\
  \ || closing_brackets_count === 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set\
  \ = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\
  \t}, new Set<string>());\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n\
  }\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else {\n\t\
  \t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\
  return false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i\
  \ < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (closing_bracket < opening_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((acc, cur)\
  \ => acc | 1 << cur, 0);\n\tlet closing_brackets_set = closing_brackets.reduce((acc,\
  \ cur) => acc | 1 << cur, 0);\n\treturn opening_brackets_set === closing_brackets_set;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\
  \t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\
  \ else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\n\twhile (stack.length > 0) {\n\
  \t\tlet opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket = closing_brackets.pop();\n\
  \t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet\
  \ bracket = stack.pop();\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\
  continue;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((acc, cur)\
  \ => acc && cur in brackets, true);\n\tlet closing_brackets_set = closing_brackets.reduce((acc,\
  \ cur) => acc && cur in brackets, true);\n\treturn opening_brackets_set && closing_brackets_set;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
  \t\t\tstack.push(bracket);\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t\
  }\n\treturn stack.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket == \"<\") {\n\t\t\tif (stack.length\
  \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length -\
  \ 1];\n\t\t\tif (top == \"<\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\t\
  return false;\n\t\t\t}\n\t\t} else if (bracket == \">\") {\n\t\t\tif (stack.length\
  \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length -\
  \ 1];\n\t\t\tif (top == \">\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\t\
  return false;\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\t\
  return stack.length == 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"<\");\n\tlet closing_brackets = brackets.split(\"\
  >\");\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else if\
  \ (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor\
  \ (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\tif (stack.length !== 0)\
  \ {\n\t\t\t\tclosing_brackets.push(stack.pop());\n\t\t\t}\n\t\t\topening_brackets.push(bracket);\n\
  \t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tstack.push(bracket);\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\topening_brackets.push(stack.pop());\n\
  \t\t\t}\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t}\n\tfor (let i = 0; i\
  \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.startsWith(\"<\")) {\n\t\t\topening_brackets.push(i);\n\t\t} else\
  \ if (bracket.endsWith(\">\")) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\t\
  return opening_brackets.every((i) => closing_brackets.includes(i));\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tlet opening_chars: number[] = [];\n\tlet closing_chars: number[]\
  \ = [];\n\tlet opening_char: number[] = [];\n\tlet closing_char: number[] = [];\n\
  \tlet opening_char_index: number[] = [];\n\tlet closing_char_index: number[] = [];\n\
  \tlet opening_char_index2: number[] = [];\n\tlet closing_char_index2: number[] =\
  \ [];\n\tlet opening_char_index3: number[] = [];\n\tlet closing_char_index3: number[]\
  \ = [];\n\tlet opening_char_index4: number[] = [];\n\tlet closing_char_index4: number[]\
  \ = [];\n\tlet opening_char_index5: number[] = [];\n\tlet closing_char_index5: number[]\
  \ = [];\n\tlet opening_char_index6: number[] = [];\n\tlet closing_char_index6: number[]\
  \ = [];\n\tlet opening_char_index7: number[] = [];\n\tlet closing_char_index7: number[]\
  \ = [];\n\tlet opening_char_index8: number[] = [];\n\tlet closing_char_index8: number[]\
  \ = [];\n\tlet opening_char_index9: number[] = [];\n\tlet closing_char_index9: number[]\
  \ = [];\n\tlet opening_char_index10: number[] = [];\n\tlet closing_char_index10:\
  \ number[] = [];\n\tlet opening_char_index11: number[] = [];\n\tlet closing_char_index11:\
  \ number[] = [];\n\tlet opening_char_index12: number[] = [];\n\tlet closing_char_index12:\
  \ number[] = [];\n\tlet opening_char_index13: number[] = [];\n\tlet closing_char_index13:\
  \ number[] = [];\n\tlet opening_char_index14: number[] = [];\n\tlet closing_char_index14:\
  \ number[] = [];\n\tlet opening_char_index15: number[] = [];\n\tlet closing_char_index15:\
  \ number[] = [];\n\tlet opening_char_index16: number[] = [];\n\tlet closing_char_index16:\
  \ number[] = [];\n\tlet opening_char_index17: number[] = [];\n\tlet closing_char_index17:\
  \ number[] = [];\n\tlet opening_char_index18: number[] = [];\n\tlet closing_char_index18:\
  \ number[] = [];\n\tlet opening_char_index19: number[] = [];\n\tlet closing_char_index19: "
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length !== 1) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length !==\
  \ 0 || bracket !== stack[stack.length - 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\
  \t}\n\t}\n\treturn stack.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let c = brackets[i];\n\t\tif (c === \"<\") {\n\t\t\tstack.push(\"<<\");\n\t\t} else\
  \ if (c === \">\") {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\tstack.pop();\n\t\t\
  \t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length ===\
  \ 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet open_brackets = brackets.split(\"\");\n\tlet closed_brackets = \"\";\n\t\
  for (let i = 0; i < open_brackets.length; i++) {\n\t\tif (open_brackets[i] == \"\
  <\") {\n\t\t\tclosed_brackets += \">\";\n\t\t} else {\n\t\t\tclosed_brackets +=\
  \ \"<\";\n\t\t}\n\t}\n\treturn closed_brackets == \"<>\";\n}\n"
- "\tlet stack: number[] = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets:\
  \ number[] = [];\n\tlet open_brackets_str: string[] = [];\n\tlet close_brackets_str:\
  \ string[] = [];\n\tlet open_str: string[] = [];\n\tlet close_str: string[] = [];\n\
  \tlet open_str_index: number[] = [];\n\tlet close_str_index: number[] = [];\n\t\
  let open_str_index2: number[] = [];\n\tlet close_str_index2: number[] = [];\n\t\
  let open_str_index3: number[] = [];\n\tlet close_str_index3: number[] = [];\n\t\
  let open_str_index4: number[] = [];\n\tlet close_str_index4: number[] = [];\n\t\
  let open_str_index5: number[] = [];\n\tlet close_str_index5: number[] = [];\n\t\
  let open_str_index6: number[] = [];\n\tlet close_str_index6: number[] = [];\n\t\
  let open_str_index7: number[] = [];\n\tlet close_str_index7: number[] = [];\n\t\
  let open_str_index8: number[] = [];\n\tlet close_str_index8: number[] = [];\n\t\
  let open_str_index9: number[] = [];\n\tlet close_str_index9: number[] = [];\n\t\
  let open_str_index10: number[] = [];\n\tlet close_str_index10: number[] = [];\n\t\
  let open_str_index11: number[] = [];\n\tlet close_str_index11: number[] = [];\n\t\
  let open_str_index12: number[] = [];\n\tlet close_str_index12: number[] = [];\n\t\
  let open_str_index13: number[] = [];\n\tlet close_str_index13: number[] = [];\n\t\
  let open_str_index14: number[] = [];\n\tlet close_str_index14: number[] = [];\n\t\
  let open_str_index15: number[] = [];\n\tlet close_str_index15: number[] = [];\n\t\
  let open_str_index16: number[] = [];\n\tlet close_str_index16: number[] = [];\n\t\
  let open_str_index17: number[] = [];\n\tlet close_str_index17: number[] = [];\n\t\
  let open_str_index18: number[] = [];\n\tlet close_str_index18: number[] = [];\n\t\
  let open_str_index19: number[] = [];\n\tlet close_str_index19: number[] = [];\n\t\
  let open_str_index20: number[] = [];\n\tlet close_str_index20: number[] = [];\n\t\
  let open_str_index21: number[] = [];\n\t"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.charAt(0) === '<') {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.charAt(0) === '>') {\n\t\
  \t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet opening_bracket\
  \ = opening_brackets.pop();\n\t\t\tif (opening_bracket === i) {\n\t\t\t\tclosing_brackets.push(i);\n\
  \t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length >\
  \ 0) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < closing_brackets.length; ++i)\
  \ {\n\t\tlet bracket = brackets[closing_brackets[i]];\n\t\tif (bracket.charAt(0)\
  \ === '<') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(bracket.substring(1,\
  \ bracket.length - 1));\n\t\t} else if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(bracket.substring(1,\
  \ bracket.length - 1));\n\t\t}\n\t}\n\treturn opening_brackets.length === closing_brackets.length;\n\
  }\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\tclosing_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.startsWith(\"<\") || bracket.startsWith(\">\"\
  )) {\n\t\t\tstack.push(bracket);\n\t\t} else {\n\t\t\tif (stack.length > 0) {\n\t\
  \t\t\topening_brackets.push(stack.pop());\n\t\t\t}\n\t\t\tif (bracket.startsWith(\"\
  (\")) {\n\t\t\t\tstack.push(bracket);\n\t\t\t} else if (bracket.endsWith(\")\"))\
  \ {\n\t\t\t\tclosing_brackets.push(bracket);\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length\
  \ > 0) {\n\t\topening_brackets.push(stack.pop());\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket.startsWith(\"\
  (\") && opening_bracket.endsWith(\")\")) {\n\t\t\topening_bracket = opening_bracket.substring(1,\
  \ opening_bracket.length - 1);\n\t\t}\n\t\tif (closing_bracket.startsWith(\"(\"\
  ) && closing_bracket.endsWith(\")\")) {\n\t\t\tclosing_bracket = closing_bracket.substring(1,\
  \ closing_bracket.length - 1);\n\t\t}\n\t\tif (opening_bracket.startsWith(\"<\"\
  ) && opening_bracket.endsWith(\">\")) {\n\t\t\topening_bracket = opening_bracket.substring(1,\
  \ opening_bracket.length - 1);\n\t\t}\n\t\tif (closing_bracket.startsWith(\"<\"\
  ) && closing_bracket.endsWith(\">\")) {\n\t\t\tclosing_bracket = closing_bracket.substring(1,\
  \ closing_bracket.length - 1);\n\t\t}\n\t\tif (opening_bracket !== closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket)\
  \ => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\
  \tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\
  \t\tset.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\treturn\
  \ !opening_brackets_set.has(closing_brackets_set);\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tlet opening_brackets_length = 0;\n\tlet closing_brackets_length = 0;\n\tfor (let\
  \ i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\tif (bracket.includes(\"\
  <\")) {\n\t\t\topening_brackets[opening_brackets_length] = i;\n\t\t\topening_brackets_length++;\n\
  \t\t} else if (bracket.includes(\">\")) {\n\t\t\tclosing_brackets[closing_brackets_length]\
  \ = i;\n\t\t\tclosing_brackets_length++;\n\t\t}\n\t}\n\tif (opening_brackets_length\
  \ != closing_brackets_length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket.includes(\"<\")) {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket.includes(\">\")) {\n\t\t\tif (stack.length !== 0) {\n\t\t\
  \t\tlet opening = stack.pop();\n\t\t\t\tif (opening !== bracket) {\n\t\t\t\t\treturn\
  \ false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\
  \treturn stack.length === 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\
  return false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet open_brackets = brackets.split(\"\");\n\tlet closed_brackets = \"\";\n\t\
  for (let i = 0; i < open_brackets.length; i++) {\n\t\tif (open_brackets[i] == \"\
  <\") {\n\t\t\tif (closed_brackets.indexOf(\"</\") != -1) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t\tclosed_brackets += \"</\";\n\t\t} else {\n\t\t\tif (closed_brackets.indexOf(\"\
  <\") != -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tclosed_brackets += \"<\";\n\
  \t\t}\n\t}\n\treturn closed_brackets.indexOf(\"</\") == -1;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.indexOf(\"<\") >= 0) {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.indexOf(\">\") >= 0) {\n\
  \t\t\tif (stack.length > 0) {\n\t\t\t\tlet opening = stack[stack.length - 1];\n\t\
  \t\t\tclosing_brackets.push(opening_brackets[opening_brackets.length - 1]);\n\t\t\
  \t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn (opening_brackets.length == closing_brackets.length);\n\
  }\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\tif (stack.length\
  \ && stack[stack.length - 1] === bracket) {\n\t\t\t\tstack.pop();\n\t\t\t} else\
  \ {\n\t\t\t\tstack.push(bracket);\n\t\t\t}\n\t\t} else {\n\t\t\tif (stack.length\
  \ && stack[stack.length - 1] === bracket) {\n\t\t\t\tstack.pop();\n\t\t\t} else\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn !stack.length;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else\
  \ if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length === 0) {\n\t\t\
  \t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack[stack.length - 1];\n\t\t\t\
  let closing = bracket;\n\t\t\tif (opening !== closing) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tlet opening_chars: number[] = [];\n\tlet closing_chars: number[] = [];\n\tfor\
  \ (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\t\
  if (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t\topening_chars.push(bracket.charCodeAt(0));\n\
  \t\t} else if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\
  \t\tclosing_chars.push(bracket.charCodeAt(0));\n\t\t}\n\t}\n\tfor (let i = 0; i\
  \ < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\
  \t\tlet opening_char = opening_chars[i];\n\t\tlet closing_index = closing_brackets[i];\n\
  \t\tlet closing_char = closing_chars[i];\n\t\tif (opening_char === closing_char)\
  \ {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_char_code = opening_char;\n\t\tlet\
  \ closing_char_code = closing_char;\n\t\tlet opening_char_code_length = opening_char_code.length;\n\
  \t\tlet closing_char_code_length = closing_char_code.length;\n\t\tlet opening_char_code_length\
  \ = opening_char_code_length;\n\t\tlet closing_char_code_length = closing_char_code_length;\n\
  \t\tlet opening_char_code_length = opening_char_code_length;\n\t\tlet closing_char_code_length\
  \ = closing_char_code_length;\n\t\tlet opening_char_code_length = opening_char_code_length;\n\
  \t\tlet closing_char_code_length = closing_char_code_length;\n\t\tlet opening_char_code_length\
  \ = opening_char_code_length;\n\t\tlet closing_char_code_length = closing_char_code_length;\n\
  \t\tlet opening_char_code_length = opening_char_code_length;\n\t\tlet closing_char_code_length\
  \ = closing_char_code_length;\n\t\tlet opening_char_code_length = opening_char_code_length;\n\
  \t\tlet closing_char_code_length = closing_char_code_length;\n\t\tlet opening_char_code_length\
  \ = opening_char_code_length;\n\t\tlet closing_char_code_length = closing_char_code_length;\n\
  \t\tlet opening_char_code_length = opening_char_code_length;\n\t\tlet closing_char_code_length\
  \ = closing_char_code_length;\n\t\tlet opening_char_code_length = opening_char_code_length;\n\
  \t\tlet closing_char_code_length = closing_char_code_length;\n\t\tlet opening_char_code_length\
  \ = opening_char_code_length;\n\t\tlet closing_char_code_length = closing_char_code_length;\n\
  \t\tlet opening_char_code_length = opening_char_code_length;\n\t\tlet clo"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set\
  \ = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\
  \t}, new Set<string>());\n\treturn opening_brackets_set.size == closing_brackets_set.size;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else\
  \ if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ stack.length === 0;\n}\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(bracket.substring(1,\
  \ bracket.length - 1));\n\t\t} else if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(bracket.substring(1,\
  \ bracket.length - 1));\n\t\t}\n\t}\n\treturn opening_brackets.every((opening_bracket)\
  \ => {\n\t\treturn closing_brackets.every((closing_bracket) => {\n\t\t\treturn opening_bracket\
  \ === closing_bracket;\n\t\t});\n\t});\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, opening_bracket)\
  \ => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\
  \tlet closing_brackets_set = closing_brackets.reduce((set, closing_bracket) => {\n\
  \t\tset.add(closing_bracket);\n\t\treturn set;\n\t}, new Set<string>());\n\treturn\
  \ opening_brackets_set.size == closing_brackets_set.size;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
  \ char) => set.add(char), new Set<string>());\n\treturn opening_brackets_set.size\
  \ == closing_brackets_set.size;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.startsWith(\"<\")) {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.endsWith(\">\")) {\n\
  \t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tclosing_brackets.push(bracket);\n\t\t} else {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\tif (stack.length !== opening_brackets.length + closing_brackets.length)\
  \ {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i)\
  \ {\n\t\tlet opening = opening_brackets[i];\n\t\tlet closing = closing_brackets[i];\n\
  \t\tif (opening !== closing) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
  }\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(bracket);\n\t\t\
  } else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\n\twhile (stack.length > 0) {\n\
  \t\tlet opening_bracket = opening_brackets.pop();\n\t\tlet closing_bracket = closing_brackets.pop();\n\
  \n\t\tif (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t\
  let opening_brackets_count = opening_brackets.length;\n\t\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\t\tif (opening_brackets_count === closing_brackets_count)\
  \ {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (opening_brackets_count > closing_brackets_count)\
  \ {\n\t\t\tclosing_brackets.push(opening_bracket);\n\t\t} else {\n\t\t\topening_brackets.push(closing_bracket);\n\
  \t\t}\n\t}\n\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet\
  \ closing_brackets_length = closing_brackets.length;\n\tlet opening_brackets_index\
  \ = 0;\n\tlet closing_brackets_index = 0;\n\tlet opening_brackets_index_in_string\
  \ = 0;\n\tlet closing_brackets_index_in_string = 0;\n\tlet opening_brackets_index_in_string2\
  \ = 0;\n\tlet closing_brackets_index_in_string2 = 0;\n\tlet opening_brackets_index_in_string3\
  \ = 0;\n\tlet closing_brackets_index_in_string3 = 0;\n\tlet opening_brackets_index_in_string4\
  \ = 0;\n\tlet closing_brackets_index_in_string4 = 0;\n\tlet opening_brackets_index_in_string5\
  \ = 0;\n\tlet closing_brackets_index_in_string5 = 0;\n\tlet opening_brackets_index_in_string6\
  \ = 0;\n\tlet closing_brackets_index_in_string6 = 0;\n\tlet opening_brackets_index_in_string7\
  \ = 0;\n\tlet closing_brackets_index_in_string7 = 0;\n\tlet opening_brackets_index_in_string8\
  \ = 0;\n\tlet closing_brackets_index_in_string8 = 0;\n\tlet opening_brackets_index_in_string9\
  \ = 0;\n\tlet closing_brackets_index_in_string9 = 0;\n\tlet opening_brackets_index_in_string10\
  \ = 0;\n\tlet closing_brackets_index_in_string10 = 0;\n\tlet opening_brackets_index_in_string11\
  \ = 0;\n\tlet closing_brackets_index_in_string11 = 0;\n\tlet opening_brackets_index_in_string12\
  \ = 0;\n\tlet closing_brackets_index_in_string12 = 0;\n\tlet opening_brackets_index_in_string13\
  \ = 0;\n\tlet closing_brackets_index_in_string13 = 0;\n\tlet opening_brackets_index_in_string14\
  \ = 0;\n\tlet closing_brackets_index_in_string14 = 0;\n\tlet opening_brackets_index_in_string15\
  \ = 0;\n\tlet closing_brackets_index_in_string15 = 0;\n\tlet opening_brackets_index_in_string16\
  \ = 0;\n\tlet closing_brackets_index_in_string16 = 0;\n\tlet opening_brackets_index_in_string"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tlet opening_chars: number[] = [];\n\tlet closing_chars: number[] = [];\n\tlet\
  \ opening_char: number[] = [];\n\tlet closing_char: number[] = [];\n\tlet opening_char_index:\
  \ number[] = [];\n\tlet closing_char_index: number[] = [];\n\tlet opening_char_index2:\
  \ number[] = [];\n\tlet closing_char_index2: number[] = [];\n\tlet opening_char_index3:\
  \ number[] = [];\n\tlet closing_char_index3: number[] = [];\n\tlet opening_char_index4:\
  \ number[] = [];\n\tlet closing_char_index4: number[] = [];\n\tlet opening_char_index5:\
  \ number[] = [];\n\tlet closing_char_index5: number[] = [];\n\tlet opening_char_index6:\
  \ number[] = [];\n\tlet closing_char_index6: number[] = [];\n\tlet opening_char_index7:\
  \ number[] = [];\n\tlet closing_char_index7: number[] = [];\n\tlet opening_char_index8:\
  \ number[] = [];\n\tlet closing_char_index8: number[] = [];\n\tlet opening_char_index9:\
  \ number[] = [];\n\tlet closing_char_index9: number[] = [];\n\tlet opening_char_index10:\
  \ number[] = [];\n\tlet closing_char_index10: number[] = [];\n\tlet opening_char_index11:\
  \ number[] = [];\n\tlet closing_char_index11: number[] = [];\n\tlet opening_char_index12:\
  \ number[] = [];\n\tlet closing_char_index12: number[] = [];\n\tlet opening_char_index13:\
  \ number[] = [];\n\tlet closing_char_index13: number[] = [];\n\tlet opening_char_index14:\
  \ number[] = [];\n\tlet closing_char_index14: number[] = [];\n\tlet opening_char_index15:\
  \ number[] = [];\n\tlet closing_char_index15: number[] = [];\n\tlet opening_char_index16:\
  \ number[] = [];\n\tlet closing_char_index16: number[] = [];\n\tlet opening_char_index17:\
  \ number[] = [];\n\tlet closing_char_index17: number[] = [];\n\tlet opening_char_index18:\
  \ number[] = [];\n\tlet closing_char_index18: number[] = [];\n\tlet opening_char_index19:\
  \ number[] = [];\n\tlet closing_char_index19: number[] = [];\n\tlet open"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\tlet top = stack[stack.length - 1];\n\t\t\t\tif (top === \"<\"\
  ) {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t\
  }\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\tlet top = stack[stack.length -\
  \ 1];\n\t\t\t\tif (top === \">\") {\n\t\t\t\t\tstack.pop();\n\t\t\t\t} else {\n\t\
  \t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t\
  }\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\treturn stack.length ===\
  \ 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \treturn true;\n}\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tlet opening_counts: number[] = [];\n\tlet closing_counts: number[] = [];\n\tfor\
  \ (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\t\
  if (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(bracket.substring(1,\
  \ bracket.length - 1));\n\t\t\topening_counts.push(1);\n\t\t}\n\t\telse if (bracket.charAt(0)\
  \ === '>') {\n\t\t\tclosing_brackets.push(bracket.substring(1, bracket.length -\
  \ 1));\n\t\t\tclosing_counts.push(1);\n\t\t}\n\t\telse {\n\t\t\topening_counts[opening_brackets.length\
  \ - 1]++;\n\t\t\tclosing_counts[closing_brackets.length - 1]++;\n\t\t}\n\t}\n\t\
  for (let i = 0; i < opening_brackets.length; ++i) {\n\t\tif (opening_counts[i] >\
  \ closing_counts[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let c = brackets[i];\n\t\tif (c === \"<\") {\n\t\t\tif (stack.length !== 0) {\n\t\
  \t\t\tstack.pop();\n\t\t\t}\n\t\t\tstack.push(c);\n\t\t} else if (c === \">\") {\n\
  \t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(c);\n\
  \t\t} else {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\
  \t\tlet top = stack[stack.length - 1];\n\t\t\tif (top === c || top === \"<\" ||\
  \ top === \">\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set\
  \ = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\
  \t}, new Set<string>());\n\tlet result = opening_brackets_set.size === closing_brackets_set.size;\n\
  \treturn result;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
  \t\tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\n\tlet are_opening_brackets_correct\
  \ = opening_brackets.every((i) => closing_brackets.indexOf(i) !== -1);\n\treturn\
  \ are_opening_brackets_correct;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let char = brackets[i];\n\t\tif (char === \">\") {\n\t\t\tif (stack.length !== 0)\
  \ {\n\t\t\t\tlet last = stack.pop();\n\t\t\t\tif (last === \"<\") {\n\t\t\t\t\t\
  stack.push(\"<\");\n\t\t\t\t} else {\n\t\t\t\t\tstack.push(\">\");\n\t\t\t\t}\n\t\
  \t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (char === \"<\") {\n\
  \t\t\tif (stack.length !== 0) {\n\t\t\t\tlet last = stack.pop();\n\t\t\t\tif (last\
  \ === \">\") {\n\t\t\t\t\tstack.push(\"<\");\n\t\t\t\t} else {\n\t\t\t\t\treturn\
  \ false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else\
  \ {\n\t\t\tstack.push(char);\n\t\t}\n\t}\n\treturn (stack.length === 0);\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
  \t\tif (bracket.indexOf(\"<\") >= 0) {\n\t\t\topening_brackets.push(i);\n\t\t} else\
  \ if (bracket.indexOf(\">\") >= 0) {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
  }\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\t\
  if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t\
  return true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \n\t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t\
  }\n\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t} else\
  \ if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\
  \tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
  \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_brackets_count\
  \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_count = closing_brackets.length\
  \ - 1;\n\t\twhile (opening_brackets_count > 0 && closing_brackets_count > 0) {\n\
  \t\t\tlet opening_bracket = opening_brackets[opening_brackets_count];\n\t\t\tlet\
  \ closing_bracket = closing_brackets[closing_brackets_count];\n\t\t\tif (opening_bracket\
  \ === closing_bracket) {\n\t\t\t\topening_brackets_count--;\n\t\t\t\tclosing_brackets_count--;\n\
  \t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ === 0 && closing_brackets.length === 0;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\tif (stack.length > 0)\
  \ {\n\t\t\t\tclosing_brackets.push(stack.pop());\n\t\t\t}\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\
  \t\t} else if (bracket.match(/[<>]/)) {\n\t\t\tstack.push(bracket);\n\t\t}\n\t}\n\
  \tif (stack.length > 0) {\n\t\tclosing_brackets.push(stack.pop());\n\t}\n\tfor (let\
  \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\
  }\n\treturn stack.length === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket == \"<\") {\n\t\t\tif (stack.length\
  \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length -\
  \ 1];\n\t\t\tif (top == \">\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\t\
  stack.push(bracket);\n\t\t\t}\n\t\t} else if (bracket == \">\") {\n\t\t\tif (stack.length\
  \ == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length -\
  \ 1];\n\t\t\tif (top == \"<\") {\n\t\t\t\tstack.pop();\n\t\t\t} else {\n\t\t\t\t\
  stack.push(bracket);\n\t\t\t}\n\t\t} else {\n\t\t\tstack.push(bracket);\n\t\t}\n\
  \t}\n\treturn stack.length == 0;\n}\n"
- "\tlet opening_brackets: string[] = [];\n\tlet closing_brackets: string[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.includes(\"<\")) {\n\t\t\topening_brackets.push(bracket);\n\t\t} else\
  \ if (bracket.includes(\">\")) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\
  \t}\n\treturn opening_brackets.length === closing_brackets.length;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else\
  \ if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length === 0) {\n\t\t\
  \t\treturn false;\n\t\t\t}\n\t\t\tlet top = stack[stack.length - 1];\n\t\t\tif (top\
  \ !== bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length\
  \ !== 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i\
  \ < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.match(/</)) {\n\t\t\tstack.push(bracket);\n\t\t\
  \topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/)) {\n\t\t\tclosing_brackets.push(i);\n\
  \t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn\
  \ false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_brackets_length\
  \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_length = closing_brackets.length\
  \ - 1;\n\t\tlet opening_brackets_index = opening_bracket;\n\t\tlet closing_brackets_index\
  \ = opening_bracket;\n\t\twhile (opening_brackets_index >= 0 && closing_brackets_index\
  \ >= 0) {\n\t\t\tlet opening_brackets_char = opening_brackets[opening_brackets_index];\n\
  \t\t\tlet closing_brackets_char = closing_brackets[closing_brackets_index];\n\t\t\
  \tif (opening_brackets_char === closing_brackets_char) {\n\t\t\t\topening_brackets_index--;\n\
  \t\t\t\tclosing_brackets_index--;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
  }\n\t\tif (opening_brackets_index === closing_brackets_index) {\n\t\t\topening_brackets_index--;\n\
  \t\t}\n\t\tif (opening_brackets_index === closing_brackets_index) {\n\t\t\topening_brackets_index--;\n\
  \t\t}\n\t\tif (opening_brackets_index === closing_brackets_index) {\n\t\t\topening_brackets_index--;\n\
  \t\t}\n\t\tif (opening_brackets_index === closing_brackets_index) {\n\t\t\topening_brackets_index--;\n\
  \t\t}\n\t\tif (opening_brackets_index === closing_brackets_index) {\n\t\t\topening_brackets_index--;\n\
  \t\t}\n\t\tif (opening_brackets_index === closing_brackets_index) {\n\t\t\topening_brackets_index--;\n\
  \t\t}\n\t\tif (opening_b"
- "\tlet opening_brackets = brackets.split(\"<\");\n\tlet closing_brackets = brackets.split(\"\
  >\");\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket == closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\
  \t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
  \ == 0 && closing_brackets.length == 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i\
  \ < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet next_opening_bracket = opening_brackets[i + 1] || brackets.length;\n\t\t\
  let next_closing_bracket = closing_brackets[i + 1] || 0;\n\t\tif (next_opening_bracket\
  \ < next_closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set\
  \ = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\t\treturn set;\n\
  \t}, new Set<string>());\n\tlet opening_brackets_count = opening_brackets_set.size;\n\
  \tlet closing_brackets_count = closing_brackets_set.size;\n\treturn opening_brackets_count\
  \ === closing_brackets_count;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set, char)\
  \ => set.add(char), new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
  \ char) => set.add(char), new Set<string>());\n\treturn opening_brackets_set.size\
  \ == closing_brackets_set.size;\n}\n"
language: ts
name: HumanEval_56_correct_bracketing
prompt: '//brackets is a string of "<" and ">".

  // return True if every opening bracket has a corresponding closing bracket.

  // >>> correct_bracketing("<")

  // False

  // >>> correct_bracketing("<>")

  // True

  // >>> correct_bracketing("<<><>>")

  // True

  // >>> correct_bracketing("><<>")

  // False

  function correct_bracketing(brackets: string): boolean {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
  ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
  <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
  <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>>><>\"),false);\n}\n\ntest();"
