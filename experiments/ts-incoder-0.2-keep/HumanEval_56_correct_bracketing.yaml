completions:
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/[<>]/)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[<>]/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn\
  \ false;\n\t\t\t}\n\t\t\tlet opening = stack.pop();\n\t\t\tif (opening !== bracket)\
  \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length > 0) {\n\t\t\
  return false;\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\tlet\
  \ closing_brackets_length = closing_brackets.length;\n\tlet correct_bracketing =\
  \ false;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket === closing_bracket) {\n\t\t\tcorrect_bracketing = true;\n\t\t\
  \tbreak;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i\
  \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: Stack = [];\n\tlet open_brackets: number[] = [];\n\tlet close_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(i);\n\t\t\topen_brackets.push(i);\n\
  \t\t} else if (bracket === \">\") {\n\t\t\tif (stack.length !== 0) {\n\t\t\t\tlet\
  \ top = stack.pop();\n\t\t\t\tclose_brackets.push(top);\n\t\t\t} else {\n\t\t\t\t\
  return false;\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length !== 0) {\n\t\treturn false;\n\
  \t}\n\tfor (let i = 0; i < open_brackets.length; i++) {\n\t\tlet open_bracket =\
  \ open_brackets[i];\n\t\tlet close_bracket = close_brackets[i];\n\t\tif (open_bracket\
  \ === close_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (open_bracket > close_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tstack.push(bracket);\n\t\t\
  \topening_brackets.push(i);\n\t\t} else if (bracket === \">\") {\n\t\t\tclosing_brackets.push(i);\n\
  \t\t} else if (stack.length > 0 && bracket === stack[stack.length - 1]) {\n\t\t\t\
  stack.pop();\n\t\t\topening_brackets.pop();\n\t\t} else {\n\t\t\treturn false;\n\
  \t\t}\n\t}\n\tif (stack.length > 0) {\n\t\treturn false;\n\t}\n\tfor (let i = 0;\
  \ i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((acc, cur)\
  \ => acc && is_opening_bracket(cur), true);\n\tlet closing_brackets_set = closing_brackets.reduce((acc,\
  \ cur) => acc && is_closing_bracket(cur), true);\n\treturn opening_brackets_set\
  \ && closing_brackets_set;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tlet opening_chars: string[] = [];\n\tlet closing_chars: string[]\
  \ = [];\n\tlet opening_char: string;\n\tlet closing_char: string;\n\tlet opening_char_index:\
  \ number = 0;\n\tlet closing_char_index: number = 0;\n\tfor (let i = 0; i < brackets.length;\
  \ ++i) {\n\t\topening_char = brackets[i];\n\t\tclosing_char = brackets[brackets.length\
  \ - 1 - i];\n\t\tif (opening_char === \"<\") {\n\t\t\topening_brackets.push(opening_char);\n\
  \t\t\topening_chars.push(opening_char);\n\t\t\topening_char_index = 0;\n\t\t} else\
  \ if (opening_char === \">\") {\n\t\t\topening_brackets.push(opening_char);\n\t\t\
  \topening_chars.push(opening_char);\n\t\t\topening_char_index = 0;\n\t\t} else {\n\
  \t\t\topening_chars.push(opening_char);\n\t\t\topening_char_index++;\n\t\t}\n\t\t\
  if (closing_char === \"<\") {\n\t\t\tclosing_brackets.push(closing_char);\n\t\t\t\
  closing_chars.push(closing_char);\n\t\t\tclosing_char_index = 0;\n\t\t} else if\
  \ (closing_char === \">\") {\n\t\t\tclosing_brackets.push(closing_char);\n\t\t\t\
  closing_chars.push(closing_char);\n\t\t\tclosing_char_index = 0;\n\t\t} else {\n\
  \t\t\tclosing_chars.push(closing_char);\n\t\t\tclosing_char_index++;\n\t\t}\n\t\
  }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_char =\
  \ opening_brackets[i];\n\t\tlet closing_char = closing_brackets[i];\n\t\tif (opening_char\
  \ === closing_char) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i,\
  \ 1);\n\t\t\topening_chars.splice(i, 1);\n\t\t\tclosing_chars.splice(i, 1);\n\t\t\
  \ti--;\n\t\t}\n\t}\n\tif (opening_brackets.length !== 0 || closing_brackets.length\
  \ !== 0) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_chars.length;\
  \ ++i) {\n\t\tlet opening_char = opening_chars[i];\n\t\tlet closing_char = closing_chars[i];\n\
  \t\tif (opening_char === closing_char) {\n\t\t\topening_chars.splice(i, 1);\n\t\t\
  \tclosing_chars.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\tif (opening_chars.length\
  \ !== 0 || closing_chars.length !== 0) {\n\t\treturn false;\n\t}\n\treturn true;\n\
  }\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet next_opening_bracket\
  \ = opening_brackets[i + 1];\n\t\tif (next_opening_bracket == null) {\n\t\t\tlet\
  \ closing_bracket = closing_brackets[i];\n\t\t\tif (closing_bracket == null) {\n\
  \t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet next_closing_bracket = closing_brackets[i\
  \ - 1];\n\t\t\tif (next_closing_bracket == null) {\n\t\t\t\treturn false;\n\t\t\t\
  }\n\t\t\tif (next_opening_bracket < next_closing_bracket) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.match(/</)) {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\tif (bracket.match(/>/))\
  \ {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
  \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
  \ = closing_brackets[i];\n\t\tif (opening_bracket < closing_bracket) {\n\t\t\treturn\
  \ false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
  \ = closing_brackets.length;\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
  \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
  \t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
  \treturn true;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn opening_brackets.every((opening_bracket,\
  \ i) => {\n\t\treturn closing_brackets.every((closing_bracket) => {\n\t\t\treturn\
  \ opening_bracket < closing_bracket;\n\t\t});\n\t});\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else\
  \ if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length === 0) {\n\t\t\
  \t\treturn false;\n\t\t\t}\n\t\t\tlet opening = stack[stack.length - 1];\n\t\t\t\
  let closing = bracket;\n\t\t\tif (opening !== closing) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
  \ string[] = [];\n\tlet opening_stack: string[] = [];\n\tlet closing_stack: string[]\
  \ = [];\n\tlet opening_stack_index: number[] = [];\n\tlet closing_stack_index: number[]\
  \ = [];\n\tlet opening_stack_index2: number[] = [];\n\tlet closing_stack_index2:\
  \ number[] = [];\n\tlet opening_stack_index3: number[] = [];\n\tlet closing_stack_index3:\
  \ number[] = [];\n\tlet opening_stack_index4: number[] = [];\n\tlet closing_stack_index4:\
  \ number[] = [];\n\tlet opening_stack_index5: number[] = [];\n\tlet closing_stack_index5:\
  \ number[] = [];\n\tlet opening_stack_index6: number[] = [];\n\tlet closing_stack_index6:\
  \ number[] = [];\n\tlet opening_stack_index7: number[] = [];\n\tlet closing_stack_index7:\
  \ number[] = [];\n\tlet opening_stack_index8: number[] = [];\n\tlet closing_stack_index8:\
  \ number[] = [];\n\tlet opening_stack_index9: number[] = [];\n\tlet closing_stack_index9:\
  \ number[] = [];\n\tlet opening_stack_index10: number[] = [];\n\tlet closing_stack_index10:\
  \ number[] = [];\n\tlet opening_stack_index11: number[] = [];\n\tlet closing_stack_index11:\
  \ number[] = [];\n\tlet opening_stack_index12: number[] = [];\n\tlet closing_stack_index12:\
  \ number[] = [];\n\tlet opening_stack_index13: number[] = [];\n\tlet closing_stack_index13:\
  \ number[] = [];\n\tlet opening_stack_index14: number[] = [];\n\tlet closing_stack_index14:\
  \ number[] = [];\n\tlet opening_stack_index15: number[] = [];\n\tlet closing_stack_index15:\
  \ number[] = [];\n\tlet opening_stack_index16: number[] = [];\n\tlet closing_stack_index16:\
  \ number[] = [];\n\tlet opening_stack_index17: number[] = [];\n\tlet closing_stack_index17:\
  \ number[] = [];\n\tlet opening_stack_index18: number[] = [];\n\tlet closing_stack_index18:\
  \ number[] = [];\n\tlet opening_stack_index19: number[] = [];\n\tlet closing_stack_index19:\
  \ number[] = [];\n\tlet opening_stack_index20: number[] = [];\n\tlet closing_stack_index"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) return false;\n\t\t\tstack.push(bracket);\n\t\t} else if (bracket === \"\
  >\") {\n\t\t\tif (stack.length !== 1) return false;\n\t\t\tstack.pop();\n\t\t} else\
  \ {\n\t\t\tif (stack.length !== 0) return false;\n\t\t}\n\t}\n\treturn (stack.length\
  \ === 0);\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket === \"<\") {\n\t\t\topening_brackets.push(i);\n\t\t} else if (bracket\
  \ === \">\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tif (opening_brackets.length\
  \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i <\
  \ opening_brackets.length; ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
  \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
  \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
  \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
  \ = brackets[i];\n\t\tif (bracket.match(/[<>]/)) {\n\t\t\tstack.push(bracket);\n\
  \t\t\topening_brackets.push(i);\n\t\t} else if (bracket.match(/[<>]/)) {\n\t\t\t\
  closing_brackets.push(i);\n\t\t}\n\t}\n\n\twhile (stack.length > 0) {\n\t\tlet opening\
  \ = stack.pop();\n\t\tlet closing = closing_brackets.pop();\n\t\tif (opening < closing)\
  \ {\n\t\t\topening_brackets.push(closing);\n\t\t\tclosing_brackets.push(opening);\n\
  \t\t}\n\t}\n\n\treturn opening_brackets.length == 0;\n}\n"
- "\tlet opening_brackets: number[] = [];\n\tlet closing_brackets: number[] = [];\n\
  \tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\
  \tif (bracket.charAt(0) === '<') {\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\t\
  else if (bracket.charAt(0) === '>') {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
  }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (closing_bracket === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_brackets_length\
  \ = opening_brackets.length - 1;\n\t\tlet closing_brackets_length = closing_brackets.length\
  \ - 1;\n\t\tlet opening_brackets_index = opening_bracket;\n\t\tlet closing_brackets_index\
  \ = closing_bracket;\n\t\twhile (opening_brackets_index < opening_brackets_length\
  \ &&\n\t\t\tclosing_brackets_index >= 0) {\n\t\t\tlet opening_brackets_index_next\
  \ = opening_brackets_index + 1;\n\t\t\tlet closing_brackets_index_next = closing_brackets_index\
  \ - 1;\n\t\t\tif (opening_brackets[opening_brackets_index_next] === closing_brackets[closing_brackets_index_next])\
  \ {\n\t\t\t\topening_brackets_index = opening_brackets_index_next;\n\t\t\t\tclosing_brackets_index\
  \ = closing_brackets_index_next;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t}\n\t\tif (opening_brackets_index === opening_brackets_length) {\n\t\
  \t\treturn closing_brackets_index === closing_brackets_length;\n\t\t}\n\t\telse\
  \ if (closing_brackets_index === closing_brackets_length) {\n\t\t\treturn opening_brackets_index\
  \ === opening_brackets_index;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t\
  }\n\treturn true;\n}\n"
- "\tlet stack: string[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\t\
  let bracket = brackets[i];\n\t\tif (bracket === \"<\") {\n\t\t\tif (stack.length\
  \ !== 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.push(bracket);\n\t\t} else\
  \ if (bracket === \">\") {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false;\n\
  \t\t\t}\n\t\t\tstack.pop();\n\t\t} else {\n\t\t\tif (stack.length !== 0) {\n\t\t\
  \t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n"
- "\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets = brackets.split(\"\
  \").reverse();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
  \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tif\
  \ (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
  \ true;\n}\n"
language: ts
name: HumanEval_56_correct_bracketing
prompt: '//brackets is a string of "<" and ">".

  // return True if every opening bracket has a corresponding closing bracket.

  // >>> correct_bracketing("<")

  // False

  // >>> correct_bracketing("<>")

  // True

  // >>> correct_bracketing("<<><>>")

  // True

  // >>> correct_bracketing("><<>")

  // False

  function correct_bracketing(brackets: string): boolean {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
  ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
  <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
  <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>>><>\"),false);\n}\n\ntest();"
