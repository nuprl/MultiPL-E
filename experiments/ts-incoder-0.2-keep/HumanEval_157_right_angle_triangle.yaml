completions:
- "    if (a < b + c || a > b + c || a < b - c || a > b - c) {\n        return false;\n\
  \    }\n    return true;\n}\n"
- '    return (((b - a) * (c - b)) >= 0);

  }

  '
- '    return ((b - a) * (c - b) <= 0);

  }

  '
- "\treturn (\n\t\tMath.abs(b * b - a * c) >= 0 &&\n\t\tMath.abs(a * a * c - b * b)\
  \ >= 0\n\t);\n}\n"
- '  return (b - a) * (c - b) <= 0;

  }

  '
- '  return ((b - a) * (c - b) <= 0);

  }

  '
- '    return ((Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) == Math.pow(c, 2)) && (a
  != 0 && b != 0 && c != 0));

  }

  '
- "    let angle = Math.atan2(c, b);\n    let angle2 = Math.atan2(a, c);\n    if (angle\
  \ > angle2) {\n        return true;\n    } else {\n        return false;\n    }\n\
  }\n"
- "    return ((Math.sqrt(a * a + b * b - c * c) == Math.sqrt(a * a + b * b + c *\
  \ c)) ||\n            (Math.sqrt(a * a + c * c - b * b) == Math.sqrt(a * a + c *\
  \ c + b * b)) ||\n            (Math.sqrt(b * b + c * c - a * a) == Math.sqrt(b *\
  \ b + c * c + a * a)));\n}\n"
- "    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n    const\
  \ ab = a - b;\n    const bc = b - c;\n    const ac = a - c;\n    return ab >= 0\
  \ && bc >= 0 && ac >= 0;\n}\n"
- '  return ((b - a) * (c - b) <= 0);

  }

  '
- "    let ab: number = Math.abs(a - b);\n    let ac: number = Math.abs(a - c);\n\
  \    let bc: number = Math.abs(b - c);\n    let ab_ac: number = ab + ac;\n    let\
  \ bc_ac: number = bc + ac;\n    let ab_bc: number = ab + bc;\n    let bc_bc: number\
  \ = bc + bc;\n    return (ab_ac >= bc_ac) && (ab_bc >= bc_bc);\n}\n"
- "    if (a < b + c || b < a + c || c < a + b) {\n        return false;\n    }\n\
  \    return true;\n}\n"
- '    return (((b - a) * (c - b)) >= 0);

  }

  '
- "    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n    const\
  \ ab = a - b;\n    const bc = b - c;\n    const ac = a - c;\n    return ab > bc\
  \ && ab > ac;\n}\n"
- "  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  const ab = a\
  \ - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + bc;\n  return\
  \ abc === 0;\n}\n"
- '  return ((Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) == Math.pow(c, 2)) && (a
  != 0 || b != 0 || c != 0));

  }

  '
- "\treturn (\n\t\t(a + b > c && a + c > b && b + c > a) || \n\t\t(a + c > b && a\
  \ + b > c && b + c > a) || \n\t\t(b + c > a && a + b > c && a + c > b)\n\t);\n}\n"
- "    let ab: number = b - a\n    let ac: number = c - a\n    let bc: number = b\
  \ - c\n    let acb: number = ac * bc\n    let abbc: number = ab * bc\n    let abbcac:\
  \ number = abbc * ac\n    let abbcacab: number = abbcac * ab\n    let abbcacabbc:\
  \ number = abbcacab * bc\n    let abbcacabbcac: number = abbcacabbc * ac\n    let\
  \ abbcacabbcacab: number = abbcacabbcac * ab\n    let abbcacabbcacabbc: number =\
  \ abbcacabbcacab * bc\n    let abbcacabbcacabbcac: number = abbcacabbcacabbc * ac\n\
  \    let abbcacabbcacabbcacab: number = abbcacabbcacabbcac * ab\n    let abbcacabbcacabbcacabbc:\
  \ number = abbcacabbcacabbcacab * bc\n    let abbcacabbcacabbcacabbcac: number =\
  \ abbcacabbcacabbcacabbc * ac\n    let abbcacabbcacabbcacabbcacab: number = abbcacabbcacabbcacabbcac\
  \ * ab\n    let abbcacabbcacabbcacabbcacabbc: number = abbcacabbcacabbcacabbcac\
  \ * bc\n    let abbcacabbcacabbcacabbcacabbcac: number = abbcacabbcacabbcacabbcacab\
  \ * ac\n    let abbcacabbcacabbcacabbcacabbcacab: number = abbcacabbcacabbcacabbcacabbcac\
  \ * ab\n    let abbcacabbcacabbcacabbcacabbcacabbc: number = abbcacabbcacabbcacabbcacabbcac\
  \ * bc\n    let abbcacabbcacabbcacabbcacabbcacabbcac: number = abbcacabbcacabbcacabbcacabbcacab\
  \ * ac\n    let abbcacabbcacabbcacabbcacabbcacabbcacab: number = abbcacabbcacabbcacabbcacabbcacabbcac\
  \ * ab\n    let abbcacabbcacabbcacabbcacabbcacabbc"
- '    return ((b * b) - (4 * a * c)) === 0;

  }

  '
language: ts
name: HumanEval_157_right_angle_triangle
prompt: "//Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1,\
  \ 2, 3) == False\nfunction right_angle_triangle(a: number, b: number, c: number):\
  \ boolean {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
