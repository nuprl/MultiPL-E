completions:
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n\
  \  const p = l[0];\n  for (let i = 1; i < n; ++i) {\n    if (l[i] < p) {\n     \
  \ return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    } else if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  const n = l.length;\n  if (n === 0) return true;\n  if (n === 1) return l[0]\
  \ >= l[1];\n  if (n === 2) return l[0] > l[1] && l[0] >= l[2];\n  if (n === 3) return\
  \ l[0] > l[1] && l[1] > l[2] && l[0] >= l[3];\n  if (n === 4) return l[0] > l[1]\
  \ && l[1] > l[2] && l[2] > l[3] && l[0] >= l[4];\n  if (n === 5) return l[0] > l[1]\
  \ && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[1] >= l[5];\n  if (n === 6)\
  \ return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5]\
  \ && l[1] >= l[6];\n  if (n === 7) return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\
  \ && l[3] >= l[4] && l[2] >= l[5] && l[3] >= l[6] && l[1] >= l[7];\n  if (n ===\
  \ 8) return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[2] >=\
  \ l[5] && l[3] >= l[6] && l[4] >= l[7];\n  if (n === 9) return l[0] > l[1] && l[1]\
  \ > l[2] && l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5] && l[3] >= l[6] && l[4]\
  \ >= l[7] && l[5] >= l[8];\n  if (n === 10) return l[0] > l[1] && l[1] > l[2] &&\
  \ l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5] && l[3] >= l[6] && l[4] >= l[7] &&\
  \ l[5] >= l[8] && l[6] >= l[9];\n  if (n === 11) return l[0] > l[1] && l[1] > l[2]\
  \ && l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5] && l[3] >= l[6] && l[4] >= l[7]\
  \ && l[5] >= l[8] && l[6] >= l[9] && l[7] >= l[10];\n  if (n === 12) return l[0]\
  \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5] && l[3] >=\
  \ l[6] && l[4] >= l[7] && l[5] >= l[8] && l[6] >= l[9] && l[7] >= l[10"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < first) {\n      return false;\n  \
  \  }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
  \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    const m = (i + j)\
  \ >> 1;\n    if (l[m] < l[i]) j = m;\n    else i = m;\n  }\n  return l[j] > l[i];\n\
  }\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n\
  \  if (l[0] > l[1]) return true;\n  if (l[0] === l[1]) return true;\n  for (let\
  \ i = 1; i < n; ++i) {\n    if (l[i] > l[i - 1]) return false;\n  }\n  return true;\n\
  }\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j])\
  \ {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j])\
  \ {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  const n = l.length;\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1)\
  \ {\n    return l[0] >= l[1];\n  }\n  const m = l[n - 1];\n  for (let i = n - 2;\
  \ i >= 0; --i) {\n    if (l[i] < m && l[i + 1] > m) {\n      return false;\n   \
  \ }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
  \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j\
  \ < l.length) {\n      if (l[j] < l[i]) {\n        break;\n      }\n      j++;\n\
  \    }\n    if (j === l.length) {\n      return true;\n    }\n    while (j < l.length)\
  \ {\n      if (l[j] > l[i]) {\n        break;\n      }\n      j++;\n    }\n    if\
  \ (j === l.length) {\n      return false;\n    }\n    while (j < l.length) {\n \
  \     if (l[j] < l[i]) {\n        break;\n      }\n      j++;\n    }\n    if (j\
  \ === l.length) {\n      return true;\n    }\n    while (j < l.length) {\n     \
  \ if (l[j] > l[i]) {\n        break;\n      }\n      j++;\n    }\n    if (j ===\
  \ l.length) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n\
  \  if (l[0] > l[n - 1]) return false;\n  if (l[0] === l[n - 1]) return true;\n \
  \ for (let i = 1; i < n; ++i) {\n    if (l[i] > l[i - 1]) return false;\n    if\
  \ (l[i] === l[i - 1]) return true;\n  }\n  return false;\n}\n"
- "  let prev: number[] = [];\n  let cur: number[] = [];\n  for (let i = 0; i < l.length;\
  \ i++) {\n    if (l[i] > prev[i]) {\n      cur.push(l[i]);\n    } else {\n     \
  \ if (cur.length > 0) {\n        if (l[i] < cur[cur.length - 1]) {\n          return\
  \ false;\n        }\n        cur.pop();\n      }\n      prev.push(l[i]);\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return true;\n    }\n    if (current > first) {\n      return false;\n\
  \    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[j]\
  \ < l[i]) {\n      i++;\n    } else if (l[j] > l[i]) {\n      j++;\n    } else {\n\
  \      return true;\n    }\n  }\n  return false;\n}\n"
- "  let isIncreasing = true;\n  let isDecreasing = true;\n  for (let i = 0; i < l.length;\
  \ i++) {\n    const curr = l[i];\n    if (curr <= l[i - 1]) {\n      isIncreasing\
  \ = false;\n    }\n    if (curr >= l[i - 1]) {\n      isDecreasing = false;\n  \
  \  }\n  }\n  return isIncreasing || isDecreasing;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  let prev: number[] = [];\n  let curr: number[] = [];\n  for (let i = 0; i < l.length;\
  \ i++) {\n    prev[i] = curr[i] = l[i];\n  }\n  for (let i = 1; i < l.length; i++)\
  \ {\n    if (l[i] !== prev[i - 1]) {\n      curr[i] = prev[i - 1];\n    } else {\n\
  \      curr[i] = l[i];\n    }\n  }\n  return curr[l.length - 1] === l[l.length -\
  \ 1];\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return true;\n    } else if (currentValue > firstValue)\
  \ {\n      return false;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return true;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return false;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  let\
  \ lastValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const currentValue\
  \ = l[i];\n    if (currentValue < firstValue) {\n      firstValue = currentValue;\n\
  \    }\n    if (currentValue > lastValue) {\n      lastValue = currentValue;\n \
  \   }\n  }\n  return firstValue <= lastValue;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < first) {\n      return false;\n  \
  \  }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return true;\n    } else if (currentValue > firstValue)\
  \ {\n      return false;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  const n = l.length;\n  if (n <= 1) {\n    return true;\n  }\n  let i = 0;\n \
  \ let j = n - 1;\n  while (i < j) {\n    const m = l[i];\n    const k = l[j];\n\
  \    if (m > k && m > l[++i]) {\n      return false;\n    }\n    if (k < m && k\
  \ < l[--j]) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n  \
  \  }\n    i++;\n    j--;\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "    if (l.length === 0) {\n        return false;\n    }\n    const n = l.length;\n\
  \    if (n === 1) {\n        return l[0] >= l[1];\n    }\n    const m = l[n - 1];\n\
  \    for (let i = n - 2; i >= 0; --i) {\n        if (l[i] < m && l[i + 1] > m) {\n\
  \            return false;\n        }\n    }\n    return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  let isIncreasing = true;\n  let isDecreasing = true;\n  for (let i = 0; i < l.length;\
  \ i++) {\n    const curr = l[i];\n    if (curr <= l[i - 1]) {\n      isIncreasing\
  \ = false;\n    }\n    if (curr >= l[i - 1]) {\n      isDecreasing = false;\n  \
  \  }\n  }\n  return isIncreasing || isDecreasing;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n\
  \  const p = l[0], q = l[1], i = 2, k;\n  while (i < n) {\n    k = p;\n    p = q;\n\
  \    q = l[i];\n    if (p < q) k = q, l = p, i = ++i;\n  }\n  return k === p;\n\
  }\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
  \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n"
- "    if (l.length === 0) {\n        return false;\n    }\n    const n = l[0];\n\
  \    for (let i = 1; i < l.length; i++) {\n        if (l[i] < n) {\n           \
  \ return false;\n        }\n    }\n    return true;\n}\n"
- "  let prev: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]\
  \ !== prev[prev.length - 1]) {\n      prev[prev.length] = l[i];\n    } else {\n\
  \      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  let n = l.length;\n  if (n < 2) {\n    return true;\n  }\n  let first = 0;\n\
  \  let last = n - 1;\n  while (last > first) {\n    const mid = Math.floor((first\
  \ + last) / 2);\n    if (l[mid] < l[first]) {\n      first = mid + 1;\n    } else\
  \ {\n      last = mid - 1;\n    }\n  }\n  return l[first] === l[last];\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
  \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let prev = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n   \
  \ }\n    prev = l[i];\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    const m = (i + j)\
  \ >> 1;\n    if (l[m] < l[m + 1]) {\n      j = m;\n    } else {\n      i = m + 1;\n\
  \    }\n  }\n  return l[i] < l[l.length - 1];\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let prev = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n   \
  \ }\n    prev = l[i];\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i]\
  \ < l[j]) {\n      k = j;\n    } else {\n      j = i;\n    }\n    i++;\n  }\n  return\
  \ k === i;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return true;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return false;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let prev = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n   \
  \ }\n    prev = l[i];\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < first) {\n      return false;\n  \
  \  }\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = 1;\n  let k = 0;\n  while (i < l.length && j < l.length)\
  \ {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j++;\n\
  \    } else {\n      k++;\n    }\n  }\n  return k === l.length;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    } else if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstVal = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstVal) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i]\
  \ > l[j]) {\n      k = i;\n    } else {\n      j = i;\n    }\n    i++;\n    j++;\n\
  \  }\n  return k === i;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let monotonic = true;\n  while (i < l.length && j\
  \ < l.length) {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j])\
  \ {\n      j++;\n    } else {\n      monotonic = false;\n      break;\n    }\n \
  \ }\n  return monotonic;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  let k = l[0];\n  while (i < j) {\n   \
  \ if (l[i] < k) {\n      i++;\n    } else if (l[j] > k) {\n      j--;\n    } else\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "    if (l.length === 0) {\n        return false;\n    }\n    const n = l[0];\n\
  \    for (let i = 1; i < l.length; i++) {\n        if (l[i] < n) {\n           \
  \ return false;\n        }\n    }\n    return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n  \
  \  }\n    i++;\n    j--;\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  if (n\
  \ === 1) {\n    return l[0] >= 0;\n  }\n  const m = l[n - 1];\n  for (let i = n\
  \ - 2; i >= 0; i--) {\n    const a = l[i];\n    const b = l[i + 1];\n    if (a <\
  \ b && b > m) {\n      m = b;\n    }\n  }\n  return m >= 0;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n\
  \  const p = l[0];\n  for (let i = 1; i < n; ++i) {\n    if (l[i] <= p) return false;\n\
  \    if (l[i] > p) p = l[i];\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let first = l[0];\n  let last\
  \ = l[l.length - 1];\n  for (let i = 1; i < l.length; i++) {\n    const current\
  \ = l[i];\n    if (current < first) {\n      return false;\n    }\n    if (current\
  \ > last) {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstVal = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const val = l[i];\n    if (firstVal > val)\
  \ {\n      return false;\n    } else if (firstVal === val) {\n      if (i === l.length\
  \ - 1) {\n        return true;\n      }\n      firstVal = l[i + 1];\n    } else\
  \ {\n      return false;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n  \
  \  }\n    i++;\n    j--;\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
  \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \    if (l[i] > n) {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  let k = l[0];\n  while (i < j) {\n   \
  \ if (l[i] < k) {\n      i++;\n    } else if (l[j] > k) {\n      j--;\n    } else\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let prev: number[] = [];\n  let curr: number[] = [];\n  for (let i = 0; i < l.length;\
  \ i++) {\n    prev[i] = curr[i] = l[i];\n  }\n  for (let i = 1; i < l.length; i++)\
  \ {\n    if (prev[i] > curr[i]) {\n      return true;\n    }\n    if (prev[i] <\
  \ curr[i]) {\n      return false;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return\
  \ false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n\n  const firstValue = l[0];\n\
  \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
  \ (currentValue < firstValue) {\n      return true;\n    } else if (currentValue\
  \ > firstValue) {\n      return false;\n    }\n  }\n\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] <= l[j])\
  \ {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n  \
  \  }\n    i++;\n    j--;\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j])\
  \ {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  let i\
  \ = 0;\n  let j = n - 1;\n  while (i < j) {\n    const m = (i + j) >> 1;\n    if\
  \ (l[m] < l[m + 1]) {\n      j = m;\n    } else {\n      i = m;\n    }\n  }\n  return\
  \ l[j] === l[0];\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  let last;\n\
  \  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current\
  \ < first) {\n      return false;\n    }\n    if (current > last) {\n      return\
  \ true;\n    }\n    last = current;\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  let k = l[0];\n  while (i < j) {\n   \
  \ if (l[i] < k) {\n      i++;\n    } else if (l[j] > k) {\n      j--;\n    } else\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    const m = (i + j)\
  \ >> 1;\n    if (l[m] < l[m + 1]) {\n      j = m;\n    } else {\n      i = m + 1;\n\
  \    }\n  }\n  return l[i] < l[l.length - 1];\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    const m = (i + j)\
  \ >> 1;\n    if (l[m] < l[m + 1]) {\n      j = m;\n    } else {\n      i = m;\n\
  \    }\n  }\n  return l[i] < l[i - 1];\n}\n"
- "  let prev: number[] = l.slice();\n  for (let i = 0; i < l.length; i++) {\n   \
  \ if (l[i] !== prev[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let isMonotonic = true;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i\
  \ - 1] > l[i]) {\n      isMonotonic = false;\n      break;\n    }\n  }\n  return\
  \ isMonotonic;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < first) {\n      return false;\n  \
  \  }\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return j === i;\n}\n"
- "  let n = l.length;\n  if (n === 0) return true;\n  if (n === 1) return l[0] >=\
  \ l[1];\n  if (n === 2) return l[0] > l[1] && l[0] >= l[2];\n  if (n === 3) return\
  \ l[0] > l[1] && l[1] > l[2] && l[0] >= l[3];\n  if (n === 4) return l[0] > l[1]\
  \ && l[1] > l[2] && l[2] > l[3] && l[0] >= l[4];\n  if (n === 5) return l[0] > l[1]\
  \ && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[0] >= l[5];\n  if (n === 6)\
  \ return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[4] >= l[5]\
  \ && l[0] >= l[6];\n  if (n === 7) return l[0] > l[1] && l[1] > l[2] && l[2] > l[3]\
  \ && l[3] >= l[4] && l[4] >= l[5] && l[5] >= l[6] && l[0] >= l[7];\n  if (n ===\
  \ 8) return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[4] >=\
  \ l[5] && l[5] >= l[6] && l[6] >= l[7] && l[0] >= l[8];\n  if (n === 9) return l[0]\
  \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5] >=\
  \ l[6] && l[6] >= l[7] && l[7] >= l[8] && l[0] >= l[9];\n  if (n === 10) return\
  \ l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[4] >= l[5] && l[5]\
  \ >= l[6] && l[6] >= l[7] && l[7] >= l[8] && l[8] >= l[9] && l[0] >= l[10];\n  if\
  \ (n === 11) return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] &&\
  \ l[4] >= l[5] && l[5] >= l[6] && l[6] >= l[7] && l[7] >= l[8] && l[8] >= l[9] &&\
  \ l[9] >= l[10] && l[0] >= l[11];\n  if (n === 12) return l[0] > l[1] && l[1] >\
  \ l[2] && l[2] > l[3] && l[3] >= l[4] && l[4] "
- "  let n = l.length;\n  if (n < 2) {\n    return true;\n  }\n  let first = 0;\n\
  \  let last = n - 1;\n  let mid = 0;\n  while (first < last) {\n    mid = first\
  \ + Math.floor((last - first) / 2);\n    if (l[mid] < l[first]) {\n      first =\
  \ mid + 1;\n    } else {\n      last = mid - 1;\n    }\n  }\n  return l[first] ===\
  \ l[last];\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i]\
  \ < l[j]) {\n      k = j;\n      j = i;\n      i = k;\n    } else if (l[i] > l[j])\
  \ {\n      k = j;\n      j = i;\n      i = k;\n    } else {\n      i++;\n      j++;\n\
  \    }\n  }\n  return j - i === 1;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  const n = l.length;\n  if (n < 2) {\n    return true;\n  }\n  const a0 = l[0],\
  \ a1 = l[1], a2 = l[2], a3 = l[3];\n  for (let i = 1; i < n; ++i) {\n    const a4\
  \ = l[i];\n    if (a0 > a4) {\n      return false;\n    }\n    if (a3 > a4) {\n\
  \      return true;\n    }\n    if (a2 < a1) {\n      return false;\n    }\n   \
  \ if (a3 < a1) {\n      return true;\n    }\n    if (a2 < a0) {\n      return false;\n\
  \    }\n    if (a3 < a0) {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  const firstValue = l[0];\n\
  \  for (let i = 1; i < n; ++i) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) return false;\n    if (currentValue > firstValue) break;\n  }\n\
  \  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n\n  let firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return\
  \ false;\n    }\n  }\n\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let prev = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n   \
  \ }\n    prev = l[i];\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return true;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return false;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let prev = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n   \
  \ }\n    prev = l[i];\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = 1;\n  let k = l.length - 1;\n  while (i < k && j < k) {\n\
  \    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j++;\n\
  \    } else {\n      i++;\n      j++;\n    }\n  }\n  return i === j;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j\
  \ < l.length) {\n      if (l[j] < l[i]) {\n        return false;\n      }\n    \
  \  j++;\n    }\n    while (j < l.length) {\n      if (l[j] > l[i]) {\n        return\
  \ false;\n      }\n      j++;\n    }\n    i++;\n    j = 0;\n  }\n  return true;\n\
  }\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m > n) {\n      return\
  \ false;\n    } else if (m === n) {\n      return true;\n    }\n  }\n  return false;\n\
  }\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n\
  \  const p = l[0], s = l[0], e = l[0], i;\n  for (i = 1; i < n; ++i) {\n    p =\
  \ l[i];\n    if (p < s) {\n      s = p;\n    } else if (p > e) {\n      e = p;\n\
  \    }\n  }\n  return e < s;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
  \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n\
  \  if (l[0] < l[1]) return true;\n  if (l[0] > l[1]) return false;\n  for (let i\
  \ = 1; i < n; ++i) {\n    if (l[i] < l[i - 1]) return false;\n    if (l[i] > l[i\
  \ - 1]) return true;\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n\n  const firstValue = l[0];\n\
  \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
  \ (currentValue < firstValue) {\n      return false;\n    }\n  }\n\n  return true;\n\
  }\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  if (n\
  \ === 1) {\n    return l[0] > l[1];\n  }\n  let i = 0;\n  let j = n - 1;\n  while\
  \ (i < j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[m + 1]) {\n      j =\
  \ m;\n    } else {\n      i = m + 1;\n    }\n  }\n  return l[i] > l[n - 1];\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] <= l[j])\
  \ {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  const firstValue = l[0];\n\
  \  for (let i = 1; i < n; ++i) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  const n = l.length;\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1)\
  \ {\n    return l[0] >= l[1];\n  }\n  let i = 0;\n  let j = n - 1;\n  while (i <\
  \ j) {\n    const m = (i + j) >> 1;\n    if (l[m] < l[i]) {\n      j = m;\n    }\
  \ else {\n      i = m;\n    }\n  }\n  return l[i] >= l[n - 1];\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j])\
  \ {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length && j < l.length)\
  \ {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j++;\n\
  \    } else {\n      k++;\n    }\n  }\n  return k === l.length;\n}\n"
- "  const n = l.length;\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1)\
  \ {\n    return l[0] >= l[1];\n  }\n  const m = l[n - 1];\n  for (let i = n - 2;\
  \ i >= 0; --i) {\n    if (l[i] < m && l[i + 1] > m) {\n      return false;\n   \
  \ }\n  }\n  return true;\n}\n"
- "  const n = l.length;\n  if (n === 0) return true;\n  if (n === 1) return false;\n\
  \  const p = l[0];\n  for (let i = 1; i < n; ++i) {\n    if (l[i] <= p) {\n    \
  \  return false;\n    }\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j])\
  \ {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n     \
  \ return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < first) {\n      return false;\n  \
  \  }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  if (n\
  \ <= 2) {\n    return true;\n  }\n  const m = l[n - 1];\n  for (let i = n - 2; i\
  \ >= 0; i--) {\n    if (l[i] < m && l[i + 1] > m) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ const lastValue = l[l.length - 1];\n  return firstValue <= lastValue && l.every(function\
  \ (v, i) {\n    return v === firstValue || (v === lastValue && i === l.length -\
  \ 1);\n  });\n}\n"
- "  let i = 0;\n  let j = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i]\
  \ < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j++;\n    } else {\n\
  \      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] <= l[j])\
  \ {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  const n = l.length;\n  if (n < 2) {\n    return true;\n  }\n  const firstValue\
  \ = l[0];\n  const lastValue = l[n - 1];\n  for (let i = 1; i < n; ++i) {\n    const\
  \ currentValue = l[i];\n    if (currentValue < firstValue) {\n      return false;\n\
  \    } else if (currentValue > lastValue) {\n      return true;\n    }\n  }\n  return\
  \ false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "    if (l.length === 0) {\n        return true;\n    }\n    const n = l[0];\n \
  \   for (let i = 1; i < l.length; i++) {\n        if (l[i] < n) {\n            return\
  \ false;\n        }\n    }\n    return true;\n}\n"
- "  let isIncreasing = true;\n  let isDecreasing = true;\n  for (let i = 0; i < l.length;\
  \ i++) {\n    if (l[i] > l[i + 1]) {\n      isIncreasing = false;\n    } else if\
  \ (l[i] < l[i + 1]) {\n      isDecreasing = false;\n    }\n  }\n  return isIncreasing\
  \ || isDecreasing;\n}\n"
- "    if (l.length === 0) {\n        return false;\n    }\n    const first = l[0];\n\
  \    const last = l[l.length - 1];\n    if (first < last) {\n        return true;\n\
  \    }\n    return false;\n}"
- "  let i = 0;\n  let j = l.length - 1;\n  let k = l[0];\n  while (i < j) {\n   \
  \ if (l[i] < k) {\n      i++;\n    } else if (l[j] > k) {\n      j--;\n    } else\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n  \
  \  }\n    i++;\n    j--;\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i]\
  \ < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j++;\n    } else {\n\
  \      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l.length;\n  if (n\
  \ === 1) {\n    return l[0] >= 0;\n  }\n  const m = l[n - 1];\n  for (let i = n\
  \ - 2; i >= 0; i--) {\n    if (l[i] < m && l[i + 1] > m) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  let prev: number[] = [];\n  let curr = l;\n  let next: number[] = [];\n  while\
  \ (curr.length > 0) {\n    next.push(curr[0]);\n    curr = curr.slice(1);\n  }\n\
  \  while (next.length > 0) {\n    if (curr[0] > next[0]) {\n      return true;\n\
  \    }\n    prev = curr;\n    curr = next;\n    next = [];\n    while (curr.length\
  \ > 0) {\n      next.push(curr[0]);\n      curr = curr.slice(1);\n    }\n  }\n \
  \ return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
  \ (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue) {\n      return false;\n\
  \    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let first = l[0];\n  let last\
  \ = l[l.length - 1];\n  for (let i = 1; i < l.length; i++) {\n    const current\
  \ = l[i];\n    if (current < first) {\n      return false;\n    }\n    if (current\
  \ > last) {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    const m = (i + j)\
  \ >> 1;\n    if (l[m] < l[m + 1]) {\n      j = m;\n    } else {\n      i = m + 1;\n\
  \    }\n  }\n  return l[i] < l[l.length - 1];\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    const m = (i + j)\
  \ >> 1;\n    if (l[m] < l[i]) j = m;\n    else i = m;\n  }\n  return l[j] > l[i];\n\
  }\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    } else if (currentValue > firstValue)\
  \ {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return j === i;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n\n  const firstValue = l[0];\n\
  \  for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if\
  \ (currentValue < firstValue) {\n      return false;\n    }\n    if (currentValue\
  \ > firstValue) {\n      return true;\n    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  let first = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first)\
  \ {\n      return false;\n    }\n    if (current > first) {\n      return true;\n\
  \    }\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ let lastValue = firstValue;\n  for (let i = 1; i < l.length; i++) {\n    const\
  \ currentValue = l[i];\n    if (currentValue < firstValue) {\n      return false;\n\
  \    }\n    if (currentValue > lastValue) {\n      return true;\n    }\n    lastValue\
  \ = currentValue;\n  }\n  return false;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const firstValue = l[0];\n \
  \ for (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
  \ < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
  \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n  \
  \  }\n    i++;\n    j--;\n  }\n  return false;\n}\n"
- "  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n\
  \  const p = l[0], q = l[1], m = l[2], l = l[3], r = l[4];\n  if (p < q) swap(p,\
  \ q, l);\n  if (p > q) swap(p, q, r);\n  if (m < q) swap(m, q, l);\n  if (m > q)\
  \ swap(m, q, r);\n  if (l < q) swap(l, q, l);\n  if (l > q) swap(l, q, r);\n  return\
  \ p < q;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j])\
  \ {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
  \ i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n    }\n\
  \  }\n  return true;\n}\n"
- "  let prev: number[] = [];\n  let cur: number[] = [];\n  for (let i = 0; i < l.length;\
  \ i++) {\n    cur[i] = l[i];\n    if (cur[i] < prev[i]) {\n      return true;\n\
  \    } else if (cur[i] > prev[i]) {\n      return false;\n    }\n    prev[i] = cur[i];\n\
  \  }\n  return false;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] <= l[j])\
  \ {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return j - i < 1;\n}\n"
- "  const n = l.length;\n  if (n === 0) return true;\n  if (n === 1) return false;\n\
  \  const p = l[0], s = l[1];\n  for (let i = 2; i < n; ++i) {\n    const q = l[i];\n\
  \    if (q < p) return false;\n    if (q > p) p = q;\n  }\n  return true;\n}\n"
- "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j])\
  \ {\n      i++;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n     \
  \ i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n"
- "  let n = l.length;\n  if (n < 2) {\n    return false;\n  }\n  let firstValue =\
  \ l[0];\n  let lastValue = l[n - 1];\n  for (let i = 1; i < n; ++i) {\n    if (l[i]\
  \ < firstValue) {\n      return false;\n    }\n    if (l[i] > lastValue) {\n   \
  \   return true;\n    }\n  }\n  return false;\n}\n"
language: ts
name: HumanEval_57_monotonic
prompt: '//Return True is list elements are monotonically increasing or decreasing.

  // >>> monotonic([1, 2, 4, 20])

  // True

  // >>> monotonic([1, 20, 4, 10])

  // False

  // >>> monotonic([4, 1, 0, -10])

  // True

  function monotonic(l: number[]): boolean {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
