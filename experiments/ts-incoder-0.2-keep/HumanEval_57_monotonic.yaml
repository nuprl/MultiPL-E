name: HumanEval_57_monotonic
language: humaneval_to_typescript.py
prompt: "//Return True is list elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n\
  // >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  const n = l.length;\n  if (n === 0) return false;\n  if (n === 1)\
    \ return true;\n  const p = l[0];\n  for (let i = 1; i < n; ++i) {\n    if (l[i]\
    \ < p) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i\
    \ < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n\
    \      return false;\n    } else if (current > first) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  const n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ < n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  const n =\
    \ l.length;\n  if (n === 0) return true;\n  if (n === 1) return l[0] >= l[1];\n\
    \  if (n === 2) return l[0] > l[1] && l[0] >= l[2];\n  if (n === 3) return l[0]\
    \ > l[1] && l[1] > l[2] && l[0] >= l[3];\n  if (n === 4) return l[0] > l[1] &&\
    \ l[1] > l[2] && l[2] > l[3] && l[0] >= l[4];\n  if (n === 5) return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[1] >= l[5];\n  if (n ===\
    \ 6) return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[2]\
    \ >= l[5] && l[1] >= l[6];\n  if (n === 7) return l[0] > l[1] && l[1] > l[2] &&\
    \ l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5] && l[3] >= l[6] && l[1] >= l[7];\n\
    \  if (n === 8) return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4]\
    \ && l[2] >= l[5] && l[3] >= l[6] && l[4] >= l[7];\n  if (n === 9) return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5] && l[3]\
    \ >= l[6] && l[4] >= l[7] && l[5] >= l[8];\n  if (n === 10) return l[0] > l[1]\
    \ && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5] && l[3] >= l[6]\
    \ && l[4] >= l[7] && l[5] >= l[8] && l[6] >= l[9];\n  if (n === 11) return l[0]\
    \ > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4] && l[2] >= l[5] && l[3]\
    \ >= l[6] && l[4] >= l[7] && l[5] >= l[8] && l[6] >= l[9] && l[7] >= l[10];\n\
    \  if (n === 12) return l[0] > l[1] && l[1] > l[2] && l[2] > l[3] && l[3] >= l[4]\
    \ && l[2] >= l[5] && l[3] >= l[6] && l[4] >= l[7] && l[5] >= l[8] && l[6] >= l[9]\
    \ && l[7] >= l[10", "  if (l.length === 0) {\n    return false;\n  }\n  const\
    \ n = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n   \
    \   return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n\
    \    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < first) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] < n) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if (l.length === 0) {\n    return false;\n\
    \  }\n  let firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if\
    \ (l[i] < firstValue) {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  if (l.length === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    const m = l[i];\n    if (m <= n) {\n      return\
    \ false;\n    }\n    n = m;\n  }\n  return true;\n}\n", "  let i = 0;\n  let j\
    \ = l.length - 1;\n  while (i < j) {\n    const m = (i + j) >> 1;\n    if (l[m]\
    \ < l[i]) j = m;\n    else i = m;\n  }\n  return l[j] > l[i];\n}\n", "  const\
    \ n = l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n \
    \ if (l[0] > l[1]) return true;\n  if (l[0] === l[1]) return true;\n  for (let\
    \ i = 1; i < n; ++i) {\n    if (l[i] > l[i - 1]) return false;\n  }\n  return\
    \ true;\n}\n", "  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n   \
    \ if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n\
    \    } else {\n      i++;\n      j--;\n    }\n  }\n  return i === j;\n}\n", " \
    \ if (l.length === 0) {\n    return false;\n  }\n  let firstValue = l[0];\n  for\
    \ (let i = 1; i < l.length; i++) {\n    const currentValue = l[i];\n    if (currentValue\
    \ < firstValue) {\n      return false;\n    }\n    if (currentValue > firstValue)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const current = l[i];\n    if (current < first) {\n      return\
    \ false;\n    }\n    if (current > first) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n", "  if (l.length === 0) {\n    return false;\n  }\n  let\
    \ firstValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < firstValue)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  let i = 0;\n  let\
    \ j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      i++;\n \
    \   } else if (l[i] > l[j]) {\n      j--;\n    } else {\n      i++;\n      j--;\n\
    \    }\n  }\n  return i === j;\n}\n", "  const n = l.length;\n  if (n === 0) {\n\
    \    return false;\n  }\n  if (n === 1) {\n    return l[0] >= l[1];\n  }\n  const\
    \ m = l[n - 1];\n  for (let i = n - 2; i >= 0; --i) {\n    if (l[i] < m && l[i\
    \ + 1] > m) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (l.length\
    \ === 0) {\n    return false;\n  }\n  const n = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    const m = l[i];\n    if (m <= n) {\n      return false;\n    }\n\
    \    n = m;\n  }\n  return true;\n}\n", "  let i = 0;\n  let j = 0;\n  let k =\
    \ 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] < l[i])\
    \ {\n        break;\n      }\n      j++;\n    }\n    if (j === l.length) {\n \
    \     return true;\n    }\n    while (j < l.length) {\n      if (l[j] > l[i])\
    \ {\n        break;\n      }\n      j++;\n    }\n    if (j === l.length) {\n \
    \     return false;\n    }\n    while (j < l.length) {\n      if (l[j] < l[i])\
    \ {\n        break;\n      }\n      j++;\n    }\n    if (j === l.length) {\n \
    \     return true;\n    }\n    while (j < l.length) {\n      if (l[j] > l[i])\
    \ {\n        break;\n      }\n      j++;\n    }\n    if (j === l.length) {\n \
    \     return false;\n    }\n    i++;\n  }\n  return false;\n}\n", "  const n =\
    \ l.length;\n  if (n === 0) return false;\n  if (n === 1) return true;\n  if (l[0]\
    \ > l[n - 1]) return false;\n  if (l[0] === l[n - 1]) return true;\n  for (let\
    \ i = 1; i < n; ++i) {\n    if (l[i] > l[i - 1]) return false;\n    if (l[i] ===\
    \ l[i - 1]) return true;\n  }\n  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
