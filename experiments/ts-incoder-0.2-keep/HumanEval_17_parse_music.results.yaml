language: ts
name: HumanEval_17_parse_music
results:
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music_notes: number[] = [];\n  let current_note\
    \ = 0;\n  let current_beat = 0;\n  let current_note_length = 0;\n  let current_note_length_in_beats\
    \ = 0;\n  let current_note_length_in_beats_without_rest = 0;\n  let current_note_length_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_length_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_length_in_beats_\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt1a2jzn3.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const notes: number[] = [];\n  let current_note = 0;\n\
    \  let current_beat = 0;\n  let current_duration = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_duration_in_beats = 0;\n  let current_note_duration_in_beats_without_rest\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats = 0;\n  let\
    \ current_note_duration_in_beats_without_rest_in_beats_without_rest = 0;\n  let\
    \ current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats =\
    \ 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest\
    \ = 0;\n  let current_note_duration_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats_without_rest_in_beats\
    \ = 0;\n  let current_note_duration\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxbkv4ty4.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const notes: number[] = [];\n  let current_note = 0;\n\
    \  let current_beat = 0;\n  let current_note_length = 0;\n  let current_beat_length\
    \ = 0;\n  let current_note_length_in_beat = 0;\n  let current_beat_length_in_beat\
    \ = 0;\n  let current_note_length_in_beat_without_rest = 0;\n  let current_beat_length_in_beat_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest = 0;\n  let\
    \ current_beat_length_in_beat_without_rest_without_rest = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_beat_length_in_beat_without_rest_without_rest_without_rest_without_rest_without_rest_without_rest\
    \ = 0;\n  let current_note_length_in_beat_without_rest_without_rest_without_rest_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3ew_urwx.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const notes: number[] = [];\n  let beats = 0;\n  for\
    \ (let i = 0; i < music_string.length; i++) {\n    const char = music_string[i];\n\
    \    if (char === 'o') {\n      notes.push(beats);\n      beats = 0;\n    } else\
    \ if (char === '|') {\n      beats += 1;\n    } else {\n      throw new Error('Unexpected\
    \ music character: ' + char);\n    }\n  }\n  notes.push(beats);\n  return notes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpkr83dd5g.js:32:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpkr83dd5g.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const notes: number[] = [];\n  let beat = 0;\n  let note\
    \ = '';\n  let note_index = 0;\n  let note_length = 0;\n  let note_octave = 0;\n\
    \  let note_duration = 0;\n  let note_duration_index = 0;\n  let note_duration_length\
    \ = 0;\n  let note_duration_octave = 0;\n  let note_duration_duration = 0;\n \
    \ let note_duration_duration_index = 0;\n  let note_duration_duration_length =\
    \ 0;\n  let note_duration_duration_octave = 0;\n  let note_duration_duration_duration\
    \ = 0;\n  let note_duration_duration_duration_index = 0;\n  let note_duration_duration_duration_length\
    \ = 0;\n  let note_duration_duration_duration_octave = 0;\n  let note_duration_duration_duration_duration\
    \ = 0;\n  let note_duration_duration_duration_duration_index = 0;\n  let note_duration_duration_duration_duration_length\
    \ = 0;\n  let note_duration_duration_duration_duration_octave = 0;\n  let note_duration_duration_duration_duration_duration\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_index = 0;\n \
    \ let note_duration_duration_duration_duration_duration_length = 0;\n  let note_duration_duration_duration_duration_duration_octave\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration = 0;\n\
    \  let note_duration_duration_duration_duration_duration_duration_index = 0;\n\
    \  let note_duration_duration_duration_duration_duration_duration_length = 0;\n\
    \  let note_duration_duration_duration_duration_duration_duration_octave = 0;\n\
    \  let note_duration_duration_duration_duration_duration_duration_duration = 0;\n\
    \  let note_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0;\n  let note_duration_duration_duration_duration_duration_duration_duration_duration_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc3yw9ve9.ts(74,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const notes: number[] = [];\n  let beat = 0;\n  let note\
    \ = 0;\n  let last_note = 0;\n  let last_beat = 0;\n  for (let i = 0; i < music_string.length;\
    \ i++) {\n    const char = music_string[i];\n    if (char === 'o') {\n      notes.push(note);\n\
    \      note = 0;\n      beat = 0;\n      last_note = note;\n      last_beat =\
    \ beat;\n    } else if (char === '|') {\n      note = note + 1;\n      beat =\
    \ beat + 1;\n      last_note = note;\n      last_beat = beat;\n    } else if (char\
    \ === '.') {\n      note = note + 1;\n      beat = beat + 1;\n      last_note\
    \ = note;\n      last_beat = beat;\n    } else {\n      note = note + 1;\n   \
    \   beat = beat + 1;\n      last_note = note;\n      last_beat = beat;\n    }\n\
    \  }\n  notes.push(note);\n  return notes;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmptmwlaix7.js:50:12)\n   \
    \ at Object.<anonymous> (/tmp/tmptmwlaix7.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    const notes: number[] = [];\n    let current_note =\
    \ 0;\n    let current_beat = 0;\n    let current_duration = 0;\n    let current_note_type\
    \ = '';\n    let current_note_duration = 0;\n    let current_note_octave = 0;\n\
    \    let current_note_note_duration = 0;\n    let current_note_note_octave = 0;\n\
    \    let current_note_note_octave = 0;\n    let current_note_note_duration = 0;\n\
    \    let current_note_note_duration = 0;\n    let current_note_note_duration =\
    \ 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n    let current_note_note_duration\
    \ = 0;\n    let current_note_note_duration = 0;\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvm_zz93r.ts(99,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music_notes: number[] = [];\n  let current_note\
    \ = 0;\n  let current_beat = 0;\n  let current_octave = 0;\n  let current_duration\
    \ = 0;\n  let current_duration_in_beats = 0;\n  let current_duration_in_octaves\
    \ = 0;\n  let current_duration_in_notes = 0;\n  let current_duration_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_octaves = 0;\n  let current_duration_in_notes_in_notes\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_beats = 0;\n  let current_duration_in_notes_in_notes_in_octaves\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_octaves = 0;\n  let\
    \ current_duration_in_notes_in_notes_in_notes_in_notes = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_octaves\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes =\
    \ 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_octaves\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_octaves\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_octaves\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_octaves\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_octaves\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_notes_in_beats\
    \ = 0;\n  let current_duration_in_notes_in_notes_in_notes_in_notes_in_notes_in_oct\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi_wpq6cn.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const notes: number[] = [];\n  let beats = 0;\n  let\
    \ note = '';\n  for (let i = 0; i < music_string.length; i++) {\n    const char\
    \ = music_string[i];\n    if (char === 'o') {\n      note = note === '' ? 'o'\
    \ : note + '|';\n      notes.push(note);\n      beats = 0;\n      note = '';\n\
    \    } else if (char === '|') {\n      note = note === '' ? 'o' : note + '|';\n\
    \      notes.push(note);\n      beats = 0;\n      note = '';\n    } else if (char\
    \ === '.') {\n      note = note === '' ? 'o' : note + '|';\n      notes.push(note);\n\
    \      beats = 0;\n      note = '';\n    } else if (char === 'o') {\n      note\
    \ = note === '' ? 'o' : note + '|';\n      notes.push(note);\n      beats = 0;\n\
    \      note = '';\n    } else if (char === ' ') {\n      note = note === '' ?\
    \ 'o' : note + '|';\n      notes.push(note);\n      beats = 0;\n      note = '';\n\
    \    } else {\n      note = note === '' ? 'o' : note + '|';\n      notes.push(note);\n\
    \      beats++;\n    }\n  }\n  return notes;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_n6kb9lf.ts(18,18): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp_n6kb9lf.ts(23,18): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp_n6kb9lf.ts(28,18): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp_n6kb9lf.ts(33,18): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp_n6kb9lf.ts(38,18): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp_n6kb9lf.ts(43,18): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659738860
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music_notes: number[] = [];\n  let current_note\
    \ = 0;\n  let current_beat = 0;\n  let current_beats_length = 0;\n  for (let i\
    \ = 0; i < music_string.length; i++) {\n    const char = music_string[i];\n  \
    \  if (char === 'o') {\n      music_notes.push(current_note);\n      current_note\
    \ = 0;\n      current_beat = 0;\n      current_beats_length = 0;\n    } else if\
    \ (char === '|') {\n      current_beats_length++;\n    } else if (char === '.')\
    \ {\n      current_note++;\n      current_beat++;\n      current_beats_length\
    \ = 1;\n    } else {\n      current_note++;\n      current_beats_length = 1;\n\
    \    }\n  }\n  music_notes.push(current_note);\n  return music_notes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpsiny3v2w.js:42:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpsiny3v2w.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738860
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music_array = music_string.split(' ');\n  const\
    \ music_length = music_array.length;\n  const music_beats: number[] = [];\n  for\
    \ (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n\
    \    if (music_note === 'o') {\n      music_beats.push(4);\n    } else if (music_note\
    \ === 'o|') {\n      music_beats.push(2);\n    } else if (music_note === '.|')\
    \ {\n      music_beats.push(1);\n    } else {\n      throw new Error('Music note\
    \ is not supported');\n    }\n  }\n  return music_beats;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_e_pnyr1.js:26\n            throw new Error('Music note is not\
    \ supported');\n            ^\n\nError: Music note is not supported\n    at parse_music\
    \ (/tmp/tmp_e_pnyr1.js:26:19)\n    at test (/tmp/tmp_e_pnyr1.js:34:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_e_pnyr1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    const music_notes: number[] = [];\n    let current_note\
    \ = 0;\n    let current_beat = 0;\n    let current_duration = 0;\n    let current_rest\
    \ = 0;\n    let current_rests = 0;\n    let current_rests_after_note = 0;\n  \
    \  let current_rests_after_beat = 0;\n    let current_rests_after_duration = 0;\n\
    \    let current_rests_after_beats = 0;\n    let current_rests_after_durations\
    \ = 0;\n    let current_rests_after_beats_after_note = 0;\n    let current_rests_after_beats_after_duration\
    \ = 0;\n    let current_rests_after_beats_after_durations = 0;\n    let current_rests_after_beats_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_note = 0;\n  \
    \  let current_rests_after_beats_after_durations_after_note = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_rests_after_beats_after_durations_after_notes = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_rests_after_beats_after_durations_after_notes = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_rests_after_beats_after_durations_after_notes = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_rests_after_beats_after_durations_after_notes = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_rests_after_beats_after_durations_after_notes = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_rests_after_beats_after_durations_after_notes = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_rests_after_beats_after_durations_after_notes = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_rests_after_beats_after_durations_after_notes = 0;\n    let current_rests_after_beats_after_durations_after_notes\
    \ = 0;\n    let current_rests_after_beats_after_durations_after_notes = 0;\n \
    \   let current_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7nc27bfo.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music_array = music_string.split(' ');\n  const\
    \ music_length = music_array.length;\n  const music_beats: number[] = [];\n  for\
    \ (let i = 0; i < music_length; i++) {\n    const music_note = music_array[i];\n\
    \    if (music_note === 'o') {\n      music_beats.push(4);\n    } else if (music_note\
    \ === 'o|') {\n      music_beats.push(2);\n    } else if (music_note === '.|')\
    \ {\n      music_beats.push(1);\n    } else {\n      music_beats.push(0);\n  \
    \  }\n  }\n  return music_beats;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpjjbhzmwt.js:34:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpjjbhzmwt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const notes: number[] = [];\n  let current_note = 0;\n\
    \  let current_beat = 0;\n  let current_duration = 0;\n  let current_note_type\
    \ = '';\n  let current_note_duration = 0;\n  let current_note_octave = 0;\n\n\
    \  for (let i = 0; i < music_string.length; i++) {\n    const char = music_string[i];\n\
    \    if (char === '|') {\n      current_note_type = 'half';\n      current_note_duration\
    \ = current_note_duration / 2;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === 'o') {\n      current_note_type = 'whole';\n      current_note_duration\
    \ = current_note_duration * 4;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === '.') {\n      current_note_type = 'quarter';\n      current_note_duration\
    \ = current_note_duration * 4;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === '|') {\n      current_note_type = 'half';\n      current_note_duration =\
    \ current_note_duration / 2;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === 'o') {\n      current_note_type = 'whole';\n      current_note_duration\
    \ = current_note_duration * 4;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === '.') {\n      current_note_type = 'quarter';\n      current_note_duration\
    \ = current_note_duration * 4;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === '|') {\n      current_note_type = 'half';\n      current_note_duration =\
    \ current_note_duration / 2;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === 'o') {\n      current_note_type = 'whole';\n      current_note_duration\
    \ = current_note_duration * 4;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === '.') {\n      current_note_type = 'quarter';\n      current_note_duration\
    \ = current_note_duration * 4;\n      current_note = current_note + current_note_duration;\n\
    \      current_beat = current_beat + current_note_duration;\n    } else if (char\
    \ === '|') {\n      current_note_type = 'half';\n      current_note_duration =\
    \ current_note_duration \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgw3nxr_8.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    const music_notes: number[] = [];\n    let current_note\
    \ = 0;\n    let current_beat = 0;\n    let current_duration = 0;\n    let current_note_type\
    \ = '';\n    let current_note_length = 0;\n    let current_note_duration = 0;\n\
    \    let current_note_octave = 0;\n    let current_note_note_length = 0;\n   \
    \ let current_note_note_duration = 0;\n    let current_note_note_octave = 0;\n\
    \    let current_note_note_note_length = 0;\n    let current_note_note_note_duration\
    \ = 0;\n    let current_note_note_note_octave = 0;\n    let current_note_note_note_note_length\
    \ = 0;\n    let current_note_note_note_note_duration = 0;\n    let current_note_note_note_note_octave\
    \ = 0;\n    let current_note_note_note_note_length = 0;\n    let current_note_note_note_note_duration\
    \ = 0;\n    let current_note_note_note_note_octave = 0;\n    let current_note_note_note_note_length\
    \ = 0;\n    let current_note_note_note_note_duration = 0;\n    let current_note_note_note_note_octave\
    \ = 0;\n    let current_note_note_note_note_length = 0;\n    let current_note_note_note_note_duration\
    \ = 0;\n    let current_note_note_note_note_octave = 0;\n    let current_note_note_note_note_length\
    \ = 0;\n    let current_note_note_note_note_duration = 0;\n    let current_note_note_note_note_octave\
    \ = 0;\n    let current_note_note_note_note_length = 0;\n    let current_note_note_note_note_duration\
    \ = 0;\n    let current_note_note_note_note_octave = 0;\n    let current_note_note_note_note_length\
    \ = 0;\n    let current_note_note_note_note_duration = 0;\n    let current_note_note_note_note_octave\
    \ = 0;\n    let current_note_note_note_note_length = 0;\n    let current_note_note_note_note_duration\
    \ = 0;\n    let current_note_note_note_note_octave = 0;\n    let current_note_note_note_note_length\
    \ = 0;\n    let current_note_note_note_note_duration = 0;\n    let current_note_note_note_note_octave\
    \ = 0;\n    let current_note_note_note_note_length = 0;\n    let current_note_note_note_note_duration\
    \ = 0;\n    let current_note_note_note_note_octave = 0;\n    let current_note_note_note_note_length\
    \ = 0;\n    let current_note_note_note_note_duration = 0;\n    let current_note_note_note_note_octave\
    \ = 0;\n    let current_note_note_note_note_length = 0;\n    let current_note_note_note_note_duration\
    \ = 0;\n    let current_note_note_note_note_octave = 0;\n    let current_note_note_note_note_length\
    \ = 0;\n    let current_note_note_note_note_duration = 0;\n    let current_note_note_note_note_octave\
    \ = 0;\n    let current_note_note_note_note_length = 0;\n    let current_note_note_note_note_duration\
    \ = 0;\n    let current_note_note_note_note_octave = 0;\n    let current_note_note_note_note_length\
    \ = 0;\n    let current_note_note_note_note_duration = 0;\n    let current_note_note_note_note_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkxbsitcf.ts(83,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  let notes: number[] = [];\n  let beats: number[] = [];\n\
    \  let notes_length: number = 0;\n  let beats_length: number = 0;\n  let notes_last_beat:\
    \ number = 0;\n  let beats_last_beat: number = 0;\n  let notes_last_note: string\
    \ = '';\n  let beats_last_note: string = '';\n  for (let i = 0; i < music_string.length;\
    \ i++) {\n    const char = music_string[i];\n    if (char === 'o') {\n      notes_length++;\n\
    \      notes_last_beat = beats_last_beat;\n      notes_last_note = notes_last_beat;\n\
    \      beats_last_beat = 0;\n      beats_last_note = '';\n    } else if (char\
    \ === '|') {\n      notes_length++;\n      notes_last_beat = beats_last_beat;\n\
    \      notes_last_note = notes_last_beat;\n      beats_last_beat = 0;\n      beats_last_note\
    \ = '';\n    } else if (char === '.') {\n      notes_length++;\n      notes_last_beat\
    \ = beats_last_beat;\n      notes_last_note = notes_last_beat;\n      beats_last_beat\
    \ = 0;\n      beats_last_note = '';\n    } else if (char === 'o') {\n      notes_length++;\n\
    \      notes_last_beat = beats_last_beat;\n      notes_last_note = notes_last_beat;\n\
    \      beats_last_beat = 0;\n      beats_last_note = '';\n    } else if (char\
    \ === '.') {\n      notes_length++;\n      notes_last_beat = beats_last_beat;\n\
    \      notes_last_note = notes_last_beat;\n      beats_last_beat = 0;\n      beats_last_note\
    \ = '';\n    } else if (char === 'o') {\n      notes_length++;\n      notes_last_beat\
    \ = beats_last_beat;\n      notes_last_note = notes_last_beat;\n      beats_last_beat\
    \ = 0;\n      beats_last_note = '';\n    } else if (char === '.') {\n      notes_length++;\n\
    \      notes_last_beat = beats_last_beat;\n      notes_last_note = notes_last_beat;\n\
    \      beats_last_beat = 0;\n      beats_last_note = '';\n    } else if (char\
    \ === 'o') {\n      notes_length++;\n      notes_last_beat = beats_last_beat;\n\
    \      notes_last_note = notes_last_beat;\n      beats_last_beat = 0;\n      beats_last_note\
    \ = '';\n    } else if (char === '.') {\n      notes_length++;\n      notes_last_beat\
    \ = beats_last_beat;\n      notes_last_note = notes_last_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptcoy4aak.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music_notes: number[] = [];\n  let current_note\
    \ = 0;\n  let current_beat = 0;\n  let current_duration = 0;\n  let current_note_type\
    \ = '';\n  let current_note_duration = 0;\n  let current_note_note = '';\n  let\
    \ current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_octave\
    \ = 0;\n  let current_note_duration = 0;\n  let current_note_octave = 0;\n  let\
    \ current_note_duration = 0;\n  let current_note_octave = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let\
    \ current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_octave\
    \ = 0;\n  let current_note_duration = 0;\n  let current_note_octave = 0;\n  let\
    \ current_note_duration = 0;\n  let current_note_octave = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let\
    \ current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_octave\
    \ = 0;\n  let current_note_duration = 0;\n  let current_note_octave = 0;\n  let\
    \ current_note_duration = 0;\n  let current_note_octave = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let\
    \ current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_octave\
    \ = 0;\n  let current_note_duration = 0;\n  let current_note_octave = 0;\n  let\
    \ current_note_duration = 0;\n  let current_note_octave = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let\
    \ current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_octave\
    \ = 0;\n  let current_note_duration = 0;\n  let current_note_octave = 0;\n  let\
    \ current_note_duration = 0;\n  let current_note_octave = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let\
    \ current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_octave\
    \ = 0;\n  let current_note_duration = 0;\n  let current_note_octave = 0;\n  let\
    \ current_note_duration = 0;\n  let current_note_octave = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let\
    \ current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_octave\
    \ = 0;\n  let current_note_duration = 0;\n  let current_note_octave = 0;\n  let\
    \ current_note_duration = 0;\n  let current_note_octave = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let\
    \ current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_vmun7d3.ts(104,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music_notes: number[] = [];\n  let current_note\
    \ = 0;\n  let current_beat = 0;\n  let current_duration = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_duration_index = 0;\n  let current_note_duration_index2\
    \ = 0;\n  let current_note_duration_index3 = 0;\n  let current_note_duration_index4\
    \ = 0;\n  let current_note_duration_index5 = 0;\n  let current_note_duration_index6\
    \ = 0;\n  let current_note_duration_index7 = 0;\n  let current_note_duration_index8\
    \ = 0;\n  let current_note_duration_index9 = 0;\n  let current_note_duration_index10\
    \ = 0;\n  let current_note_duration_index11 = 0;\n  let current_note_duration_index12\
    \ = 0;\n  let current_note_duration_index13 = 0;\n  let current_note_duration_index14\
    \ = 0;\n  let current_note_duration_index15 = 0;\n  let current_note_duration_index16\
    \ = 0;\n  let current_note_duration_index17 = 0;\n  let current_note_duration_index18\
    \ = 0;\n  let current_note_duration_index19 = 0;\n  let current_note_duration_index20\
    \ = 0;\n  let current_note_duration_index21 = 0;\n  let current_note_duration_index22\
    \ = 0;\n  let current_note_duration_index23 = 0;\n  let current_note_duration_index24\
    \ = 0;\n  let current_note_duration_index25 = 0;\n  let current_note_duration_index26\
    \ = 0;\n  let current_note_duration_index27 = 0;\n  let current_note_duration_index28\
    \ = 0;\n  let current_note_duration_index29 = 0;\n  let current_note_duration_index30\
    \ = 0;\n  let current_note_duration_index31 = 0;\n  let current_note_duration_index32\
    \ = 0;\n  let current_note_duration_index33 = 0;\n  let current_note_duration_index34\
    \ = 0;\n  let current_note_duration_index35 = 0;\n  let current_note_duration_index36\
    \ = 0;\n  let current_note_duration_index37 = 0;\n  let current_note_duration_index38\
    \ = 0;\n  let current_note_duration_index39 = 0;\n  let current_note_duration_index40\
    \ = 0;\n  let current_note_duration_index41 = 0;\n  let current_note_duration_index42\
    \ = 0;\n  let current_note_duration_index43 = 0;\n  let current_note_duration_index44\
    \ = 0;\n  let current_note_duration_index45 = 0;\n  let current_note_duration_index46\
    \ = 0;\n  let current_note_duration_index47 = 0;\n  let current_note_duration_index48\
    \ = 0;\n  let current_note_duration_index49 = 0;\n  let current_note_duration_index50\
    \ = 0;\n  let current_note_duration_index51 = 0;\n  let current_note_duration_index52\
    \ = 0;\n  let current_note_duration_index53 = 0;\n  let current_note_duration_index54\
    \ = 0;\n  let current_note_duration_index55 = 0;\n  let current_note_duration_index56\
    \ = 0;\n  let current_note_duration_index57 = 0;\n  let current_note_duration_index58\
    \ = 0;\n  let current_note_duration_index59 = 0;\n  let current_note_duration_index60\
    \ = 0;\n  let current_note_duration_index61 = 0;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdhu74b3d.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music_notes: number[] = [];\n  let current_note\
    \ = 0;\n  let current_beat = 0;\n  let current_duration = 0;\n  let current_note_duration\
    \ = 0;\n  let current_note_duration_index = 0;\n  let current_note_duration_index2\
    \ = 0;\n  let current_note_duration_index3 = 0;\n  let current_note_duration_index4\
    \ = 0;\n  let current_note_duration_index5 = 0;\n  let current_note_duration_index6\
    \ = 0;\n  let current_note_duration_index7 = 0;\n  let current_note_duration_index8\
    \ = 0;\n  let current_note_duration_index9 = 0;\n  let current_note_duration_index10\
    \ = 0;\n  let current_note_duration_index11 = 0;\n  let current_note_duration_index12\
    \ = 0;\n  let current_note_duration_index13 = 0;\n  let current_note_duration_index14\
    \ = 0;\n  let current_note_duration_index15 = 0;\n  let current_note_duration_index16\
    \ = 0;\n  let current_note_duration_index17 = 0;\n  let current_note_duration_index18\
    \ = 0;\n  let current_note_duration_index19 = 0;\n  let current_note_duration_index20\
    \ = 0;\n  let current_note_duration_index21 = 0;\n  let current_note_duration_index22\
    \ = 0;\n  let current_note_duration_index23 = 0;\n  let current_note_duration_index24\
    \ = 0;\n  let current_note_duration_index25 = 0;\n  let current_note_duration_index26\
    \ = 0;\n  let current_note_duration_index27 = 0;\n  let current_note_duration_index28\
    \ = 0;\n  let current_note_duration_index29 = 0;\n  let current_note_duration_index30\
    \ = 0;\n  let current_note_duration_index31 = 0;\n  let current_note_duration_index32\
    \ = 0;\n  let current_note_duration_index33 = 0;\n  let current_note_duration_index34\
    \ = 0;\n  let current_note_duration_index35 = 0;\n  let current_note_duration_index36\
    \ = 0;\n  let current_note_duration_index37 = 0;\n  let current_note_duration_index38\
    \ = 0;\n  let current_note_duration_index39 = 0;\n  let current_note_duration_index40\
    \ = 0;\n  let current_note_duration_index41 = 0;\n  let current_note_duration_index42\
    \ = 0;\n  let current_note_duration_index43 = 0;\n  let current_note_duration_index44\
    \ = 0;\n  let current_note_duration_index45 = 0;\n  let current_note_duration_index46\
    \ = 0;\n  let current_note_duration_index47 = 0;\n  let current_note_duration_index48\
    \ = 0;\n  let current_note_duration_index49 = 0;\n  let current_note_duration_index50\
    \ = 0;\n  let current_note_duration_index51 = 0;\n  let current_note_duration_index52\
    \ = 0;\n  let current_note_duration_index53 = 0;\n  let current_note_duration_index54\
    \ = 0;\n  let current_note_duration_index55 = 0;\n  let current_note_duration_index56\
    \ = 0;\n  let current_note_duration_index57 = 0;\n  let current_note_duration_index58\
    \ = 0;\n  let current_note_duration_index59 = 0;\n  let current_note_duration_index60\
    \ = 0;\n  let current_note_duration_index61 = 0;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdhu74b3d.ts(90,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music('o o| .| o| o| .| .|\
    \ .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    const notes: number[] = [];\n    let current_note =\
    \ 0;\n    let current_beat = 0;\n    let current_duration = 0;\n    let current_rest\
    \ = 0;\n    let current_rests = 0;\n    let current_rests_string = '';\n    let\
    \ current_rests_index = 0;\n    let current_rests_index2 = 0;\n    let current_rests_index3\
    \ = 0;\n    let current_rests_index4 = 0;\n    let current_rests_index5 = 0;\n\
    \    let current_rests_index6 = 0;\n    let current_rests_index7 = 0;\n    let\
    \ current_rests_index8 = 0;\n    let current_rests_index9 = 0;\n    let current_rests_index10\
    \ = 0;\n    let current_rests_index11 = 0;\n    let current_rests_index12 = 0;\n\
    \    let current_rests_index13 = 0;\n    let current_rests_index14 = 0;\n    let\
    \ current_rests_index15 = 0;\n    let current_rests_index16 = 0;\n    let current_rests_index17\
    \ = 0;\n    let current_rests_index18 = 0;\n    let current_rests_index19 = 0;\n\
    \    let current_rests_index20 = 0;\n    let current_rests_index21 = 0;\n    let\
    \ current_rests_index22 = 0;\n    let current_rests_index23 = 0;\n    let current_rests_index24\
    \ = 0;\n    let current_rests_index25 = 0;\n    let current_rests_index26 = 0;\n\
    \    let current_rests_index27 = 0;\n    let current_rests_index28 = 0;\n    let\
    \ current_rests_index29 = 0;\n    let current_rests_index30 = 0;\n    let current_rests_index31\
    \ = 0;\n    let current_rests_index32 = 0;\n    let current_rests_index33 = 0;\n\
    \    let current_rests_index34 = 0;\n    let current_rests_index35 = 0;\n    let\
    \ current_rests_index36 = 0;\n    let current_rests_index37 = 0;\n    let current_rests_index38\
    \ = 0;\n    let current_rests_index39 = 0;\n    let current_rests_index40 = 0;\n\
    \    let current_rests_index41 = 0;\n    let current_rests_index42 = 0;\n    let\
    \ current_rests_index43 = 0;\n    let current_rests_index44 = 0;\n    let current_rests_index45\
    \ = 0;\n    let current_rests_index46 = 0;\n    let current_rests_index47 = 0;\n\
    \    let current_rests_index48 = 0;\n    let current_rests_index49 = 0;\n    let\
    \ current_rests_index50 = 0;\n    let current_rests_index51 = 0;\n    let current_rests_index52\
    \ = 0;\n    let current_rests_index53 = 0;\n    let current_rests_index54 = 0;\n\
    \    let current_rests_index55 = 0;\n    let current_rests_index56 = 0;\n    let\
    \ current_rests_index57 = 0;\n    let current_rests_index58 = 0;\n    let current_rests_index59\
    \ = 0;\n    let current_rests_index60\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpckmj3jas.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659738860
