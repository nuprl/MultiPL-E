completions:
- "  const len = nums.length;\n  const ret = new Array(len);\n  for (let i = 0; i\
  \ < len; i++) {\n    ret[i] = nums[i];\n  }\n  ret.sort((a, b) => {\n    const sumA\
  \ = sum_digits(a);\n    const sumB = sum_digits(b);\n    if (sumA < sumB) {\n  \
  \    return -1;\n    }\n    if (sumA > sumB) {\n      return 1;\n    }\n    return\
  \ 0;\n  });\n  return ret;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum, digit)\
  \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    const index\
  \ = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) =>\
  \ a + b, 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
  }\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    points[i] = nums[i];\n  }\n  points.sort((a, b) => {\n  \
  \  const sumA = point_sum(a);\n    const sumB = point_sum(b);\n    if (sumA < sumB)\
  \ {\n      return -1;\n    }\n    if (sumA > sumB) {\n      return 1;\n    }\n \
  \   return 0;\n  });\n  return points;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
  \ => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n\
  \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).map(Number);\n  const sum_digits = digits.reduce((sum,\
  \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit =\
  \ digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n    }\
  \ else {\n      result.push(digit);\n    }\n  }\n  return result;\n}\n"
- "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) =>\
  \ a + b, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(n => Number(n));\n \
  \ const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return indexes.sort((a,\
  \ b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(x => parseInt(x));\n  const sums = digits.reduce((acc, x) =>\
  \ acc + x, 0);\n  const order = Array.from({ length }, (_, i) => sums - digits[i]);\n\
  \  return nums.map(x => order[x - 1]);\n}\n"
- "  let result: number[] = [];\n  let map = new Map();\n  for (let i = 0; i < nums.length;\
  \ i++) {\n    let num = nums[i];\n    let digits = num.toString().split('')\n  \
  \  let sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n\
  \    }\n    map.set(sum, num);\n  }\n  for (let i = 0; i < nums.length; i++) {\n\
  \    let num = nums[i];\n    let sum = 0;\n    for (let j = 0; j < num.toString().length;\
  \ j++) {\n      sum += Number(num.toString().charAt(j));\n    }\n    let key = map.get(sum);\n\
  \    result.push(key);\n    map.delete(sum);\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sum_digits = digits.reduce((sum,\
  \ digit) => sum + +digit, 0);\n  const digits_len = digits.length;\n  const result\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const\
  \ digit = sum_digits - num.toString().length;\n    if (digit >= 0) {\n      result.push(num);\n\
  \    } else {\n      result.unshift(num);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum +\
  \ n);\n  const digits_len = digits.length;\n  const result = [];\n  for (let i =\
  \ 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num % 10;\n  \
  \  if (digit === sum_digits) {\n      result.push(num);\n    }\n  }\n  return result;\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).sort();\n  const buckets = digits.length\
  \ < len ? [digits, []] : [[], digits];\n  for (let i = 0; i < len; i++) {\n    const\
  \ bucket = buckets[digits[i]];\n    bucket.push(nums[i]);\n  }\n  return buckets.reduce((acc,\
  \ val) => acc.concat(val), []);\n}\n"
- "  const len = nums.length;\n  const ret = new Array(len);\n  for (let i = 0; i\
  \ < len; i++) {\n    ret[i] = nums[i];\n  }\n  ret.sort((a, b) => {\n    const sumA\
  \ = sumDigits(a);\n    const sumB = sumDigits(b);\n    if (sumA > sumB) {\n    \
  \  return 1;\n    }\n    if (sumA < sumB) {\n      return -1;\n    }\n    return\
  \ 0;\n  });\n  return ret;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = String(num).split('');\n\
  \    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n      point\
  \ += (digits[j] - '0') * (Math.pow(10, j));\n    }\n    points[i] = point;\n  }\n\
  \  return points.sort((a, b) => a - b).map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n);\n  const digits_sum = digits.reduce((sum, n) => sum + n);\n  const digits_len\
  \ = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n  \
  \  const num = nums[i];\n    const digit = num % 10;\n    if (digit === 0) {\n \
  \     continue;\n    }\n    const index = sum_digits - digits_sum + digit;\n   \
  \ if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sums = digits.reduce((sum, digit) => sum + digit,\
  \ 0);\n  const indexes = nums.map((n, i) => sums - digits[i]);\n  return indexes.sort((a,\
  \ b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum +\
  \ n);\n  const digits_len = digits.length;\n  const result = [];\n  for (let i =\
  \ 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num % 10;\n  \
  \  if (sum_digits - digit >= 0) {\n      result.push(num);\n    } else {\n     \
  \ result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a,\
  \ b) => a[0] - b[0]);\n  const res = [];\n  for (let i = 0; i < len; i++) {\n  \
  \  res.push(nums[sorted[i][1]]);\n  }\n  return res;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n);\n  const max_digit = Math.max(...digits);\n  const min_digit = Math.min(...digits);\n\
  \  const sum_digits_pow = Math.pow(10, sum_digits);\n  const max_digits_pow = Math.pow(10,\
  \ max_digit);\n  const min_digits_pow = Math.pow(10, min_digit);\n  const result\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = nums[i];\n    if (digit\
  \ < min_digit) {\n      result.push(0);\n    } else if (digit > max_digit) {\n \
  \     result.push(0);\n    } else {\n      const index = sum_digits - digit + 1;\n\
  \      result.push(index);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const order = sums.map((sum, i) => [sum, i]); // \u6309\
  \u7167\u6570\u5B57\u7684\u548C\u6765\u6392\u5E8F\n  return order.sort((a, b) =>\
  \ a[0] - b[0]).map(item => nums[item[1]]);\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
  \  }\n  nums.sort((a, b) => a - b);\n  return nums;\n}\n"
- "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) =>\
  \ a + b, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const sorted = sums.map((sum, index) => [sum, index]);\n\
  \  sorted.sort((a, b) => a[0] - b[0]);\n  return sorted.map(a => nums[a[1]]);\n\
  }\n"
- "  let points: number[] = [];\n  let index = 0;\n  while (index < nums.length) {\n\
  \    let sum = 0;\n    for (let i = 0; i < nums.length; ++i) {\n      sum += nums[i];\n\
  \    }\n    if (sum > 0) {\n      points.push([sum, index]);\n    }\n    index++;\n\
  \  }\n  points.sort((a, b) => a[0] - b[0]);\n  let result: number[] = [];\n  for\
  \ (let i = 0; i < points.length; ++i) {\n    result.push(nums[points[i][1]]);\n\
  \  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(n => Number(n));\n\
  \  const len = sums.length;\n  const result = [];\n  for (let i = 0; i < len; i++)\
  \ {\n    const index = sums.indexOf(sums[i]);\n    if (index >= 0) {\n      result.push(nums[index]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum,\
  \ digit) => sum + digit, 0);\n  return digits.sort((a, b) => sums - a + b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum +\
  \ n);\n  const digits_len = digits.length;\n  const result = [];\n  for (let i =\
  \ 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num / Math.pow(10,\
  \ digits_len - i);\n    if (sum_digits - digit > 0) {\n      result.push(num);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  const map = new Map<number, number>();\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum +=\
  \ digits[j] * Math.pow(10, j);\n    }\n    map.set(sum, num);\n  }\n  const result\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const\
  \ sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += digits[j]\
  \ * Math.pow(10, j);\n    }\n    if (map.has(sum)) {\n      result.push(map.get(sum));\n\
  \    }\n  }\n  return result;\n}\n"
- "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) =>\
  \ a + b, 0));\n  return nums.sort((a, b) => {\n    const aSum = sums[a];\n    const\
  \ bSum = sums[b];\n    return aSum - bSum;\n  });\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const indexes = Array.from({ length: len }).map((_,\
  \ i) => i);\n  indexes.sort((a, b) => {\n    const sumA = sums[a];\n    const sumB\
  \ = sums[b];\n    if (sumA === sumB) {\n      return indexes[a] - indexes[b];\n\
  \    }\n    return sumA - sumB;\n  });\n  return indexes.map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.reduce((sum, digit) =>\
  \ sum + digit, 0);\n  return nums.sort((a, b) => sums - digits[a] - digits[b]);\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ c) => acc + +c, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
  \ => +d);\n  const len = sums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
  \  nums.sort(\n      (a, b) =>\n          sums.indexOf(a) - sums.indexOf(b) ||\n\
  \          (sums.indexOf(a) > sums.indexOf(b) ? 1 : 0));\n  return nums;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum +\
  \ n, 0);\n  const digits_len = digits.length;\n  const result = [];\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = digits[i];\n\
  \    if (sum_digits - digit < 0) {\n      result.push(num);\n    } else {\n    \
  \  const index = sum_digits - digit;\n      result.push(nums[index]);\n      result.push(nums[index\
  \ + 1]);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc,\
  \ d) => acc + d, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  const map = new Map<number, number>();\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum +=\
  \ digits[j] * Math.pow(10, j);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n\
  }\n"
- "  const len = nums.length;\n  const arr: number[] = [];\n  for (let i = 0; i <\
  \ len; i++) {\n    arr.push(nums[i]);\n  }\n  arr.sort((a, b) => {\n    const sumA\
  \ = sumDigits(a);\n    const sumB = sumDigits(b);\n    if (sumA < sumB) {\n    \
  \  return -1;\n    }\n    if (sumA > sumB) {\n      return 1;\n    }\n    return\
  \ 0;\n  });\n  return arr;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum +\
  \ n);\n  const digits_len = digits.length;\n  const result = [];\n  for (let i =\
  \ 0; i < len; i++) {\n    const num = nums[i];\n    const digit = digits[i];\n \
  \   if (sum_digits - digit < 0) {\n      result.push(num);\n      continue;\n  \
  \  }\n    const index = sum_digits - digit;\n    if (index >= digits_len) {\n  \
  \    result.push(num);\n      continue;\n    }\n    const left = nums[index];\n\
  \    const right = nums[index + 1];\n    if (left < right) {\n      result.push(num);\n\
  \      continue;\n    }\n    if (left > right) {\n      result.push(num);\n    \
  \  continue;\n    }\n    const diff = left - right;\n    const remain = sum_digits\
  \ - diff;\n    if (remain > 0) {\n      result.push(num);\n      continue;\n   \
  \ }\n    result.push(nums[index]);\n  }\n  return result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
  \  }\n  return nums.sort((a, b) => sum - a + b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(num => num.toString().split('').reduce((acc, cur, index) =>\
  \ {\n    return acc + cur * Math.pow(10, index);\n  }, 0));\n  const sums = digits.map(num\
  \ => num.toString().split('').reduce((acc, cur, index) => {\n    return acc + cur;\n\
  \  }, 0));\n  const order = sums.map((sum, index) => {\n    return { sum, index\
  \ };\n  }).sort((a, b) => {\n    return a.sum - b.sum;\n  }).map(item => item.index);\n\
  \  return order.map(index => nums[order[index]]);\n}\n"
- "  const len = nums.length;\n  const map = new Map<number, number[]>();\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum +=\
  \ parseInt(digits[j], 10);\n    }\n    const key = sum;\n    if (!map.has(key))\
  \ {\n      map.set(key, []);\n    }\n    map.get(key).push(num);\n  }\n  const result\
  \ = [];\n  for (const [key, val] of map.entries()) {\n    result.push(...val);\n\
  \  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    points[i] = nums[i];\n  }\n  points.sort(function (a, b)\
  \ {\n    return a + b - nums.reduce((sum, num) => {\n      return sum + num;\n \
  \   }, 0);\n  });\n  return points;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return\
  \ order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  const map = new Map<number, number>();\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum +=\
  \ digits[j] * Math.pow(10, j);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n);\n  const digits_len = digits.length;\n  const result = [];\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num % 10;\n\
  \    if (sum_digits - digit >= 0) {\n      result.push(num);\n    } else {\n   \
  \   result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(n => +n);\n  const len\
  \ = sums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const sorted = [];\n\
  \  let index = 0;\n  while (index < len) {\n    const sum = sums[index];\n    const\
  \ pos = sums.indexOf(sum);\n    if (pos === -1) {\n      sorted.push(sum);\n   \
  \   index++;\n      continue;\n    }\n    sorted.push(nums[pos]);\n    index++;\n\
  \  }\n  return sorted;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sum_digits = digits.reduce((acc, cur)\
  \ => acc + cur);\n  const digits_len = digits.length;\n  const sum_digits_len =\
  \ sum_digits.length;\n  const min_digits_len = Math.min(digits_len, sum_digits_len);\n\
  \  const min_digits_sum_digits_len = min_digits_len + sum_digits_len;\n  const min_digits_sum_digits\
  \ = min_digits_sum_digits_len.toString();\n  const min_digits_sum_digits_map = min_digits_sum_digits.split('').map(\n\
  \    d => +d,\n  );\n  const min_digits_sum_digits_sorted = min_digits_sum_digits_map.sort();\n\
  \  const min_digits_sum_digits_sorted_map = min_digits_sum_digits_sorted.map(\n\
  \    d => +d,\n  );\n  const min_digits_sum_digits_sorted_sorted = min_digits_sum_digits_sorted_map.sort();\n\
  \  const min_digits_sum_digits_sorted_sorted_map = min_digits_sum_digits_sorted_sorted.map(\n\
  \    d => +d,\n  );\n  const min_digits_sum_digits_sorted_sorted_sorted = min_digits_sum_digits_sorted_sorted_map.sort();\n\
  \  const min_digits_sum_digits_sorted_sorted_sorted_map = min_digits_sum_digits_sorted_sorted_sorted.map(\n\
  \    d => +d,\n  );\n  const min_digits_sum_digits_sorted_sorted_sorted_sorted =\
  \ min_digits_sum_digits_sorted_sorted_sorted_map.sort();\n  const min_digits_sum_digits_sorted_sorted_sorted_sorted_map\
  \ = min_digits_sum_digits_sorted_sorted_sorted_sorted.map(\n    d => +d,\n  );\n\
  \  const min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted = min_digits_sum_digits_sorted_sorted_sorted_sorted_map.sort();\n\
  \  const min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted_map = min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted.map(\n\
  \    d => +d,\n  );\n  const min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted_sorted\
  \ = min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted_map.sort();\n  const\
  \ min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted_sorted_map = min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(\n\
  \    d => +d,\n  );\n  const min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
  \ = min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted_sorted_sorted_map.sort();\n\
  \  const min_digits_sum_digits_sorted_sorted_sorted_sorted_sorted_"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(num => num.toString().split('').reduce((acc, cur, idx) => {\n\
  \    const val = parseInt(cur, 10);\n    return acc + val * Math.pow(10, idx);\n\
  \  }, 0));\n  const sum = digits[digits.length - 1];\n  const sorted = nums.sort((a,\
  \ b) => {\n    const aVal = parseInt(a.toString().split('').reduce((acc, cur, idx)\
  \ => {\n      const val = parseInt(cur, 10);\n      return acc + val * Math.pow(10,\
  \ idx);\n    }), 10);\n    const bVal = parseInt(b.toString().split('').reduce((acc,\
  \ cur, idx) => {\n      const val = parseInt(cur, 10);\n      return acc + val *\
  \ Math.pow(10, idx);\n    }), 10);\n    return aVal - bVal;\n  });\n  return sorted.map(num\
  \ => parseInt(num.toString().split('').reduce((acc, cur, idx) => {\n    const val\
  \ = parseInt(cur, 10);\n    return acc + val * Math.pow(10, idx);\n  }), 10));\n\
  }\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n      point\
  \ += (digits[j] - '0') * (10 ** j);\n    }\n    points[i] = point;\n  }\n  const\
  \ sorted_points = points.sort((a, b) => a - b);\n  const result = [];\n  for (let\
  \ i = 0; i < len; i++) {\n    result.push(nums[sorted_points[i]]);\n  }\n  return\
  \ result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n,\
  \ 10));\n  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return\
  \ indexes.sort((a, b) => a - b);\n}\n"
- "  const sums = nums.map(n => n.toString().split('').reduce((acc, c) => acc + +c,\
  \ 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((a,\
  \ b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
  \ b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ c) => acc + +c, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
  \ => d.toString().split('').map(Number).reduce((a, b) => a + b, 0));\n  const indexes\
  \ = sums.map((d, i) => i);\n  const sorted = indexes.sort((a, b) => sums[a] - sums[b]);\n\
  \  return indexes.map(i => nums[sorted[i]]);\n}\n"
- "  const sums = nums.map(n => n.toString().split('').reduce((acc, c) => acc + +c,\
  \ 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d => d.reduce((acc,\
  \ d) => acc + d, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((acc,\
  \ x) => acc + x, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit =\
  \ digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n     \
  \ continue;\n    }\n    const index = sum_digits - digit;\n    if (index >= digits_len)\
  \ {\n      result.push(num);\n      continue;\n    }\n    const left_sum = sum_digits\
  \ - digits[index];\n    const right_sum = sum_digits - digits[index + 1];\n    if\
  \ (left_sum < 0 || right_sum < 0) {\n      result.push(num);\n      continue;\n\
  \    }\n    if (left_sum > right_sum) {\n      result.push(nums[index]);\n     \
  \ result.push(nums[index + 1]);\n    } else {\n      result.push(nums[index + 1]);\n\
  \      result.push(nums[index]);\n    }\n  }\n  return result;\n}\n"
- "  const sums = nums.map(n => n.toString().split('').reduce((acc, c) => acc + +c,\
  \ 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const digitSums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const sortedNums = digitSums.map(d => nums.find(n\
  \ => n.toString() === d.toString()));\n  return sortedNums.sort((a, b) => a.toString().localeCompare(b.toString()));\n\
  }\n"
- "  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const\
  \ num = nums[i];\n    const digits = num.toString().split('');\n    map.set(digits,\
  \ num);\n  }\n  const result = [];\n  for (const [key, value] of map) {\n    result.push(value);\n\
  \  }\n  return result;\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n      point\
  \ += (digits[j] - '0') * (Math.pow(10, j));\n    }\n    points[i] = point;\n  }\n\
  \  return points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    points[i] = digits[digits.length - 1];\n  }\n  return points.sort((a, b) =>\
  \ a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n  for\
  \ (let i = 0; i < len; ++i) {\n    const num = nums[i];\n    const digit = num /\
  \ Math.pow(10, digits_len - i);\n    if (sum_digits - digit > 0) {\n      result.push(num);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sum_digits = digits.reduce((sum, digit)\
  \ => sum + +digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit =\
  \ digits[i];\n    if (sum_digits - +digit === num) {\n      result.push(num);\n\
  \      sum_digits -= +digit;\n      digits_len--;\n    }\n  }\n  return result.sort((a,\
  \ b) => a - b).slice(0, digits_len);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const sorted = sums.sort((a, b) => a - b);\n  return\
  \ nums.map(n => sorted[nums.indexOf(n)]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sum_digits = digits.reduce((sum, digit)\
  \ => sum + +digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    const index\
  \ = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc,\
  \ d) => acc + d, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
  \ b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
  \ digit) => sum + digit, 0);\n  const sorted_nums = nums.sort((a, b) => sum_digits\
  \ - parseInt(b, 10) - parseInt(a, 10));\n  return sorted_nums;\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('').reverse();\n\
  \    const point = (digits.length + 1) * Math.pow(10, digits.length);\n    points[i]\
  \ = point;\n  }\n  const sorted = points.sort((a, b) => a - b);\n  return sorted.map(i\
  \ => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n  for\
  \ (let i = 0; i < len; ++i) {\n    const num = nums[i];\n    const digit = digits[i];\n\
  \    if (digit < sum_digits) {\n      result.push(num);\n    } else {\n      const\
  \ index = sum_digits - digit;\n      result.push(nums[index]);\n      result.push(nums[index\
  \ + 1]);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a,\
  \ b) => a[0] - b[0]);\n  return sorted.map(a => nums[a[1]]);\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    points[i] = digits[digits.length - 1];\n  }\n  return points.sort((a, b) =>\
  \ a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sums = digits.map(n => n * n);\n  const sorted\
  \ = sums.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < len;\
  \ i++) {\n    const num = sorted[i];\n    if (num > 0) {\n      result.push(num);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum, digit)\
  \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    if (digit\
  \ < sum_digits) {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    points[i] = digits[digits.length - 1];\n  }\n  return points.sort((a, b) =>\
  \ a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(n => Number(n));\n \
  \ const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return indexes.sort((a,\
  \ b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(n => ~~(n / 10));\n\
  \  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return indexes.sort((a,\
  \ b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
  \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    if\
  \ (digit < sum_digits) {\n      result.push(nums[i]);\n    } else {\n      const\
  \ index = sum_digits - digit;\n      result.push(nums[index]);\n      result.push(nums[i]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(num => String(num).split('').reduce((acc, cur) => acc + +cur, 0));\n\
  \  const sums = digits.map(d => d.reduce((acc, cur) => acc + cur, 0));\n  const\
  \ order = sums.map((sum, index) => [sum, index]);\n  return order.sort((a, b) =>\
  \ a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
  \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit =\
  \ digits[i];\n    if (sum_digits - digit > 0) {\n      result.push(num);\n     \
  \ sum_digits -= digit;\n    } else {\n      result.push(digit);\n      sum_digits\
  \ += num;\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(x => Math.abs(x).toString(10));\n  const digits_len = digits.length;\n\
  \  const max_digits_len = Math.max(...digits_len);\n  const max_digits = max_digits_len\
  \ > 0 ? Array(max_digits_len).fill('0') : [];\n  const min_digits = digits_len >\
  \ 0 ? Array(digits_len).fill('9') : [];\n  const min_digits_len = min_digits.length;\n\
  \  const max_digits_len = Math.max(...max_digits_len, ...min_digits_len);\n  const\
  \ max_digits_len = Math.min(...max_digits_len, ...min_digits_len);\n  const min_digits_len\
  \ = Math.max(...min_digits_len, ...max_digits_len);\n  const min_digits_len = Math.min(...min_digits_len,\
  \ ...max_digits_len);\n  const min_digits_len = Math.max(...min_digits_len, ...max_digits_len);\n\
  \  const min_digits_len = Math.min(...min_digits_len, ...max_digits_len);\n  const\
  \ min_digits_len = Math.max(...min_digits_len, ...max_digits_len);\n  const min_digits_len\
  \ = Math.min(...min_digits_len, ...max_digits_len);\n  const min_digits_len = Math.max(...min_digits_len,\
  \ ...max_digits_len);\n  const min_digits_len = Math.min(...min_digits_len, ...max_digits_len);\n\
  \  const min_digits_len = Math.max(...min_digits_len, ...max_digits_len);\n  const\
  \ min_digits_len = Math.min(...min_digits_len, ...max_digits_len);\n  const min_digits_len\
  \ = Math.max(...min_digits_len, ...max_digits_len);\n  const min_digits_len = Math.min(...min_digits_len,\
  \ ...max_digits_len);\n  const min_digits_len = Math.max(...min_digits_len, ...max_digits_len);\n\
  \  const min_digits_len = Math.min(...min_digits_len, ...max_digits_len);\n  const\
  \ min_digits_len = Math.max(...min_digits_len, ...max_digits_len);\n  const min_digits_len\
  \ = Math.min(...min_digits_len, ...max_digits_len);\n  const min_digits_len = Math.max(...min_digits_len,\
  \ ...max_digits_len);\n  const min_digits_len = Math.min(...min_digits_len, ...max_digits_len);\n\
  \  const min_digits_len = Math.max(...min_digits_len, ...max_digits_len);\n  const\
  \ min_digits_len = Math.min(...min_digits_len, ...max_digits_len);\n  const min_digits_len\
  \ = Math.max(...min_digits_len, ...max_digits_len);\n  const min_digits_len = Math.min(...min_"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(x => Math.abs(x).toString()).sort();\n  const sums = digits.map(x\
  \ => x.split('').reduce((acc, cur) => acc + +cur, 0));\n  return nums.map(x => sums.indexOf(x));\n\
  }\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n      point\
  \ += (digits[j] - '0') * (Math.pow(10, j));\n    }\n    points[i] = point;\n  }\n\
  \  return points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return\
  \ order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  const arr: number[] = [];\n  for (let i = 0; i <\
  \ len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum +=\
  \ parseInt(digits[j], 10);\n    }\n    arr.push(sum);\n  }\n  arr.sort((a, b) =>\
  \ a - b);\n  const result: number[] = [];\n  for (let i = 0; i < len; i++) {\n \
  \   const num = nums[i];\n    const digits = num.toString().split('');\n    const\
  \ sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j],\
  \ 10);\n    }\n    if (sum === arr[i]) {\n      result.push(num);\n    }\n  }\n\
  \  return result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
  \  }\n  nums.sort((a, b) => sum - a + b);\n  return nums;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.map(d\
  \ => +d);\n  const len = sums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
  \  const sorted = [];\n  let index = 0;\n  while (index < len) {\n    const sum\
  \ = sums[index];\n    const pos = sums.indexOf(sum);\n    if (pos === -1) {\n  \
  \    sorted.push(sum);\n      index++;\n      continue;\n    }\n    const tmp =\
  \ nums[pos];\n    nums[pos] = nums[index];\n    nums[index] = tmp;\n    index++;\n\
  \  }\n  return nums;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
  \ b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const len = digits.length;\n  const points\
  \ = new Array<number>(len);\n  for (let i = 0; i < len; i++) {\n    const point\
  \ = 0;\n    for (let j = 0; j < len; j++) {\n      point += digits[j].charCodeAt(0)\
  \ - '0'.charCodeAt(0);\n    }\n    points[i] = point;\n  }\n  points.sort((a, b)\
  \ => a - b);\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(points[i]);\n\
  \  }\n  return res;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(n => Number(n));\n\
  \  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return indexes.map(i\
  \ => nums[i]);\n}\n"
- "  const len = nums.length;\n  const arr = [];\n  for (let i = 0; i < len; i++)\
  \ {\n    arr.push(nums[i]);\n  }\n  arr.sort((a, b) => {\n    const sumA = sumDigits(a);\n\
  \    const sumB = sumDigits(b);\n    if (sumA !== sumB) {\n      return sumA - sumB;\n\
  \    }\n    return a.localeCompare(b);\n  });\n  return arr;\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n      point\
  \ += (digits[j] - '0') * (j + 1);\n    }\n    points[i] = point;\n  }\n  return\
  \ points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n, 0);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const\
  \ num = nums[i];\n    const digit = digits[i];\n    if (sum_digits - digit > 0)\
  \ {\n      result.push(num);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, digit)\
  \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit =\
  \ num / Math.pow(10, digits_len - i);\n    const index = sum_digits - digit;\n \
  \   if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n,\
  \ 10));\n  const len = sums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
  \  const maxSum = Math.max(...sums);\n  const minSum = Math.min(...sums);\n  const\
  \ orders = new Array(len);\n  for (let i = 0; i < len; i++) {\n    orders[i] = i;\n\
  \  }\n  for (let i = 0; i < len; i++) {\n    const sum = sums[i];\n    if (sum ===\
  \ maxSum) {\n      orders[i] = len - i;\n    } else if (sum === minSum) {\n    \
  \  orders[i] = 0;\n    } else {\n      let index = sums.indexOf(sum);\n      if\
  \ (index === -1) {\n        index = sums.indexOf(maxSum);\n      }\n      orders[i]\
  \ = index;\n    }\n  }\n  return nums.map(n => orders[n.toString()]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
  \ n) => sum + n);\n  const digits_len = digits.length;\n  const min_digit = Math.min(...digits);\n\
  \  const max_digit = Math.max(...digits);\n  const min_sum_digit = Math.min(sum_digits,\
  \ max_digit);\n  const max_sum_digit = Math.max(sum_digits, min_digit);\n  const\
  \ min_len = Math.min(digits_len, len);\n  const max_len = Math.max(digits_len, len);\n\
  \  const min_sum_digits = min_sum_digit * min_len;\n  const max_sum_digits = max_sum_digit\
  \ * max_len;\n  const min_digits = min_digit * min_len;\n  const max_digits = max_digit\
  \ * max_len;\n  const min_digits_len = min_digits.length;\n  const max_digits_len\
  \ = max_digits.length;\n  const min_sum_digits_len = min_sum_digits.length;\n  const\
  \ max_sum_digits_len = max_sum_digits.length;\n  const min_digits_len = Math.min(min_digits_len,\
  \ max_digits_len);\n  const max_digits_len = Math.max(min_digits_len, max_digits_len);\n\
  \  const min_sum_digits_len = Math.min(min_sum_digits_len, max_sum_digits_len);\n\
  \  const max_sum_digits_len = Math.max(min_sum_digits_len, max_sum_digits_len);\n\
  \  const min_digits_len = Math.min(min_digits_len, max_digits_len);\n  const max_digits_len\
  \ = Math.max(min_digits_len, max_digits_len);\n  const min_sum_digits_len = Math.min(min_sum_digits_len,\
  \ max_sum_digits_len);\n  const max_sum_digits_len = Math.max(min_sum_digits_len,\
  \ max_sum_digits_len);\n  const min_digits_len = Math.min(min_digits_len, max_digits_len);\n\
  \  const max_digits_len = Math.max(min_digits_len, max_digits_len);\n  const min_sum_digits_len\
  \ = Math.min(min_sum_digits_len, max_sum_digits_len);\n  const max_sum_digits_len\
  \ = Math.max(min_sum_digits_len, max_sum_digits_len);\n  const min_digits_len =\
  \ Math.min(min_digits_len, max_digits_len);\n  const max_digits_len = Math.max(min_digits_len,\
  \ max_digits_len);\n  const min_sum_digits_len = Math.min(min_sum_digits_len, max_sum_digits_len);\n\
  \  const max_sum_digits_len = Math.max(min_sum_digits_len, max_sum_digits_len);\n\
  \  const min_digits_len = Math.min(min_digits_len, max_digits_len);\n  const max_digits_len\
  \ = Math.max(min_digits_len, max_digits_len);\n  const min_sum_digits_len = Math.min(min_sum_digits_"
- "  const sums = nums.map(n => n.toString().split('').reduce((a, b) => a + +b, 0));\n\
  \  return nums.sort((a, b) => {\n    const sumA = sums[a];\n    const sumB = sums[b];\n\
  \    return sumA - sumB;\n  });\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
  \ => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n\
  \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(n => ~~(n / 10));\n\
  \  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return indexes.sort((a,\
  \ b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n, 10));\n\
  \  const indexes = sums.map((sum, index) => sum * 10 + index);\n  return nums.map((n,\
  \ index) => indexes[index]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
  \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit =\
  \ digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n    }\
  \ else {\n      result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const len = nums.length;\n  const result = [];\n  let sum = 0;\n  for (let i\
  \ = 0; i < len; i++) {\n    sum += nums[i];\n    result.push(sum);\n  }\n  return\
  \ result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n  for\
  \ (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = digits[i];\n\
  \    if (digit === sum_digits) {\n      result.push(num);\n      continue;\n   \
  \ }\n    const index = sum_digits - digit;\n    if (index >= digits_len) {\n   \
  \   continue;\n    }\n    const left = nums[index];\n    const right = nums[index\
  \ + 1];\n    if (left < right) {\n      result.push(num);\n      continue;\n   \
  \ }\n    if (left > right) {\n      result.push(nums[index + 1]);\n      result.push(num);\n\
  \      continue;\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n);\n  const max_digit = Math.max(...digits);\n  const min_digit = Math.min(...digits);\n\
  \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n\
  \    if (digit === max_digit) {\n      result.push(nums[i]);\n    } else if (digit\
  \ === min_digit) {\n      result.unshift(nums[i]);\n    } else {\n      const index\
  \ = sum_digits - digit + 1;\n      result.splice(index, 0, nums[i]);\n    }\n  }\n\
  \  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const len = digits.length;\n  const points\
  \ = new Array(len);\n  for (let i = 0; i < len; i++) {\n    points[i] = digits[i];\n\
  \  }\n  const sorted = points.sort((a, b) => {\n    const aSum = a.split('').map(Number).reduce((sum,\
  \ num) => sum + num, 0);\n    const bSum = b.split('').map(Number).reduce((sum,\
  \ num) => sum + num, 0);\n    return aSum - bSum;\n  });\n  return sorted.map(n\
  \ => parseInt(n, 10));\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
  \ n) => sum + n);\n  const digits_len = digits.length;\n  const sum_digits_len =\
  \ sum_digits.length;\n  const result = [];\n  for (let i = 0; i < len; ++i) {\n\
  \    const num = nums[i];\n    const digit = digits[i];\n    if (sum_digits ===\
  \ digit) {\n      result.push(num);\n      continue;\n    }\n    for (let j = digits_len\
  \ - 1; j >= 0; --j) {\n      const left = digits[j];\n      const right = digits[j\
  \ + 1];\n      if (left < num && num < right) {\n        result.push(num);\n   \
  \     break;\n      }\n      if (j === 0) {\n        result.push(left);\n      }\n\
  \    }\n  }\n  return result;\n}\n"
- "  let sum = 0;\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n\
  \    sum += nums[i];\n    result.push(sum);\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((acc, x)\
  \ => acc + x, 0);\n  const digits_len = digits.length;\n  const result = [];\n \
  \ for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = digits[i];\n\
  \    if (sum_digits - digit < 0) {\n      result.push(num);\n      continue;\n \
  \   }\n    const index = sum_digits - digit;\n    if (index >= digits_len) {\n \
  \     result.push(num);\n      continue;\n    }\n    const left = nums[index];\n\
  \    const right = nums[index + 1];\n    if (left < right) {\n      result.push(num);\n\
  \      continue;\n    }\n    const diff = left - right;\n    if (diff > 0) {\n \
  \     result.push(num);\n      continue;\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const sorted = sums.map(d => nums.findIndex(n => +n\
  \ === d));\n  return sorted.map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc,\
  \ d) => acc + d, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
  \ b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = String(num).split(\"\
  \");\n    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n    \
  \  point += (digits[j] - '0') * (Math.pow(10, j));\n    }\n    points[i] = point;\n\
  \  }\n  const sorted = points.sort((a, b) => a - b);\n  const result = [];\n  for\
  \ (let i = 0; i < len; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a,\
  \ b) => a[0] - b[0]);\n  return sorted.map(([s, i]) => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum,\
  \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    const\
  \ index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(n => Number(n));\n\
  \  const len = sums.length;\n  const result: number[] = [];\n  for (let i = 0; i\
  \ < len; i++) {\n    const index = sums.length - i - 1;\n    if (sums[index] ===\
  \ 0) {\n      continue;\n    }\n    const num = sums[index];\n    const index =\
  \ nums.indexOf(num);\n    if (index === -1) {\n      continue;\n    }\n    result.push(nums[index]);\n\
  \  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => Math.abs(n));\n  const max_digit = Math.max(...digits);\n  const\
  \ min_digit = Math.min(...digits);\n  const sum_digits = digits.reduce((acc, n)\
  \ => acc + n, 0);\n  const order = Array.from({ length: len }, (_, i) => i);\n \
  \ for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    if (digit ===\
  \ max_digit) {\n      order[i] = i;\n    } else if (digit === min_digit) {\n   \
  \   order[i] = len - i;\n    } else {\n      const index = sum_digits - digit;\n\
  \      order[i] = index;\n    }\n  }\n  return order.map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    points[i] = digits[digits.length - 1];\n  }\n  return points.sort((a, b) =>\
  \ a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum,\
  \ digit) => sum + digit, 0);\n  const indexes = digits.map(d => sums.indexOf(d)).sort((a,\
  \ b) => a - b);\n  return indexes.map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n, 10));\n\
  \  const len = sums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ sorted = [];\n  let index = 0;\n  while (index < len) {\n    const sum = sums[index];\n\
  \    const pos = sums.indexOf(sum);\n    if (pos === -1) {\n      sorted.push(sum);\n\
  \      index++;\n      continue;\n    }\n    sorted.push(nums[pos]);\n    index++;\n\
  \  }\n  return sorted;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  return sums.map(sum => nums[sums.indexOf(sum)]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n);\n  const digits_len = digits.length;\n  const sum_digits_len = sum_digits\
  \ % 10;\n  if (sum_digits_len === 0) {\n    return nums.sort((a, b) => a - b);\n\
  \  }\n  const digits_len = digits.length;\n  const sum_digits_len = sum_digits %\
  \ 10;\n  const digits_len_sorted = digits_len.sort((a, b) => a - b);\n  const sum_digits_len_sorted\
  \ = sum_digits_len.sort((a, b) => a - b);\n  const index = 0;\n  let result = [];\n\
  \  while (index < len) {\n    const digit = digits[index];\n    const sum_digit\
  \ = sum_digits - digit;\n    if (sum_digit === 0) {\n      result.push(nums[index]);\n\
  \      index++;\n      continue;\n    }\n    const sum_digits_len = sum_digits_len\
  \ - digit;\n    if (sum_digits_len === 0) {\n      result.push(nums[index]);\n \
  \     index++;\n      continue;\n    }\n    const digits_len_sorted = digits_len_sorted\
  \ - digit;\n    if (digits_len_sorted === 0) {\n      result.push(nums[index]);\n\
  \      index++;\n      continue;\n    }\n    const sum_digits_len_sorted = sum_digits_len_sorted\
  \ - digit;\n    const digits_len_sorted_index = digits_len_sorted.indexOf(digit);\n\
  \    const sum_digits_len_sorted_index = sum_digits_len_sorted.indexOf(sum_digit);\n\
  \    if (digits_len_sorted_index === -1) {\n      result.push(nums[index]);\n  \
  \    index++;\n      continue;\n    }\n    if (sum_digits_len_sorted_index === -1)\
  \ {\n      result.push(nums[index]);\n      index++;\n      continue;\n    }\n \
  \   const digits_len_sorted_index = digits_len_sorted.indexOf(digit);\n    const\
  \ sum_digits_len_sorted_index = sum_digits_len_sorted.indexOf(sum_digit);\n    if\
  \ (digits_len_sorted_index === -1) {\n      result.push(nums[index]);\n      index++;\n\
  \      continue;\n    }\n    if (sum_digits_len_sorted_index === -1) {\n      result.push(nums[index]);\n\
  \      index++;\n      continue;\n    }\n    const digits_len_sorted_index = digits_len_sorted.indexOf(digit);\n\
  \    const sum_digits_len_sorted_index = sum_digits_len_sorted.indexOf(sum_digit);\n\
  \    if (digits_len_sorted_index === -1) {\n      result.push(nums[index]);\n  \
  \    index++;\n      continue;\n    }\n    if (sum_digits_len_sorted_index === -1)\
  \ {\n      result.push(nums[index]);\n      "
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc, d)\
  \ => acc + d, 0));\n  const sorted = sums.sort((a, b) => a - b);\n  const result\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const\
  \ index = sorted.indexOf(num);\n    if (index > -1) {\n      result.push(num);\n\
  \      sorted.splice(index, 1);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = String(num).split(\"\
  \");\n    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n    \
  \  point += (digits[j] - \"0\") * (j + 1);\n    }\n    points[i] = point;\n  }\n\
  \  return points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n"
- "  const len = nums.length;\n  const ret = new Array(len);\n  for (let i = 0; i\
  \ < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum +=\
  \ digits[j] * Math.pow(10, j);\n    }\n    ret[i] = sum;\n  }\n  return ret;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc,\
  \ d) => acc + d, 0));\n  const order = sums.map((sum, index) => [sum, index]);\n\
  \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
  \  }\n  nums.sort((a, b) => sum - b);\n  return nums;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).map(Number);\n  const sum_digits = digits.reduce((sum,\
  \ n) => sum + n, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit =\
  \ digits[i];\n    if (sum_digits - digit > 0) {\n      result.push(num);\n     \
  \ sum_digits -= digit;\n    } else {\n      result.push(digit);\n      sum_digits\
  \ += digit;\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString()).sort();\n  const points: number[] = [];\n  let sum\
  \ = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n\
  \    const index = digits.indexOf(digit);\n    sum += index === i ? digit : -digit;\n\
  \    points.push(sum);\n  }\n  return points.sort((a, b) => a - b).map(p => nums[p]);\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.reduce((acc,\
  \ d) => acc + d, 0);\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
  \ b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  const ret = new Array(len);\n  for (let i = 0; i\
  \ < len; i++) {\n    ret[i] = nums[i];\n  }\n  ret.sort((a, b) => {\n    const sumA\
  \ = sumDigits(a);\n    const sumB = sumDigits(b);\n    if (sumA < sumB) {\n    \
  \  return -1;\n    }\n    if (sumA > sumB) {\n      return 1;\n    }\n    return\
  \ 0;\n  });\n  return ret;\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = String(num).split(\"\
  \");\n    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n    \
  \  point += (digits[j] * Math.pow(10, j));\n    }\n    points[i] = point;\n  }\n\
  \  return points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
  \ digit) => sum + digit, 0);\n  const digits_len = digits.length;\n  const result\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    const\
  \ index = sum_digits - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(x => parseInt(x, 10));\n  const sums = digits.map(x => x * x);\n\
  \  const indexes = Array.from({ length: len }).map((_, i) => i);\n  indexes.sort((a,\
  \ b) => {\n    const sumA = sums[a];\n    const sumB = sums[b];\n    if (sumA <\
  \ sumB) {\n      return -1;\n    }\n    if (sumA > sumB) {\n      return 1;\n  \
  \  }\n    return a - b;\n  });\n  return indexes.map(i => nums[indexes[i]]);\n}\n"
- "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) =>\
  \ a + b, 0));\n  return nums.sort((a, b) => {\n    const sumA = sums[a];\n    const\
  \ sumB = sums[b];\n    return sumA - sumB;\n  });\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n);\n  const max_digit = Math.max(...digits);\n  const min_digit = Math.min(...digits);\n\
  \  const sum_digits_pow = Math.pow(10, sum_digits);\n  const max_digits_pow = Math.pow(10,\
  \ max_digit);\n  const min_digits_pow = Math.pow(10, min_digit);\n  const sum_digits_pow_minus_max_digit\
  \ = sum_digits_pow - max_digits_pow;\n  const sum_digits_pow_minus_min_digit = sum_digits_pow\
  \ - min_digits_pow;\n  const sum_digits_pow_minus_min_digit_pow = Math.pow(10, sum_digits_pow_minus_min_digit);\n\
  \  const sum_digits_pow_minus_max_digit_pow = Math.pow(10, sum_digits_pow_minus_max_digit);\n\
  \  const sum_digits_pow_minus_max_digit_pow_minus_min_digit = sum_digits_pow_minus_max_digit_pow\
  \ - min_digits_pow_minus_min_digit;\n  const sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow\
  \ = Math.pow(10, sum_digits_pow_minus_max_digit_pow_minus_min_digit);\n  const sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit\
  \ = sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow - min_digits_pow_minus_min_digit_pow;\n\
  \  const sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit_pow\
  \ = Math.pow(10, sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit);\n\
  \  const sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit_pow_minus_min_digit\
  \ = sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit_pow -\
  \ min_digits_pow_minus_min_digit_pow_minus_min_digit;\n  const sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit_pow_minus_min_digit_pow\
  \ = Math.pow(10, sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit_pow_minus_min_digit);\n\
  \  const sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit_pow_minus_min_digit_pow_minus_min_digit\
  \ = sum_digits_pow_minus_max_digit_pow_minus_min_digit_pow_minus_min_digit_pow_minus_min_digit_pow\
  \ - min_digits_pow_min"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((a,\
  \ b) => a + b, 0));\n  const sorted = sums.map(d => d.split('').reduce((a, b) =>\
  \ a + b, 0));\n  return sorted.sort((a, b) => a - b).map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const p = points[i] = new Array(2);\n    p[0] = nums[i];\n\
  \    p[1] = nums[i];\n    for (let j = i + 1; j < len; j++) {\n      const q = points[j]\
  \ = new Array(2);\n      q[0] = nums[j];\n      q[1] = nums[j];\n      q[0] -= p[0];\n\
  \      q[1] -= p[1];\n      if (q[0] !== 0) {\n        break;\n      }\n    }\n\
  \  }\n  return points;\n}\n"
- "  const map = new Map<number, number>();\n  for (let i = 0; i < nums.length; i++)\
  \ {\n    const num = nums[i];\n    const digits = num.toString().split('');\n  \
  \  let sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j],\
  \ 10);\n    }\n    map.set(sum, i);\n  }\n  const result = [];\n  for (let i = 0;\
  \ i < map.size; i++) {\n    result.push(nums[map.get(i)]);\n  }\n  return result;\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const len = digits.length;\n  const arr:\
  \ number[] = [];\n  for (let i = 0; i < len; i++) {\n    const index = digits[i].length\
  \ - 1;\n    const value = digits[i].substr(0, index);\n    const index = arr.indexOf(value);\n\
  \    if (index === -1) {\n      arr.push(value);\n    } else {\n      arr[index].push(nums[i]);\n\
  \    }\n  }\n  return arr;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((a,\
  \ b) => a + b, 0));\n  return digits.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
  }\n"
- "  const len = nums.length;\n  const ret = new Array(len);\n  for (let i = 0; i\
  \ < len; i++) {\n    ret[i] = nums[i];\n  }\n  ret.sort((a, b) => {\n    const aSum\
  \ = sum(a);\n    const bSum = sum(b);\n    if (aSum === bSum) {\n      return a.localeCompare(b);\n\
  \    }\n    return aSum - bSum;\n  });\n  return ret;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n, 10));\n\
  \  const sorted = sums.sort((a, b) => a - b);\n  const index = sorted.findIndex(n\
  \ => n > 0);\n  return sorted.slice(0, index).concat(sorted.slice(index + 1));\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(num => String(num).split('').sort());\n  const sums = digits.map(digits\
  \ => digits.reduce((acc, cur) => acc + cur, 0));\n  return digits.map(digits =>\
  \ digits.reduce((acc, cur) => acc + cur, 0)).sort((a, b) => sums[a] - sums[b]);\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const sorted = sums.sort((a, b) => a - b);\n  const\
  \ index = sums.indexOf(sorted[0]);\n  return nums.map((n, i) => i === index ? n\
  \ : null);\n}\n"
- "  const len = nums.length;\n  const map = new Map<number, number[]>();\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum +=\
  \ digits[j] * Math.pow(10, j);\n    }\n    const key = sum;\n    if (map.has(key))\
  \ {\n      map.get(key).push(i);\n    } else {\n      map.set(key, [i]);\n    }\n\
  \  }\n  const result = [];\n  for (const [key, val] of map) {\n    result.push(nums[val]);\n\
  \  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(n => +n);\n \
  \ const order = sums.map((sum, index) => sum).sort((a, b) => a - b);\n  const res\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const\
  \ index = order.indexOf(num);\n    if (index > -1) {\n      res.push(num);\n   \
  \   order.splice(index, 1);\n    }\n  }\n  return res;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(n => ~~(n + n));\n\
  \  const sorted = sums.sort((a, b) => a - b);\n  const result = [];\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    if (num >= 0) {\n      result.push(num);\n\
  \    } else {\n      result.push(sorted[sorted.length - 1 - i]);\n    }\n  }\n \
  \ return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n, 10));\n\
  \  const len = sums.length;\n  if (len === 0) {\n    return [];\n  }\n  const indices\
  \ = Array.from({ length: len }, (_, i) => i);\n  const [minSum, maxSum] = sums.reduce(\n\
  \    ([minSum, maxSum], sum) => (sum < minSum) ? [sum, minSum] : [maxSum, sum],\n\
  \    [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]\n  );\n  const orders =\
  \ indices.map(i => {\n    const digit = digits[i];\n    const index = sums.indexOf(digit);\n\
  \    return index === -1 ? i : index;\n  });\n  return orders.map(i => nums[indices[i]]);\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sums = digits.map(n => parseInt(n,\
  \ 10));\n  const len = sums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
  \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const index = sums.indexOf(sums[i]);\n\
  \    if (index > 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const len = digits.length;\n  const points =\
  \ new Array(len);\n  for (let i = 0; i < len; i++) {\n    const point = digits[i];\n\
  \    const index = points.findIndex(p => p === point);\n    if (index === -1) {\n\
  \      points[i] = point;\n    } else {\n      points[i] = points[index];\n    }\n\
  \  }\n  return points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => parseInt(n.toString(), 10));\n  const sum_digits = digits.reduce((sum,\
  \ digit) => sum + digit, 0);\n  const sorted_nums = nums.sort((a, b) => {\n    const\
  \ a_digit = parseInt(a.toString(), 10);\n    const b_digit = parseInt(b.toString(),\
  \ 10);\n    return sum_digits - a_digit - b_digit;\n  });\n  return sorted_nums;\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(n => +n);\n  const len\
  \ = sums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const sorted = [];\n\
  \  let index = 0;\n  while (index < len) {\n    const sum = sums[index];\n    const\
  \ pos = sums.indexOf(sum);\n    if (pos === -1) {\n      sorted.push(sum);\n   \
  \   index++;\n      continue;\n    }\n    sorted.push(nums[pos]);\n    index++;\n\
  \  }\n  return sorted;\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
  \    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n      point\
  \ += (digits[j] - '0') * (Math.pow(10, j));\n    }\n    points[i] = point;\n  }\n\
  \  return points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => Math.abs(n));\n  const sum_digits = digits.reduce((sum,\
  \ n) => sum + n);\n  const digits_len = digits.length;\n  const result = [];\n \
  \ for (let i = 0; i < digits_len; i++) {\n    const index = sum_digits - digits[i];\n\
  \    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n  return result;\n\
  }\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const indexes = sums.map((s, i) => i);\n  return indexes.sort((a,\
  \ b) => sums[a] - sums[b]).map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString());\n  const sum_digits = digits.reduce((sum,\
  \ digit) => sum + +digit, 0);\n  const digits_len = digits.length;\n  const result\
  \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const\
  \ digit = digits[i];\n    if (sum_digits - +digit >= 0) {\n      result.push(num);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  const ret = new Array(len);\n  for (let i = 0; i\
  \ < len; i++) {\n    ret[i] = nums[i];\n  }\n  ret.sort((a, b) => {\n    const sumA\
  \ = sum_digits(a);\n    const sumB = sum_digits(b);\n    if (sumA < sumB) {\n  \
  \    return -1;\n    }\n    if (sumA > sumB) {\n      return 1;\n    }\n    return\
  \ 0;\n  });\n  return ret;\n}\n"
- "  const map = new Map<number, number>();\n  for (const n of nums) {\n    const\
  \ digits = n.toString().split('')\n      .map(d => parseInt(d, 10));\n    const\
  \ sum = digits.reduce((sum, d) => sum + d, 0);\n    map.set(sum, n);\n  }\n  return\
  \ Array.from(map.values())\n    .sort((a, b) => a.toString().localeCompare(b.toString()))\n\
  \    .map(n => map.get(n));\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  const order = sums.map((s, i) => [s, i]);\n  return order.sort((a,\
  \ b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  const points = new Array<number>(len);\n  let point\
  \ = 0;\n  for (let i = 0; i < len; i++) {\n    const digits = nums[i].toString().split('');\n\
  \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum +=\
  \ parseInt(digits[j], 10);\n    }\n    points[point++] = sum;\n  }\n  points.sort((a,\
  \ b) => a - b);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result[i]\
  \ = points[point++];\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(n => ~~(n / 10));\n\
  \  const indexes = sums.map((sum, i) => sums.indexOf(sum));\n  return indexes.sort((a,\
  \ b) => a - b).map(i => nums[i]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  const order = sums.map((sum, index) => [sum, index]);\n\
  \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum +\
  \ n);\n  const digits_len = digits.length;\n  const sum_digits_len = sum_digits\
  \ % 10;\n  if (sum_digits_len === 0) {\n    return nums.sort((a, b) => a - b);\n\
  \  }\n  const digits_len_sorted = [...digits_len, sum_digits_len];\n  const digits_len_sorted_sorted\
  \ = digits_len_sorted.sort();\n  const digits_len_sorted_sorted_reversed = digits_len_sorted_sorted.slice().reverse();\n\
  \  const digits_len_sorted_sorted_reversed_sorted = digits_len_sorted_sorted_reversed.sort();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed = digits_len_sorted_sorted_reversed.slice().reverse();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted = digits_len_sorted_sorted_reversed_sorted_reversed.sort();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed = digits_len_sorted_sorted_reversed_sorted_reversed_sorted.slice().reverse();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
  \ = digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed.sort();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
  \ = digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted.slice().reverse();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
  \ = digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sort();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
  \ = digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.slice().reverse();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
  \ = digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.sort();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
  \ = digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.slice().reverse();\n\
  \  const digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
  \ = digits_len_sorted_sorted_reversed_sorted_reversed_sorted_reversed_"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return digits.map((d, i) => sums[i] - +d);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc,\
  \ cur) => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
  }\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const p = points[i] = [];\n    for (let j = 0; j < len; j++)\
  \ {\n      if (nums[j] > 0) p.push(j);\n    }\n  }\n  return points.sort((a, b)\
  \ => points[a].length - points[b].length);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(num => String(num).split('').reduce((acc, cur) => acc + +cur,\
  \ 0));\n  const sums = digits.map(num => nums.indexOf(num));\n  return sums.sort((a,\
  \ b) => a - b).map(index => nums[index]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((acc, x)\
  \ => acc + x, 0);\n  const sorted_nums = nums.sort((a, b) => sum_digits - parseInt(b,\
  \ 10) - parseInt(a, 10));\n  return sorted_nums;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(x => parseInt(x, 10));\n  const sum_digits = digits.reduce((sum, digit)\
  \ => sum + digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const digit = digits[i];\n    if (digit\
  \ < sum_digits) {\n      result.push(nums[i]);\n    } else if (digit === sum_digits)\
  \ {\n      result.push(nums[i]);\n      result.push(digits[digits_len - i - 1]);\n\
  \    }\n  }\n  return result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
  \  }\n  return nums.sort((a, b) => sum - a + b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.reduce((acc, d, i) => acc\
  \ + d, 0);\n  const order = sums.map((d, i) => [d, i]);\n  return order.sort((a,\
  \ b) => a[0] - b[0]).map(a => a[1]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sums = digits.map(n => ~~(n / 10));\n\
  \  const indexes = sums.map((sum, i) => sums.indexOf(sum));\n  return nums.map((n,\
  \ i) => indexes[i] ? indexes[i] : n);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(x => Math.abs(x));\n  const sum_digits = digits.reduce((sum, digit)\
  \ => sum + digit, 0);\n  const digits_sum = digits.reduce((sum, digit) => sum +\
  \ digit, 0);\n  const digits_len = digits.length;\n  const result = [];\n  for (let\
  \ i = 0; i < len; i++) {\n    const digit = digits[i];\n    if (digit === digits_sum)\
  \ {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  const arr: number[] = [];\n  for (let i = 0; i <\
  \ len; i++) {\n    const num = nums[i];\n    const digits = String(num).split(\"\
  \");\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum\
  \ += Number(digits[j]);\n    }\n    arr.push(sum);\n  }\n  return arr.sort((a, b)\
  \ => a - b);\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
  \  }\n  nums.sort((a, b) => sum - a + b);\n  return nums;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((acc,\
  \ n) => acc + n, 0));\n  return digits.sort((a, b) => sums[a] - sums[b]);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(num => String(num).split('').sort().join(''));\n  const sums\
  \ = digits.map(num => Number(num));\n  return sums.sort((a, b) => a - b);\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
  \  }\n  return nums.sort((a, b) => sum - a + b);\n}\n"
- "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) =>\
  \ a + b, 0));\n  const order = sums.map((sum, i) => [sum, i]); // Sort by sum\n\
  \  return order.sort((a, b) => b[0] - a[0]).map(n => n[1]); // Sort by index\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(x => parseInt(x, 10));\n  const sums = digits.map(x => x * x);\n\
  \  const indexes = sums.map((x, i) => i);\n  const sorted = indexes.sort((a, b)\
  \ => sums[a] - sums[b]);\n  return indexes.map(i => nums[sorted[i]]);\n}\n"
- "  const len = nums.length;\n  const points = new Array<number>(len);\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('').reverse();\n\
  \    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n      point\
  \ += (digits[j] * Math.pow(10, j));\n    }\n    points[i] = point;\n  }\n  return\
  \ points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
  \ digits = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) =>\
  \ sum + n);\n  const digits_len = digits.length;\n  const result = [];\n  for (let\
  \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num / Math.pow(10,\
  \ digits_len - i);\n    if (sum_digits - digit > 0) {\n      result.push(num);\n\
  \    }\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').reduce((a,\
  \ b) => a + +b, 0));\n  const indexes = Array.from({ length: len }).map((_, i) =>\
  \ i);\n  return indexes.sort((a, b) => {\n    const sumA = sums[a];\n    const sumB\
  \ = sums[b];\n    return sumA - sumB;\n  });\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((acc,\
  \ n) => acc + n, 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a,\
  \ b) => a[0] - b[0]);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n\
  \    result.push(nums[sorted[i][1]]);\n  }\n  return result;\n}\n"
- "  const len = nums.length;\n  const points = new Array(len);\n  for (let i = 0;\
  \ i < len; i++) {\n    const num = nums[i];\n    const digits = String(num).split(\"\
  \");\n    const point = 0;\n    for (let j = 0; j < digits.length; j++) {\n    \
  \  point += (digits[j] - \"0\") * (j + 1);\n    }\n    points[i] = point;\n  }\n\
  \  return points.sort((a, b) => a - b);\n}\n"
- "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
  \ = nums.map(n => n.toString());\n  const sum_digits = digits.reduce((acc, cur)\
  \ => acc + cur, 0);\n  const digits_len = digits.length;\n  const result = [];\n\
  \  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit =\
  \ digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n    }\
  \ else {\n      result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return result;\n\
  }\n"
language: ts
name: HumanEval_145_order_by_points
prompt: '//Write a function which sorts the given list of integers

  // in ascending order according to the sum of their digits.

  // Note: if there are several items with similar sum of their digits,

  // order them based on their index in original list.

  // For example:

  // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]

  // >>> order_by_points([]) == []

  function order_by_points(nums: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
