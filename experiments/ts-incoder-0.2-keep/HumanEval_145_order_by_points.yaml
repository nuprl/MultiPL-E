name: HumanEval_145_order_by_points
language: humaneval_to_typescript.py
prompt: "//Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([]) == []\nfunction order_by_points(nums:\
  \ number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["  const len = nums.length;\n  const ret = new Array(len);\n  for (let\
    \ i = 0; i < len; i++) {\n    ret[i] = nums[i];\n  }\n  ret.sort((a, b) => {\n\
    \    const sumA = sum_digits(a);\n    const sumB = sum_digits(b);\n    if (sumA\
    \ < sumB) {\n      return -1;\n    }\n    if (sumA > sumB) {\n      return 1;\n\
    \    }\n    return 0;\n  });\n  return ret;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(x => parseInt(x,\
    \ 10));\n  const sum_digits = digits.reduce((sum, digit) => sum + digit, 0);\n\
    \  const digits_len = digits.length;\n  const result = [];\n  for (let i = 0;\
    \ i < len; i++) {\n    const digit = digits[i];\n    const index = sum_digits\
    \ - digit;\n    if (index >= 0) {\n      result.push(nums[index]);\n    }\n  }\n\
    \  return result;\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const len = nums.length;\n  const points = new Array(len);\n  for (let\
    \ i = 0; i < len; i++) {\n    points[i] = nums[i];\n  }\n  points.sort((a, b)\
    \ => {\n    const sumA = point_sum(a);\n    const sumB = point_sum(b);\n    if\
    \ (sumA < sumB) {\n      return -1;\n    }\n    if (sumA > sumB) {\n      return\
    \ 1;\n    }\n    return 0;\n  });\n  return points;\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n\
    \  const sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const order\
    \ = sums.map((s, i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a\
    \ => a[1]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(n => n.toString()).map(Number);\n  const\
    \ sum_digits = digits.reduce((sum, n) => sum + n, 0);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = digits[i];\n    if (sum_digits - digit < 0) {\n      result.push(num);\n\
    \    } else {\n      result.push(digit);\n    }\n  }\n  return result;\n}\n",
  "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) =>\
    \ a + b, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n.toString());\n  const sums = digits.map(n => Number(n));\n\
    \  const indexes = sums.map((sum, i) => sums.indexOf(sum) + i);\n  return indexes.sort((a,\
    \ b) => a - b);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return\
    \ nums;\n  }\n  const digits = nums.map(x => parseInt(x));\n  const sums = digits.reduce((acc,\
    \ x) => acc + x, 0);\n  const order = Array.from({ length }, (_, i) => sums -\
    \ digits[i]);\n  return nums.map(x => order[x - 1]);\n}\n", "  let result: number[]\
    \ = [];\n  let map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n \
    \   let num = nums[i];\n    let digits = num.toString().split('')\n    let sum\
    \ = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n\
    \    }\n    map.set(sum, num);\n  }\n  for (let i = 0; i < nums.length; i++) {\n\
    \    let num = nums[i];\n    let sum = 0;\n    for (let j = 0; j < num.toString().length;\
    \ j++) {\n      sum += Number(num.toString().charAt(j));\n    }\n    let key =\
    \ map.get(sum);\n    result.push(key);\n    map.delete(sum);\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const sum_digits = digits.reduce((sum,\
    \ digit) => sum + +digit, 0);\n  const digits_len = digits.length;\n  const result\
    \ = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n    const\
    \ digit = sum_digits - num.toString().length;\n    if (digit >= 0) {\n      result.push(num);\n\
    \    } else {\n      result.unshift(num);\n    }\n  }\n  return result;\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n % 10);\n  const sum_digits = digits.reduce((sum, n) => sum\
    \ + n);\n  const digits_len = digits.length;\n  const result = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const num = nums[i];\n    const digit = num % 10;\n\
    \    if (digit === sum_digits) {\n      result.push(num);\n    }\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n    return [];\n\
    \  }\n  const digits = nums.map(n => n.toString()).sort();\n  const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n  return digits.map((d,\
    \ i) => sums[i] - +d);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(n => n.toString()).sort();\n\
    \  const buckets = digits.length < len ? [digits, []] : [[], digits];\n  for (let\
    \ i = 0; i < len; i++) {\n    const bucket = buckets[digits[i]];\n    bucket.push(nums[i]);\n\
    \  }\n  return buckets.reduce((acc, val) => acc.concat(val), []);\n}\n", "  const\
    \ len = nums.length;\n  const ret = new Array(len);\n  for (let i = 0; i < len;\
    \ i++) {\n    ret[i] = nums[i];\n  }\n  ret.sort((a, b) => {\n    const sumA =\
    \ sumDigits(a);\n    const sumB = sumDigits(b);\n    if (sumA > sumB) {\n    \
    \  return 1;\n    }\n    if (sumA < sumB) {\n      return -1;\n    }\n    return\
    \ 0;\n  });\n  return ret;\n}\n", "  const len = nums.length;\n  if (len === 0)\
    \ {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const\
    \ sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n \
    \ return sums.sort((a, b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n\
    \  const points = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const\
    \ num = nums[i];\n    const digits = String(num).split('');\n    const point =\
    \ 0;\n    for (let j = 0; j < digits.length; j++) {\n      point += (digits[j]\
    \ - '0') * (Math.pow(10, j));\n    }\n    points[i] = point;\n  }\n  return points.sort((a,\
    \ b) => a - b).map(i => nums[i]);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return [];\n  }\n  const digits = nums.map(n => Math.abs(n));\n\
    \  const sum_digits = digits.reduce((sum, n) => sum + n);\n  const digits_sum\
    \ = digits.reduce((sum, n) => sum + n);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = num % 10;\n    if (digit === 0) {\n      continue;\n    }\n\
    \    const index = sum_digits - digits_sum + digit;\n    if (index >= 0) {\n \
    \     result.push(nums[index]);\n    }\n  }\n  return result;\n}\n", "  const\
    \ len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits\
    \ = nums.map(n => n % 10);\n  const sums = digits.reduce((sum, digit) => sum +\
    \ digit, 0);\n  const indexes = nums.map((n, i) => sums - digits[i]);\n  return\
    \ indexes.sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n  if (len\
    \ === 0) {\n    return [];\n  }\n  const digits = nums.map(n => n % 10);\n  const\
    \ sum_digits = digits.reduce((sum, n) => sum + n);\n  const digits_len = digits.length;\n\
    \  const result = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digit = num % 10;\n    if (sum_digits - digit >= 0) {\n      result.push(num);\n\
    \    } else {\n      result.push(nums[digits_len - i - 1]);\n    }\n  }\n  return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
