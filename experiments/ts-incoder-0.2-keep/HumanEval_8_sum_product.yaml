completions:
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [numbers[0], 1]);\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n\
  \  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const sum = numbers.reduce((sum,\
  \ number) => sum + number, 0);\n  const product = numbers.reduce((product, number)\
  \ => product * number, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [numbers[0], 1]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = 0;\n  const\
  \ product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n\
  \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [numbers[0], 1]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(\n    (acc, cur) => ([acc[0] + cur, acc[1] + cur]),\n    [0,\
  \ 0]\n  );\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ n) => acc + n, 0);\n  const product = numbers.reduce((acc, n) => acc * n, 1);\n\
  \  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = 0;\n  const\
  \ product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n\
  \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = 0;\n  const\
  \ product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n\
  \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(\n    (acc, curr) => ([acc[0] + curr, acc[1] + curr * curr]),\n\
  \    [0, 0]\n  );\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers[0];\n\
  \  const product = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    sum +=\
  \ numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const sum = numbers[0];\n\
  \  const product = 1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    sum +=\
  \ numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [numbers[0], 1]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(\n    (acc, cur) => [acc[0] + cur, acc[1] + cur * cur],\n   \
  \ [numbers[0], numbers[0]]\n  );\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = 0;\n  const\
  \ product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n\
  \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [numbers[0], 1]);\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers[0];\n\
  \  const product = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    sum +=\
  \ numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers[0];\n\
  \  const product = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    sum +=\
  \ numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((a,\
  \ b) => a + b, 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return\
  \ [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, []);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [numbers[0], 1]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers[0];\n\
  \  const product = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    sum +=\
  \ numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++)\
  \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
  }\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ val) => acc + val, 0);\n  const product = numbers.reduce((acc, val) => acc * val,\
  \ 1);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  let sum = 0;\n  let product\
  \ = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n \
  \   product *= numbers[i];\n  }\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product]\
  \ = numbers.reduce(([sum, product], number) => {\n    return [sum + number, product\
  \ * number];\n  }, [0, 0]);\n  return [sum, product];\n}\n"
- "  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const sum = numbers.reduce((acc,\
  \ curr) => acc + curr, 0);\n  const product = numbers.reduce((acc, curr) => acc\
  \ * curr, 1);\n  return [sum, product];\n}\n"
language: ts
name: HumanEval_8_sum_product
prompt: '//For a given list of integers, return a tuple consisting of a sum and a
  product of all the integers in a list.

  // Empty sum should be equal to 0 and empty product should be equal to 1.

  // >>> sum_product([])

  // (0, 1)

  // >>> sum_product([1, 2, 3, 4])

  // (10, 24)

  function sum_product(numbers: number[]): [number, number] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
  \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
  \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
  \ 10]);\n}\n\ntest();"
