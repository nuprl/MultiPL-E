completions:
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len < 2) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = partition(array);\n  if (sumOfFirstAndLast(array, firstIndex,\
  \ lastIndex) % 2 === 0) {\n    return sort_array(array.slice(firstIndex, lastIndex\
  \ + 1));\n  } else {\n    return sort_array(array.slice(firstIndex, lastIndex -\
  \ 1));\n  }\n}\n"
- "\tlet result: number[] = [];\n\tlet sum: number = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t\tif (sum % 2 === 0) {\n\t\t\tresult.push(array[i]);\n\
  \t\t} else {\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array.length - 1 -\
  \ i);\n\t\t}\n\t}\n\treturn result;\n}\n"
- "\tlet sum = 0;\n\tlet result = [];\n\tfor (let i = 0; i < array.length; i++) {\n\
  \t\tsum += array[i];\n\t\tresult.push(array[i]);\n\t}\n\tif (sum % 2 === 0) {\n\t\
  \tresult.sort((a, b) => a - b);\n\t} else {\n\t\tresult.sort((a, b) => b - a);\n\
  \t}\n\treturn result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right\
  \ = array.slice(mid);\n  const leftSum = left.reduce((acc, val) => acc + val, 0);\n\
  \  const rightSum = right.reduce((acc, val) => acc + val, 0);\n  if (leftSum % 2\
  \ === 1) {\n    return sort_array(left).concat(right);\n  }\n  if (rightSum % 2\
  \ === 0) {\n    return sort_array(right).concat(left);\n  }\n  return left.concat(right);\n\
  }\n"
- "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tfor (let i =\
  \ 0; i < array.length; i++) {\n\t\tresult.push(array[i]);\n\t}\n\tif (odd) {\n\t\
  \tresult.sort((a, b) => a - b);\n\t} else {\n\t\tresult.sort((a, b) => b - a);\n\
  \t}\n\treturn result;\n}\n"
- "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tresult = array.sort((a,\
  \ b) => a - b);\n\t} else {\n\t\tresult = array.sort((a, b) => b - a);\n\t}\n\t\
  return result;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = partition(array);\n  if (lastIndex - firstIndex ===\
  \ 1) {\n    return array;\n  }\n  const midIndex = firstIndex + (lastIndex - firstIndex)\
  \ / 2;\n  const midValue = array[midIndex];\n  const isOdd = midValue % 2 === 1;\n\
  \  return isOdd ? sort_array(array.slice(0, midIndex)) : sort_array(array.slice(midIndex\
  \ + 1));\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const result: number[] = [];\n  for (let i = 0; i < array.length; i++) {\n  \
  \  const sum: number = array[i];\n    if (sum % 2 === 0) {\n      result.push(array[i]);\n\
  \    } else {\n      result.push(array[i]);\n      result.push(array.length - 1\
  \ - i);\n    }\n  }\n  return result;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet result: number[] = [];\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\t}\n\tif (sum % 2 ===\
  \ 0) {\n\t\tresult.sort((a, b) => a - b);\n\t} else {\n\t\tresult.sort((a, b) =>\
  \ b - a);\n\t}\n\treturn result;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet result: number[] = [];\n\tfor (let i = 0;\
  \ i < array.length; i++) {\n\t\tlet value = array[i];\n\t\tif (odd === (sum - value)\
  \ % 2 === 1) {\n\t\t\tresult.push(value);\n\t\t} else {\n\t\t\tresult.unshift(value);\n\
  \t\t}\n\t}\n\treturn result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet result: number[] = [];\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\t}\n\tif (sum % 2 ===\
  \ 0) {\n\t\tresult.sort((a, b) => a - b);\n\t} else {\n\t\tresult.sort((a, b) =>\
  \ b - a);\n\t}\n\treturn result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return [];\n  }\n  const [first,\
  \ ...rest] = array;\n  const sum = first + rest.reduce((acc, val) => acc + val,\
  \ 0);\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else\
  \ {\n    return array.sort((a, b) => b - a);\n  }\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  let\
  \ sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += array[i];\n  }\n  if (sum\
  \ % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a,\
  \ b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet temp = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\
  \tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\
  \t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet temp = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\
  \tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\
  \t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return [];\n  }\n  const sum\
  \ = array.reduce((acc, val) => acc + val, 0);\n  const isOdd = sum % 2 === 1;\n\
  \  const isEven = sum % 2 === 0;\n  if (isOdd) {\n    array.sort((a, b) => a - b);\n\
  \  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tresult = array.sort((a,\
  \ b) => a - b);\n\t} else {\n\t\tresult = array.sort((a, b) => b - a);\n\t}\n\t\
  return result;\n}\n"
- "  const sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
  \ number, last: number) => sum(1, last) % 2 === 1;\n  const isEven = (first: number,\
  \ last: number) => sum(1, last) % 2 === 0;\n  const sortedArray = array.sort((a,\
  \ b) => {\n    if (isOdd(a, b)) {\n      return -1;\n    }\n    if (isEven(a, b))\
  \ {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedArray;\n}\n"
- "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t\tif (sum % 2 === 0) {\n\t\t\tresult.push(array[i]);\n\
  \t\t} else {\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array.length - i -\
  \ 1);\n\t\t}\n\t}\n\treturn result;\n}\n"
- "\tconst len = array.length;\n\tlet sum = 0;\n\tfor (let i = 0; i < len; i++) {\n\
  \t\tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a -\
  \ b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  const sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
  \ number, last: number) => sum(1, last) % 2 === 1;\n  const isEven = (first: number,\
  \ last: number) => sum(1, last) % 2 === 0;\n  return array.sort((a, b) => {\n  \
  \  if (isOdd(a, b)) {\n      return -1;\n    }\n    if (isEven(a, b)) {\n      return\
  \ 1;\n    }\n    return a - b;\n  });\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [first, ...rest] = array;\n  const [sum, ...rest2] = rest;\n  if (sum % 2 ===\
  \ 0) {\n    return sort_array(rest);\n  }\n  return sort_array(rest2);\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return [];\n  }\n  const firstValue\
  \ = array[0];\n  const lastValue = array[len - 1];\n  const firstIndex = 0;\n  const\
  \ lastIndex = 0;\n  while (firstIndex < len && firstIndex < lastIndex) {\n    const\
  \ sum = firstValue + lastValue;\n    if (sum % 2 === 0) {\n      lastIndex = firstIndex;\n\
  \    } else {\n      firstIndex = lastIndex;\n    }\n  }\n  return [...array.slice(firstIndex,\
  \ lastIndex + 1)];\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex]\
  \ = array.sort((a, b) => a - b);\n  if (firstIndex === lastIndex) {\n    return\
  \ array;\n  }\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd\
  \ ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a);\n}\n"
- "\tlet result: number[] = [];\n\tlet sum: number = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t\tif (sum % 2 === 0) {\n\t\t\tresult.push(array[i]);\n\
  \t\t} else {\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array.length - 1 -\
  \ i);\n\t\t}\n\t}\n\treturn result;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
  \ number, last: number) => sum(1, last) % 2 === 1;\n  const isEven = (first: number,\
  \ last: number) => sum(1, last) % 2 === 0;\n  const sortedArray = array.sort((a,\
  \ b) => {\n    if (isOdd(a, b)) {\n      return -1;\n    }\n    if (isEven(a, b))\
  \ {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedArray;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return [];\n  }\n  const sum\
  \ = (array[0] + array[len - 1]);\n  if (sum % 2 === 0) {\n    return array.sort((a,\
  \ b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = get_index_pair(array);\n  const sum = array[firstIndex]\
  \ + array[lastIndex];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a\
  \ - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex]\
  \ = array.sort((a, b) => a - b);\n  if (firstIndex === lastIndex) {\n    return\
  \ array;\n  }\n  return [...array.slice(0, firstIndex), ...array.slice(firstIndex\
  \ + 1, lastIndex), ...array.slice(lastIndex + 1)];\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = [0, len - 1];\n  const [firstSum, lastSum] = [array[0],\
  \ array[len - 1]];\n  if (firstSum % 2 === 0 && lastSum % 2 === 0) {\n    return\
  \ array.sort((a, b) => a - b);\n  }\n  if (firstSum % 2 === 1) {\n    return array.sort((a,\
  \ b) => b - a);\n  }\n  return array.sort((a, b) => a - b);\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const result: number[] = [];\n  const sum = (first: number, last: number) =>\
  \ first + last;\n  const even = (first: number, last: number) => first % 2 === 0;\n\
  \  const odd = (first: number, last: number) => first % 2 === 1;\n  const compare\
  \ = (a: number, b: number) => {\n    if (even(a, b)) {\n      return -1;\n    }\n\
  \    if (even(b, a)) {\n      return 1;\n    }\n    return sum(a, b) - sum(b, a);\n\
  \  };\n  array.sort((a, b) => compare(a, b));\n  for (let i = 0; i < array.length;\
  \ i++) {\n    result.push(array[i]);\n  }\n  return result;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  const len = array.length;\n  if (len <= 1) {\n    return array;\n  }\n  const\
  \ mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right\
  \ = array.slice(mid);\n  const sumLeft = left[mid];\n  const sumRight = right[0];\n\
  \  if (sumLeft % 2 === 1) {\n    return sort_array(left).concat(sort_array(right));\n\
  \  }\n  if (sumRight % 2 === 0) {\n    return sort_array(right).concat(sort_array(left));\n\
  \  }\n  return left.concat(right);\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet descending = (sum % 2 === 0);\n\tlet sortedArray\
  \ = array.slice();\n\tif (odd) {\n\t\tsortedArray.sort((a, b) => a - b);\n\t} else\
  \ {\n\t\tsortedArray.sort((a, b) => b - a);\n\t}\n\tif (descending) {\n\t\tsortedArray.reverse();\n\
  \t}\n\treturn sortedArray;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return [];\n  }\n  const sum\
  \ = (first: number, last: number) => first + last;\n  const isOdd = (first: number,\
  \ last: number) => last - first === 1;\n  const isEven = (first: number, last: number)\
  \ => last - first === 0;\n  const isSumOdd = (first: number, last: number) => sum(first,\
  \ last) % 2 === 1;\n  const isSumEven = (first: number, last: number) => sum(first,\
  \ last) % 2 === 0;\n  const isFirstOdd = (first: number, last: number) => first\
  \ % 2 === 1;\n  const isFirstEven = (first: number, last: number) => first % 2 ===\
  \ 0;\n  const isLastOdd = (first: number, last: number) => last % 2 === 1;\n  const\
  \ isLastEven = (first: number, last: number) => last % 2 === 0;\n  const isFirstSumOdd\
  \ = (first: number, last: number) => isSumOdd(first, last);\n  const isFirstSumEven\
  \ = (first: number, last: number) => isSumEven(first, last);\n  const isLastSumOdd\
  \ = (first: number, last: number) => isSumOdd(last, first);\n  const isLastSumEven\
  \ = (first: number, last: number) => isSumEven(last, first);\n  const isFirstFirstOdd\
  \ = (first: number, last: number) => isFirstOdd(first, last);\n  const isFirstFirstEven\
  \ = (first: number, last: number) => isFirstEven(first, last);\n  const isLastLastOdd\
  \ = (first: number, last: number) => isLastOdd(last, first);\n  const isLastLastEven\
  \ = (first: number, last: number) => isLastEven(last, first);\n  const isFirstLastOdd\
  \ = (first: number, last: number) => isLastOdd(first, last);\n  const isFirstLastEven\
  \ = (first: number, last: number) => isLastEven(first, last);\n  const isFirstSumSumOdd\
  \ = (first: number, last: number) => isFirstSumOdd(first, last);\n  const isFirstSumSumEven\
  \ = (first: number, last: number) => isFirstSumEven(first, last);\n  const isLastSumSumOdd\
  \ = (first: number, last: number) => isLastSumOdd(last, first);\n  const isLastSumSumEven\
  \ = (first: number, last: number) => isLastSumEven(last, first);\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return [];\n  }\n  const sum\
  \ = (first: number, last: number) => {\n    if (first > last) {\n      return first\
  \ - last;\n    }\n    return last - first;\n  };\n  const odd = (first: number,\
  \ last: number) => {\n    return sum(0, len) === 1;\n  };\n  const even = (first:\
  \ number, last: number) => {\n    return sum(0, len) === 0;\n  };\n  const sortedArray\
  \ = array.sort((a, b) => {\n    if (odd(a, b)) {\n      return -1;\n    }\n    if\
  \ (even(a, b)) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedArray;\n\
  }\n"
- "  const len = array.length;\n  if (len < 2) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = get_index_range(array);\n  const sumFirst = array[firstIndex];\n\
  \  const sumLast = array[lastIndex];\n  if (sumFirst % 2 === sumLast % 2) {\n  \
  \  return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b)\
  \ => b - a);\n  }\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet temp = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\
  \tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[array.length - i - 1];\n\
  \t\t\tarray[array.length - i - 1] = temp;\n\t\t}\n\t} else {\n\t\tfor (let i = array.length\
  \ - 1; i >= 0; i--) {\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[array.length\
  \ - i - 1];\n\t\t\tarray[array.length - i - 1] = temp;\n\t\t}\n\t}\n\treturn array;\n\
  }\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n\n  const sum = array.reduce((acc,\
  \ val) => acc + val, 0);\n  const isOdd = sum % 2 === 1;\n\n  return isOdd ? array.sort((a,\
  \ b) => a - b) : array.sort((a, b) => b - a);\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t\tif (sum % 2 === 0) {\n\t\t\tresult.push(array[i]);\n\
  \t\t} else {\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array.length - 1 -\
  \ i);\n\t\t}\n\t}\n\treturn result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else\
  \ {\n    return array.sort((a, b) => b - a);\n  }\n}\n"
- "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t\tif (sum % 2 === 0) {\n\t\t\tresult.push(array[i]);\n\
  \t\t} else {\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array[i]);\n\t\t}\n\
  \t}\n\treturn result;\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex]\
  \ = array.sort((a, b) => a - b);\n  const isOdd = (firstIndex + lastIndex) % 2 ===\
  \ 1;\n  return isOdd ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a);\n\
  }\n"
- "\tconst len = array.length;\n\tlet sum = 0;\n\tfor (let i = 0; i < len; i++) {\n\
  \t\tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a -\
  \ b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tconst len = array.length;\n\tlet sum = 0;\n\tfor (let i = 0; i < len; i++) {\n\
  \t\tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a -\
  \ b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tresult = array.sort((a,\
  \ b) => a - b);\n\t} else {\n\t\tresult = array.sort((a, b) => b - a);\n\t}\n\t\
  return result;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else if (even) {\n\t\tarray.sort((a, b) => b -\
  \ a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len <= 1) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = get_index_range(array);\n  const [firstValue, lastValue]\
  \ = get_value_range(array);\n  const sum = firstIndex + lastIndex;\n  if (sum %\
  \ 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a,\
  \ b) => b - a);\n  }\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet result = array.slice();\n\tlet swap;\n\t\
  for (let i = 0; i < array.length; i++) {\n\t\tswap = result.shift();\n\t\tlet index\
  \ = result.indexOf(swap);\n\t\tif (odd === true) {\n\t\t\tresult.splice(index, 0,\
  \ array[i]);\n\t\t} else {\n\t\t\tresult.splice(index, 0, array[i]);\n\t\t\tresult.push(swap);\n\
  \t\t}\n\t}\n\treturn result;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right\
  \ = array.slice(mid);\n  const sumLeft = left[mid];\n  const sumRight = right[0];\n\
  \  if (sumLeft % 2 === 1) {\n    return sort_array(left).concat(sort_array(right));\n\
  \  }\n  if (sumRight % 2 === 0) {\n    return sort_array(left).concat(sort_array(right));\n\
  \  }\n  return left.concat(right);\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [first, ...rest] = array;\n  const sum = first + rest.reduce((acc, val) => acc\
  \ + val, 0);\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n\
  \  }\n  return array.sort((a, b) => b - a);\n}\n"
- "  const sum = array.reduce((acc, val) => acc + val, 0);\n  if (sum % 2 === 0) {\n\
  \    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n\
  \  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [first, ...rest] = array;\n  const [last, ...sorted] = array;\n  if (last - first\
  \ === 1) {\n    return sorted;\n  }\n  if (last - first === 2) {\n    return [first,\
  \ ...rest];\n  }\n  if (last - first === 3) {\n    return [first, last, ...rest];\n\
  \  }\n  if (last - first === 4) {\n    return [first, last, ...rest];\n  }\n  if\
  \ (last - first === 5) {\n    return [first, last, ...rest];\n  }\n  if (last -\
  \ first === 6) {\n    return [first, last, ...rest];\n  }\n  if (last - first ===\
  \ 7) {\n    return [first, last, ...rest];\n  }\n  if (last - first === 8) {\n \
  \   return [first, last, ...rest];\n  }\n  if (last - first === 9) {\n    return\
  \ [first, last, ...rest];\n  }\n  if (last - first === 10) {\n    return [first,\
  \ last, ...rest];\n  }\n  if (last - first === 11) {\n    return [first, last, ...rest];\n\
  \  }\n  if (last - first === 12) {\n    return [first, last, ...rest];\n  }\n  if\
  \ (last - first === 13) {\n    return [first, last, ...rest];\n  }\n  if (last -\
  \ first === 14) {\n    return [first, last, ...rest];\n  }\n  if (last - first ===\
  \ 15) {\n    return [first, last, ...rest];\n  }\n  if (last - first === 16) {\n\
  \    return [first, last, ...rest];\n  }\n  if (last - first === 17) {\n    return\
  \ [first, last, ...rest];\n  }\n  if (last - first === 18) {\n    return [first,\
  \ last, ...rest];\n  }\n  if (last - first === 19) {\n    return [first, last, ...rest];\n\
  \  }\n  if (last - first === 20) {\n    return [first, last, ...rest];\n  }\n  if\
  \ (last - first === 21) {\n    return [first, last, ...rest];\n  }\n  if (last -\
  \ first === 22) {\n    return [first, last, ...rest];\n  }\n  if (last - first ===\
  \ 23) {\n    return [first, last, ...rest];\n  }\n  if (last - first === 24) {\n\
  \    return [first, last, ...rest];\n  }\n  if (last - first === 25) {\n    return\
  \ [first, last, ...rest];\n  }\n  if (last - first === 26) {\n    return [first,\
  \ last, .."
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet result = [];\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tlet index = array[i];\n\t\tif (odd === true) {\n\t\t\tresult.unshift(index);\n\
  \t\t} else {\n\t\t\tresult.push(index);\n\t\t}\n\t}\n\treturn result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tsum += array[i];\n\t\tif (sum % 2 === 0) {\n\t\t\tresult.push(array[i]);\n\
  \t\t} else {\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array[i]);\n\t\t}\n\
  \t}\n\treturn result;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right\
  \ = array.slice(mid);\n  const sumLeft = left[mid];\n  const sumRight = right[0];\n\
  \  if (sumLeft % 2 === 0 && sumRight % 2 !== 0) {\n    return sort_array(left).concat(sort_array(right));\n\
  \  }\n  if (sumLeft % 2 !== 0 && sumRight % 2 === 0) {\n    return sort_array(right).concat(sort_array(left));\n\
  \  }\n  if (sumLeft % 2 === 0 && sumRight % 2 === 0) {\n    return left.concat(right);\n\
  \  }\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = partition(array, 0);\n  if (lastIndex - firstIndex ===\
  \ 1) {\n    return array;\n  }\n  const [firstIndex2, lastIndex2] = partition(array,\
  \ firstIndex);\n  const [firstIndex3, lastIndex3] = partition(array, lastIndex);\n\
  \  if (sumOfArray(firstIndex2, lastIndex2) === 1) {\n    return sort_array(firstIndex3);\n\
  \  }\n  if (sumOfArray(firstIndex3, lastIndex3) === 1) {\n    return sort_array(lastIndex2);\n\
  \  }\n  return sort_array(firstIndex2);\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ sum = Math.floor(array.reduce((acc, val) => acc + val, 0) / 2);\n  const isOdd\
  \ = sum % 2 === 1;\n  const isEven = sum % 2 === 0;\n  if (isOdd) {\n    return\
  \ array.sort((a, b) => a - b);\n  }\n  return array.sort((a, b) => b - a);\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const result: number[] = [];\n  let sum = 0;\n  for (let i = 0; i < array.length;\
  \ i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a,\
  \ b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n\
  }\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len <= 0) {\n    return array;\n  }\n  const\
  \ sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
  \ number, last: number) => sum(0, last) % 2 === 1;\n  const isEven = (first: number,\
  \ last: number) => sum(0, last) % 2 === 0;\n  const sortedArray = array.sort((a,\
  \ b) => {\n    if (isOdd(a, b)) {\n      return -1;\n    }\n    if (isEven(a, b))\
  \ {\n      return 1;\n    }\n    return a - b;\n  });\n  return sortedArray;\n}\n"
- "  const sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
  \ number, last: number) => sum(0, last) % 2 === 1;\n  const isEven = (first: number,\
  \ last: number) => sum(0, last) % 2 === 0;\n  const sorted = array.sort((a, b) =>\
  \ {\n    if (isOdd(a, b)) {\n      return -1;\n    }\n    if (isEven(a, b)) {\n\
  \      return 1;\n    }\n    return a - b;\n  });\n  return sorted;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
  \ number, last: number) => sum(0, last) % 2 === 1;\n  const isEven = (first: number,\
  \ last: number) => sum(0, last) % 2 === 0;\n  const isEvenOrOdd = (first: number,\
  \ last: number) => isEven(first, last) || isOdd(first, last);\n  const isOddOrEven\
  \ = (first: number, last: number) => isOdd(first, last) || isEven(first, last);\n\
  \  const isOddOrEvenOrOdd = (first: number, last: number) => isOddOrEven(first,\
  \ last) || isEvenOrOdd(first, last);\n  const isEvenOrOddOrEven = (first: number,\
  \ last: number) => isEvenOrOdd(first, last) || isEven(first, last);\n  const isOddOrEvenOrOddOrEven\
  \ = (first: number, last: number) => isOddOrEven(first, last) || isOdd(first, last)\
  \ || isEven(first, last);\n  const isEvenOrOddOrEvenOrOdd = (first: number, last:\
  \ number) => isEvenOrOdd(first, last) || isOdd(first, last) || isEven(first, last)\
  \ || isOdd(first, last);\n  const isEvenOrOddOrEvenOrOddOrEven = (first: number,\
  \ last: number) => isEvenOrOdd(first, last) || isOdd(first, last) || isEven(first,\
  \ last) || isOdd(first, last) || isEven(first, last);\n  const isEvenOrOddOrEvenOrOddOrEvenOrOdd\
  \ = (first: number, last: number) => isEvenOrOdd(first, last) || isOdd(first, last)\
  \ || isEven(first, last) || isOdd(first, last) || isEven(first, last) || isOdd(first,\
  \ last) || isEven(first, last);\n  const isEvenOrOddOrEvenOrOddOrEvenOrOddOrOdd\
  \ = (first: number, last: number) => isEvenOrOdd(first, last) || isOdd(first, last)\
  \ || isEven(first, last) || isOdd(first, last) || isEven(first, last) || isOdd(first,\
  \ last) || isEven(first, last) || isOdd(first, last) || isEven(first, last) || isOdd(first,\
  \ last);\n  const isEvenOrOddOrEvenOrOdd"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ sum = (first: number, last: number) => first + last;\n  const odd = (first: number,\
  \ last: number) => first % 2 === 1;\n  const even = (first: number, last: number)\
  \ => first % 2 === 0;\n  const compare = (a: number, b: number) => {\n    if (a\
  \ < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n  \
  \  return 0;\n  };\n  const sortedArray = array.slice().sort(compare);\n  if (odd(sum(0,\
  \ len - 1), sum(0, len - 1))) {\n    return sortedArray;\n  }\n  return sortedArray.sort(compare).reverse();\n\
  }\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet temp = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\
  \tsum += array[i];\n\t}\n\tfor (let i = 0; i < array.length; i++) {\n\t\ttemp =\
  \ sum - array[i];\n\t\tif (temp % 2 === 0) {\n\t\t\tarray.push(array[i]);\n\t\t\
  } else {\n\t\t\tarray.pop();\n\t\t}\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex]\
  \ = array.sort((a, b) => a - b);\n  if (firstIndex === lastIndex) {\n    return\
  \ array;\n  }\n  return [firstIndex, ...sort_array(array.slice(firstIndex + 1, lastIndex)),\
  \ lastIndex];\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet result = [];\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tlet value = array[i];\n\t\tif (odd) {\n\t\t\tresult.push(value);\n\
  \t\t} else {\n\t\t\tresult.push(array[i]);\n\t\t}\n\t}\n\treturn result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
  \ number, last: number) => sum(0, last) % 2 === 1;\n  const isEven = (first: number,\
  \ last: number) => sum(0, last) % 2 === 0;\n  return array.sort((a, b) => {\n  \
  \  if (isOdd(a, b)) {\n      return -1;\n    }\n    if (isEven(a, b)) {\n      return\
  \ 1;\n    }\n    return a - b;\n  });\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const sum = array.reduce((prev, cur) => prev + cur);\n  const isOdd = sum % 2\
  \ === 1;\n  return array.sort((a, b) => isOdd ? a - b : b - a);\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n\n  const [firstIndex, lastIndex]\
  \ = array.slice().sort((a, b) => a - b);\n  const isOdd = (firstIndex + lastIndex)\
  \ % 2 === 1;\n  return isOdd ? array.slice(firstIndex, lastIndex + 1) : array.slice(firstIndex,\
  \ lastIndex);\n}\n"
- "  const sum = array.reduce((acc, val) => acc + val, 0);\n  const isOdd = (sum %\
  \ 2 === 1);\n  const isEven = (sum % 2 === 0);\n  if (isOdd) {\n    array.sort((a,\
  \ b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n\
  }\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right\
  \ = array.slice(mid);\n  const sumLeft = Math.sum(left);\n  const sumRight = Math.sum(right);\n\
  \  if (sumLeft % 2 === 1) {\n    return sort_array(left).concat(sort_array(right));\n\
  \  }\n  if (sumRight % 2 === 0) {\n    return sort_array(right).concat(sort_array(left));\n\
  \  }\n  return sort_array(left).concat(sort_array(right));\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex]\
  \ = array.sort((a, b) => a - b);\n  if (firstIndex + lastIndex & 1) {\n    return\
  \ array.sort((a, b) => a - b);\n  }\n  return array.sort((a, b) => b - a);\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ sum = (first: number, last: number) => first + last;\n  const odd = (first: number,\
  \ last: number) => first % 2 === 1;\n  const even = (first: number, last: number)\
  \ => first % 2 === 0;\n  const compare = odd(sum(0, len - 1), sum(len - 1, len -\
  \ 1));\n  return array.sort((a, b) => compare(a, b));\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = get_first_last_index(array);\n  const [firstValue, lastValue]\
  \ = get_first_last_value(array);\n  const isOdd = (firstIndex + lastIndex) % 2 ===\
  \ 1;\n  const isEven = (firstIndex + lastIndex) % 2 === 0;\n  if (isOdd && isEven)\
  \ {\n    return array.sort((a, b) => a - b);\n  }\n  if (isOdd) {\n    return array.sort((a,\
  \ b) => b - a);\n  }\n  if (isEven) {\n    return array.sort((a, b) => a - b);\n\
  \  }\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else\
  \ {\n    return array.sort((a, b) => b - a);\n  }\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n\n  const [firstIndex, lastIndex]\
  \ = array.sort((a, b) => a - b);\n\n  if (firstIndex === lastIndex) {\n    return\
  \ array;\n  }\n\n  if (firstIndex % 2 === 0 && lastIndex % 2 !== 0) {\n    return\
  \ array.sort((a, b) => b - a);\n  }\n\n  return array.sort((a, b) => a - b);\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const result: number[] = [];\n  let sum = 0;\n  for (let i = 0; i < array.length;\
  \ i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a,\
  \ b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n\
  }\n"
- "  const sum = (first: number, last: number) => first + last;\n  const isOdd = (first:\
  \ number, last: number) => first % 2 === 1;\n  const isEven = (first: number, last:\
  \ number) => first % 2 === 0;\n  const isEvenOrOdd = (first: number, last: number)\
  \ => isEven(first, last) || isOdd(first, last);\n  const isOddOrEven = (first: number,\
  \ last: number) => isOdd(first, last) || isEven(first, last);\n  const isEvenOrOddOrBoth\
  \ = (first: number, last: number) => isEven(first, last) || isOdd(first, last);\n\
  \  const isOddOrEvenOrBoth = (first: number, last: number) => isOdd(first, last)\
  \ || isEven(first, last);\n  const isEvenOrOddOrBothOrBoth = (first: number, last:\
  \ number) => isEven(first, last) || isOdd(first, last);\n  const isOddOrEvenOrBothOrBothOrBoth\
  \ = (first: number, last: number) => isOdd(first, last) || isEven(first, last);\n\
  \  const isEvenOrOddOrBothOrBothOrBothOrBoth = (first: number, last: number) =>\
  \ isEven(first, last) || isOdd(first, last);\n  const isOddOrEvenOrBothOrBothOrBothOrBothOrBoth\
  \ = (first: number, last: number) => isOdd(first, last) || isEven(first, last);\n\
  \  const isEvenOrOddOrBothOrBothOrBothOrBothOrBothOrBoth = (first: number, last:\
  \ number) => isEven(first, last) || isOdd(first, last);\n  const isOddOrEvenOrBothOrBothOrBothOrBothOrBothOrBoth\
  \ = (first: number, last: number) => isOdd(first, last) || isEven(first, last);\n\
  \  const isEvenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBoth = (first: number,\
  \ last: number) => isEven(first, last) || isOdd(first, last);\n  const isOddOrEvenOrBothOrBothOrBothOrBothOrBothOrBothOrBoth\
  \ = (first: number, last: number) => isOdd(first, last) || isEven(first, last);\n\
  \  const isEvenOrOddOrBothOrBothOrBothOrBothOrBothOrBothOrBothOrBoth = (first: number,\
  \ last: number) => isEven(first, last) || isOdd("
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else\
  \ {\n    return array.sort((a, b) => b - a);\n  }\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ firstValue = array[0];\n  const lastValue = array[len - 1];\n  const firstIndex\
  \ = 0;\n  const lastIndex = 0;\n  let sum = 0;\n  while (firstIndex < len && sum\
  \ < firstValue + lastValue) {\n    sum += array[firstIndex];\n    firstIndex++;\n\
  \  }\n  while (firstIndex < len) {\n    array[firstIndex] = array[firstIndex - 1];\n\
  \    firstIndex++;\n  }\n  while (lastIndex < len) {\n    array[lastIndex] = array[lastIndex\
  \ + 1];\n    lastIndex++;\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tlet result = [];\n\tfor (let i = 0; i < array.length; i++) {\n\
  \t\tsum += array[i];\n\t\tresult.push(array[i]);\n\t}\n\tif (sum % 2 === 0) {\n\t\
  \tresult.sort((a, b) => a - b);\n\t} else {\n\t\tresult.sort((a, b) => b - a);\n\
  \t}\n\treturn result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex]\
  \ = array.sort((a, b) => a - b);\n  if (firstIndex === lastIndex) {\n    return\
  \ array;\n  }\n  if (firstIndex % 2 === 1) {\n    return array.sort((a, b) => b\
  \ - a);\n  }\n  return array.sort((a, b) => a - b);\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ sum = Math.floor(array.reduce((a, b) => a + b, 0) / 2);\n  if (sum % 2 === 0)\
  \ {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a, b) => b -\
  \ a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet newArray = array.slice();\n\tnewArray.sort((a,\
  \ b) => {\n\t\tif (odd) {\n\t\t\treturn a - b;\n\t\t} else {\n\t\t\treturn b - a;\n\
  \t\t}\n\t});\n\treturn newArray;\n}\n"
- "  if (array.length === 0) {\n    return array;\n  }\n  const [firstIndex, lastIndex]\
  \ = array.sort((a, b) => a - b);\n  if (firstIndex === lastIndex) {\n    return\
  \ array;\n  }\n  if (firstIndex % 2 === 1) {\n    return array.sort((a, b) => b\
  \ - a);\n  }\n  return array.sort((a, b) => a - b);\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet result = [];\n\tfor (let i = 0; i < array.length; i++) {\n\
  \t\tsum += array[i];\n\t\tresult.push(array[i]);\n\t}\n\tif (sum % 2 === 0) {\n\t\
  \tresult.sort((a, b) => a - b);\n\t} else {\n\t\tresult.sort((a, b) => b - a);\n\
  \t}\n\treturn result;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else\
  \ {\n    return array.sort((a, b) => b - a);\n  }\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ firstValue = array[0];\n  const lastValue = array[len - 1];\n  if (firstValue\
  \ === lastValue) {\n    return array;\n  }\n  const middleValue = firstValue + lastValue\
  \ / 2;\n  if (middleValue % 2 === 0) {\n    return sort_array(array.sort((a, b)\
  \ => a - b));\n  } else {\n    return sort_array(array.sort((a, b) => b - a));\n\
  \  }\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet temp = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\
  \tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\
  \t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tlet temp = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\
  \tsum += array[i];\n\t}\n\tif (sum % 2 === 0) {\n\t\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[array.length - i - 1];\n\
  \t\t\tarray[array.length - i - 1] = temp;\n\t\t}\n\t} else {\n\t\tfor (let i = array.length\
  \ - 1; i >= 0; i--) {\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[array.length\
  \ - i - 1];\n\t\t\tarray[array.length - i - 1] = temp;\n\t\t}\n\t}\n\treturn array;\n\
  }\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ sum = (first: number, last: number) => first + last;\n  const odd = (first: number,\
  \ last: number) => first % 2 === 1;\n  const even = (first: number, last: number)\
  \ => first % 2 === 0;\n  const compare = odd(sum(0, len - 1), sum(len - 1, len -\
  \ 1));\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n \
  \   if (compare(a, b)) {\n      return compare(b, a) ? 1 : -1;\n    }\n    return\
  \ compare(a, b) ? -1 : 1;\n  });\n  return sortedArray;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet result = [];\n\tfor (let i = 0; i < array.length;\
  \ i++) {\n\t\tlet value = array[i];\n\t\tif (odd === (sum - value) % 2 === 1) {\n\
  \t\t\tresult.push(value);\n\t\t} else {\n\t\t\tresult.push(sum - value);\n\t\t}\n\
  \t}\n\treturn result;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = get_first_last_index(array);\n  const [firstValue, lastValue]\
  \ = get_first_last_value(array);\n  if (firstIndex === lastIndex) {\n    return\
  \ array;\n  }\n  if (firstIndex < lastIndex) {\n    return sort_array(array.slice(firstIndex,\
  \ lastIndex)).concat(\n      array.slice(firstIndex, firstIndex + 1),\n      array.slice(firstIndex\
  \ + 1, lastIndex),\n    );\n  }\n  return sort_array(array.slice(firstIndex, lastIndex)).concat(\n\
  \    array.slice(firstIndex + 1, firstIndex + 1),\n    array.slice(firstIndex +\
  \ 1, lastIndex),\n  );\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tif (sum % 2 === 0) {\n\t\tarray.sort((a, b) => a - b);\n\t} else {\n\t\t\
  array.sort((a, b) => b - a);\n\t}\n\treturn array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ sum = (array[0] + array[len - 1]);\n  if (sum % 2 === 0) {\n    array.sort((a,\
  \ b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n\
  }\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right\
  \ = array.slice(mid);\n  const leftSum = sum(left);\n  const rightSum = sum(right);\n\
  \  if (leftSum > rightSum) {\n    return sort_array(left).concat(sort_array(right));\n\
  \  } else {\n    return sort_array(right).concat(sort_array(left));\n  }\n}\n"
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
- "  const len = array.length;\n  if (len === 0) {\n    return array;\n  }\n  const\
  \ [firstIndex, lastIndex] = get_index_range(array);\n  const [firstValue, lastValue]\
  \ = get_value_range(array);\n  if (firstIndex === lastIndex) {\n    return array;\n\
  \  }\n  if (firstIndex < lastIndex) {\n    const temp = array[firstIndex];\n   \
  \ array[firstIndex] = array[lastIndex];\n    array[lastIndex] = temp;\n  }\n  if\
  \ (firstValue + lastValue === len) {\n    return array;\n  }\n  if (firstValue +\
  \ lastValue === len + 1) {\n    const temp = array[firstIndex];\n    array[firstIndex]\
  \ = array[firstValue + lastValue - 1];\n    array[firstValue + lastValue - 1] =\
  \ temp;\n    return array;\n  }\n  if (firstValue + lastValue === len + 2) {\n \
  \   const temp = array[firstIndex];\n    array[firstIndex] = array[firstValue +\
  \ lastValue - 2];\n    array[firstValue + lastValue - 2] = temp;\n    return array;\n\
  \  }\n  if (firstValue + lastValue === len + 3) {\n    const temp = array[firstIndex];\n\
  \    array[firstIndex] = array[firstValue + lastValue - 3];\n    array[firstValue\
  \ + lastValue - 3] = temp;\n    return array;\n  }\n  if (firstValue + lastValue\
  \ === len + 4) {\n    const temp = array[firstIndex];\n    array[firstIndex] = array[firstValue\
  \ + lastValue - 4];\n    array[firstValue + lastValue - 4] = temp;\n    return array;\n\
  \  }\n  if (firstValue + lastValue === len + 5) {\n    const temp = array[firstIndex];\n\
  \    array[firstIndex] = array[firstValue + lastValue - 5];\n    array[firstValue\
  \ + lastValue - 5] = temp;\n    return array;\n  }\n  if (firstValue + lastValue\
  \ === len + 6) {\n    const temp = array[firstIndex];\n    array[firstIndex] = array[firstValue\
  \ + lastValue - 6];\n    array[firstValue + lastValue - 6] = temp;\n    return array;\n\
  \  }\n  if (firstValue + lastValue === len + 7) {\n    const temp = array[firstIndex];\n\
  \    array[firstIndex] = array[firstValue + lastValue - 7];\n    array[firstValue\
  \ + lastValue - 7] = temp;\n    return array;\n  }\n  if (firstValue + lastValue\
  \ === len + 8) {\n    const temp = array[firstIndex];\n    array[firstIndex] = array[firstValue\
  \ + lastValue - 8];\n    array[firstValue + lastValue - 8] = temp;\n    return "
- "\tlet sum = 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tsum += array[i];\n\
  \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif (odd) {\n\t\t\
  array.sort((a, b) => a - b);\n\t} else {\n\t\tarray.sort((a, b) => b - a);\n\t}\n\
  \treturn array;\n}\n"
- "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
  \  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n  } else {\n   \
  \ array.sort((a, b) => b - a);\n  }\n  return array;\n}\n"
language: ts
name: HumanEval_88_sort_array
prompt: '//Given an array of non-negative integers, return a copy of the given array
  after sorting,

  // you will sort the given array in ascending order if the sum( first index value,
  last index value) is odd,

  // or sort it in descending order if the sum( first index value, last index value)
  is even.

  // Note:

  // * don''t change the given array.

  // Examples:

  // * sort_array([]) => []

  // * sort_array([5]) => [5]

  // * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]

  // * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]

  function sort_array(array: number[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3,\
  \ 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5,\
  \ 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n \
  \ assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n\
  \  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"
