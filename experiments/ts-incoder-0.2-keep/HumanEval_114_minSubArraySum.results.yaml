language: ts
name: HumanEval_114_minSubArraySum
results:
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp55pg_xfp.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n\
    \    minSum = Math.min(minSum, nums[i] + minSum);\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpjp_1seq3.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjp_1seq3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp55pg_xfp.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i\
    \ = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n  \
    \    min = sum;\n    }\n  }\n  return min;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4zt1xr2g.ts(7,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n\
    \    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n-6\n    at test (/tmp/tmpzlctbrsw.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlctbrsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ -6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums[i] + nums[minSumIndex];\n\
    \    if (currentSum < minSum) {\n      minSum = currentSum;\n      minSumIndex\
    \ = i;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpml5rephd.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length;\
    \ j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n   \
    \     minSum = currentSum;\n      }\n    }\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptcrcj6b5.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n  \
    \  for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n\
    \      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex\
    \ = j;\n      }\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpejhjxah_.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp55pg_xfp.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n\
    \    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n-6\n    at test (/tmp/tmpzlctbrsw.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlctbrsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ -6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738999
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n\
    \    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n-6\n    at test (/tmp/tmpzlctbrsw.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlctbrsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ -6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length;\
    \ j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n   \
    \     minSum = currentSum;\n      }\n    }\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptcrcj6b5.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n\
    \    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n-6\n    at test (/tmp/tmpzlctbrsw.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlctbrsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ -6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738999
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n\
    \    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n-6\n    at test (/tmp/tmpzlctbrsw.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlctbrsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ -6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    const currentSum = nums[i] + nums[minSumIndex];\n\
    \    if (currentSum < minSum) {\n      minSum = currentSum;\n      minSumIndex\
    \ = i;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpml5rephd.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp55pg_xfp.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    const currentSum = nums[i] + nums[minIndex];\n\
    \    if (currentSum < minSum) {\n      minSum = currentSum;\n      minIndex =\
    \ i;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpephjw52m.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n\
    \    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-3\n\nshould loosely\
    \ deep-equal\n\n-6\n    at test (/tmp/tmpzlctbrsw.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlctbrsw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -3,\n  expected:\
    \ -6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let\
    \ i = 0; i < nums.length; i++) {\n    let currentSum = 0;\n    for (let j = 0;\
    \ j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum\
    \ < min) {\n        min = currentSum;\n        minIndex = j;\n      }\n    }\n\
    \  }\n  return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgt2hj8f0.ts(7,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp55pg_xfp.ts(7,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659738999
