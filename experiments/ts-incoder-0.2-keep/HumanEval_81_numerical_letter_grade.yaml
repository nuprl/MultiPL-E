name: HumanEval_81_numerical_letter_grade
language: humaneval_to_typescript.py
prompt: "//It is the last week of the semester and the teacher has to give the grades\n\
  // to students. The teacher has been making her own algorithm for grading.\n// The\
  \ only problem is, she has lost the code she used for grading.\n// She has given\
  \ you a list of GPAs for some students and you have to write \n// a function that\
  \ can output a list of letter grades using the following table:\n// GPA       |\
  \    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3\
  \                A- \n// > 3.0                B+\n// > 2.7                B \n//\
  \ > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n\
  // > 1.3                C-\n// > 1.0                D+ \n// > 0.7              \
  \  D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
  \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades:\
  \ number[]): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
  \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
  D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
  E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\",\
  \ \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
  D-\"]);\n}\n\ntest();"
completions: []
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
