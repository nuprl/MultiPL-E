completions:
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str: string\
  \ = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
  \    let extension_str_length_upper: number = extension_str_length / 2;\n    let\
  \ extension_str_length_lower: number = extension_str_length - extension_str_length_upper;\n\
  \    let extension_str_length_upper_cap: number = extension_str_length_upper / 2;\n\
  \    let extension_str_length_lower_cap: number = extension_str_length_lower - extension_str_length_upper_cap;\n\
  \    let extension_str_length_upper_small: number = extension_str_length_upper -\
  \ extension_str_length_upper_cap;\n    let extension_str_length_lower_small: number\
  \ = extension_str_length_lower - extension_str_length_lower_cap;\n    let extension_str_length_upper_small_cap:\
  \ number = extension_str_length_upper_small / 2;\n    let extension_str_length_lower_small_cap:\
  \ number = extension_str_length_lower_small - extension_str_length_upper_small_cap;\n\
  \    let extension_str_length_upper_small_small: number = extension_str_length_upper_small\
  \ - extension_str_length_lower_small_cap;\n    let extension_str_length_lower_small_small:\
  \ number = extension_str_length_lower_small - extension_str_length_lower_small_cap;\n\
  \    let extension_str_length_upper_small_cap_small: number = extension_str_length_upper_small_cap\
  \ - extension_str_length_lower_small_small_cap;\n    let extension_str_length_lower_small_cap_small:\
  \ number = extension_str_length_lower_small_cap - extension_str_length_lower_small_small_cap;\n\
  \    let extension_str_length_upper_small_small_cap: number = extension_str_length_upper_small_small\
  \ / 2;\n    let extension_str_length_lower_small_small_cap: number = extension_str_length_lower_small_small\
  \ - extension_str_length_upper_small_small_cap;\n    let extension_str_length_upper_small_small_small:\
  \ number = extension_str_length_upper_small_small - extension_str_length_lower_small_small_cap;\n\
  \    let extension_str_length_lower_small_small_small: number = extension_str_length_lower_small_small\
  \ - extension_str_length_lower_small_small_cap;\n    let extension_str_length_upper_small_cap_small_small:\
  \ number = extension_str_length_upper_small_cap_small - extension_str_length_lower_small_small_small_cap;\n\
  \    let extension_str_length_lower_small_cap_small_small: number = extension_str_length_lower_small_cap_small\
  \ - extension_str_length_lower_small_small_small_cap"
- "    let strongest_extension: string = class_name;\n    let strongest_extension_strength:\
  \ number = -1;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
  \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
  \ {\n            strongest_extension_strength = extension_strength;\n          \
  \  strongest_extension = extension;\n        }\n    }\n    return strongest_extension;\n\
  }\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)]\
  \ - SM_TO_STRONG[extension.charAt(extension_length - 1)];\n    if (extension_strength\
  \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
  \    if (extension_strength > strongest_extension.length) {\n      strongest_extension\
  \ = extensions[i];\n    }\n  }\n  return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_str: string = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
  \    let extension_strength = extension_str.length - extension_str.toLowerCase().length;\n\
  \    if (extension_strength > strongest_extension) {\n      strongest_extension\
  \ = extension_strength;\n      strongest_extension_str = extension_str;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension_str;\n}\n"
- "  let strongest_extension = '';\n  let strongest_extension_strength = 0;\n  for\
  \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
  \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return\
  \ `${class_name}${strongest_extension}`;\n}\n"
- "    let max_extension_strength = -1;\n    let max_extension_class = \"\";\n   \
  \ for (let i = 0; i < extensions.length; i++) {\n        let extension_class = class_name\
  \ + extensions[i];\n        let extension_strength = Extension_Strength(extension_class);\n\
  \        if (extension_strength > max_extension_strength) {\n            max_extension_strength\
  \ = extension_strength;\n            max_extension_class = extension_class;\n  \
  \      }\n    }\n    return max_extension_class;\n}\n"
- "  let extensions_count = extensions.length;\n  let extensions_count_cap = extensions_count.toUpperCase().length;\n\
  \  let extensions_count_sm = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm\
  \ = extensions_count_cap - extensions_count_sm;\n  let max_extensions_count = extensions_count_cap_sm\
  \ + extensions_count_cap;\n  let max_extensions_strength = -1;\n  let max_extensions_index\
  \ = 0;\n  for (let i = 0; i < extensions_count; i++) {\n    let extension = extensions[i];\n\
  \    let extension_count_cap = extension.toUpperCase().length;\n    let extension_count_sm\
  \ = extension.toLowerCase().length;\n    let extension_count_cap_sm = extension_count_cap\
  \ - extension_count_sm;\n    let extension_strength = extension_count_cap_sm + extension_count_cap;\n\
  \    if (extension_strength > max_extensions_strength) {\n      max_extensions_strength\
  \ = extension_strength;\n      max_extensions_index = i;\n    }\n  }\n  return class_name\
  \ + '.' + extensions[max_extensions_index];\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
  \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
  \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
  \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
  \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n  for (let\
  \ i = 0; i < extensions.length; i++) {\n    let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
  \ - extensions[i].toLowerCase().charCodeAt(0);\n    if (extension_strength > max_extension_strength)\
  \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
  \ = extensions[i];\n    }\n  }\n  return class_name + \".\" + max_extension_name;\n\
  }\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "    let strongest_extension: number = -1;\n    let strongest_extension_str: string\
  \ = '';\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_str:\
  \ string = extensions[i];\n        let extension_str_length: number = extension_str.length;\n\
  \        let extension_str_upper: number = extension_str.toUpperCase().charCodeAt(0);\n\
  \        let extension_str_lower: number = extension_str.toLowerCase().charCodeAt(0);\n\
  \        let extension_str_upper_sm: number = extension_str_upper - extension_str_lower;\n\
  \        let extension_str_lower_sm: number = extension_str_lower - extension_str_upper;\n\
  \        let extension_str_strength: number = extension_str_upper_sm - extension_str_lower_sm;\n\
  \        if (extension_str_strength > strongest_extension) {\n            strongest_extension\
  \ = extension_str_strength;\n            strongest_extension_str = extension_str;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension_str;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let extension_strength: number[] = [];\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_letters = extension.length;\n\
  \    let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
  \    let extension_strength_fraction = extension_lowercase_letters / extension_letters;\n\
  \    extension_strength.push(extension_strength_fraction);\n  }\n  let max_extension_strength\
  \ = Math.max.apply(null, extension_strength);\n  let max_extension_strength_index\
  \ = extension_strength.indexOf(max_extension_strength);\n  let max_extension_extension\
  \ = extensions[max_extension_strength_index];\n  return class_name + '.' + max_extension_extension;\n\
  }\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string;\n\
  \  for (let i = 0; i < extensions.length; i++) {\n    let extension_str: string\
  \ = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
  \    let extension_str_length_lower: number = extension_str_length;\n    for (let\
  \ j = 0; j < extension_str_length; j++) {\n      if (extension_str[j].toUpperCase()\
  \ === extension_str[j].toLowerCase()) {\n        extension_str_length_lower -= 1;\n\
  \      }\n    }\n    let extension_str_length_upper: number = extension_str_length;\n\
  \    for (let j = 0; j < extension_str_length; j++) {\n      if (extension_str[j].toUpperCase()\
  \ !== extension_str[j].toLowerCase()) {\n        extension_str_length_upper -= 1;\n\
  \      }\n    }\n    let extension_str_length_diff: number = extension_str_length_upper\
  \ - extension_str_length_lower;\n    let extension_str_length_diff_abs: number =\
  \ Math.abs(extension_str_length_diff);\n    if (extension_str_length_diff > 0 &&\
  \ extension_str_length_diff_abs > strongest_extension) {\n      strongest_extension\
  \ = extension_str_length_diff;\n      strongest_extension_str = extension_str;\n\
  \    }\n  }\n  return class_name + '.' + strongest_extension_str;\n}\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \        if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
  \            max_extension = extension;\n        }\n    }\n    return class_name\
  \ + '.' + max_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > strongest_extension.charCodeAt(0)) {\n         \
  \   strongest_extension = extension;\n        }\n    }\n    return class_name +\
  \ '.' + strongest_extension;\n}\n"
- "    let cap_extensions = extensions.filter(extension => extension.match(/[A-Z]/)).length;\n\
  \    let sml_extensions = extensions.filter(extension => extension.match(/[a-z]/)).length;\n\
  \    let strength = cap_extensions - sml_extensions;\n    return class_name + extensions.find(extension\
  \ => extension.match(/[A-Z]/))[0].toLowerCase() + extensions.find(extension => extension.match(/[a-z]/))[0].toLowerCase()\
  \ + '.' + Strongest_Extension_Name(strength);\n}\n"
- "\tlet strongest_extension: number = 0;\n\tlet strongest_extension_index: number\
  \ = 0;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
  \t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\
  \t\tlet strength = cap - sm;\n\t\tif (strength > strongest_extension) {\n\t\t\t\
  strongest_extension = strength;\n\t\t\tstrongest_extension_index = i;\n\t\t}\n\t\
  }\n\treturn class_name + '.' + extensions[strongest_extension_index];\n}\n"
- "    let strongest_extension = '';\n    for (let i = 0; i < extensions.length; i++)\
  \ {\n        let extension = extensions[i];\n        let extension_length = extension.length;\n\
  \        let extension_strength = extension_length - extension_strength(extension);\n\
  \        if (extension_strength > 0) {\n            strongest_extension = class_name\
  \ + extension;\n            break;\n        }\n    }\n    return strongest_extension;\n\
  }\n"
- "  let strongest_extension: string = class_name;\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strongest_extension.indexOf(extension) == -1 || strength\
  \ > strongest_extension.indexOf(extension)) {\n      strongest_extension += extension;\n\
  \    }\n  }\n  return strongest_extension;\n}\n"
- "  let strongest_extension: string = class_name;\n  let strongest_extension_strength:\
  \ number = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
  \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
  \ {\n      strongest_extension = extension;\n      strongest_extension_strength\
  \ = extension_strength;\n    }\n  }\n  return strongest_extension;\n}\n"
- "    let strongest_extension: string = class_name;\n    let strongest_extension_strength:\
  \ number = -1;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
  \ = extensions[i];\n        let extension_strength = extension.charCodeAt(0) - 65;\n\
  \        if (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
  \ = extension_strength;\n            strongest_extension = extension;\n        }\n\
  \    }\n    return strongest_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension_strength = extensions[i].charCodeAt(0) - extensions[0].charCodeAt(0);\n\
  \    if (extension_strength > strongest_extension.charCodeAt(0) - strongest_extension.charCodeAt(0))\
  \ {\n      strongest_extension = extensions[i];\n    }\n  }\n  return class_name\
  \ + '.' + strongest_extension;\n}\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str: string\
  \ = extensions[i];\n    let extension_cap: number = extension_str[0].toUpperCase().charCodeAt(0);\n\
  \    let extension_sm: number = extension_str.toLowerCase().charCodeAt(0);\n   \
  \ let extension_strength: number = extension_cap - extension_sm;\n    if (extension_strength\
  \ > strongest_extension) {\n      strongest_extension = extension_strength;\n  \
  \    strongest_extension_str = extension_str;\n    }\n  }\n  return `${class_name}${strongest_extension_str}`;\n\
  }\n"
- "  let cap_extensions = extensions.filter(extension => extension.match(/[A-Z]/));\n\
  \  let sm_extensions = extensions.filter(extension => extension.match(/[a-z]/));\n\
  \  let cap_extensions_count = cap_extensions.length;\n  let sm_extensions_count\
  \ = sm_extensions.length;\n  let cap_extensions_sm = cap_extensions_count - sm_extensions_count;\n\
  \  let sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n  let cap_extensions_sm_index\
  \ = cap_extensions_sm.indexOf(Math.max(cap_extensions_sm));\n  let sm_extensions_sm_index\
  \ = sm_extensions_sm.indexOf(Math.max(sm_extensions_sm));\n  return class_name +\
  \ extensions[cap_extensions_sm_index];\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n\
  \    const extension_strength = extension_length - StrongestExtensionLength(class_name,\
  \ extension);\n    if (extension_strength > strongest_extension.length) {\n    \
  \  strongest_extension = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str: string\
  \ = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
  \    let extension_str_length_lowercase: number = extension_str_length.toLowerCase();\n\
  \    let extension_str_length_uppercase: number = extension_str_length.toUpperCase();\n\
  \    let extension_str_length_length_difference: number = extension_str_length -\
  \ extension_str_length_lowercase;\n    let extension_str_length_length_difference_ratio:\
  \ number = extension_str_length_length_difference / extension_str_length_uppercase;\n\
  \    let extension_str_length_length_difference_ratio_rounded: number = Math.round(extension_str_length_length_difference_ratio);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int: number = Math.round(extension_str_length_length_difference_ratio_rounded);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int_rounded: number\
  \ = Math.round(extension_str_length_length_difference_ratio_rounded_int);\n    let\
  \ extension_str_length_length_difference_ratio_rounded_int_rounded_int: number =\
  \ Math.round(extension_str_length_length_difference_ratio_rounded_int_rounded);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded:\
  \ number = Math.round(extension_str_length_length_difference_ratio_rounded_int_rounded_int);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int:\
  \ number = Math.round(extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int_rounded:\
  \ number = Math.round(extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int_rounded_int:\
  \ number = Math.round(extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int_rounded);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int_rounded_int_rounded:\
  \ number = Math.round(extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int_rounded_int);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int_rounded_int_rounded_int:\
  \ number = Math.round(extension_str_length_length_difference_ratio_rounded_int_rounded_int_rounded_int_rounded_int_rounded_int);\n\
  \    let extension_str_length_length_difference_ratio_rounded_int_rounded_int_roun"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - strongest_extension.length;\n \
  \   if (extension_strength > 0) {\n      strongest_extension = extension;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - strongest_extension.length;\n \
  \   if (extension_strength > 0) {\n      strongest_extension = extension;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension: string = class_name;\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension += extension.substring(1);\n\
  \    }\n  }\n  return strongest_extension;\n}\n"
- "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n  for (let\
  \ i = 0; i < extensions.length; i++) {\n    let extension_name = extensions[i].toLowerCase();\n\
  \    let extension_strength = extension_name.charCodeAt(0) - class_name.toLowerCase().charCodeAt(0);\n\
  \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
  \ = extension_strength;\n      max_extension_name = extension_name;\n    }\n  }\n\
  \  return class_name + \".\" + max_extension_name;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let class_name = class_name +\
  \ extension;\n    let strength = GetStrength(class_name);\n    if (strength > max_strength)\
  \ {\n      max_strength = strength;\n      max_extension = extension;\n    }\n \
  \ }\n  return class_name + '.' + max_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return `${class_name}.${max_extension}`;\n}\n"
- "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
  \ i++) {\n\t\tlet extension_str = extensions[i];\n\t\tlet extension_strength = extension_str.charCodeAt(0)\
  \ - extension_str.charCodeAt(0).toLowerCase();\n\t\tif (extension_strength > strongest_extension.charCodeAt(0)\
  \ - strongest_extension.charCodeAt(0).toLowerCase()) {\n\t\t\tstrongest_extension\
  \ = extension_str;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
  }\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n  let sm_extensions\
  \ = extensions.filter(e => e.match(/[a-z]/));\n  let cap_extensions_count = cap_extensions.length;\n\
  \  let sm_extensions_count = sm_extensions.length;\n  let cap_extension_strength\
  \ = cap_extensions_count - sm_extensions_count;\n  let sm_extension_strength = sm_extensions_count;\n\
  \  let strongest_extension = null;\n  if (cap_extension_strength > sm_extension_strength)\
  \ {\n    strongest_extension = cap_extensions[0];\n  } else {\n    strongest_extension\
  \ = sm_extensions[0];\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_length = extension.length;\n    let extension_strength = extension_length\
  \ - strongest_extension;\n    if (extension_strength > 0) {\n      strongest_extension\
  \ = extension_strength;\n      strongest_extension_str = extension;\n    }\n  }\n\
  \  return class_name + \".\" + strongest_extension_str;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_class = class_name\
  \ + extension;\n    let extension_strength = Extension_Strength(extension_class);\n\
  \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return class_name + max_extension;\n\
  }\n"
- "    let strongest_extension: number = 0;\n    let strongest_extension_str: string\
  \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_str:\
  \ string = extensions[i];\n        let extension_str_length: number = extension_str.length;\n\
  \        let extension_cap: number = extension_str_length - 1;\n        let extension_sm:\
  \ number = extension_str_length - 2;\n        let extension_strength: number = extension_cap\
  \ - extension_sm;\n        if (extension_strength > strongest_extension) {\n   \
  \         strongest_extension = extension_strength;\n            strongest_extension_str\
  \ = extension_str;\n        }\n    }\n    return class_name + \".\" + strongest_extension_str;\n\
  }\n"
- "  let cap_extensions = extensions.filter(e => e.match(/[A-Z]/)).length;\n  let\
  \ sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n  let strength\
  \ = cap_extensions - sm_extensions;\n  return class_name + extensions.find(e =>\
  \ e.match(/[A-Z]/)).charAt(0) + \n    extensions.find(e => e.match(/[a-z]/)).charAt(0)\
  \ + \n    strength;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > strongest_extension.charCodeAt(0)) {\n         \
  \   strongest_extension = extension;\n        }\n    }\n    return class_name +\
  \ '.' + strongest_extension;\n}\n"
- "  let strongest_extension = '';\n  let strongest_extension_strength = -1;\n  for\
  \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
  \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return\
  \ `${class_name}.${strongest_extension}`;\n}\n"
- "    let strongest_extension = '';\n    let max_strength = 0;\n    for (let i =\
  \ 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n   \
  \     let extension_length = extension.length;\n        let extension_strength =\
  \ extension_length - 1;\n        let extension_class_name = class_name + extension;\n\
  \        let extension_class_name_length = extension_class_name.length;\n      \
  \  let extension_class_name_strength = extension_class_name_length - 1;\n      \
  \  let extension_class_name_class_name = extension_class_name.slice(0, extension_class_name_length\
  \ - 1);\n        let extension_class_name_class_name_length = extension_class_name_class_name.length;\n\
  \        let extension_class_name_class_name_strength = extension_class_name_class_name_length\
  \ - 1;\n        let extension_class_name_class_name_class_name = extension_class_name_class_name.slice(0,\
  \ extension_class_name_class_name_length - 1);\n        let extension_class_name_class_name_class_name_length\
  \ = extension_class_name_class_name_class_name.length;\n        let extension_class_name_class_name_class_name_strength\
  \ = extension_class_name_class_name_class_name_length - 1;\n        let extension_class_name_class_name_class_name_class_name\
  \ = extension_class_name_class_name_class_name.slice(0, extension_class_name_class_name_class_name_length\
  \ - 1);\n        let extension_class_name_class_name_class_name_class_name_length\
  \ = extension_class_name_class_name_class_name_class_name.length;\n        let extension_class_name_class_name_class_name_class_name_strength\
  \ = extension_class_name_class_name_class_name_class_name_length - 1;\n        let\
  \ extension_class_name_class_name_class_name_class_name_class_name = extension_class_name_class_name_class_name_class_name.slice(0,\
  \ extension_class_name_class_name_class_name_length - 1);\n        let extension_class_name_class_name_class_name_class_name_class_name_length\
  \ = extension_class_name_class_name_class_name_class_name_class_name.length;\n \
  \       let extension_class_name_class_name_class_name_class_name_class_name_strength\
  \ = extension_class_name_class_name_class_name_class_name_class_name_length - 1;\n\
  \        let extension_class_name_class_name_class_name_class_name_class_name_class_name\
  \ = extension_class_name_class_name_class_name_class_name_class_name.slice(0, extension_class_name_class_name_class_name_length\
  \ - 1);\n        let extension_class_name_class_name_class_name_class_name_class_name_class_name_length\
  \ = extension_class_name_class_name_class_name_class_name_class_name_class_name.length;\n\
  \        let extension_class_name_class_name_class_name_class_name_class_name_class_name_strength\
  \ = extension_class_name_class_name_class_name_class_name_class_name_class_name_length\
  \ - 1;\n        let extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name\
  \ = extension_class_name_class_name_class_name_class_name_class_name_class_name.slice(0,\
  \ extension_class_name_class_name_class_name_length - 1);"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
  \    let strength = cap - sm;\n    if (strength > strongest_extension) {\n     \
  \ strongest_extension = strength;\n      strongest_extension_str = extension;\n\
  \    }\n  }\n  return class_name + '.' + strongest_extension_str;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n  for (let\
  \ i = 0; i < extensions.length; i++) {\n    let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
  \ - extensions[i].toLowerCase().charCodeAt(0);\n    if (extension_strength > max_extension_strength)\
  \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
  \ = extensions[i];\n    }\n  }\n  return class_name + max_extension_name;\n}\n"
- "    let strongest_extension = '';\n    let max_extension_strength = 0;\n    for\
  \ (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
  \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \        if (extension_strength > max_extension_strength) {\n            max_extension_strength\
  \ = extension_strength;\n            strongest_extension = extension;\n        }\n\
  \    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
  \t\tlet extension_strength = extension_length - CAP_of_extension(extension);\n\t\
  \tif (extension_strength > max_strength) {\n\t\t\tmax_strength = extension_strength;\n\
  \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + max_extension;\n\
  }\n"
- "\tlet strongest_extension = '';\n\tlet strongest_extension_strength = 0;\n\tfor\
  \ (let i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
  \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \t\tif (extension_strength > strongest_extension_strength) {\n\t\t\tstrongest_extension_strength\
  \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
  return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension_strength = extensions[i].charCodeAt(0) - extensions[i\
  \ - 1].charCodeAt(0);\n    if (extension_strength > 0) {\n      strongest_extension\
  \ = extensions[i];\n    }\n  }\n  return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let class_name = class_name +\
  \ extension;\n    let strength = Extension_Strength(class_name);\n    if (strength\
  \ > max_strength) {\n      max_strength = strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let strongest_extension: string = class_name;\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension += extension.substring(1);\n\
  \    }\n  }\n  return strongest_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
  \ - sm.length;\n        if (cap < sm) {\n            strength *= -1;\n        }\n\
  \        if (strength > strongest_extension.strength) {\n            strongest_extension\
  \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let cap = class_name[0].toUpperCase();\n  let sm = class_name.toLowerCase().replace(/[^a-z]/g,\
  \ '');\n  let strength = cap.length - sm.length;\n  let strongest = extensions[0];\n\
  \  for (let i = 1; i < extensions.length; i++) {\n    let e = extensions[i];\n \
  \   let c = e.toUpperCase();\n    let s = c.toLowerCase();\n    let cap_diff = cap.length\
  \ - s.length;\n    let sm_diff = s.length - sm.length;\n    let strength_diff =\
  \ cap_diff - sm_diff;\n    if (strength > strength_diff) {\n      strongest = e;\n\
  \      strength = strength_diff;\n    }\n  }\n  return class_name + '.' + strongest;\n\
  }\n"
- "  let max_strength = -1\n  let max_extension = ''\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i]\n    let extension_length = extension.length\n\
  \    let extension_strength = extension_length - 1\n    if (extension_strength >\
  \ max_strength) {\n      max_strength = extension_strength\n      max_extension\
  \ = extension\n    }\n  }\n  return class_name + '.' + max_extension\n}\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ strength = extension.charCodeAt(0) - class_name.toUpperCase().charCodeAt(0);\n\
  \        if (strength > max_strength) {\n            max_extension = extension;\n\
  \            max_strength = strength;\n        }\n    }\n    return class_name +\
  \ '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    const extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
  \    if (extension_strength > strongest_extension.length) {\n      strongest_extension\
  \ = extensions[i];\n    }\n  }\n  return `${class_name}${strongest_extension}`;\n\
  }\n"
- "    let max_extension_strength = 0;\n    let max_extension_name = \"\";\n    for\
  \ (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
  \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \        if (extension_strength > max_extension_strength) {\n            max_extension_strength\
  \ = extension_strength;\n            max_extension_name = extension;\n        }\n\
  \    }\n    return class_name + \".\" + max_extension_name;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let extension_length =\
  \ extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
  \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > strongest_extension.charCodeAt(0)) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "    let strongest_extension: number = 0;\n    let strongest_extension_str: string\
  \ = '';\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
  \ = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n     \
  \   let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
  \ - sm.length;\n        if (strength > strongest_extension) {\n            strongest_extension\
  \ = strength;\n            strongest_extension_str = extension;\n        }\n   \
  \ }\n    return class_name + '.' + strongest_extension_str;\n}\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_length = extension.length;\n    let extension_strength = extension_length\
  \ - strongest_extension;\n    if (extension_strength > 0) {\n      strongest_extension\
  \ = extension_strength;\n      strongest_extension_str = extension;\n    }\n  }\n\
  \  return `${class_name}.${strongest_extension_str}`;\n}\n"
- "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
  \ extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet class_name_upper\
  \ = class_name.toUpperCase();\n\t\tlet class_name_length = class_name.length;\n\t\
  \tlet extension_length = extension.length;\n\t\tlet strength = class_name_length\
  \ - extension_length;\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength =\
  \ strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
  \ max_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension_length = extensions[i].length;\n        let extension_strength\
  \ = extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0);\n\
  \        if (extension_strength > strongest_extension.charCodeAt(0) - strongest_extension.charCodeAt(0))\
  \ {\n            strongest_extension = extensions[i];\n        }\n    }\n    return\
  \ class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension: string = class_name;\n  let max_extension_strength:\
  \ number = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_strength\
  \ = extensions[i].length;\n    if (extension_strength > max_extension_strength)\
  \ {\n      strongest_extension = extensions[i];\n      max_extension_strength =\
  \ extension_strength;\n    }\n  }\n  return strongest_extension;\n}\n"
- "  let strongest_extension = '';\n  let strongest_extension_strength = 0;\n  for\
  \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension\
  \ = extension;\n      strongest_extension_strength = extension_strength;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let extensions_count = extensions.length;\n  let extensions_count_cap = extensions_count.toUpperCase().length;\n\
  \  let extensions_count_sm = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm\
  \ = (extensions_count_cap - extensions_count_sm);\n  let extensions_count_cap_sm_minus_1\
  \ = (extensions_count_cap_sm - 1);\n  let extensions_count_cap_sm_minus_2 = (extensions_count_cap_sm\
  \ - 2);\n  let extensions_count_cap_sm_minus_3 = (extensions_count_cap_sm - 3);\n\
  \  let extensions_count_cap_sm_minus_4 = (extensions_count_cap_sm - 4);\n  let extensions_count_cap_sm_minus_5\
  \ = (extensions_count_cap_sm - 5);\n  let extensions_count_cap_sm_minus_6 = (extensions_count_cap_sm\
  \ - 6);\n  let extensions_count_cap_sm_minus_7 = (extensions_count_cap_sm - 7);\n\
  \  let extensions_count_cap_sm_minus_8 = (extensions_count_cap_sm - 8);\n  let extensions_count_cap_sm_minus_9\
  \ = (extensions_count_cap_sm - 9);\n  let extensions_count_cap_sm_minus_10 = (extensions_count_cap_sm\
  \ - 10);\n  let extensions_count_cap_sm_minus_11 = (extensions_count_cap_sm - 11);\n\
  \  let extensions_count_cap_sm_minus_12 = (extensions_count_cap_sm - 12);\n  let\
  \ extensions_count_cap_sm_minus_13 = (extensions_count_cap_sm - 13);\n  let extensions_count_cap_sm_minus_14\
  \ = (extensions_count_cap_sm - 14);\n  let extensions_count_cap_sm_minus_15 = (extensions_count_cap_sm\
  \ - 15);\n  let extensions_count_cap_sm_minus_16 = (extensions_count_cap_sm - 16);\n\
  \  let extensions_count_cap_sm_minus_17 = (extensions_count_cap_sm - 17);\n  let\
  \ extensions_count_cap_sm_minus_18 = (extensions_count_cap_sm - 18);\n  let extensions_count_cap_sm_minus_19\
  \ = (extensions_count_cap_sm - 19);\n  let extensions_count_cap_sm_minus_20 = (extensions_count_cap_sm\
  \ - 20);\n  let extensions_count_cap_sm_minus_21 = (extensions_count_cap_sm - 21);\n\
  \  let extensions_count_cap_sm_minus_22 = (extensions_count_cap_sm - 22);\n  let\
  \ extensions_count_cap_sm_minus_23 = (extensions_count_cap_sm - 23);\n  let extensions_count_cap_sm_minus_24\
  \ = (extensions_count_cap_sm - 24"
- "  let strongest_extension = '';\n  let max_strength = 0;\n  for (let i = 0; i <\
  \ extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length\
  \ = extension.length;\n    let extension_strength = extension_length - 1;\n    if\
  \ (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
  }\n"
- "  let extensions_count = extensions.length;\n  let extensions_count_cap = extensions_count.toUpperCase().length;\n\
  \  let extensions_count_sm = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm\
  \ = extensions_count_cap - extensions_count_sm;\n  let extensions_count_cap_sm_min\
  \ = extensions_count_cap_sm / 2;\n  let extensions_count_cap_sm_max = extensions_count_cap_sm\
  \ / 2;\n  let extensions_count_cap_sm_max_index = extensions_count_cap_sm_max -\
  \ 1;\n  let extensions_count_cap_sm_max_value = extensions_count_cap_sm_max;\n \
  \ let extensions_count_cap_sm_max_value_str = extensions_count_cap_sm_max.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len = extensions_count_cap_sm_max_value_str.length;\n\
  \  let extensions_count_cap_sm_max_value_str_len_str = extensions_count_cap_sm_max_value_str_len.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len = extensions_count_cap_sm_max_value_str_len_str.length;\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len_str = extensions_count_cap_sm_max_value_str_len_str_len.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len_str_len = extensions_count_cap_sm_max_value_str_len_str_len_str.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len_str_len_str = extensions_count_cap_sm_max_value_str_len_str_len_str_len.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len = extensions_count_cap_sm_max_value_str_len_str_len_str_len_str.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len_str = extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len_str.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len_str_len_str\
  \ = extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len_str_len_str.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len_str_len_str_len\
  \ = extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len_str_len_str_len.toString();\n\
  \  let extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len_str_len_str_len_str\
  \ = extensions_count_cap_sm_max_value_str_len_str_len_str_len_str_len_str_len_str_len_str_len.toString();"
- "    let extensions_count = extensions.length;\n    let extensions_count_cap = extensions_count.toUpperCase().length;\n\
  \    let extensions_count_sm = extensions_count.toLowerCase().length;\n    let extensions_count_cap_sm\
  \ = extensions_count_cap - extensions_count_sm;\n    let extensions_count_cap_sm_max\
  \ = extensions_count_cap_sm > 0 ? extensions_count_cap_sm : 1;\n    let extensions_count_cap_sm_min\
  \ = extensions_count_cap_sm > 0 ? extensions_count_cap_sm - 1 : -1;\n    let extensions_count_cap_sm_max_min\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max =\
  \ extensions_count_cap_sm_max > extensions_count_cap_sm_min && extensions_count_cap_sm_min\
  \ > extensions_count_cap_sm_max ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
  \    let extensions_count_cap_sm_max_min_max_max = extensions_count_cap_sm_max >\
  \ extensions_count_cap_sm_min && extensions_count_cap_sm_min > extensions_count_cap_sm_max\
  \ && extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min && extensions_count_cap_sm_min\
  \ > extensions_count_cap_sm_max && extensions_count_cap_sm_max > extensions_count_cap_sm_min\
  \ && extensions_count_cap_sm_max > extensions_count_cap_sm_max ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min && extensions_count_cap_sm_min\
  \ > extensions_count_cap_sm_max && extensions_count_cap_sm_max > extensions_count_cap_sm_min\
  \ && extensions_count_cap_sm_max > extensions_count_cap_sm_max && extensions_count_cap_sm_max\
  \ > extensions_count_cap_sm_min ? extensions_count_cap_sm_max : extensions_count_cap_sm_min;\n\
  \    let extensions_count_cap_sm_max_min_max_max_max_max_max = extensions_count_cap_sm_max\
  \ > extensions_count_cap_sm_min && "
- "  let max_strength = 0;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n    \
  \  max_strength = strength;\n      max_extension = extension;\n    }\n  }\n  return\
  \ `${class_name}.${max_extension}`;\n}\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str:\
  \ string = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
  \    let extension_str_length_int: number = extension_str_length;\n    let extension_str_length_float:\
  \ float = extension_str_length as number;\n    let extension_str_length_double:\
  \ double = extension_str_length as double;\n    let extension_str_length_long: long\
  \ = extension_str_length as long;\n    let extension_str_length_bool: bool = extension_str_length\
  \ as bool;\n    let extension_str_length_char: char = extension_str_length as char;\n\
  \    let extension_str_length_int2: int = extension_str_length as int;\n    let\
  \ extension_str_length_int3: uint = extension_str_length as uint;\n    let extension_str_length_int4:\
  \ uint = extension_str_length as uint;\n    let extension_str_length_int5: uint\
  \ = extension_str_length as uint;\n    let extension_str_length_int6: uint = extension_str_length\
  \ as uint;\n    let extension_str_length_int7: uint = extension_str_length as uint;\n\
  \    let extension_str_length_int8: uint = extension_str_length as uint;\n    let\
  \ extension_str_length_int9: uint = extension_str_length as uint;\n    let extension_str_length_int10:\
  \ uint = extension_str_length as uint;\n    let extension_str_length_int11: uint\
  \ = extension_str_length as uint;\n    let extension_str_length_int12: uint = extension_str_length\
  \ as uint;\n    let extension_str_length_int13: uint = extension_str_length as uint;\n\
  \    let extension_str_length_int14: uint = extension_str_length as uint;\n    let\
  \ extension_str_length_int15: uint = extension_str_length as uint;\n    let extension_str_length_int16:\
  \ uint = extension_str_length as uint;\n    let extension_str_length_int17: uint\
  \ = extension_str_length as uint;\n    let extension_str_length_int18: uint = extension_str_length\
  \ as uint;\n    let extension_str_length_int19: uint = extension_str_length as uint;\n\
  \    let extension_str_length_int20: uint = extension_str_length as uint;\n    let\
  \ extension_str_length_int21: uint = extension_str_length as uint;\n    let extension_str_length_int22:\
  \ uint = extension_str_length as uint;"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
  \ - sm.length;\n        if (strength > strongest_extension.length)\n           \
  \ strongest_extension = extension;\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
  \ - sm.length;\n        if (strength > strongest_extension.length) {\n         \
  \   strongest_extension = extension;\n        }\n    }\n    return class_name +\
  \ '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "    let cap = class_name.split('').map(c => c.toUpperCase()).join('');\n    let\
  \ sm = class_name.split('').map(c => c.toLowerCase()).join('');\n    let cap_ext\
  \ = cap.split(\"\").filter(c => extensions.indexOf(c) > -1);\n    let sm_ext = sm.split(\"\
  \").filter(c => extensions.indexOf(c) > -1);\n    let cap_ext_len = cap_ext.length;\n\
  \    let sm_ext_len = sm_ext.length;\n    let strength = cap_ext_len - sm_ext_len;\n\
  \    if (strength > 0) {\n        return class_name + cap_ext[cap_ext_len-1];\n\
  \    } else if (strength < 0) {\n        return class_name + sm_ext[sm_ext_len-1];\n\
  \    } else {\n        return class_name + extensions[0];\n    }\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let extension_length =\
  \ extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
  \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension = '';\n  let strongest_extension_strength = -1;\n  for\
  \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension\
  \ = extension;\n      strongest_extension_strength = extension_strength;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let cap = class_name.split('').filter(x => x.toUpperCase() === x).length;\n \
  \ let sm = class_name.split('').filter(x => x.toLowerCase() === x).length;\n  return\
  \ class_name.split('').filter(x => x.toUpperCase() === x).sort((a, b) => cap - sm)[0].concat('.',\
  \ class_name.split('').filter(x => x.toLowerCase() === x).sort((a, b) => cap - sm)[0])\n\
  }\n"
- "  let strongest_extension: string = class_name;\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strength > 0) {\n      strongest_extension += extension.substring(1);\n\
  \    }\n  }\n  return strongest_extension;\n}\n"
- "    let max_extension_strength = 0;\n    let max_extension_classname = class_name;\n\
  \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
  \        let extension_classname = class_name + extension;\n        let extension_strength\
  \ = Extension_Strength(extension_classname);\n        if (extension_strength > max_extension_strength)\
  \ {\n            max_extension_strength = extension_strength;\n            max_extension_classname\
  \ = extension_classname;\n        }\n    }\n    return max_extension_classname;\n\
  }\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n\
  \    let strength = cap.length - sm.length;\n    if (strength > strongest_extension)\
  \ {\n      strongest_extension = strength;\n      strongest_extension_str = extension;\n\
  \    }\n  }\n  return class_name + '.' + strongest_extension_str;\n}\n"
- "    let strongest_extension = '';\n    let strongest_extension_strength = 0;\n\
  \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
  \        let extension_strength = extension.charCodeAt(0) - extension.charCodeAt(extension.length\
  \ - 1);\n        if (extension_strength > strongest_extension_strength) {\n    \
  \        strongest_extension = extension;\n            strongest_extension_strength\
  \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - strongest_extension.length;\n \
  \   if (extension_strength > 0) {\n      strongest_extension = extension;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let strength = class_name.split(extension).length\
  \ - 1;\n    if (strength > max_strength) {\n      max_strength = strength;\n   \
  \   max_extension = extension;\n    }\n  }\n  return `${class_name}.${max_extension}`;\n\
  }\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ class_name = class_name + extension;\n        let strength = Extension_Strength(class_name);\n\
  \        if (strength > max_strength) {\n            max_extension = extension;\n\
  \            max_strength = strength;\n        }\n    }\n    return class_name +\
  \ '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    const extension = extensions[i];\n    const cap = extension.charAt(0).toUpperCase();\n\
  \    const sm = extension.charAt(0).toLowerCase();\n    const strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension: string = class_name;\n  let strongest_extension_strength:\
  \ number = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
  \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
  \ {\n      strongest_extension = extension;\n      strongest_extension_strength\
  \ = extension_strength;\n    }\n  }\n  return strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n    \
  \  max_strength = strength;\n      max_extension = extension;\n    }\n  }\n  return\
  \ class_name + '.' + max_extension;\n}\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \        if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
  \            max_extension = extension;\n        }\n    }\n    return class_name\
  \ + '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - extension_strength(extension);\n\
  \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n    \
  \  max_strength = strength;\n      max_extension = extension;\n    }\n  }\n  return\
  \ class_name + '.' + max_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let class_name = class_name +\
  \ extension;\n    let class_name_lower = class_name.toLowerCase();\n    let class_name_upper\
  \ = class_name.toUpperCase();\n    let class_name_length = class_name.length;\n\
  \    let extension_length = extension.length;\n    let extension_upper = extension.toUpperCase();\n\
  \    let extension_lower = extension.toLowerCase();\n    let extension_strength\
  \ = extension_length - extension_upper.length - extension_lower.length;\n    let\
  \ strength = class_name_length - extension_length;\n    if (strength > max_strength)\
  \ {\n      max_strength = strength;\n      max_extension = extension;\n    }\n \
  \ }\n  return class_name + max_extension;\n}\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str:\
  \ string = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
  \    let extension_str_upper: number = extension_str_length - 1;\n    let extension_str_lower:\
  \ number = extension_str_length - 2;\n    let extension_str_first_upper: number\
  \ = extension_str_upper - 1;\n    let extension_str_first_lower: number = extension_str_lower\
  \ - 1;\n    let extension_str_first_upper_smaller: number = extension_str_first_upper\
  \ - 1;\n    let extension_str_first_lower_smaller: number = extension_str_first_lower\
  \ - 1;\n    let extension_str_first_upper_smaller2: number = extension_str_first_upper\
  \ - 2;\n    let extension_str_first_lower_smaller2: number = extension_str_first_lower\
  \ - 2;\n    let extension_str_first_upper_smaller3: number = extension_str_first_upper\
  \ - 3;\n    let extension_str_first_lower_smaller3: number = extension_str_first_lower\
  \ - 3;\n    let extension_str_first_upper_smaller4: number = extension_str_first_upper\
  \ - 4;\n    let extension_str_first_lower_smaller4: number = extension_str_first_lower\
  \ - 4;\n    let extension_str_first_upper_smaller5: number = extension_str_first_upper\
  \ - 5;\n    let extension_str_first_lower_smaller5: number = extension_str_first_lower\
  \ - 5;\n    let extension_str_first_upper_smaller6: number = extension_str_first_upper\
  \ - 6;\n    let extension_str_first_lower_smaller6: number = extension_str_first_lower\
  \ - 6;\n    let extension_str_first_upper_smaller7: number = extension_str_first_upper\
  \ - 7;\n    let extension_str_first_lower_smaller7: number = extension_str_first_lower\
  \ - 7;\n    let extension_str_first_upper_smaller8: number = extension_str_first_upper\
  \ - 8;\n    let extension_str_first_lower_smaller8: number = extension_str_first_lower\
  \ - 8;\n    let extension_str_first_upper_smaller9: number = extension_str_first_upper\
  \ - 9;\n    let extension_str_first_lower_smaller9: number = extension_str_first_lower\
  \ - 9;\n    let extension_str_first_upper_smaller10: number = extension_str_first_upper\
  \ - 10;\n    let extension_str_first_lower_smaller10: number = extension_str_first_lower\
  \ - 10;\n    let extension_str_first_upper_smaller11: number = extension_str_first_upper\
  \ - 11;\n    let extension_str_first_lower_smaller11: number = extension_str_first_lower\
  \ - 11;\n    let extension_"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
  \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
  \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - strongest_extension.length;\n \
  \   if (extension_strength > 0) {\n      strongest_extension = extension;\n    }\n\
  \  }\n  return `${class_name}.${strongest_extension}`;\n}\n"
- "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
  \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\t\
  \tif (strength > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn\
  \ class_name + '.' + strongest_extension;\n}\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ strength = extension.charCodeAt(0) - class_name.charCodeAt(0);\n        if (strength\
  \ > max_strength) {\n            max_strength = strength;\n            max_extension\
  \ = extension;\n        }\n    }\n    return `${class_name}.${max_extension}`;\n\
  }\n"
- "  let extension_strength: number[] = [];\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_upper = extension.toUpperCase();\n\
  \    let extension_lower = extension.toLowerCase();\n    let extension_strength_upper\
  \ = extension_upper.charCodeAt(0) - extension_lower.charCodeAt(0);\n    let extension_strength_lower\
  \ = extension_lower.charCodeAt(0) - extension_upper.charCodeAt(0);\n    extension_strength[i]\
  \ = extension_strength_upper - extension_strength_lower;\n  }\n  let max_strength\
  \ = extension_strength.indexOf(Math.max(...extension_strength));\n  return class_name\
  \ + extensions[max_strength];\n}\n"
- "    let max_strength = 0;\n    let max_extension = '';\n    for (let i = 0; i <\
  \ extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ strength = extension.charCodeAt(0) - class_name.toUpperCase().charCodeAt(0);\n\
  \        if (strength > max_strength) {\n            max_strength = strength;\n\
  \            max_extension = extension;\n        }\n    }\n    return class_name\
  \ + '.' + max_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let extension_length =\
  \ extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
  \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let class_name = class_name +\
  \ extension;\n    let class_name_lower = class_name.toLowerCase();\n    let class_name_upper\
  \ = class_name.toUpperCase();\n    let class_name_length = class_name.length;\n\
  \    let extension_length = extension.length;\n    let extension_upper = extension.toUpperCase();\n\
  \    let extension_lower = extension.toLowerCase();\n    let extension_strength\
  \ = extension_length - extension_upper.length - extension_lower.length;\n    let\
  \ strength = class_name_length - class_name_upper.length - class_name_lower.length;\n\
  \    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension\
  \ = extension;\n    }\n  }\n  return class_name + max_extension;\n}\n"
- "\tlet max_extension_strength = -1;\n\tlet max_extension_class = \"\";\n\tfor (let\
  \ i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\t\
  let extension_class = class_name + extension;\n\t\tlet extension_strength = Extension_Strength(extension_class);\n\
  \t\tif (extension_strength > max_extension_strength) {\n\t\t\tmax_extension_strength\
  \ = extension_strength;\n\t\t\tmax_extension_class = extension_class;\n\t\t}\n\t\
  }\n\treturn max_extension_class;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let extension_strength\
  \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n     \
  \   if (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length)\
  \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
  \ class_name + '.' + strongest_extension;\n}\n"
- "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let i = 0;\
  \ i < extensions.length; i++) {\n        let extension = extensions[i];\n      \
  \  let extension_length = extension.length;\n        let extension_strength = extension_length\
  \ - CAP_TO_STRONG[extension.charAt(0)] - SM_TO_STRONG[extension.charAt(extension_length\
  \ - 1)];\n        if (extension_strength > max_strength) {\n            max_strength\
  \ = extension_strength;\n            max_extension = extension;\n        }\n   \
  \ }\n    return class_name + \".\" + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return `${class_name}${strongest_extension}`;\n}\n"
- "\tlet max_strength = 0;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
  \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
  \t\t}\n\t}\n\treturn class_name + '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "  let max_extension_strength = -1;\n  let max_extension_class = \"\";\n  for (let\
  \ i = 0; i < extensions.length; i++) {\n    let extension_class = class_name + extensions[i];\n\
  \    let extension_strength = Extension_Strength(extension_class);\n    if (extension_strength\
  \ > max_extension_strength) {\n      max_extension_strength = extension_strength;\n\
  \      max_extension_class = extension_class;\n    }\n  }\n  return max_extension_class;\n\
  }\n"
- "    let strongest_extension = '';\n    let max_strength = 0;\n    for (let i =\
  \ 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n   \
  \     let extension_class = class_name + extension;\n        let extension_strength\
  \ = Extension_Strength(extension_class);\n        if (extension_strength > max_strength)\
  \ {\n            max_strength = extension_strength;\n            strongest_extension\
  \ = extension;\n        }\n    }\n    return class_name + strongest_extension;\n\
  }\n"
- "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
  \ extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet class_name_upper\
  \ = class_name.toUpperCase();\n\t\tlet class_name_length = class_name.length;\n\t\
  \tlet extension_length = extension.length;\n\t\tlet class_name_upper = class_name_upper.length;\n\
  \t\tlet extension_upper = extension_upper.length;\n\t\tlet class_name_length = class_name_length;\n\
  \t\tlet extension_length = extension_length;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper = class_name_upper;\n\
  \t\tlet extension_upper = extension_upper;\n\t\tlet class_name_lower = class_name_lower;\n\
  \t\tlet extension_lower = extension_lower;\n\t\tlet class_name_upper"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let class_name = class_name +\
  \ extension;\n    let class_name_lower = class_name.toLowerCase();\n    let class_name_upper\
  \ = class_name.toUpperCase();\n    let class_name_upper_camel = class_name_upper.charAt(0).toUpperCase()\
  \ + class_name_upper.slice(1);\n    let class_name_lower = class_name_lower.toLowerCase();\n\
  \    let class_name_lower_camel = class_name_lower.charAt(0).toLowerCase() + class_name_lower.slice(1);\n\
  \    let class_name_upper_camel_lower = class_name_upper_camel + class_name_lower;\n\
  \    let class_name_lower_camel_lower = class_name_lower_camel + class_name_lower;\n\
  \    let class_name_upper_camel_lower_lower = class_name_upper_camel_lower + class_name_lower_camel;\n\
  \    let class_name_lower_camel_lower_lower = class_name_lower_camel_lower + class_name_lower_camel;\n\
  \    let class_name_upper_camel_lower_lower_lower = class_name_upper_camel_lower_lower\
  \ + class_name_lower_camel_lower;\n    let class_name_lower_camel_lower_lower_lower\
  \ = class_name_lower_camel_lower_lower + class_name_lower_camel_lower;\n    let\
  \ class_name_upper_camel_lower_lower_lower_lower = class_name_upper_camel_lower_lower_lower\
  \ + class_name_lower_camel_lower_lower;\n    let class_name_lower_camel_lower_lower_lower_lower\
  \ = class_name_lower_camel_lower_lower_lower + class_name_lower_camel_lower_lower_lower;\n\
  \    let class_name_upper_camel_lower_lower_lower_lower_lower = class_name_upper_camel_lower_lower_lower_lower\
  \ + class_name_lower_camel_lower_lower_lower_lower;\n    let class_name_lower_camel_lower_lower_lower_lower_lower\
  \ = class_name_lower_camel_lower_lower_lower_lower_lower + class_name_lower_camel_lower_lower_lower_lower_lower;\n\
  \    let class_name_upper_camel_lower_lower_lower_lower_lower_lower = class_name_upper_camel_lower_lower_lower_lower_lower_lower\
  \ + class_name_lower_camel_lower_lower_lower_lower_lower_lower;\n    let class_name_lower_camel_lower_lower_lower_lower_lower_lower\
  \ = class_name_lower_camel_lower_lower_lower_lower_lower_lower + class_name_lower_camel_lower_lower_lower_lower_lower_lower_lower;\n\
  \    let class_name_upper_camel_lower_lower_lower_lower_lower_lower_lower_lower\
  \ = class_name_upper_camel_lower_lower_lower_lower_lower_lower_lower_lower + class_name_lower_camel_lower_lower_lower_lower_lower_lower_lower_lower;\n\
  \    let class_name_lower_camel_lower_lower_lower_lower_lower_lower_lower_lower\
  \ = class_name_lower_"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length)\n      strongest_extension\
  \ = extension;\n  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "    let strongest_extension: number = 0;\n    let strongest_extension_str: string;\n\
  \    for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i].toUpperCase();\n\
  \        let extension_length = extension.length;\n        let extension_strength\
  \ = extension.length - extension_length;\n        if (extension_strength > strongest_extension)\
  \ {\n            strongest_extension = extension_strength;\n            strongest_extension_str\
  \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension_str;\n\
  }\n"
- "    let max_extension_strength = -1;\n    let max_extension_name = \"\";\n    for\
  \ (let i = 0; i < extensions.length; i++) {\n        let extension_name = extensions[i].toLowerCase();\n\
  \        let extension_strength = extension_name.split(\"\").reduce((acc, cur) =>\
  \ acc + cur.toUpperCase().charCodeAt(0) - cur.toLowerCase().charCodeAt(0), 0);\n\
  \        if (extension_strength > max_extension_strength) {\n            max_extension_strength\
  \ = extension_strength;\n            max_extension_name = extension_name;\n    \
  \    }\n    }\n    return class_name + \".\" + max_extension_name;\n}\n"
- "  let extension_strength: number = extensions.length;\n  let class_name_length:\
  \ number = class_name.length;\n  let class_name_uppercase: number = 0;\n  let class_name_lowercase:\
  \ number = 0;\n  let class_name_char: number = 0;\n  let class_name_char_cap: number\
  \ = 0;\n  let class_name_char_lower: number = 0;\n  let class_name_char_upper: number\
  \ = 0;\n  let class_name_char_lowercap: number = 0;\n  let class_name_char_uppercap:\
  \ number = 0;\n  let class_name_char_lowercap_upper: number = 0;\n  let class_name_char_uppercap_lower:\
  \ number = 0;\n  let class_name_char_lowercap_uppercap: number = 0;\n  let class_name_char_uppercap_lowercap:\
  \ number = 0;\n  let class_name_char_lowercap_uppercap_lower: number = 0;\n  let\
  \ class_name_char_uppercap_lowercap_upper: number = 0;\n  let class_name_char_uppercap_lowercap_uppercap:\
  \ number = 0;\n  let class_name_char_lowercap_uppercap_lowercap: number = 0;\n \
  \ let class_name_char_uppercap_lowercap_uppercap_lower: number = 0;\n  let class_name_char_uppercap_lowercap_uppercap_lowercap:\
  \ number = 0;\n  let class_name_char_lowercap_uppercap_lowercap_upper: number =\
  \ 0;\n  let class_name_char_uppercap_lowercap_uppercap_lowercap_upper: number =\
  \ 0;\n  let class_name_char_lowercap_uppercap_lowercap_uppercap_lower: number =\
  \ 0;\n  let class_name_char_uppercap_lowercap_uppercap_lowercap_uppercap_lower:\
  \ number = 0;\n  let class_name_char_uppercap_lowercap_uppercap_lowercap_uppercap_lowercap:\
  \ number = 0;\n  let class_name_char_lowercap_uppercap_lowercap_uppercap_lowercap_upper:\
  \ number = 0;\n  let class_name_char_uppercap_lowercap_uppercap_lowercap_uppercap_lowercap_upper:\
  \ number = 0;\n  let class_name_char_lowercap_uppercap_lowercap_uppercap_lowercap_uppercap_lower:\
  \ number = 0;\n  let class_name_char_uppercap_lowercap_uppercap_lowercap_uppercap_lowercap_uppercap_lower:\
  \ number = 0;\n  let class_name_char_uppercap_lowercap_uppercap_lowercap_uppercap_lowercap_uppercap_lowercap_upper:\
  \ number = 0;\n  let class_name_char_lowercap_uppercap_lowercap_uppercap_lowercap_uppercap_lowercap"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - class_name.indexOf(extension);\n\
  \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n\
  }\n"
- "  let cap_extensions = extensions.filter(e => e.length > 0);\n  let sm_extensions\
  \ = extensions.filter(e => e.length < 0);\n  let cap_extensions_count = cap_extensions.length;\n\
  \  let sm_extensions_count = sm_extensions.length;\n  let max_extension_strength\
  \ = -1;\n  let max_extension_extension = '';\n  for (let i = 0; i < cap_extensions_count;\
  \ i++) {\n    let extension_strength = cap_extensions[i].length - sm_extensions[i].length;\n\
  \    if (extension_strength > max_extension_strength) {\n      max_extension_strength\
  \ = extension_strength;\n      max_extension_extension = cap_extensions[i];\n  \
  \  }\n  }\n  return class_name + '.' + max_extension_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    const extension = extensions[i];\n    const cap = extension.charAt(0).toUpperCase();\n\
  \    const sm = extension.charAt(0).toLowerCase();\n    const strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n}\n"
- "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_class = class_name\
  \ + extension;\n\t\tlet extension_strength = Extension_Strength(extension_class);\n\
  \t\tif (extension_strength > max_strength) {\n\t\t\tmax_strength = extension_strength;\n\
  \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + max_extension;\n\
  }\n"
- "  let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n  let sm_extensions\
  \ = extensions.filter(e => e.match(/[a-z]/));\n  let cap_extensions_count = cap_extensions.length;\n\
  \  let sm_extensions_count = sm_extensions.length;\n  let cap_extensions_sm = cap_extensions_count\
  \ - sm_extensions_count;\n  let sm_extensions_sm = sm_extensions_count - cap_extensions_count;\n\
  \  let cap_extensions_cap = cap_extensions_count - cap_extensions_sm;\n  let sm_extensions_cap\
  \ = sm_extensions_count - sm_extensions_sm;\n  let cap_extensions_sm_ind = cap_extensions.indexOf(cap_extensions_sm);\n\
  \  let sm_extensions_sm_ind = sm_extensions.indexOf(sm_extensions_sm);\n  let cap_extensions_cap_ind\
  \ = cap_extensions.indexOf(cap_extensions_cap);\n  let sm_extensions_cap_ind = sm_extensions.indexOf(sm_extensions_cap);\n\
  \  let cap_extensions_sm_ind_2 = cap_extensions_sm_ind + 1;\n  let sm_extensions_sm_ind_2\
  \ = sm_extensions_sm_ind + 1;\n  let cap_extensions_cap_ind_2 = cap_extensions_cap_ind\
  \ + 1;\n  let sm_extensions_cap_ind_2 = sm_extensions_cap_ind + 1;\n  let cap_extensions_sm_ind_3\
  \ = cap_extensions_sm_ind + 2;\n  let sm_extensions_sm_ind_3 = sm_extensions_sm_ind\
  \ + 2;\n  let cap_extensions_cap_ind_3 = cap_extensions_cap_ind + 2;\n  let sm_extensions_cap_ind_3\
  \ = sm_extensions_cap_ind + 2;\n  let cap_extensions_sm_ind_4 = cap_extensions_sm_ind\
  \ + 3;\n  let sm_extensions_sm_ind_4 = sm_extensions_sm_ind + 3;\n  let cap_extensions_cap_ind_4\
  \ = cap_extensions_cap_ind + 3;\n  let sm_extensions_cap_ind_4 = sm_extensions_cap_ind\
  \ + 3;\n  let cap_extensions_sm_ind_5 = cap_extensions_sm_ind + 4;\n  let sm_extensions_sm_ind_5\
  \ = sm_extensions_sm_ind + 4;\n  let cap_extensions_cap_ind_5 = cap_extensions_cap_ind\
  \ + 4;\n  let sm_extensions_cap_ind_5 = sm_extensions_cap_ind + 4;\n  let cap_extensions_sm_ind_6\
  \ = cap_extensions_sm_ind + 5;\n  let sm_extensions_sm_ind_6 = sm_extensions_sm_ind\
  \ + 5;\n  let cap_extensions_cap_ind_6 = cap_extensions_"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
  \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n\
  }\n"
- "\tlet strongest_extension = '';\n\tlet max_strength = 0;\n\tfor (let i = 0; i <\
  \ extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name\
  \ = class_name + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\
  \t\tlet class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length\
  \ = class_name_upper.length;\n\t\tlet extension_length = extension.length;\n\t\t\
  let extension_upper = extension.toUpperCase();\n\t\tlet extension_lower = extension.toLowerCase();\n\
  \t\tlet extension_upper_c = extension_upper.charCodeAt(0);\n\t\tlet extension_lower_c\
  \ = extension_lower.charCodeAt(0);\n\t\tlet extension_strength = extension_upper_c-extension_lower_c;\n\
  \t\tlet extension_strength_abs = Math.abs(extension_strength);\n\t\tlet extension_strength_sign\
  \ = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet extension_strength_abs = Math.abs(extension_strength);\n\
  \t\tlet extension_strength_sign = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet\
  \ extension_strength_abs = Math.abs(extension_strength);\n\t\tlet extension_strength_sign\
  \ = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet extension_strength_abs = Math.abs(extension_strength);\n\
  \t\tlet extension_strength_sign = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet\
  \ extension_strength_abs = Math.abs(extension_strength);\n\t\tlet extension_strength_sign\
  \ = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet extension_strength_abs = Math.abs(extension_strength);\n\
  \t\tlet extension_strength_sign = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet\
  \ extension_strength_abs = Math.abs(extension_strength);\n\t\tlet extension_strength_sign\
  \ = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet extension_strength_abs = Math.abs(extension_strength);\n\
  \t\tlet extension_strength_sign = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet\
  \ extension_strength_abs = Math.abs(extension_strength);\n\t\tlet extension_strength_sign\
  \ = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet extension_strength_abs = Math.abs(extension_strength);\n\
  \t\tlet extension_strength_sign = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet\
  \ extension_strength_abs = Math.abs(extension_strength);\n\t\tlet extension_strength_sign\
  \ = extension_strength_abs > 0 ? 1 : -1;\n\t\tlet extension_strength_abs = Math.abs(extension_strength);\n\
  \t\tlet extension_strength_sign = extension_"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
  \ - strongest_extension.match(/[a-z]/g).length) {\n      strongest_extension = extension;\n\
  \    }\n  }\n  return `${class_name.split(' ').join('')}.${strongest_extension}`;\n\
  }\n"
- "  let strongest_extension = '';\n  let strongest_extension_strength = 0;\n  for\
  \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
  \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return\
  \ `${class_name}.${strongest_extension}`;\n}\n"
- "  let strongest_extension: string = class_name;\n  let strongest_extension_strength:\
  \ number = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension\
  \ = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension_strength)\
  \ {\n      strongest_extension_strength = extension_strength;\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return strongest_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - strongest_extension.length;\n \
  \   if (extension_strength > 0) {\n      strongest_extension = extension;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "\tlet strongest_extension: number = 0;\n\tlet strongest_extension_str: string =\
  \ '';\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension_str: string\
  \ = extensions[i];\n\t\tlet extension_str_length: number = extension_str.length;\n\
  \t\tlet extension_cap: number = extension_str_length - 1;\n\t\tlet extension_sm:\
  \ number = extension_str_length - 2;\n\t\tlet extension_strength: number = extension_cap\
  \ - extension_sm;\n\t\tif (extension_strength > strongest_extension) {\n\t\t\tstrongest_extension\
  \ = extension_strength;\n\t\t\tstrongest_extension_str = extension_str;\n\t\t}\n\
  \t}\n\treturn class_name + '.' + strongest_extension_str;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > strongest_extension.charCodeAt(0)) {\n         \
  \   strongest_extension = extension;\n        }\n    }\n    return class_name +\
  \ '.' + strongest_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let cap_extensions = extensions.filter(extension => extension.match(/[A-Z]/));\n\
  \  let sm_extensions = extensions.filter(extension => extension.match(/[a-z]/));\n\
  \  let cap_extensions_length = cap_extensions.length;\n  let sm_extensions_length\
  \ = sm_extensions.length;\n  let cap_extensions_strength = cap_extensions_length\
  \ / extensions.length;\n  let sm_extensions_strength = sm_extensions_length / extensions.length;\n\
  \  let strongest_extension = cap_extensions_strength > sm_extensions_strength ?\
  \ cap_extensions[0] : sm_extensions[0];\n  return `${class_name}.${strongest_extension}`;\n\
  }\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
  \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n\
  }\n"
- "  let max_strength = -1\n  let max_extension = ''\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i]\n    let class_name = class_name + extension\n\
  \    let strength = Extension_Strength(class_name)\n    if (strength > max_strength)\
  \ {\n      max_strength = strength\n      max_extension = extension\n    }\n  }\n\
  \  return class_name + '.' + max_extension\n}\n"
- "  let max_extension_strength = -1;\n  let max_extension_name = '';\n  for (let\
  \ i = 0; i < extensions.length; i++) {\n    let extension_name = extensions[i];\n\
  \    let extension_strength = class_name.split(extension_name)[1];\n    if (extension_strength\
  \ > max_extension_strength) {\n      max_extension_strength = extension_strength;\n\
  \      max_extension_name = extension_name;\n    }\n  }\n  return class_name + '.'\
  \ + max_extension_name;\n}\n"
- "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
  \ extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet class_name_upper\
  \ = class_name.toUpperCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
  \t\tlet extension_length = extension.length;\n\t\tlet extension_upper = extension.toUpperCase();\n\
  \t\tlet extension_lower = extension.toLowerCase();\n\t\tlet extension_strength =\
  \ extension_length - extension_upper.length;\n\t\tlet extension_strength_lower =\
  \ extension_length - extension_lower.length;\n\t\tlet extension_strength_upper =\
  \ extension_length - extension_upper.length;\n\t\tlet extension_strength_length\
  \ = extension_strength_lower.length;\n\t\tlet extension_strength_upper = extension_strength_upper.toLowerCase();\n\
  \t\tlet extension_strength_lower = extension_strength_lower.toLowerCase();\n\t\t\
  let extension_strength_length = extension_strength_lower.length;\n\t\tlet extension_strength_upper\
  \ = extension_strength_upper.toLowerCase();\n\t\tlet extension_strength_lower =\
  \ extension_strength_lower.toLowerCase();\n\t\tlet extension_strength_length = extension_strength_lower.length;\n\
  \t\tlet extension_strength_upper = extension_strength_upper.toLowerCase();\n\t\t\
  let extension_strength_lower = extension_strength_lower.toLowerCase();\n\t\tlet\
  \ extension_strength_length = extension_strength_lower.length;\n\t\tlet extension_strength_upper\
  \ = extension_strength_upper.toLowerCase();\n\t\tlet extension_strength_lower =\
  \ extension_strength_lower.toLowerCase();\n\t\tlet extension_strength_length = extension_strength_lower.length;\n\
  \t\tlet extension_strength_upper = extension_strength_upper.toLowerCase();\n\t\t\
  let extension_strength_lower = extension_strength_lower.toLowerCase();\n\t\tlet\
  \ extension_strength_length = extension_strength_lower.length;\n\t\tlet extension_strength_upper\
  \ = extension_strength_upper.toLowerCase();\n\t\tlet extension_strength_lower =\
  \ extension_strength_lower.toLowerCase();\n\t\tlet extension_strength_length = extension_strength_lower.length;\n\
  \t\tlet extension_strength_upper = extension_strength_upper.toLowerCase();\n\t\t\
  let extension_strength_lower = extension_strength_lower.toLowerCase();\n\t\tlet\
  \ extension_strength_length = extension_strength_lower.length;\n\t\tlet extension_strength_upper\
  \ = extension_strength_upper.toLowerCase();\n\t\tlet extension_strength_lower =\
  \ extension_strength_lower.toLowerCase();\n\t\tlet extension_"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let max_strength = 0;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - class_name.split(extension).length\
  \ - 1;\n    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n\
  }\n"
- "\tlet cap = class_name.split('').filter(x => x.toUpperCase() === x).length;\n\t\
  let sm = class_name.split('').filter(x => x.toLowerCase() === x).length;\n\treturn\
  \ class_name + extensions[cap - sm];\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
  \ - sm.length;\n        if (cap > sm) {\n            strength = -1;\n        }\n\
  \        if (strength > strongest_extension.length) {\n            strongest_extension\
  \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - strongest_extension.length;\n \
  \   if (extension_strength > 0) {\n      strongest_extension = extension;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "    let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n    let sm_extensions\
  \ = extensions.filter(e => e.match(/[a-z]/));\n    let cap_extensions_count = cap_extensions.length;\n\
  \    let sm_extensions_count = sm_extensions.length;\n    let cap_extensions_sm\
  \ = cap_extensions_count - sm_extensions_count;\n    let sm_extensions_sm = sm_extensions_count\
  \ - cap_extensions_count;\n    let cap_extensions_sm = cap_extensions_sm / cap_extensions_count;\n\
  \    let sm_extensions_sm = sm_extensions_sm / sm_extensions_count;\n    let cap_extensions_sm\
  \ = Math.round(cap_extensions_sm * 100) / 100;\n    let sm_extensions_sm = Math.round(sm_extensions_sm\
  \ * 100) / 100;\n    let strength = cap_extensions_sm - sm_extensions_sm;\n    if\
  \ (strength > 0) {\n        return class_name + '.' + extensions[extensions.indexOf(extensions[0])]\n\
  \    } else {\n        return class_name + '.' + extensions[extensions.indexOf(extensions[extensions.length\
  \ - 1])]\n    }\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
  \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
  \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
  \ extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet class_name_upper\
  \ = class_name.toUpperCase();\n\t\tlet class_name_length = class_name.length;\n\t\
  \tlet extension_length = extension.length;\n\t\tlet strength = class_name_length\
  \ - extension_length;\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength =\
  \ strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
  \ '.' + max_extension;\n}\n"
- "    let strongest_extension: number = 0;\n    let strongest_extension_str: string\
  \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
  \ = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n     \
  \   let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
  \ - sm.length;\n        if (strength > strongest_extension) {\n            strongest_extension\
  \ = strength;\n            strongest_extension_str = extension;\n        }\n   \
  \ }\n    return class_name + \".\" + strongest_extension_str;\n}\n"
- "  let strongest_extension: string = class_name;\n  let max_strength: number = -1;\n\
  \  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \    if (extension_strength > max_strength) {\n      strongest_extension = extension;\n\
  \      max_strength = extension_strength;\n    }\n  }\n  return strongest_extension;\n\
  }\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension_str = extensions[i];\n        let extension_strength\
  \ = extension_str.match(/[A-Z]/g).length - extension_str.match(/[a-z]/g).length;\n\
  \        if (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length)\
  \ {\n            strongest_extension = extension_str;\n        }\n    }\n    return\
  \ class_name + '.' + strongest_extension;\n}\n"
- "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n  for (let\
  \ i = 0; i < extensions.length; i++) {\n    let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
  \ - extensions[i].toLowerCase().charCodeAt(0);\n    if (extension_strength > max_extension_strength)\
  \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
  \ = extensions[i];\n    }\n  }\n  return class_name + \".\" + max_extension_name;\n\
  }\n"
- "    let extensions_count = extensions.length;\n    let extensions_count_cap = extensions_count.toUpperCase().length;\n\
  \    let extensions_count_sm = extensions_count.toLowerCase().length;\n    let extensions_count_cap_sm\
  \ = extensions_count_cap - extensions_count_sm;\n    let extensions_count_cap_sm_max\
  \ = extensions_count_cap_sm > 0 ? extensions_count_cap_sm : 1;\n    let extensions_count_cap_sm_min\
  \ = extensions_count_cap_sm > 0 ? extensions_count_cap_sm - 1 : -1;\n    let extensions_count_cap_sm_max_min\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max =\
  \ extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max_max_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max_max_max_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_sm_min;\n    let extensions_count_cap_sm_max_min_max_max_max_max_max_max_max_max\
  \ = extensions_count_cap_sm_max > extensions_count_cap_sm_min ? extensions_count_cap_sm_max\
  \ : extensions_count_cap_s"
- "    let strongest_extension: number = -1;\n    let strongest_extension_str: string;\n\
  \    for (let i = 0; i < extensions.length; i++) {\n        let extension_str: string\
  \ = extensions[i];\n        let extension_str_length: number = extension_str.length;\n\
  \        let extension_str_upper: number = extension_str.toUpperCase().length;\n\
  \        let extension_str_lower: number = extension_str.toLowerCase().length;\n\
  \        let extension_str_length_ratio: number = extension_str_upper / extension_str_lower;\n\
  \        let extension_str_strength: number = extension_str_length - extension_str_lower;\n\
  \        if (extension_str_strength > strongest_extension) {\n            strongest_extension\
  \ = extension_str_strength;\n            strongest_extension_str = extension_str;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension_str;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - class_name.split(extension).length\
  \ - 1;\n    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n\
  }\n"
- "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
  \ extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\t\tlet class_name_upper\
  \ = class_name.toUpperCase();\n\t\tlet class_name_length = class_name_lower.length;\n\
  \t\tlet extension_length = extension.length;\n\t\tlet strength = class_name_length\
  \ - extension_length;\n\t\tif (strength > max_strength) {\n\t\t\tmax_strength =\
  \ strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name +\
  \ max_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let extension_length =\
  \ extension.length;\n        let extension_strength = extension_length - strongest_extension.length;\n\
  \        if (extension_strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ strength = class_name.split(extension).length - 1;\n        if (strength > max_strength)\
  \ {\n            max_strength = strength;\n            max_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + max_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let extension_length =\
  \ extension.length;\n        let extension_strength = extension_length - extension_strength(extension);\n\
  \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
  \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let strongest_extension = '';\n  let strongest_extension_strength = 0;\n  for\
  \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
  \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return\
  \ class_name + '.' + strongest_extension;\n}\n"
- "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength)\
  \ {\n\t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\
  \t\t}\n\t}\n\treturn class_name + '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \        if (strength > max_strength) {\n            max_strength = strength;\n\
  \            max_extension = extension;\n        }\n    }\n    return class_name\
  \ + '.' + max_extension;\n}\n"
- "  let strongest_extension = '';\n  let strongest_extension_strength = 0;\n  for\
  \ (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n\
  \    const extension_length = extension.length;\n    const extension_strength =\
  \ extension_length - extension_strength_count(extension);\n    if (extension_strength\
  \ > strongest_extension_strength) {\n      strongest_extension = extension;\n  \
  \    strongest_extension_strength = extension_strength;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
  }\n"
- "    let strongest_extension: string = class_name;\n    for (let i = 0; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
  \ - sm.length;\n        if (strength > 0) {\n            strongest_extension +=\
  \ extension.substring(1);\n        }\n    }\n    return strongest_extension;\n}\n"
- "\tlet strongest_extension: number = 0;\n\tlet strongest_extension_index: number\
  \ = 0;\n\tfor (let i = 0; i < extensions.length; i++) {\n\t\tlet extension = extensions[i];\n\
  \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
  \t\tlet strength = cap.length - sm.length;\n\t\tif (strength > strongest_extension)\
  \ {\n\t\t\tstrongest_extension = strength;\n\t\t\tstrongest_extension_index = i;\n\
  \t\t}\n\t}\n\treturn class_name + '.' + extensions[strongest_extension_index];\n\
  }\n"
- "  let cap_extensions = extensions.filter(e => e.match(/[A-Z]/)).length;\n  let\
  \ sm_extensions = extensions.filter(e => e.match(/[a-z]/)).length;\n  let strength\
  \ = cap_extensions - sm_extensions;\n  return class_name + extensions.find(e =>\
  \ e.match(/[A-Z]/)).charAt(0) + extensions.find(e => e.match(/[a-z]/)).charAt(0)\
  \ + '.' + extensions.find(e => e.match(/[A-Z]/)).charAt(0) + extensions.find(e =>\
  \ e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e => e.match(/[A-Z]/)).charAt(0)\
  \ + extensions.find(e => e.match(/[a-z]/)).charAt(0) + extensions.find(e "
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_class = class_name\
  \ + extension;\n    let extension_strength = Extension_Strength(extension_class);\n\
  \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return class_name + max_extension;\n\
  }\n"
- "    let strongest_extension: string = '';\n    let strongest_extension_strength:\
  \ number = -1;\n    let extension_counter: number = 0;\n    for (let i = 0; i <\
  \ extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ extension_counter = extension_counter + 1;\n        let extension_counter_string\
  \ = extension_counter.toString();\n        let extension_counter_string_capitalized\
  \ = extension_counter_string.toUpperCase();\n        let extension_counter_string_smaller\
  \ = extension_counter_string_capitalized.toLowerCase();\n        if (extension_counter_string_capitalized\
  \ === extension) {\n            strongest_extension = class_name + '.' + extension;\n\
  \            strongest_extension_strength = extension_counter;\n        }\n    \
  \    if (extension_counter_string_smaller === extension) {\n            strongest_extension\
  \ = class_name + '.' + extension;\n            strongest_extension_strength = extension_counter;\n\
  \        }\n    }\n    return strongest_extension;\n}\n"
- "  let max_strength = -1\n  let max_extension = ''\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i]\n    let class_name = class_name + extension\n\
  \    let class_name_lower = class_name.toLowerCase()\n    let class_name_upper =\
  \ class_name.toUpperCase()\n    let class_name_length = class_name.length\n    let\
  \ extension_length = extension.length\n    let strength = class_name_length - extension_length\n\
  \    if (strength > max_strength) {\n      max_strength = strength\n      max_extension\
  \ = extension\n    }\n  }\n  return class_name + max_extension\n}\n"
- "  let max_strength = 0;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let strength = extension.charCodeAt(0)\
  \ - class_name.toUpperCase().charCodeAt(0);\n    if (strength > max_strength) {\n\
  \      max_strength = strength;\n      max_extension = extension;\n    }\n  }\n\
  \  return class_name + '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let strongest_extension = '';\n  let max_strength = -1;\n  for (let i = 0; i\
  \ < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength\
  \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n    if\
  \ (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
  }\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "\tlet max_extension_strength = -1;\n\tlet max_extension_name = \"\";\n\tfor (let\
  \ i = 0; i < extensions.length; i++) {\n\t\tlet extension_name = extensions[i].toLowerCase();\n\
  \t\tlet extension_strength = extension_name.split(\"\").reduce((a, b) => a + b.toUpperCase().charCodeAt(0)\
  \ - b.toLowerCase().charCodeAt(0), 0);\n\t\tif (extension_strength > max_extension_strength)\
  \ {\n\t\t\tmax_extension_strength = extension_strength;\n\t\t\tmax_extension_name\
  \ = extension_name;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension_name;\n\
  }\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
  \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
  \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
  \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return `${class_name}.${max_extension}`;\n\
  }\n"
- "    let max_strength = -1;\n    let max_extension = \"\";\n    for (let i = 0;\
  \ i < extensions.length; i++) {\n        let extension = extensions[i];\n      \
  \  let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \        if (strength > max_strength) {\n            max_strength = strength;\n\
  \            max_extension = extension;\n        }\n    }\n    return class_name\
  \ + \".\" + max_extension;\n}\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "    let strongest_extension = '';\n    let max_extension_strength = -1;\n    for\
  \ (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
  \        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \        if (extension_strength > max_extension_strength) {\n            max_extension_strength\
  \ = extension_strength;\n            strongest_extension = extension;\n        }\n\
  \    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ extension_length = extension.length;\n        let extension_strength = extension_length\
  \ - CAP_TO_STRONG[extension.charAt(0)];\n        if (extension_strength > max_strength)\
  \ {\n            max_strength = extension_strength;\n            max_extension =\
  \ extension;\n        }\n    }\n    return class_name + '.' + max_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let extension_length =\
  \ extension.length;\n        let extension_strength = extension_length - extension.match(/[a-z]/).length;\n\
  \        if (extension_strength > strongest_extension.length) {\n            strongest_extension\
  \ = extension;\n        }\n    }\n    return `${class_name.slice(0, class_name.lastIndexOf('.')+1)}.${strongest_extension}`;\n\
  }\n"
- "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
  \ i++) {\n\t\tlet extension = extensions[i];\n\t\tlet extension_length = extension.length;\n\
  \t\tlet extension_strength = extension_length - strongest_extension.length;\n\t\t\
  if (extension_strength > 0) {\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t\
  }\n\treturn class_name + '.' + strongest_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap.length\
  \ - sm.length;\n        if (cap < sm) {\n            strength = -1;\n        }\n\
  \        if (strength > strongest_extension.strength) {\n            strongest_extension\
  \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)];\n\
  \    if (extension_strength > max_strength) {\n      max_strength = extension_strength;\n\
  \      max_extension = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n\
  }\n"
- "  let cap_extensions = extensions.filter(extension => extension.match(/[A-Z]/)).length;\n\
  \  let sm_extensions = extensions.filter(extension => extension.match(/[a-z]/)).length;\n\
  \  let strength = cap_extensions - sm_extensions;\n  return class_name + extensions.find(extension\
  \ => extension.match(/[A-Z]/)).charAt(0) + extensions.find(extension => extension.match(/[a-z]/)).charAt(0)\
  \ + extensions[extensions.indexOf(extension) + 1].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 2].charAt(0) + extensions[extensions.indexOf(extension) + 3].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 4].charAt(0) + extensions[extensions.indexOf(extension) + 5].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 6].charAt(0) + extensions[extensions.indexOf(extension) + 7].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 8].charAt(0) + extensions[extensions.indexOf(extension) + 9].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 10].charAt(0) + extensions[extensions.indexOf(extension) + 11].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 12].charAt(0) + extensions[extensions.indexOf(extension) + 13].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 14].charAt(0) + extensions[extensions.indexOf(extension) + 15].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 16].charAt(0) + extensions[extensions.indexOf(extension) + 17].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 18].charAt(0) + extensions[extensions.indexOf(extension) + 19].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 20].charAt(0) + extensions[extensions.indexOf(extension) + 21].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 22].charAt(0) + extensions[extensions.indexOf(extension) + 23].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 24].charAt(0) + extensions[extensions.indexOf(extension) + 25].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 26].charAt(0) + extensions[extensions.indexOf(extension) + 27].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 28].charAt(0) + extensions[extensions.indexOf(extension) + 29].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 30].charAt(0) + extensions[extensions.indexOf(extension) + 31].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 32].charAt(0) + extensions[extensions.indexOf(extension) + 33].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 34].charAt(0) + extensions[extensions.indexOf(extension) + 35].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 36].charAt(0) + extensions[extensions.indexOf(extension) + 37].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 38].charAt(0) + extensions[extensions.indexOf(extension) + 39].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 40].charAt(0) + extensions[extensions.indexOf(extension) + 41].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 42].charAt(0) + extensions[extensions.indexOf(extension) + 43].charAt(0) + extensions[extensions.indexOf(extension)\
  \ + 44].charAt(0) + extensions[extensions."
- "  let max_strength = -1;\n  let max_extension = \"\";\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + \".\" + max_extension;\n}\n"
language: ts
name: HumanEval_153_Strongest_Extension
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunction Strongest_Extension(class_name:\
  \ string, extensions: string[]): string {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
