completions:
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension_str: string\
  \ = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
  \    let extension_str_length_upper: number = extension_str_length / 2;\n    let\
  \ extension_str_length_lower: number = extension_str_length - extension_str_length_upper;\n\
  \    let extension_str_length_upper_cap: number = extension_str_length_upper / 2;\n\
  \    let extension_str_length_lower_cap: number = extension_str_length_lower - extension_str_length_upper_cap;\n\
  \    let extension_str_length_upper_small: number = extension_str_length_upper -\
  \ extension_str_length_upper_cap;\n    let extension_str_length_lower_small: number\
  \ = extension_str_length_lower - extension_str_length_lower_cap;\n    let extension_str_length_upper_small_cap:\
  \ number = extension_str_length_upper_small / 2;\n    let extension_str_length_lower_small_cap:\
  \ number = extension_str_length_lower_small - extension_str_length_upper_small_cap;\n\
  \    let extension_str_length_upper_small_small: number = extension_str_length_upper_small\
  \ - extension_str_length_lower_small_cap;\n    let extension_str_length_lower_small_small:\
  \ number = extension_str_length_lower_small - extension_str_length_lower_small_cap;\n\
  \    let extension_str_length_upper_small_cap_small: number = extension_str_length_upper_small_cap\
  \ - extension_str_length_lower_small_small_cap;\n    let extension_str_length_lower_small_cap_small:\
  \ number = extension_str_length_lower_small_cap - extension_str_length_lower_small_small_cap;\n\
  \    let extension_str_length_upper_small_small_cap: number = extension_str_length_upper_small_small\
  \ / 2;\n    let extension_str_length_lower_small_small_cap: number = extension_str_length_lower_small_small\
  \ - extension_str_length_upper_small_small_cap;\n    let extension_str_length_upper_small_small_small:\
  \ number = extension_str_length_upper_small_small - extension_str_length_lower_small_small_cap;\n\
  \    let extension_str_length_lower_small_small_small: number = extension_str_length_lower_small_small\
  \ - extension_str_length_lower_small_small_cap;\n    let extension_str_length_upper_small_cap_small_small:\
  \ number = extension_str_length_upper_small_cap_small - extension_str_length_lower_small_small_small_cap;\n\
  \    let extension_str_length_lower_small_cap_small_small: number = extension_str_length_lower_small_cap_small\
  \ - extension_str_length_lower_small_small_small_cap"
- "    let strongest_extension: string = class_name;\n    let strongest_extension_strength:\
  \ number = -1;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
  \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
  \ {\n            strongest_extension_strength = extension_strength;\n          \
  \  strongest_extension = extension;\n        }\n    }\n    return strongest_extension;\n\
  }\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n\
  \    let extension_strength = extension_length - CAP_TO_STRONG[extension.charAt(0)]\
  \ - SM_TO_STRONG[extension.charAt(extension_length - 1)];\n    if (extension_strength\
  \ > max_strength) {\n      max_strength = extension_strength;\n      max_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
  \    if (extension_strength > strongest_extension.length) {\n      strongest_extension\
  \ = extensions[i];\n    }\n  }\n  return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length\
  \ - sm.length;\n    if (strength > strongest_extension.length) {\n      strongest_extension\
  \ = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string =\
  \ '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_str: string = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
  \    let extension_strength = extension_str.length - extension_str.toLowerCase().length;\n\
  \    if (extension_strength > strongest_extension) {\n      strongest_extension\
  \ = extension_strength;\n      strongest_extension_str = extension_str;\n    }\n\
  \  }\n  return class_name + '.' + strongest_extension_str;\n}\n"
- "  let strongest_extension = '';\n  let strongest_extension_strength = 0;\n  for\
  \ (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n\
  \    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \    if (extension_strength > strongest_extension_strength) {\n      strongest_extension_strength\
  \ = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return\
  \ `${class_name}${strongest_extension}`;\n}\n"
- "    let max_extension_strength = -1;\n    let max_extension_class = \"\";\n   \
  \ for (let i = 0; i < extensions.length; i++) {\n        let extension_class = class_name\
  \ + extensions[i];\n        let extension_strength = Extension_Strength(extension_class);\n\
  \        if (extension_strength > max_extension_strength) {\n            max_extension_strength\
  \ = extension_strength;\n            max_extension_class = extension_class;\n  \
  \      }\n    }\n    return max_extension_class;\n}\n"
- "  let extensions_count = extensions.length;\n  let extensions_count_cap = extensions_count.toUpperCase().length;\n\
  \  let extensions_count_sm = extensions_count.toLowerCase().length;\n  let extensions_count_cap_sm\
  \ = extensions_count_cap - extensions_count_sm;\n  let max_extensions_count = extensions_count_cap_sm\
  \ + extensions_count_cap;\n  let max_extensions_strength = -1;\n  let max_extensions_index\
  \ = 0;\n  for (let i = 0; i < extensions_count; i++) {\n    let extension = extensions[i];\n\
  \    let extension_count_cap = extension.toUpperCase().length;\n    let extension_count_sm\
  \ = extension.toLowerCase().length;\n    let extension_count_cap_sm = extension_count_cap\
  \ - extension_count_sm;\n    let extension_strength = extension_count_cap_sm + extension_count_cap;\n\
  \    if (extension_strength > max_extensions_strength) {\n      max_extensions_strength\
  \ = extension_strength;\n      max_extensions_index = i;\n    }\n  }\n  return class_name\
  \ + '.' + extensions[max_extensions_index];\n}\n"
- "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n\
  \    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap - sm;\n\
  \    if (strength > 0) {\n      strongest_extension = extension;\n    }\n  }\n \
  \ return class_name + '.' + strongest_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
  \ = -1;\n    for (let i = 1; i < extensions.length; i++) {\n        let extension\
  \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength)\
  \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
  \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
  }\n"
- "  let max_extension_strength = -1;\n  let max_extension_name = \"\";\n  for (let\
  \ i = 0; i < extensions.length; i++) {\n    let extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
  \ - extensions[i].toLowerCase().charCodeAt(0);\n    if (extension_strength > max_extension_strength)\
  \ {\n      max_extension_strength = extension_strength;\n      max_extension_name\
  \ = extensions[i];\n    }\n  }\n  return class_name + \".\" + max_extension_name;\n\
  }\n"
- "  let max_strength = -1;\n  let max_extension = '';\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
  \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > max_strength)\
  \ {\n      max_strength = extension_strength;\n      max_extension = extension;\n\
  \    }\n  }\n  return class_name + '.' + max_extension;\n}\n"
- "    let strongest_extension: number = -1;\n    let strongest_extension_str: string\
  \ = '';\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_str:\
  \ string = extensions[i];\n        let extension_str_length: number = extension_str.length;\n\
  \        let extension_str_upper: number = extension_str.toUpperCase().charCodeAt(0);\n\
  \        let extension_str_lower: number = extension_str.toLowerCase().charCodeAt(0);\n\
  \        let extension_str_upper_sm: number = extension_str_upper - extension_str_lower;\n\
  \        let extension_str_lower_sm: number = extension_str_lower - extension_str_upper;\n\
  \        let extension_str_strength: number = extension_str_upper_sm - extension_str_lower_sm;\n\
  \        if (extension_str_strength > strongest_extension) {\n            strongest_extension\
  \ = extension_str_strength;\n            strongest_extension_str = extension_str;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension_str;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > 0) {\n            strongest_extension = extension;\n\
  \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n"
- "  let extension_strength: number[] = [];\n  for (let i = 0; i < extensions.length;\
  \ i++) {\n    let extension = extensions[i];\n    let extension_letters = extension.length;\n\
  \    let extension_lowercase_letters = extension_letters - extension_letters.toUpperCase().length;\n\
  \    let extension_strength_fraction = extension_lowercase_letters / extension_letters;\n\
  \    extension_strength.push(extension_strength_fraction);\n  }\n  let max_extension_strength\
  \ = Math.max.apply(null, extension_strength);\n  let max_extension_strength_index\
  \ = extension_strength.indexOf(max_extension_strength);\n  let max_extension_extension\
  \ = extensions[max_extension_strength_index];\n  return class_name + '.' + max_extension_extension;\n\
  }\n"
- "  let strongest_extension: number = 0;\n  let strongest_extension_str: string;\n\
  \  for (let i = 0; i < extensions.length; i++) {\n    let extension_str: string\
  \ = extensions[i];\n    let extension_str_length: number = extension_str.length;\n\
  \    let extension_str_length_lower: number = extension_str_length;\n    for (let\
  \ j = 0; j < extension_str_length; j++) {\n      if (extension_str[j].toUpperCase()\
  \ === extension_str[j].toLowerCase()) {\n        extension_str_length_lower -= 1;\n\
  \      }\n    }\n    let extension_str_length_upper: number = extension_str_length;\n\
  \    for (let j = 0; j < extension_str_length; j++) {\n      if (extension_str[j].toUpperCase()\
  \ !== extension_str[j].toLowerCase()) {\n        extension_str_length_upper -= 1;\n\
  \      }\n    }\n    let extension_str_length_diff: number = extension_str_length_upper\
  \ - extension_str_length_lower;\n    let extension_str_length_diff_abs: number =\
  \ Math.abs(extension_str_length_diff);\n    if (extension_str_length_diff > 0 &&\
  \ extension_str_length_diff_abs > strongest_extension) {\n      strongest_extension\
  \ = extension_str_length_diff;\n      strongest_extension_str = extension_str;\n\
  \    }\n  }\n  return class_name + '.' + strongest_extension_str;\n}\n"
- "    let max_strength = -1;\n    let max_extension = '';\n    for (let i = 0; i\
  \ < extensions.length; i++) {\n        let extension = extensions[i];\n        let\
  \ extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
  \        if (extension_strength > max_strength) {\n            max_strength = extension_strength;\n\
  \            max_extension = extension;\n        }\n    }\n    return class_name\
  \ + '.' + max_extension;\n}\n"
- "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
  \ i++) {\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
  \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
  \ - sm;\n        if (strength > strongest_extension.charCodeAt(0)) {\n         \
  \   strongest_extension = extension;\n        }\n    }\n    return class_name +\
  \ '.' + strongest_extension;\n}\n"
- "    let cap_extensions = extensions.filter(extension => extension.match(/[A-Z]/)).length;\n\
  \    let sml_extensions = extensions.filter(extension => extension.match(/[a-z]/)).length;\n\
  \    let strength = cap_extensions - sml_extensions;\n    return class_name + extensions.find(extension\
  \ => extension.match(/[A-Z]/))[0].toLowerCase() + extensions.find(extension => extension.match(/[a-z]/))[0].toLowerCase()\
  \ + '.' + Strongest_Extension_Name(strength);\n}\n"
language: ts
name: HumanEval_153_Strongest_Extension
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunction Strongest_Extension(class_name:\
  \ string, extensions: string[]): string {\n"
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
