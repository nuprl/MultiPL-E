completions:
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "    return strings.filter(function (string) {\n        return string.indexOf(substring)\
  \ !== -1;\n    });\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(function (string) {\n    return string.indexOf(substring)\
  \ !== -1;\n  });\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.includes(substring));

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(function (string) {\n    return string.indexOf(substring)\
  \ !== -1;\n  });\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter(s => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter(s => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter(s => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.includes(substring));

  }

  '
- "  return strings.filter(function (string) {\n    return string.indexOf(substring)\
  \ !== -1;\n  });\n}\n"
- '    return strings.filter(s => s.includes(substring));

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.includes(substring));

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter(s => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter(s => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.includes(substring));

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "    return strings.filter(function (str) {\n        return str.includes(substring);\n\
  \    });\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(s => s.includes(substring));\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(s => s.includes(substring));\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter(s => s.indexOf(substring) !== -1);\n\
  \  return filtered_strings;\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(function (string: string) {\n    return string.includes(substring);\n\
  \  });\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(s => s.includes(substring));\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter(s => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.includes(substring));

  }

  '
- "  const filtered_strings = strings.filter(s => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(function (str) {\n    return str.includes(substring);\n\
  \  });\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.includes(substring));

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter((s) => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter(s => s.includes(substring));\n  return\
  \ filtered_strings;\n}\n"
- "  return strings.filter(function (string) {\n    return string.includes(substring);\n\
  \  });\n}\n"
- "  return strings.filter(function (string) {\n    return string.indexOf(substring)\
  \ !== -1;\n  });\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.includes(substring));

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  const filtered_strings = strings.filter((str: string) => {\n    return str.includes(substring);\n\
  \  });\n  return filtered_strings;\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.includes(substring));

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(function (str) {\n    return str.indexOf(substring) !==\
  \ -1;\n  });\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(s => s.includes(substring));\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "    return strings.filter(function (str: string) {\n        return str.indexOf(substring)\
  \ !== -1;\n    });\n}\n"
- '    return strings.filter(s => s.includes(substring));

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(function (str) {\n    return str.indexOf(substring) !==\
  \ -1;\n  });\n}\n"
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(function (string) {\n    return string.indexOf(substring)\
  \ !== -1;\n  });\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- "  return strings.filter(function (string) {\n    return string.includes(substring);\n\
  \  });\n}\n"
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '    return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
- '  return strings.filter(s => s.indexOf(substring) !== -1);

  }

  '
language: ts
name: HumanEval_7_filter_by_substring
prompt: '//Filter an input list of strings only for ones that contain given substring

  // >>> filter_by_substring([], ''a'')

  // []

  // >>> filter_by_substring([''abc'', ''bacd'', ''cde'', ''array''], ''a'')

  // [''abc'', ''bacd'', ''array'']

  function filter_by_substring(strings: string[], substring: string): string[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"\
  trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
