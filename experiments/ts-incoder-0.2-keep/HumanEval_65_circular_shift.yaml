completions:
- "  let s = \"\";\n  let n = x;\n  while (n >= Math.pow(10, shift)) {\n    s += (n\
  \ % Math.pow(10, shift));\n    n /= Math.pow(10, shift);\n  }\n  while (n > 0) {\n\
  \    s += (n % 10);\n    n /= 10;\n  }\n  return s;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  else return digits.reverse().slice(shift, digits.length +\
  \ shift).reverse();\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length).join(\"\");\n\
  }\n"
- "  if (shift > x.length) {\n    return x.split(\"\").reverse().join(\"\");\n  }\n\
  \  return x.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\") +\
  \ x.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse().join('');\n  return digits.reverse().slice(shift, digits.length).join('');\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result\
  \ += x.charAt(x.length - i - 1);\n  }\n  return result;\n}\n"
- "  const digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse().join('');\n\
  \  return digits.reverse().slice(shift, digits.length).join('');\n}\n"
- "  let s = \"\" + x;\n  let n = s.length;\n  if (shift > n) {\n    return s.split(\"\
  \").reverse().join(\"\");\n  }\n  for (let i = s.length - shift; i >= 0; i -= shift)\
  \ {\n    s += s.charAt(i);\n  }\n  return s;\n}\n"
- "  const digits = x.toString().split('');\n  if (shift > digits.length) {\n    return\
  \ digits.reverse();\n  }\n  for (let i = 0; i < shift; i++) {\n    digits[i] = digits[i\
  \ + shift];\n  }\n  return digits.reverse().join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n\
  \    result += digits.pop();\n  }\n  return result + digits.reverse();\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  let result = \"\";\n  for (let\
  \ i = 0; i < shift; i++) {\n    result += digits.pop();\n  }\n  for (let i = 0;\
  \ i < digits.length; i++) {\n    result += digits[i];\n  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().join(\"\").split(\"\").shift(shift).join(\"\
  \");\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n}\n"
- "  let digits = x.toString().split('');\n  digits = digits.reverse();\n  while (digits.length\
  \ < shift) {\n    digits.push('0');\n  }\n  return digits.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) return digits;\n  let result = \"\";\n  for (let\
  \ i = 0; i < shift; i++) {\n    result += digits[i];\n  }\n  return result + digits.slice(0,\
  \ shift);\n}\n"
- "  let digits = x.toString().split('');\n  let result = \"\";\n  for (let i = digits.length\
  \ - 1; i >= shift; i--) {\n    result += digits[i];\n  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n\
  \  }\n  return result;\n}\n"
- "  let result = \"\";\n  for (let i = shift; i > 0; i--) {\n    result += String(x);\n\
  \    x = x >> 1;\n  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) digits\
  \ = digits.reverse();\n  return digits.shift(shift).join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse().join('');\n  return digits.reverse().slice(shift, digits.length).join('');\n\
  }\n"
- "  let digits = x.toString().split('');\n  let result = \"\";\n  for (let i = 0;\
  \ i < shift; i++) {\n    result += digits.pop();\n  }\n  for (let i = digits.length\
  \ - 1; i >= 0; i--) {\n    result += digits[i];\n  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().join(\"\").split(\"\").shift(shift).join(\"\
  \");\n}\n"
- "  let s = \"\" + x;\n  while (s.length < shift) {\n    s = s.substring(1) + s.substring(0,\
  \ 1);\n  }\n  return s;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\");\n  digits = digits.reverse();\n\
  \  if (shift > digits.length)\n    return digits.reverse();\n  else\n    return\
  \ digits.split(\"\").reverse().join(\"\");\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n\
  }\n"
- "  if (shift > x.length) return x.toString();\n  let result = \"\";\n  for (let\
  \ i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n  }\n  return\
  \ result;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const result = new Array(shift - digits.length).fill('0');\n\
  \  digits.reverse().forEach((digit, i) => result[shift + i] = digit);\n  return\
  \ result.join('');\n}\n"
- "  if (shift === 0) {\n    return x;\n  }\n  let digits = String(Math.abs(x)).split('');\n\
  \  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  return digits.reverse().join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) {\n    shift = digits.length;\n  }\n  for (let\
  \ i = 0; i < shift; i++) {\n    digits = digits.replace(new RegExp(\"\\\\\" + digits[i],\
  \ \"g\"), \"\");\n  }\n  return digits;\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  const digits = x.toString().split('');\n\
  \  for (let i = 0; i < shift; i++) {\n    digits[i] = digits[i + 1];\n  }\n  return\
  \ digits.reverse().join('');\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    digits = digits.reverse();\n  }\n  return digits.join(\"\").substring(0,\
  \ shift);\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    return digits.reverse().join('');\n  }\n  let result = new Array(shift).fill('0');\n\
  \  for (let i = 0; i < shift; i++) {\n    result[i] = digits[digits.length - shift\
  \ - i];\n  }\n  return result.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  else return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    return digits.reverse();\n  }\n  return digits.slice(shift, digits.length).reverse().join(\"\
  \");\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length).join(\"\");\n\
  }\n"
- "  let s = \"\" + x;\n  while (s.length < shift) {\n    s = s.substr(1) + s.substr(0,\
  \ 1);\n  }\n  return s;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const result = new Array(shift).fill('0');\n  for (let i\
  \ = digits.length - 1; i >= shift; i--) result[i] = digits[digits.length - i - 1];\n\
  \  return result.join('');\n}\n"
- "  let s = \"\";\n  for (let i = shift; i > 0; i -= 1) {\n    s = digits[x % 10]\
  \ + s;\n    x = Math.floor(x / 10);\n  }\n  return s;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ return digits;\n  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n  \
  \  result += digits.pop();\n  }\n  return result + digits.join(\"\");\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ return digits;\n  else return digits.join(\"\").substring(0, shift) + digits.join(\"\
  \").substring(shift);\n}\n"
- "  if (shift === 0) {\n    return x;\n  }\n  let digits = String(Math.abs(x)).split('');\n\
  \  if (shift > digits.length) {\n    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n\
  }\n"
- "  const digits = x.toString().split('');\n  if (shift > digits.length) {\n    return\
  \ digits.reverse().join('');\n  }\n  return digits.slice(shift, digits.length).join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split(\"\");\n  digits = digits.reverse();\n\
  \  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += digits.pop();\n\
  \  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    return digits.reverse().join('');\n  }\n  return digits.splice(0, shift).join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) return digits;\n  return digits.split(\"\").reverse().join(\"\
  \");\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) digits\
  \ = digits.reverse();\n  return digits.reduce((acc, digit, i) => {\n    return acc\
  \ + digit + (shift - i) * digit;\n  });\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  let result = new Array(shift).fill('0');\n  for (let i =\
  \ 0; i < shift; i++) {\n    result[i] = digits[digits.length - 1 - i];\n  }\n  return\
  \ result.join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length + shift).join(\"\
  \");\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\n\
  \    return digits.join(\"\");\n  else\n    return digits.slice(0, shift).reverse().join(\"\
  \") + digits.slice(shift, digits.length).join(\"\");\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  for (let i = 0; i < shift; i++) digits = digits.reverse();\n\
  \  return digits.join('');\n}\n"
- "  let s = \"\" + x;\n  for (var i = 0; i < shift; i++) {\n    s = s.charAt(s.length\
  \ - 1 - i) + s.charAt(i);\n  }\n  return s;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const result = new Array(shift).fill('0');\n  for (let i\
  \ = digits.length - shift; i >= 0; i--) result[shift + i] = digits[i];\n  return\
  \ result.join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result += x.charAt(i - 1);\n  }\n\
  \  return result;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const shift = shift % digits.length;\n  return digits.reverse().slice(shift,\
  \ digits.length + shift).join('');\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ digits = digits.reverse();\n  return digits.join(\"\" + shift);\n}\n"
- "  const digits = x.toString().split('');\n  if (shift > digits.length) {\n    return\
  \ digits.reverse().join('');\n  }\n  return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const result = new Array(shift - digits.length + 1).join('0');\n\
  \  for (let i = 0; i < digits.length; ++i) result += digits[digits.length - 1 -\
  \ i] * Math.pow(10, shift);\n  return result;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const result = new Array(shift).fill('0');\n  for (let i\
  \ = 0; i < shift; i++) {\n    result[i] = digits[digits.length - 1 - i];\n  }\n\
  \  return result.join('');\n}\n"
- "  let s = \"\";\n  let n = x;\n  while (n > 0) {\n    s = String(n % 10) + s;\n\
  \    n = Math.floor(n / 10);\n  }\n  if (shift > s.length) s = Array(shift - s.length\
  \ + 1).join(0) + s;\n  return s;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  return digits.reverse().slice(0, shift).concat(digits.reverse().slice(shift));\n\
  }\n"
- "  let s = \"\" + x;\n  while (s.length < shift) {\n    s = s.substring(1) + s.substring(0,\
  \ 1);\n  }\n  return s.substring(s.length - shift);\n}\n"
- "  let result = \"\";\n  let i = shift;\n  while (i > 0 && i < 10) {\n    result\
  \ = digits[x % 10] + result;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return\
  \ digits[x % 10] + result;\n}\n"
- "  const digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    return digits.join(\"\");\n  }\n  return digits.slice(0, shift).reverse().join(\"\
  \");\n}\n"
- "  let s = '';\n  for (let i = shift; i > 0; i--) {\n    s += x;\n    x = x >> 1;\n\
  \  }\n  return s;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) {\n    shift = digits.length;\n  }\n  let result\
  \ = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += digits[i];\n  }\n\
  \  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    return digits.join(\"\");\n  }\n  return digits.slice(0, shift).reverse().join(\"\
  \");\n}\n"
- "  let result = \"\";\n  let remainder = 0;\n  for (let i = shift; i > 0; i -= 1)\
  \ {\n    remainder = x % 10;\n    result += String(remainder);\n    x /= 10;\n \
  \ }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ digits = digits.reverse();\n  return digits.join(\"\").substr(0, shift);\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ return digits.join(\"\");\n  if (shift < digits.length) return digits.slice(0,\
  \ shift).join(\"\") + digits.slice(shift, digits.length).join(\"\");\n  return digits.join(\"\
  \");\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const result = new Array(shift).fill('0');\n  for (let i\
  \ = digits.length - 1; i >= shift; i--) {\n    result[i] = digits[i];\n  }\n  return\
  \ result.join('') + digits.reverse().join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  return digits.reverse().join('');\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split(\"\");\n  digits = digits.reverse();\n\
  \  digits = digits.split(\"\");\n  digits = digits.reverse();\n  digits = digits.split(\"\
  \");\n  digits = digits.reverse();\n  digits = digits.split("
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse().join('');\n  return digits.reverse().slice(shift, digits.length\
  \ + shift).join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length)\n \
  \   return digits.reverse().join('');\n  else\n    return digits.splice(0, shift).join('');\n\
  }\n"
- "  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits\
  \ = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result\
  \ += x.charAt(x.length - i - 1);\n  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    return digits.join(\"\");\n  }\n  return digits.reverse().join(\"\").split(\"\
  \").reverse().join(\"\") + digits.join(\"\");\n}\n"
- "  let s = \"\";\n  for (let i = shift; i > 0; i -= 1) {\n    s = x.toString() +\
  \ s;\n    x = x >> 1;\n  }\n  return s;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    return digits.reverse();\n  }\n  digits.splice(shift, 0, ...digits.splice(digits.length\
  \ - shift, 1));\n  return digits.join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; --i) {\n    result = x[x.length - i - 1] +\
  \ result;\n  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) {\n    digits = digits.split(\"\").reverse().join(\"\
  \");\n  }\n  return digits.split(\"\").slice(shift, digits.length + shift).join(\"\
  \");\n}\n"
- "  let digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse().join('');\n\
  \  return digits.slice(shift, digits.length).join('');\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  if (shift < -digits.length) return digits.reverse();\n  const\
  \ result = new Array(digits.length + shift).fill('0');\n  digits.reverse().forEach((digit,\
  \ i) => {\n    result[shift + i] = digit;\n  });\n  return result.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits;\n  let result = new Array(digits.length + shift).fill(0);\n  for (let\
  \ i = 0; i < digits.length; i++) {\n    result[i + shift] = digits[i];\n  }\n  return\
  \ result.join('');\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const shift = shift % digits.length;\n  return digits.reverse().slice(shift,\
  \ digits.length + shift).join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result\
  \ += x.charAt(x.length - i - 1);\n  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) return digits;\n  return digits.split(\"\").reverse().join(\"\
  \");\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n\
  \  }\n  return result;\n}\n"
- "  let s = \"\";\n  for (let i = shift; i > 0; i--) {\n    s = x + s;\n  }\n  return\
  \ s;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  else return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    digits = digits.reverse();\n  }\n  return digits.join(\"\").split(\"\"\
  ).reverse().join(\"\") + digits.join(\"\").split(\"\").reverse().join(\"\");\n}\n"
- "  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += String(x);\n\
  \  }\n  return result;\n}\n"
- "  let s = \"\";\n  while (shift > 0) s = x + s, x >>= shift;\n  return s;\n}\n"
- "  let digits = x.toString().split('');\n  digits = digits.reverse();\n  let result\
  \ = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += digits.pop();\n  }\n\
  \  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.split(\"\").reverse().join(\"\");\n  }\n\
  \  return x.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\
  \").reverse().join(\"\");\n}\n"
- "  let s = \"\" + x;\n  for (var i = 0; i < shift; i++) {\n    s = s.charAt(s.length\
  \ - 1 - i);\n  }\n  return s;\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result\
  \ += x.charAt(x.length - i - 1);\n  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\");\n  if (shift > digits.length) {\n\
  \    return digits.reverse().join(\"\");\n  }\n  return digits.slice(shift, digits.length).reverse().join(\"\
  \");\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ digits = digits.reverse();\n  return digits.join(\"\").split(\"\").reverse().join(\"\
  \") + digits.join(\"\").split(\"\").reverse().join(\"\");\n}\n"
- "  const digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse().join('');\n\
  \  return digits.slice(shift, digits.length).reverse().join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += digits.pop();\n\
  \  }\n  return result + digits.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\");\n  if (shift > digits.length) return\
  \ digits;\n  digits = digits.reverse();\n  for (let i = 0; i < shift; i++) digits\
  \ = digits.concat(digits);\n  return digits.reverse().join(\"\");\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits;\n  const result = new Array(shift).fill(0);\n  for (let i = digits.length\
  \ - 1; i >= shift; i--) result[i] = digits[digits.length - i - 1];\n  return result.join('')\
  \ + digits.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  for (let i = 0; i < shift; i++) digits = digits.reverse();\n\
  \  return digits.join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n\
  \  }\n  return result;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  digits.length = shift + 1;\n\
  \  return digits.reverse().join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  let result = \"\";\n  for (let\
  \ i = 0; i < shift; i++) {\n    result += digits.pop();\n  }\n  for (let i = 0;\
  \ i < digits.length; i++) {\n    result += digits[i];\n  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n\
  \  }\n  return result;\n}\n"
- "  let s = \"\" + x;\n  let n = s.length;\n  if (shift > n) {\n    return s.split(\"\
  \").reverse().join(\"\");\n  }\n  for (let i = n; i > shift; i--) {\n    s = s.charAt(i\
  \ - 1) + s.charAt(i);\n  }\n  return s;\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; --i) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  for (let i = shift; i < x.length; ++i) {\n    result = x.charAt(i - 1) +\
  \ result;\n  }\n  return result;\n}\n"
- "  let s = \"\" + x;\n  for (let i = s.length - 1; i >= shift; i--) {\n    s = s.substring(0,\
  \ i) + s.charAt(i + 1) + s.substring(i + 1, i + 2);\n  }\n  return s;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    return digits.reverse().join('');\n  }\n  return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const remainder = x % Math.pow(10, shift);\n  return digits.reverse().slice(0,\
  \ shift) + String(remainder).split('').reverse().join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  else return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  else return digits.slice(shift, digits.length + shift).reverse();\n\
  }\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    return digits.join(\"\");\n  }\n  return digits.join(\"\").split(\"\").reverse().join(\"\
  \") + digits.reverse().join(\"\");\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n\
  \  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const result = new Array(shift).fill('0').join('');\n  for\
  \ (let i = digits.length - 1; i >= shift; i--) result += digits[i];\n  return result;\n\
  }\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().slice(shift, x.length).join(\"\
  \");\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  let result = \"\";\n  for (let\
  \ i = 0; i < digits.length; i++) {\n    result += digits[(i + shift) % digits.length];\n\
  \  }\n  return result;\n}\n"
- "  let s = \"\" + x;\n  for (let i = s.length; shift > 0 ? i >= s.length : i < s.length;\
  \ shift -= 1) {\n    s += s.charAt(s.length - shift - 1);\n  }\n  return s;\n}\n"
- "  let result = \"\";\n  let remainder = 0;\n  for (let i = 0; i < shift; i++) {\n\
  \    remainder = x % 10;\n    x = Math.floor(x / 10);\n    result += remainder;\n\
  \  }\n  return result;\n}\n"
- "  if (shift === 0) {\n    return x;\n  }\n  let digits = String(Math.abs(x)).split('');\n\
  \  if (shift > digits.length) {\n    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) {\n    return digits.split(\"\").reverse().join(\"\
  \");\n  }\n  return digits.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
  \") + digits.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n\
  \  }\n  return result;\n}\n"
- "  const digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse();\n\
  \  const result = new Array(shift).fill('0');\n  for (let i = digits.length - shift;\
  \ i > 0; i -= 1) {\n    result[i - 1] = digits[i];\n  }\n  return result.join('')\
  \ + digits.reverse().join('');\n}\n"
- "  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += String(x);\n\
  \  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length).join(\"\");\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length).join(\"\");\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().join(\"\").split(\"\").shift(shift).join(\"\
  \");\n}\n"
- "  let result = \"\";\n  for (let i = shift; i > 0; i--) {\n    result = x + result;\n\
  \  }\n  return result;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  if (shift > x.length) return x.split(\"\").reverse().join(\"\");\n  return x.split(\"\
  \").reverse().join(\"\").split(\"\").reverse().join(\"\") + x.split(\"\").reverse().join(\"\
  \").split(\"\").reverse().join(\"\");\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  for (let i = 0; i < shift; i++) digits = digits.reverse();\n\
  \  return digits.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse().join('');\n  else return digits.slice(shift, digits.length).join('');\n\
  }\n"
- "  const digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse().join('');\n\
  \  const result = new Array(shift - digits.length).fill('0');\n  result.push(...digits);\n\
  \  return result.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    shift = digits.length - shift;\n  }\n  for (let i = 0; i < shift; i++) {\n\
  \    digits[i] = digits[i + shift];\n  }\n  return digits.reverse().join('');\n\
  }\n"
- "  let s = \"\" + x;\n  for (var i = 0; i < shift; i++) {\n    s = s.charAt(s.length\
  \ - 1 - i);\n  }\n  return s;\n}\n"
- "  let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += String(x);\n\
  \  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    digits = digits.reverse();\n  }\n  return digits.join(\"\").split(\"\"\
  ).reverse().join(\"\") + digits.reverse().join(\"\");\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) return digits.split(\"\").reverse().join(\"\"\
  );\n  return digits.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
  \") + digits.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n\
  }\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    return digits.join(\"\");\n  }\n  return digits.reverse().join(\"\").split(\"\
  \").reverse().join(\"\");\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
  \").split(\"\").reverse().join(\"\");\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.substr(0, i) + result\
  \ + x.substr(i);\n  }\n  return result;\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().slice(shift, x.length).join(\"\
  \");\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  let result = \"\";\n  for (let\
  \ i = 0; i < digits.length; i++) {\n    result += digits[(digits.length - 1 - i)\
  \ % digits.length] + digits[i];\n  }\n  if (shift > digits.length) return digits.reverse();\n\
  \  return result;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse().join('');\n  else return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result += x.charAt(i - 1);\n  }\n\
  \  return result;\n}\n"
- "  if (shift === 0) {\n    return x;\n  }\n  let digits = String(Math.abs(x)).split('');\n\
  \  if (shift > digits.length) {\n    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().slice(shift, x.length).join(\"\
  \");\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  const result = new Array(digits.length + shift).fill('0');\n\
  \  for (let i = digits.length; i > shift; i--) result[i - shift] = digits[i - 1];\n\
  \  return result.join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  return result;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse().join('');\n  return digits.reverse().slice(shift, digits.length).join('');\n\
  }\n"
- "  if (shift === 0) {\n    return x;\n  }\n  let digits = String(Math.abs(x)).split('');\n\
  \  if (shift > digits.length) {\n    digits = digits.reverse();\n  }\n  while (digits.length\
  \ < shift) {\n    digits.push('0');\n  }\n  return digits.join('') + digits.splice(0,\
  \ shift).reverse().join('');\n}\n"
- "  let digits = String(Math.abs(x)).split(\"\").reverse();\n  digits = digits.join(\"\
  \");\n  if (shift > digits.length) return digits;\n  else return digits.substr(0,\
  \ shift) + digits.substr(shift, digits.length);\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  digits.length = Math.max(digits.length,\
  \ shift);\n  return digits.reverse().join('');\n}\n"
- "  if (shift > x.length) return x.toString().split(\"\").reverse().join(\"\");\n\
  \  return x.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
  \") + x.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
  \").split(\"\").reverse().join(\"\");\n}\n"
- "  if (shift > x.length) return x.toString();\n  let result = \"\";\n  for (let\
  \ i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n  }\n  return\
  \ result;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  return digits.reverse().join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length).join(\"\");\n\
  }\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length)\n \
  \   return digits.reverse();\n  else\n    return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\
  \").split(\"\").reverse().join(\"\") + x.toString().split(\"\").reverse().join(\"\
  \").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\"\
  ).reverse().join(\"\");\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse().join('');\n  return digits.replace(/(\\d{' + shift + '})/g, (_,\
  \ digit) => digit.slice(shift, -shift));\n}\n"
- "  const digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse().join('');\n\
  \  const result = new Array(shift - digits.length).fill('0');\n  for (let i = 0;\
  \ i < shift; i++) result[digits.length - 1 - i] = digits[i];\n  return result.join('')\
  \ + digits.join('');\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  digits.length = Math.ceil(digits.length\
  \ / shift);\n  digits.reverse();\n  return digits.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  else return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) {\n\
  \    digits = digits.reverse();\n  }\n  return digits.shift(shift).join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ let result = \"\";\n  for (let i = 0; i < shift; i++) {\n    result += digits.pop();\n\
  \  }\n  return result + digits.join('');\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length + shift).join(\"\
  \");\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").slice(shift, x.length + shift).join(\"\
  \");\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  for (let i = 0; i < shift; i++) digits = digits.reverse();\n\
  \  return digits.join('');\n}\n"
- "  const digits = String(Math.abs(x)).split(\"\");\n  digits.length = Math.max(digits.length,\
  \ shift);\n  return digits.join(\"\").split(\"\").reverse().join(\"\");\n}\n"
- "  let s = \"\";\n  for (let i = shift; i > 0; i -= 1) {\n    s = x.toString() +\
  \ s;\n    x = x >> 1;\n  }\n  return s;\n}\n"
- "  if (shift > x.length) {\n    return x.toString().split(\"\").reverse().join(\"\
  \");\n  }\n  return x.toString().split(\"\").reverse().slice(shift, x.length).join(\"\
  \");\n}\n"
- "  let digits = x.toString().split(\"\").reverse();\n  if (shift > digits.length)\
  \ {\n    return digits.reverse();\n  }\n  return digits.splice(0, shift).reverse().join(\"\
  \");\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  digits = digits.reverse();\n \
  \ digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n\
  }\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = x.length; i > shift; i--) {\n    result = x.charAt(i - 1) + result;\n\
  \  }\n  return result;\n}\n"
- "  const digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse().join('');\n  return digits.reverse().slice(shift, digits.length\
  \ + shift).join('');\n}\n"
- "  if (shift > x.length) {\n    return x.toString();\n  }\n  let result = \"\";\n\
  \  for (let i = 0; i < shift; i++) {\n    result += x.charAt(x.length - i - 1);\n\
  \  }\n  return result;\n}\n"
- "  let s = \"\";\n  for (let i = shift; i > 0; i -= 1) {\n    s = x.toString() +\
  \ s;\n    x = parseInt(s);\n  }\n  return s;\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits;\n  let result = new Array(digits.length + shift - 1).join('0');\n  for\
  \ (let i = 0; i < shift; i++) {\n    result = digits[i + shift] + result;\n  }\n\
  \  return result;\n}\n"
- "  let result = \"\";\n  let remainder = x;\n  let digits = String(Math.floor(remainder)).split(\"\
  \");\n  while (shift > digits.length) {\n    digits = digits.reverse();\n  }\n \
  \ while (shift > 1) {\n    digits = digits.reverse();\n    shift--;\n  }\n  digits.reverse();\n\
  \  for (let i = 0; i < digits.length; i++) {\n    result += digits[i];\n  }\n  return\
  \ result;\n}\n"
- "  let s = \"\" + x;\n  while (s.length < shift) {\n    s = s.charAt(s.length -\
  \ 1) + s.charAt(s.length);\n  }\n  return s.substr(0, shift);\n}\n"
- "  let digits = String(Math.abs(x)).split('');\n  if (shift > digits.length) return\
  \ digits.reverse();\n  else return digits.slice(shift, digits.length).reverse().join('');\n\
  }\n"
language: ts
name: HumanEval_65_circular_shift
prompt: '//Circular shift the digits of the integer x, shift the digits right by shift

  // and return the result as a string.

  // If shift > number of digits, return digits reversed.

  // >>> circular_shift(12, 1)

  // "21"

  // >>> circular_shift(12, 2)

  // "12"

  function circular_shift(x: number, shift: number): string {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100,\
  \ 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97,\
  \ 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11,\
  \ 101),\"11\");\n}\n\ntest();"
