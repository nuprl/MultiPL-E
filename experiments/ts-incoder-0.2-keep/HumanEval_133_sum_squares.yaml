name: HumanEval_133_sum_squares
language: humaneval_to_typescript.py
prompt: "//You are given a list of numbers.\n// You need to return the sum of squared\
  \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
  \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
  \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be\
  \ 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
  \ the output should be 6\nfunction sum_squares(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4,\
  \ 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n\
  \  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4,\
  \ 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n\
  \  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n\
  \  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"
completions: ["    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n    \
    \    sum += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i] * lst[i]);\n  }\n  return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum\
    \ += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n\
    \  }\n  return Math.round(sum);\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i],\
    \ 2);\n  }\n  return Math.round(sum);\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum\
    \ += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n\
    \  }\n  return Math.round(sum);\n}\n", "    let sum = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return\
    \ Math.round(sum);\n}\n</code>\n<|/ a tags=typescript,javascript |>\n<| a tags=typescript,javascript\
    \ |>\n<code>", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]) *\
    \ Math.ceil(lst[i]);\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return\
    \ Math.round(sum);\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i],\
    \ 2);\n  }\n  return Math.round(sum);\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i],\
    \ 2);\n  }\n  return Math.round(sum);\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i],\
    \ 2);\n  }\n  return Math.round(sum);\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
