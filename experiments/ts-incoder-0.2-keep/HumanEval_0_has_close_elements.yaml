name: HumanEval_0_has_close_elements
language: humaneval_to_typescript.py
prompt: "//Check if in given list of numbers, are any two numbers closer to each other\
  \ than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n//\
  \ False\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// True\n\
  function has_close_elements(numbers: number[], threshold: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
  \ 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0],\
  \ 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n\
  \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
completions: ["\tlet len = numbers.length;\n\tfor (let i = 0; i < len; i++) {\n\t\t\
    let a = numbers[i];\n\t\tlet b = numbers[(i + 1) % len];\n\t\tif (Math.abs(a -\
    \ b) < threshold) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "\t\
    let min: number[] = [];\n\tlet max: number[] = [];\n\tfor (let i = 0; i < numbers.length;\
    \ i++) {\n\t\tmin.push(numbers[i]);\n\t\tmax.push(numbers[i]);\n\t}\n\tfor (let\
    \ i = 0; i < numbers.length; i++) {\n\t\tfor (let j = i + 1; j < numbers.length;\
    \ j++) {\n\t\t\tif (Math.abs(numbers[i] - numbers[j]) < threshold) {\n\t\t\t\t\
    min[i] = Math.min(min[i], min[j]);\n\t\t\t\tmax[i] = Math.max(max[i], max[j]);\n\
    \t\t\t\tmin[j] = numbers[i];\n\t\t\t\tmax[j] = numbers[i];\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn min[0] === max[0] && min[1] === max[1];\n}\n", "  for (let i = 0;\
    \ i < numbers.length - 1; i++) {\n    const a = numbers[i];\n    const b = numbers[i\
    \ + 1];\n    if (Math.abs(a - b) < threshold) {\n      return true;\n    }\n \
    \ }\n  return false;\n}\n", "    if (numbers.length < 2) {\n        return false;\n\
    \    }\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const diffs\
    \ = sortedNumbers.map((a, b) => Math.abs(a - b));\n    const threshold = Math.abs(threshold);\n\
    \    return diffs.some((diff) => diff < threshold);\n}\n", "    if (numbers.length\
    \ < 2) {\n        return false;\n    }\n\n    const sortedNumbers = numbers.sort((a,\
    \ b) => a - b);\n    const diffs = sortedNumbers.map((a, b) => Math.abs(b - a));\n\
    \    const threshold = Math.abs(threshold);\n\n    return diffs.some((diff) =>\
    \ diff < threshold);\n}\n", "\tfor (let i = 0; i < numbers.length - 1; i++) {\n\
    \t\tconst a = numbers[i];\n\t\tconst b = numbers[i + 1];\n\t\tif (Math.abs(a -\
    \ b) < threshold) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", " \
    \   if (numbers.length < 2) {\n        return false;\n    }\n    let min_distance\
    \ = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < numbers.length - 1; i++)\
    \ {\n        let distance = numbers[i + 1] - numbers[i];\n        if (distance\
    \ < min_distance) {\n            min_distance = distance;\n        }\n    }\n\
    \    return min_distance < threshold;\n}\n", "\tlet min_diff = Number.MAX_SAFE_INTEGER;\n\
    \tfor (let i = 0; i < numbers.length; i++) {\n\t\tconst diff = numbers[i] - threshold;\n\
    \t\tif (diff < min_diff) {\n\t\t\tmin_diff = diff;\n\t\t}\n\t}\n\treturn min_diff\
    \ < Number.EPSILON;\n}\n", "  if (numbers.length === 0) {\n    return false;\n\
    \  }\n  const n = numbers.length;\n  for (let i = 0; i < n; i++) {\n    const\
    \ a = numbers[i];\n    const b = numbers[(i + 1) % n];\n    if (Math.abs(a - b)\
    \ < threshold) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\tlet\
    \ min_difference = threshold;\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\
    \tlet difference = Math.abs(numbers[i] - numbers[i - 1]);\n\t\tif (difference\
    \ < min_difference) {\n\t\t\tmin_difference = difference;\n\t\t}\n\t}\n\treturn\
    \ min_difference < threshold;\n}\n", "    if (numbers.length < 2) {\n        return\
    \ false;\n    }\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n  \
    \  const firstNumber = sortedNumbers[0];\n    const lastNumber = sortedNumbers[sortedNumbers.length\
    \ - 1];\n    const middleNumber = (firstNumber + lastNumber) / 2;\n    return\
    \ Math.abs(firstNumber - middleNumber) < threshold &&\n        Math.abs(lastNumber\
    \ - middleNumber) < threshold;\n}\n", "    if (numbers.length < 2) {\n       \
    \ return false;\n    }\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < sortedNumbers.length - 1; i++) {\n        if (sortedNumbers[i\
    \ + 1] - sortedNumbers[i] > threshold) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "\tlet sortedNumbers = numbers.slice().sort();\n\
    \tlet minDiff = sortedNumbers[0] - threshold;\n\tlet maxDiff = sortedNumbers[sortedNumbers.length\
    \ - 1] + threshold;\n\tfor (let i = 1; i < sortedNumbers.length; i++) {\n\t\t\
    let diff = sortedNumbers[i] - sortedNumbers[i - 1];\n\t\tif (diff < minDiff) {\n\
    \t\t\tminDiff = diff;\n\t\t}\n\t\tif (diff > maxDiff) {\n\t\t\tmaxDiff = diff;\n\
    \t\t}\n\t}\n\treturn minDiff <= maxDiff;\n}\n", "    let sortedNumbers = numbers.slice().sort();\n\
    \    for (let i = 0; i < sortedNumbers.length - 2; i++) {\n        if (sortedNumbers[i\
    \ + 1] - sortedNumbers[i] > threshold) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "\tlet sortedNumbers = numbers.slice().sort((a,\
    \ b) => a - b);\n\tlet minDiff = sortedNumbers[0] - threshold;\n\tlet maxDiff\
    \ = sortedNumbers[sortedNumbers.length - 1] + threshold;\n\tfor (let i = 1; i\
    \ < sortedNumbers.length - 1; i++) {\n\t\tlet diff = sortedNumbers[i] - sortedNumbers[i\
    \ - 1];\n\t\tif (diff < minDiff) {\n\t\t\tminDiff = diff;\n\t\t}\n\t\tif (diff\
    \ > maxDiff) {\n\t\t\tmaxDiff = diff;\n\t\t}\n\t}\n\treturn minDiff <= maxDiff;\n\
    }\n", "    if (numbers.length === 0) {\n        return false;\n    }\n\n    let\
    \ minDiff = numbers[0];\n    let minIndex = 0;\n\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        const diff = numbers[i] - numbers[i - 1];\n        if (diff\
    \ < minDiff) {\n            minDiff = diff;\n            minIndex = i;\n     \
    \   }\n    }\n\n    return minDiff < threshold;\n}\n", "\tlet min_diff = threshold;\n\
    \tfor (let i = 0; i < numbers.length - 1; i++) {\n\t\tconst diff = numbers[i]\
    \ - numbers[i + 1];\n\t\tif (Math.abs(diff) < min_diff) {\n\t\t\tmin_diff = diff;\n\
    \t\t}\n\t}\n\treturn min_diff < threshold;\n}\n", "    for (let i = 0; i < numbers.length\
    \ - 1; i++) {\n        const num1 = numbers[i];\n        const num2 = numbers[i\
    \ + 1];\n        if (Math.abs(num1 - num2) < threshold) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n", "    if (numbers.length ===\
    \ 0) {\n        return false;\n    }\n    const n = numbers.length;\n    let max\
    \ = 0;\n    let min = 0;\n    for (let i = 0; i < n; i++) {\n        const a =\
    \ numbers[i];\n        const b = numbers[(i + 1) % n];\n        if ((a - b) <\
    \ threshold) {\n            max = a;\n            min = b;\n        } else {\n\
    \            max = b;\n            min = a;\n        }\n    }\n    return min\
    \ < threshold && max > threshold;\n}\n", "  for (let i = 0; i < numbers.length\
    \ - 1; i++) {\n    const a = numbers[i];\n    const b = numbers[i + 1];\n    if\
    \ (Math.abs(a - b) < threshold) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
