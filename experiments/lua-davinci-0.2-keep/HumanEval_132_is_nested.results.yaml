name: HumanEval_132_is_nested
language: lua
results:
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyps14nlp.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpyps14nlp.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmp5y39mg.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpmp5y39mg.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjn2_8heo.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjn2_8heo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpupjy7l0_.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpupjy7l0_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string[i] == '[' then\n      table.insert(stack, 1, string[i])\n    elseif\
    \ string[i] == ']' then\n      if #stack == 0 then\n        return false\n   \
    \   else\n        table.remove(stack, 1)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpobu5yb6n.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpobu5yb6n.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8a32jg03.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp8a32jg03.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvamxur5d.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvamxur5d.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb4396t_9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpb4396t_9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack > 0 then\n         \
    \       table.remove(stack)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp375m0a86.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp375m0a86.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6uvvcsx8.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6uvvcsx8.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjeypb2ef.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjeypb2ef.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5vumijt.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpq5vumijt.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpznarmjwz.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpznarmjwz.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string:sub(i, i) == '[' then\n      table.insert(stack, 1, string:sub(i,\
    \ i))\n    elseif string:sub(i, i) == ']' then\n      if #stack == 0 then\n  \
    \      return false\n      else\n        table.remove(stack, 1)\n      end\n \
    \   end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp672uutso.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp672uutso.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo3wfi8yo.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpo3wfi8yo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local c = string:sub(i, i)\n    if c == '[' then\n      table.insert(stack,\
    \ c)\n    elseif c == ']' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8qcmpmwm.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8qcmpmwm.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmposp_unz1.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmposp_unz1.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaksss3lc.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpaksss3lc.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyic5_8vk.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpyic5_8vk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack > 0 then\n         \
    \       table.remove(stack)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5rii6916.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5rii6916.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx0b327ss.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpx0b327ss.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps63utrya.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmps63utrya.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3i8m5441.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3i8m5441.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ofn96zk.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp4ofn96zk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgg4y4dal.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgg4y4dal.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgpi2iy8m.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgpi2iy8m.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpguar1gha.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpguar1gha.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmnlfle4s.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpmnlfle4s.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4fklp9jr.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp4fklp9jr.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    -- body\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8eh9j11t.lua:17:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp8eh9j11t.lua:17:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, #string do\n\
    \        if string:sub(i, i) == '[' then\n            count = count + 1\n    \
    \    elseif string:sub(i, i) == ']' then\n            count = count - 1\n    \
    \    end\n        if count < 0 then\n            return false\n        end\n \
    \   end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjmca5m2o.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjmca5m2o.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6nzgap3i.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6nzgap3i.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcmj8h4fl.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcmj8h4fl.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpomsdq46u.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpomsdq46u.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp67ob_7w_.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp67ob_7w_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqn8m9hs5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqn8m9hs5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsuj5u8kb.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpsuj5u8kb.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp075xrf_0.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp075xrf_0.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn1jpojt2.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpn1jpojt2.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnl064wfm.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpnl064wfm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe42olo45.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpe42olo45.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2glddoyu.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp2glddoyu.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbb60ibda.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpbb60ibda.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp592kgsyt.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp592kgsyt.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string:sub(i, i) == '[' then\n      table.insert(stack, 1, string:sub(i,\
    \ i))\n    elseif string:sub(i, i) == ']' then\n      if #stack == 0 then\n  \
    \      return false\n      else\n        table.remove(stack, 1)\n      end\n \
    \   end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9_ntiqwj.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9_ntiqwj.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwcrasksr.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpwcrasksr.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsakoofzo.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpsakoofzo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvc91tsrb.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvc91tsrb.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1cv9g5e8.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp1cv9g5e8.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5qk1nlxt.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5qk1nlxt.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf9caim2y.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpf9caim2y.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnm_id0m_.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpnm_id0m_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphmyp0ezm.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphmyp0ezm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack > 0 then\n                table.remove(stack)\n            else\n   \
    \             return false\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp10o3wx4i.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp10o3wx4i.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1_3165fq.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp1_3165fq.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8vg4nn5p.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp8vg4nn5p.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps1lxev6m.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmps1lxev6m.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuqytd5sj.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpuqytd5sj.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq51rlkzk.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpq51rlkzk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0v_b5urm.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0v_b5urm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl1aw_3tx.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpl1aw_3tx.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzdbkf0qx.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpzdbkf0qx.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq3215mb2.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpq3215mb2.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuqdnn_bb.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpuqdnn_bb.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp08ctcdrm.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp08ctcdrm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpezmc1ofq.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpezmc1ofq.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp12dm73em.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp12dm73em.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwjthuwz2.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpwjthuwz2.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4b5po1_k.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp4b5po1_k.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string[i] == '[' then\n      table.insert(stack, string[i])\n    elseif\
    \ string[i] == ']' then\n      if #stack > 0 then\n        table.remove(stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt8r020r9.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpt8r020r9.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1lpfv7_5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp1lpfv7_5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1h8srmrh.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp1h8srmrh.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuu17ce7a.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpuu17ce7a.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5exzynb8.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5exzynb8.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3y_5lz2e.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3y_5lz2e.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzpwwl32d.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpzpwwl32d.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbsi703f6.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpbsi703f6.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9p63do0l.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9p63do0l.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8t8hxe7p.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp8t8hxe7p.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5mneozl8.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5mneozl8.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcsr046rn.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcsr046rn.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack > 0 then\n         \
    \       table.remove(stack)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9sst93gz.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9sst93gz.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ymgatbf.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp8ymgatbf.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local open = 0\n  local close = 0\n  for i = 1,\
    \ #string do\n    if string:sub(i, i) == '[' then\n      open = open + 1\n   \
    \ elseif string:sub(i, i) == ']' then\n      close = close + 1\n    end\n  end\n\
    \  if open == close then\n    return false\n  else\n    return true\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphsq31498.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmphsq31498.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkn8ww1t1.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpkn8ww1t1.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd5li7yan.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd5li7yan.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjnvo_1d3.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjnvo_1d3.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string[i] == '[' then\n      table.insert(stack, string[i])\n    elseif\
    \ string[i] == ']' then\n      if #stack == 0 then\n        return false\n   \
    \   else\n        table.remove(stack)\n      end\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprgd1snr6.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmprgd1snr6.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6x3o76jo.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6x3o76jo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7bc4ms74.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp7bc4ms74.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkst1q9ny.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpkst1q9ny.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphfs9f9l5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphfs9f9l5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvjv34blx.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvjv34blx.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpki5pq31w.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpki5pq31w.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx9xn4y35.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpx9xn4y35.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd7mytfsk.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd7mytfsk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpff2n24se.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpff2n24se.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm_4tyk87.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpm_4tyk87.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprmr1rjkf.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmprmr1rjkf.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvqlsf1aq.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvqlsf1aq.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppzcewxx9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmppzcewxx9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_kbbuvps.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_kbbuvps.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string:sub(i, i) == '[' then\n      table.insert(stack, 1, string:sub(i,\
    \ i))\n    elseif string:sub(i, i) == ']' then\n      if #stack == 0 then\n  \
    \      return false\n      else\n        table.remove(stack, 1)\n      end\n \
    \   end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvxflpbvv.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvxflpbvv.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps676qojz.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmps676qojz.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp49byhpai.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp49byhpai.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8sgy9ml0.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp8sgy9ml0.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy3yyzhs9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpy3yyzhs9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcb8leyf5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcb8leyf5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp03vamc4y.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp03vamc4y.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjontcmut.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjontcmut.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpee32vzci.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpee32vzci.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa_h09b_2.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpa_h09b_2.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd0ipi5oo.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd0ipi5oo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplkul532i.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmplkul532i.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp45u3shjg.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp45u3shjg.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3bk5_zew.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3bk5_zew.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvg1sd2yz.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvg1sd2yz.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0uu5wbno.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0uu5wbno.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local count = 0\n    for i = 1, #string do\n\
    \        if string:sub(i, i) == '[' then\n            count = count + 1\n    \
    \    elseif string:sub(i, i) == ']' then\n            count = count - 1\n    \
    \    end\n        if count < 0 then\n            return false\n        end\n \
    \   end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph_mqeg6k.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmph_mqeg6k.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm6kp1pj9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpm6kp1pj9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp34zf4z_y.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp34zf4z_y.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2vv5kb_y.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp2vv5kb_y.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpekvayl9s.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpekvayl9s.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6mlbaip.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd6mlbaip.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp791pz8wu.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp791pz8wu.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfn271ti3.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpfn271ti3.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjx4q6dzt.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjx4q6dzt.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local c = string:sub(i, i)\n    if c == '[' then\n      table.insert(stack,\
    \ c)\n    elseif c == ']' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpssfj9pux.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpssfj9pux.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbn4szd5n.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpbn4szd5n.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvp6e4nfm.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvp6e4nfm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string[i] == '[' then\n      table.insert(stack, string[i])\n    elseif\
    \ string[i] == ']' then\n      if #stack > 0 then\n        table.remove(stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpif_qvrtg.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpif_qvrtg.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1g1i6ik3.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp1g1i6ik3.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjwmfnnto.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjwmfnnto.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string:sub(i, i) == '[' then\n      table.insert(stack, 1, string:sub(i,\
    \ i))\n    elseif string:sub(i, i) == ']' then\n      if #stack == 0 then\n  \
    \      return false\n      else\n        table.remove(stack, 1)\n      end\n \
    \   end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd9zx3mdu.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd9zx3mdu.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgenk2ldw.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgenk2ldw.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqw0o7t86.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqw0o7t86.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnyilb6d.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpwnyilb6d.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjraopkdw.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjraopkdw.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc3exoxo9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpc3exoxo9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5qs95ph0.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5qs95ph0.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_zvawgj.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmps_zvawgj.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg800bxk2.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpg800bxk2.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack > 0 then\n                table.remove(stack)\n            else\n   \
    \             return false\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphc2e2qhc.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphc2e2qhc.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt51uykp5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpt51uykp5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal stack = {}\n\tfor i = 1, #string do\n\t\t\
    local c = string:sub(i, i)\n\t\tif c == '[' then\n\t\t\ttable.insert(stack, c)\n\
    \t\telseif c == ']' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\
    \telse\n\t\t\t\ttable.remove(stack)\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldxv8myw.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpldxv8myw.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsjt6zm0a.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpsjt6zm0a.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpatkqk07g.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpatkqk07g.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local c = string:sub(i, i)\n    if c == '[' then\n      table.insert(stack,\
    \ c)\n    elseif c == ']' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbc9f3hf0.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbc9f3hf0.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnnjamisw.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpnnjamisw.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphiq8m2_g.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphiq8m2_g.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzko_301v.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpzko_301v.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3kallhe5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3kallhe5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc9k_5wcy.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpc9k_5wcy.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyvizlwfa.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpyvizlwfa.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc_95va6r.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpc_95va6r.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpujnwidu4.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpujnwidu4.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsnt9fwfx.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpsnt9fwfx.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg7xr56c4.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpg7xr56c4.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpszljxzni.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpszljxzni.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph55x5ilx.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmph55x5ilx.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack > 0 then\n         \
    \       table.remove(stack)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2xn5bw7m.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp2xn5bw7m.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgviq03f1.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgviq03f1.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk5woiu75.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpk5woiu75.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0uasqiyy.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0uasqiyy.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxweu49om.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpxweu49om.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp90yek7kz.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp90yek7kz.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpihb_71a_.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpihb_71a_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpige9xq_o.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpige9xq_o.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph4htp8jx.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmph4htp8jx.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string:sub(i, i) == '[' then\n      table.insert(stack, ']')\n    else\n\
    \      if #stack == 0 then\n        return false\n      end\n      table.remove(stack)\n\
    \    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptvl9b1ak.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmptvl9b1ak.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl9ddcs0r.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpl9ddcs0r.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0t51uqga.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0t51uqga.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvdr2miep.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvdr2miep.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphpxh1upk.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphpxh1upk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local count = 0\n  for i = 1, #string do\n   \
    \ if string:sub(i, i) == '[' then\n      count = count + 1\n    elseif string:sub(i,\
    \ i) == ']' then\n      count = count - 1\n    end\n    if count < 0 then\n  \
    \    return false\n    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpazu3ccnj.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpazu3ccnj.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            local\
    \ top = table.remove(stack)\n            if top == nil then\n                return\
    \ false\n            end\n        end\n    end\n    return #stack == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq8ttosqk.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpq8ttosqk.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp976cxm2d.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp976cxm2d.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk0zl2a_f.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpk0zl2a_f.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz3b4lc_7.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpz3b4lc_7.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzcvmio4l.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpzcvmio4l.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0c5yz_14.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0c5yz_14.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqx3pynxg.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqx3pynxg.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_7zin2no.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_7zin2no.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2t1lhcw9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp2t1lhcw9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvlzcqlt1.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvlzcqlt1.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3u2b6qbu.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3u2b6qbu.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpacuz32bz.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpacuz32bz.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local char = string:sub(i, i)\n    if char == '[' then\n      table.insert(stack,\
    \ char)\n    elseif char == ']' then\n      if #stack == 0 then\n        return\
    \ false\n      else\n        table.remove(stack)\n      end\n    end\n  end\n\
    \  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp19yc_yfi.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp19yc_yfi.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdnrgfbk_.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpdnrgfbk_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local c = string:sub(i, i)\n    if c == '[' then\n      table.insert(stack,\
    \ c)\n    elseif c == ']' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe71jveh7.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpe71jveh7.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbj0icve4.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpbj0icve4.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local c = string:sub(i, i)\n    if c == '[' then\n      table.insert(stack,\
    \ c)\n    elseif c == ']' then\n      if #stack > 0 then\n        table.remove(stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #stack\
    \ > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpovgwlj7i.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpovgwlj7i.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjnfl3ecm.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjnfl3ecm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local c = string:sub(i, i)\n        if c == '[' then\n            table.insert(stack,\
    \ c)\n        elseif c == ']' then\n            if #stack == 0 then\n        \
    \        return false\n            else\n                table.remove(stack)\n\
    \            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6fql_4tf.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6fql_4tf.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  if string[i] == '[' then\n      table.insert(stack, 1, string[i])\n    elseif\
    \ string[i] == ']' then\n      if #stack == 0 then\n        return false\n   \
    \   else\n        table.remove(stack, 1)\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1zioz4fq.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp1zioz4fq.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i=1,#string do\n \
    \       local char = string:sub(i,i)\n        if char == '[' then\n          \
    \  table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_qhhuzn9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_qhhuzn9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5babw68.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpq5babw68.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcugpgs3r.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcugpgs3r.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local stack = {}\n  for i = 1, #string do\n  \
    \  local c = string:sub(i, i)\n    if c == '[' then\n      table.insert(stack,\
    \ c)\n    elseif c == ']' then\n      if #stack == 0 then\n        return false\n\
    \      else\n        table.remove(stack)\n      end\n    end\n  end\n  return\
    \ #stack > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2928qi5b.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp2928qi5b.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local stack = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char == '[' then\n        \
    \    table.insert(stack, char)\n        elseif char == ']' then\n            if\
    \ #stack == 0 then\n                return false\n            else\n         \
    \       table.remove(stack)\n            end\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeyurhflw.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpeyurhflw.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
