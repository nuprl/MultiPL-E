name: HumanEval_41_car_race_collision
language: lua
prompt: "-- Imagine a road that's a perfectly straight infinitely long line.\n-- n\
  \ cars are driving left to right;  simultaneously, a different set of n cars\n--\
  \ are driving right to left.   The two sets of cars start out being very far from\n\
  -- each other.  All cars move in the same speed.  Two cars are said to collide\n\
  -- when a car that's moving left to right hits a car that's moving right to left.\n\
  -- However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n-- in their trajectory as if they did not collide.\n-- This function outputs\
  \ the number of such collisions.\nlocal function car_race_collision(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n\
  \    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n  \
  \  lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n  \
  \  lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local collisions = 0\n    local cars = {}\n    for i = 1, n do\n\
    \        cars[i] = {\n            x = math.random() * 1000000,\n            y\
    \ = math.random() * 1000000,\n            vx = math.random() * 1000000,\n    \
    \        vy = math.random() * 1000000,\n        }\n    end\n    for i = 1, n do\n\
    \        local c1 = cars[i]\n        for j = i + 1, n do\n            local c2\
    \ = cars[j]\n            local dx = c1.x - c2.x\n            local dy = c1.y -\
    \ c2.y\n            local dvx = c1.vx - c2.vx\n            local dvy = c1.vy -\
    \ c2.vy\n            local dvdr = dvx * dx + dvy * dy\n            if dvdr < 0\
    \ then\n                local dvdv = dvx * dvx + dvy * dvy\n                local\
    \ drdr = dx * dx + dy * dy\n                local sigma = dvdr * dvdr - dvdv *\
    \ (drdr - 4)\n                if sigma > 0 then\n                    local d =\
    \ (-dvdr - math.sqrt(sigma)) / dvdv\n                    if d < 0 then\n     \
    \                   collisions = collisions + 1\n                    end\n   \
    \             end\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n\
    \  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n     \
    \ if left_to_right[i] == right_to_left[j] then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "  local function\
    \ car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)\n    if\
    \ n == 0 then\n      return 0\n    else\n      local left_to_right_car = left_to_right_cars[n]\n\
    \      local right_to_left_car = right_to_left_cars[n]\n      local left_to_right_car_collision\
    \ = car_race_collision_helper(n - 1, left_to_right_cars, right_to_left_cars)\n\
    \      local right_to_left_car_collision = car_race_collision_helper(n - 1, left_to_right_cars,\
    \ right_to_left_cars)\n      if left_to_right_car < right_to_left_car then\n \
    \       return left_to_right_car_collision + 1\n      else\n        return right_to_left_car_collision\n\
    \      end\n    end\n  end\n  return car_race_collision_helper(n, {}, {})\nend",
  "    local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n    \
    \        if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local collisions = 0\n    local cars = {}\n    for i\
    \ = 1, n do\n        cars[i] = {\n            x = math.random(),\n           \
    \ v = math.random()\n        }\n    end\n    for i = 1, n do\n        cars[n +\
    \ i] = {\n            x = math.random(),\n            v = -math.random()\n   \
    \     }\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if\
    \ cars[i].v > 0 and cars[j + n].v < 0 then\n                local dx = cars[i].x\
    \ - cars[j + n].x\n                local dv = cars[i].v - cars[j + n].v\n    \
    \            if dx * dv > 0 then\n                    collisions = collisions\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    -- TODO: implement this function\n    return 0\nend",
  "    local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n    \
    \        if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local collisions = 0\n    local cars = {}\n    local function add_car(car)\n\
    \        local i = 1\n        while i <= n do\n            if cars[i] == nil then\n\
    \                cars[i] = car\n                return\n            end\n    \
    \        i = i + 1\n        end\n        error(\"car_race_collision: too many\
    \ cars\")\n    end\n    local function remove_car(car)\n        local i = 1\n\
    \        while i <= n do\n            if cars[i] == car then\n               \
    \ cars[i] = nil\n                return\n            end\n            i = i +\
    \ 1\n        end\n        error(\"car_race_collision: car not found\")\n    end\n\
    \    local function check_collision(car)\n        local i = 1\n        while i\
    \ <= n do\n            if cars[i] ~= nil and cars[i] ~= car then\n           \
    \     collisions = collisions + 1\n            end\n            i = i + 1\n  \
    \      end\n    end\n    local function move_car(car)\n        remove_car(car)\n\
    \        check_collision(car)\n        car.x = car.x + car.v\n        add_car(car)\n\
    \    end\n    local function move_cars()\n        local i = 1\n        while i\
    \ <= n do\n            if cars[i] ~= nil then\n                move_car(cars[i])\n\
    \            end\n            i = i + 1\n        end\n    end\n    local function\
    \ add_cars(cars_)\n        for _, car in ipairs(cars_) do\n            add_car(car)\n\
    \        end\n    end\n    local function remove_cars(cars_)\n        for _, car\
    \ in ipairs(cars_) do\n            remove_car(car)\n        end\n    end\n   \
    \ local function get_cars()\n        local cars_ = {}\n        local i = 1\n \
    \       while i <= n do\n            if cars[i] ~= nil then\n                table.insert(cars_,\
    \ cars[i])\n            end\n            i = i + 1\n        end\n        return\
    \ cars_\n    end\n    return {\n        add_cars = add_cars,\n        remove_cars\
    \ = remove_cars,", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local collisions = 0\n    local cars = {}\n\
    \    for i = 1, n do\n        cars[i] = {\n            x = math.random(),\n  \
    \          dx = math.random() * 2 - 1,\n        }\n    end\n    for i = 1, n do\n\
    \        cars[i + n] = {\n            x = math.random(),\n            dx = math.random()\
    \ * 2 - 1,\n        }\n    end\n    for i = 1, n do\n        local car1 = cars[i]\n\
    \        for j = n + 1, 2 * n do\n            local car2 = cars[j]\n         \
    \   if car1.dx > 0 and car2.dx < 0 then\n                local x1 = car1.x + car1.dx\n\
    \                local x2 = car2.x + car2.dx\n                if x1 >= x2 then\n\
    \                    collisions = collisions + 1\n                end\n      \
    \      end\n        end\n    end\n    return collisions\nend", "    local n =\
    \ n or 1\n    local collisions = 0\n    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \        if n == 0 then\n            return 0\n        else\n            local\
    \ left_to_right_collision = car_race_collision_helper(n - 1, left_to_right + 1,\
    \ right_to_left)\n            local right_to_left_collision = car_race_collision_helper(n\
    \ - 1, left_to_right, right_to_left + 1)\n            return left_to_right_collision\
    \ + right_to_left_collision\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local left_to_right = {}\n    local right_to_left = {}\n \
    \   for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n       \
    \ for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collision = collision + 1\n            end\n        end\n   \
    \ end\n    return collision\nend", "    local function car_race_collision_helper(n,\
    \ i, j)\n        if i == n or j == n then\n            return 0\n        else\n\
    \            return car_race_collision_helper(n, i + 1, j + 1) + car_race_collision_helper(n,\
    \ i, j + 1)\n        end\n    end\n    return car_race_collision_helper(n, 0,\
    \ 0)\nend", "    local left_to_right = {}\n    local right_to_left = {}\n    for\
    \ i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1\
    \ - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for j =\
    \ 1, n do\n            if left_to_right[i] == right_to_left[j] then\n        \
    \        collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  if left_to_right[i] > right_to_left[i] then\n            collisions = collisions\
    \ + 1\n        end\n    end\n    return collisions\nend", "  local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n    if n == 0 then\n      return 0\n    else\n\
    \      local left_to_right_collision = car_race_collision_helper(n - 1, left_to_right\
    \ + 1, right_to_left)\n      local right_to_left_collision = car_race_collision_helper(n\
    \ - 1, left_to_right, right_to_left + 1)\n      return left_to_right_collision\
    \ + right_to_left_collision + math.min(left_to_right, right_to_left)\n    end\n\
    \  end\n  return car_race_collision_helper(n, 0, 0)\nend", "    local n_collisions\
    \ = 0\n    local cars_left_to_right = {}\n    local cars_right_to_left = {}\n\
    \    for i = 1, n do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left_to_right[i] == cars_right_to_left[j] then\n               \
    \ n_collisions = n_collisions + 1\n            end\n        end\n    end\n   \
    \ return n_collisions\nend", "  return n * (n - 1) / 2\nend", "    local collisions\
    \ = 0\n    local cars_left_to_right = {}\n    local cars_right_to_left = {}\n\
    \    for i = 1, n do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left_to_right[i] == cars_right_to_left[j] then\n               \
    \ collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local left_to_right = {}\n  local right_to_left = {}\n\
    \  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n\
    \  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n     \
    \ if left_to_right[i] == right_to_left[j] then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "  local collisions\
    \ = 0\n  local cars_left = {}\n  local cars_right = {}\n  for i = 1, n do\n  \
    \  cars_left[i] = i\n    cars_right[i] = n + 1 - i\n  end\n  for i = 1, n do\n\
    \    for j = 1, n do\n      if cars_left[i] == cars_right[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  local collisions = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i]\
    \ = {\n            x = math.random() * 1000000,\n            v = math.random()\
    \ * 1000000,\n            dir = 1\n        }\n    end\n    for i = 1, n do\n \
    \       cars[i + n] = {\n            x = math.random() * 1000000,\n          \
    \  v = math.random() * 1000000,\n            dir = -1\n        }\n    end\n  \
    \  table.sort(cars, function(a, b) return a.x < b.x end)\n    for i = 1, n * 2\
    \ do\n        for j = i + 1, n * 2 do\n            if cars[i].dir ~= cars[j].dir\
    \ then\n                local dx = cars[j].x - cars[i].x\n                local\
    \ dv = cars[j].v - cars[i].v\n                if dv > 0 then\n               \
    \     local t = dx / dv\n                    if t > 0 then\n                 \
    \       collisions = collisions + 1\n                    end\n               \
    \ end\n            end\n        end\n    end\n    return collisions\nend", " \
    \ local n = n or 1\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if i == j then\n        collisions = collisions + 1\n      end\n\
    \    end\n  end\n  return collisions\nend", "  local cars_left = {}\n  local cars_right\
    \ = {}\n  for i = 1, n do\n    cars_left[i] = i\n    cars_right[i] = n + i\n \
    \ end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if\
    \ cars_left[i] == cars_right[j] then\n        collisions = collisions + 1\n  \
    \    end\n    end\n  end\n  return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = 0,\n            v = 1,\n        }\n    end\n    for i = 1, n do\n  \
    \      cars[i + n] = {\n            x = 1,\n            v = -1,\n        }\n \
    \   end\n    for i = 1, n do\n        for j = i + 1, n + n do\n            if\
    \ cars[i].v ~= cars[j].v then\n                local x1 = cars[i].x\n        \
    \        local x2 = cars[j].x\n                local v1 = cars[i].v\n        \
    \        local v2 = cars[j].v\n                local t = (x2 - x1) / (v1 - v2)\n\
    \                if t >= 0 and t <= 1 then\n                    collisions = collisions\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local collisions = 0\n  local cars = {}\n  local cars_left\
    \ = {}\n  local cars_right = {}\n  for i = 1, n do\n    cars[i] = {\n      x =\
    \ math.random(0, 1000000),\n      y = math.random(0, 1000000),\n      vx = math.random(0,\
    \ 1000000),\n      vy = math.random(0, 1000000),\n    }\n    cars_left[i] = cars[i]\n\
    \    cars_right[i] = cars[i]\n  end\n  local function sort_by_x(a, b)\n    return\
    \ a.x < b.x\n  end\n  table.sort(cars_left, sort_by_x)\n  table.sort(cars_right,\
    \ sort_by_x)\n  local function sort_by_y(a, b)\n    return a.y < b.y\n  end\n\
    \  local function sort_by_vx(a, b)\n    return a.vx < b.vx\n  end\n  local function\
    \ sort_by_vy(a, b)\n    return a.vy < b.vy\n  end\n  local function sort_by_x_and_y(a,\
    \ b)\n    if a.x == b.x then\n      return a.y < b.y\n    else\n      return a.x\
    \ < b.x\n    end\n  end\n  local function sort_by_vx_and_vy(a, b)\n    if a.vx\
    \ == b.vx then\n      return a.vy < b.vy\n    else\n      return a.vx < b.vx\n\
    \    end\n  end\n  local function sort_by_x_and_vy(a, b)\n    if a.x == b.x then\n\
    \      return a.vy < b.vy\n    else\n      return a.x < b.x\n    end\n  end\n\
    \  local function sort_by_y_and_vx(a, b)\n    if a.y == b.y then\n      return\
    \ a.vx < b.vx\n    else\n      return a.y < b.y\n    end\n", "    local collisions\
    \ = 0\n    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local count = 0\n  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        count = count + 1\n      end\n    end\n  end\n\
    \  return count\nend", "    local cars_left_to_right = {}\n    local cars_right_to_left\
    \ = {}\n    local collisions = 0\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ i = 0\n  local j = n - 1\n  local collisions = 0\n  while i < n and j >= 0 do\n\
    \    if i == j then\n      collisions = collisions + 1\n    else\n      collisions\
    \ = collisions + 2\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return collisions\n\
    end", "  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n\
    \ do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local\
    \ collision = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collision = collision + 1\n      end\n   \
    \ end\n  end\n  return collision\nend", "    local collisions = 0\n    local cars_left\
    \ = {}\n    local cars_right = {}\n    for i = 1, n do\n        cars_left[i] =\
    \ i\n        cars_right[i] = n + 1 - i\n    end\n    for i = 1, n do\n       \
    \ for j = 1, n do\n            if cars_left[i] == cars_right[j] then\n       \
    \         collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local collisions = 0\n    local cars = {}\n\
    \    for i = 1, n do\n        cars[i] = {\n            x = math.random() * 1000000,\n\
    \            v = math.random() * 100,\n            dir = 1\n        }\n    end\n\
    \    for i = 1, n do\n        cars[n + i] = {\n            x = math.random() *\
    \ 1000000,\n            v = math.random() * 100,\n            dir = -1\n     \
    \   }\n    end\n    for i = 1, n * 2 do\n        for j = i + 1, n * 2 do\n   \
    \         local c1 = cars[i]\n            local c2 = cars[j]\n            if c1.dir\
    \ ~= c2.dir then\n                local d = c1.x - c2.x\n                local\
    \ v = c1.v - c2.v\n                if v ~= 0 then\n                    local t\
    \ = d / v\n                    if t > 0 and t < 1 then\n                     \
    \   collisions = collisions + 1\n                    end\n                end\n\
    \            end\n        end\n    end\n    return collisions\nend", "    local\
    \ collisions = 0\n    local cars_left_to_right = {}\n    local cars_right_to_left\
    \ = {}\n    for i = 1, n do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i]\
    \ = n - i + 1\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left_to_right[i] == cars_right_to_left[j] then\n               \
    \ collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local collisions = 0\n    local cars_left_to_right =\
    \ {}\n    local cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local count = 0\n    for i =\
    \ 1, n do\n        for j = 1, n do\n            if i == j then\n             \
    \   count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "    local left = {}\n    local right = {}\n    for i = 1, n do\n      \
    \  left[i] = i\n        right[i] = n + i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left[i] == right[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    local count = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "    local collisions = 0\n    local cars = {}\n    for\
    \ i = 1, n do\n        cars[i] = {\n            left = true,\n            position\
    \ = 0,\n            speed = math.random(1, n)\n        }\n    end\n    for i =\
    \ 1, n do\n        cars[i + n] = {\n            left = false,\n            position\
    \ = n,\n            speed = math.random(1, n)\n        }\n    end\n    local time\
    \ = 0\n    while time < n do\n        time = time + 1\n        for i = 1, n *\
    \ 2 do\n            local car = cars[i]\n            if car.left then\n      \
    \          car.position = car.position + car.speed\n            else\n       \
    \         car.position = car.position - car.speed\n            end\n        end\n\
    \        for i = 1, n * 2 do\n            local car = cars[i]\n            if\
    \ car.left then\n                for j = 1, n * 2 do\n                    local\
    \ other = cars[j]\n                    if not other.left and other.position ==\
    \ car.position then\n                        collisions = collisions + 1\n   \
    \                 end\n                end\n            end\n        end\n   \
    \ end\n    return collisions\nend", "    local function car_race_collision_helper(n,\
    \ left_to_right, right_to_left)\n        if n == 0 then\n            return 0\n\
    \        else\n            local left_to_right_next = left_to_right + 1\n    \
    \        local right_to_left_next = right_to_left + 1\n            local left_to_right_collision\
    \ = left_to_right_next - right_to_left\n            local right_to_left_collision\
    \ = right_to_left_next - left_to_right\n            local collision = left_to_right_collision\
    \ + right_to_left_collision\n            return collision + car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n        end\n    end\n    return\
    \ car_race_collision_helper(n, 0, 0)\nend", "    local left_to_right = {}\n  \
    \  local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n   \
    \ for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] ==\
    \ right_to_left[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "    -- TODO: Implement\
    \ this function.\nend", "    if n == 0 then\n        return 0\n    end\n    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "  local collisions = 0\n  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ - i + 1\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if i == j then\n         \
    \       collisions = collisions + 1\n            end\n        end\n    end\n \
    \   return collisions\nend", "    -- TODO: implement this function\n    return\
    \ 0\nend", "    local left_to_right = {}\n    local right_to_left = {}\n    for\
    \ i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1\
    \ - i\n    end\n    local collision = 0\n    for i = 1, n do\n        for j =\
    \ 1, n do\n            if left_to_right[i] == right_to_left[j] then\n        \
    \        collision = collision + 1\n            end\n        end\n    end\n  \
    \  return collision\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local collisions = 0\n    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n - i + 1\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \        if n == 0 then\n            return 0\n        else\n            local\
    \ left_to_right_collision = car_race_collision_helper(n - 1, left_to_right + 1,\
    \ right_to_left)\n            local right_to_left_collision = car_race_collision_helper(n\
    \ - 1, left_to_right, right_to_left + 1)\n            return left_to_right_collision\
    \ + right_to_left_collision\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local left_to_right = {}\n    local right_to_left = {}\n \
    \   for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    local collision = 0\n    for i = 1, n do\n       \
    \ for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collision = collision + 1\n            end\n        end\n   \
    \ end\n    return collision\nend", "    local collisions = 0\n    local cars =\
    \ {}\n    for i = 1, n do\n        cars[i] = {\n            x = math.random(),\n\
    \            v = math.random()\n        }\n    end\n    for i = 1, n do\n    \
    \    cars[n + i] = {\n            x = math.random(),\n            v = -math.random()\n\
    \        }\n    end\n    for i = 1, n do\n        for j = n + 1, 2 * n do\n  \
    \          if cars[i].x < cars[j].x and cars[i].v > cars[j].v then\n         \
    \       collisions = collisions + 1\n            end\n        end\n    end\n \
    \   return collisions\nend", "  local function car_race_collision_helper(n, left_to_right,\
    \ right_to_left)\n    if n == 0 then\n      return 0\n    else\n      local left_to_right_next\
    \ = left_to_right + 1\n      local right_to_left_next = right_to_left + 1\n  \
    \    local left_to_right_collision = left_to_right_next - right_to_left\n    \
    \  local right_to_left_collision = right_to_left_next - left_to_right\n      local\
    \ left_to_right_collision_count = 0\n      local right_to_left_collision_count\
    \ = 0\n      if left_to_right_collision >= 0 then\n        left_to_right_collision_count\
    \ = left_to_right_collision\n      end\n      if right_to_left_collision >= 0\
    \ then\n        right_to_left_collision_count = right_to_left_collision\n    \
    \  end\n      return left_to_right_collision_count + right_to_left_collision_count\
    \ +\n        car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)\n\
    \    end\n  end\n  return car_race_collision_helper(n, 0, 0)\nend", "    local\
    \ n = tonumber(n)\n    if n == nil then\n        return nil, \"n must be a number\"\
    \n    end\n    if n < 0 then\n        return nil, \"n must be non-negative\"\n\
    \    end\n    if n == 0 then\n        return 0\n    end\n    return n * (n - 1)\
    \ / 2\nend", "    local left_to_right = {}\n    local right_to_left = {}\n   \
    \ for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n\
    \ + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local count = 0\n    for i = 1, n do\n    \
    \    for j = 1, n do\n            if i == j then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    local\
    \ n = n or 1\n    local left_to_right = {}\n    local right_to_left = {}\n   \
    \ for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = i\n\
    \    end\n    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n\
    \ do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local\
    \ collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local cars = {}\n    for i = 1,\
    \ n do\n        cars[i] = {\n            x = math.random() * 1000000,\n      \
    \      v = math.random() * 1000000\n        }\n    end\n    local collisions =\
    \ 0\n    for i = 1, n do\n        for j = 1, n do\n            if cars[i].v >\
    \ 0 and cars[j].v < 0 then\n                local t = (cars[i].x - cars[j].x)\
    \ / (cars[j].v - cars[i].v)\n                if t >= 0 and t <= 1 then\n     \
    \               collisions = collisions + 1\n                end\n           \
    \ end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        for j = 1, n do\n            if i == j then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    -- TODO: implement this function\n    return 0\nend",
  "    local cars_left = {}\n    local cars_right = {}\n    for i = 1, n do\n    \
    \    cars_left[i] = i\n        cars_right[i] = i\n    end\n    local collisions\
    \ = 0\n    for i = 1, n do\n        for j = 1, n do\n            if cars_left[i]\
    \ == cars_right[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local cars_left = {}\n    local cars_right = {}\n    for i = 1, n do\n\
    \        cars_left[i] = i\n        cars_right[i] = i\n    end\n    local i = 1\n\
    \    local j = 1\n    while i <= n and j <= n do\n        if cars_left[i] < cars_right[j]\
    \ then\n            collisions = collisions + 1\n            i = i + 1\n     \
    \   else\n            j = j + 1\n        end\n    end\n    return collisions\n\
    end", "  local cars_left = {}\n  local cars_right = {}\n  for i = 1, n do\n  \
    \  cars_left[i] = i\n    cars_right[i] = n + i\n  end\n  local collisions = 0\n\
    \  local i = 1\n  local j = 1\n  while i <= n and j <= n do\n    if cars_left[i]\
    \ < cars_right[j] then\n      collisions = collisions + 1\n      i = i + 1\n \
    \   else\n      j = j + 1\n    end\n  end\n  return collisions\nend", "    local\
    \ collisions = 0\n    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if left_to_right[i] == right_to_left[j] then\n                collisions =\
    \ collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n\
    \ do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local\
    \ collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \ local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \      if n == 0 then\n         return 0\n      else\n         local left_to_right_next\
    \ = left_to_right + 1\n         local right_to_left_next = right_to_left + 1\n\
    \         local left_to_right_collision = left_to_right_next - right_to_left\n\
    \         local right_to_left_collision = right_to_left_next - left_to_right\n\
    \         local left_to_right_collision_next =\n            left_to_right_collision\
    \ > 0 and left_to_right_collision or 0\n         local right_to_left_collision_next\
    \ =\n            right_to_left_collision > 0 and right_to_left_collision or 0\n\
    \         return car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)\
    \ +\n            left_to_right_collision_next + right_to_left_collision_next\n\
    \      end\n   end\n   return car_race_collision_helper(n, 0, 0)\nend", "    local\
    \ left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n    \
    \    left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n   \
    \ local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "  -- This is a very simple problem.  The cars that are moving left to right\n\
    \  -- will collide with the cars that are moving right to left if and only if\n\
    \  -- they are at the same position at the same time.  The cars that are moving\n\
    \  -- left to right are at positions 0, 1, 2, ..., n-1.  The cars that are moving\n\
    \  -- right to left are at positions n-1, n-2, ..., 0.  So, the cars that are\
    \ moving\n  -- left to right and the cars that are moving right to left will collide\
    \ if and only if\n  -- the positions are the same.  So, the number of collisions\
    \ is the number of\n  -- positions that are the same.  This is the number of pairs\
    \ of numbers that are the same.\n  -- The number of pairs of numbers that are\
    \ the same is n*(n-1)/2.\n  return n*(n-1)/2\nend", "    local collisions = 0\n\
    \    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n            x\
    \ = math.random() * 1000000,\n            v = math.random() * 1000000,\n     \
    \       dir = 1\n        }\n    end\n    for i = 1, n do\n        cars[i + n]\
    \ = {\n            x = math.random() * 1000000,\n            v = math.random()\
    \ * 1000000,\n            dir = -1\n        }\n    end\n    for i = 1, n do\n\
    \        for j = i + 1, n do\n            local a = cars[i]\n            local\
    \ b = cars[j]\n            local d = b.x - a.x\n            local v = b.v - a.v\n\
    \            local t = d / v\n            if t > 0 and t < 1 then\n          \
    \      collisions = collisions + 1\n            end\n        end\n    end\n  \
    \  for i = 1, n do\n        for j = i + 1, n do\n            local a = cars[i\
    \ + n]\n            local b = cars[j + n]\n            local d = b.x - a.x\n \
    \           local v = b.v - a.v\n            local t = d / v\n            if t\
    \ > 0 and t < 1 then\n                collisions = collisions + 1\n          \
    \  end\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n \
    \           local a = cars[i]\n            local b = cars[j + n]\n           \
    \ local d = b.x - a.x\n            local v = b.v - a.v\n            local t =\
    \ d / v\n            if t > 0 and t < 1 then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   local collisions = 0\n    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local count = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "  local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n   \
    \ left_to_right[i] = i\n    right_to_left[i] = n - i + 1\n  end\n  local count\
    \ = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "    local collisions = 0\n    local cars_left = {}\n    local cars_right\
    \ = {}\n    for i = 1, n do\n        cars_left[i] = i\n        cars_right[i] =\
    \ n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if cars_left[i] == cars_right[j] then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \ local left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n  \
    \  left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local count\
    \ = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "    local collisions = 0\n    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local n = n or 0\n    local collisions = 0\n    local cars_left = {}\n\
    \    local cars_right = {}\n    for i = 1, n do\n        cars_left[i] = i\n  \
    \      cars_right[i] = i\n    end\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if cars_left[i] == cars_right[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    local collisions\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \        if n == 0 then\n            return 0\n        else\n            local\
    \ left_to_right_next = left_to_right + 1\n            local right_to_left_next\
    \ = right_to_left + 1\n            local left_to_right_collision = 0\n       \
    \     local right_to_left_collision = 0\n            if left_to_right_next ==\
    \ right_to_left then\n                left_to_right_collision = 1\n          \
    \  end\n            if right_to_left_next == left_to_right then\n            \
    \    right_to_left_collision = 1\n            end\n            return left_to_right_collision\
    \ + right_to_left_collision +\n                car_race_collision_helper(n - 1,\
    \ left_to_right_next, right_to_left_next)\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local collisions = 0\n    for i = 1, n do\n        for j =\
    \ 1, n do\n            if i == j then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   local count = 0\n    for i = 1, n do\n        for j = 1, n do\n          \
    \  if i == j then\n                count = count + 1\n            end\n      \
    \  end\n    end\n    return count\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collision = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collision\
    \ = collision + 1\n      end\n    end\n  end\n  return collision\nend", "  local\
    \ n = n or 0\n  local n_collisions = 0\n  local n_cars_left_to_right = n\n  local\
    \ n_cars_right_to_left = n\n  local car_positions = {}\n  local car_velocities\
    \ = {}\n  local car_positions_left_to_right = {}\n  local car_positions_right_to_left\
    \ = {}\n  local car_velocities_left_to_right = {}\n  local car_velocities_right_to_left\
    \ = {}\n  for i = 1, n do\n    car_positions_left_to_right[i] = -i\n    car_velocities_left_to_right[i]\
    \ = 1\n    car_positions_right_to_left[i] = i\n    car_velocities_right_to_left[i]\
    \ = -1\n  end\n  local function update_cars(car_positions, car_velocities)\n \
    \   for i = 1, #car_positions do\n      car_positions[i] = car_positions[i] +\
    \ car_velocities[i]\n    end\n  end\n  local function check_collisions(car_positions_left_to_right,\
    \ car_positions_right_to_left)\n    for i = 1, #car_positions_left_to_right do\n\
    \      for j = 1, #car_positions_right_to_left do\n        if car_positions_left_to_right[i]\
    \ == car_positions_right_to_left[j] then\n          n_collisions = n_collisions\
    \ + 1\n        end\n      end\n    end\n  end\n  while n_cars_left_to_right >\
    \ 0 and n_cars_right_to_left > 0 do\n    update_cars(car_positions_left_to_right,\
    \ car_velocities_left_to_right)\n    update_cars(car_positions_right_to_left,\
    \ car_velocities_right_to_left)\n    check_collisions(car_positions_left_to_right,\
    \ car_positions_right_to_left", "    local count = 0\n    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local n_collisions = 0\n  local cars_left_to_right\
    \ = {}\n  local cars_right_to_left = {}\n  for i = 1, n do\n    cars_left_to_right[i]\
    \ = i\n    cars_right_to_left[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for\
    \ j = 1, n do\n      if cars_left_to_right[i] == cars_right_to_left[j] then\n\
    \        n_collisions = n_collisions + 1\n      end\n    end\n  end\n  return\
    \ n_collisions\nend", "    local collisions = 0\n    local cars = {}\n    for\
    \ i = 1, n do\n        cars[i] = {\n            x = math.random() * 1000000,\n\
    \            dir = 1\n        }\n    end\n    for i = 1, n do\n        cars[n\
    \ + i] = {\n            x = math.random() * 1000000,\n            dir = -1\n \
    \       }\n    end\n    table.sort(cars, function(a, b) return a.x < b.x end)\n\
    \    for i = 1, n * 2 do\n        local car = cars[i]\n        if car.dir == 1\
    \ then\n            for j = i + 1, n * 2 do\n                local other = cars[j]\n\
    \                if other.dir == -1 then\n                    if car.x > other.x\
    \ then\n                        collisions = collisions + 1\n                \
    \    end\n                    break\n                end\n            end\n  \
    \      end\n    end\n    return collisions\nend", "    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n - i + 1\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local function\
    \ car_race_collision_helper(n, left_to_right, right_to_left)\n        if n ==\
    \ 0 then\n            return 0\n        else\n            local left_to_right_new\
    \ = left_to_right + 1\n            local right_to_left_new = right_to_left + 1\n\
    \            local left_to_right_collision = left_to_right_new - right_to_left\n\
    \            local right_to_left_collision = right_to_left_new - left_to_right\n\
    \            local collision = left_to_right_collision + right_to_left_collision\n\
    \            return collision + car_race_collision_helper(n - 1, left_to_right_new,\
    \ right_to_left_new)\n        end\n    end\n    return car_race_collision_helper(n,\
    \ 0, 0)\nend", "  local left_to_right = {}\n  local right_to_left = {}\n  for\
    \ i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n\
    \  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "  local n = n or 1\n  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = i\n  end\n  local collisions = 0\n  for i = 1, n do\n\
    \    for j = 1, n do\n      if left_to_right[i] == right_to_left[j] then\n   \
    \     collisions = collisions + 1\n      end\n    end\n  end\n  return collisions\n\
    end", "  local collisions = 0\n  local cars_left = {}\n  local cars_right = {}\n\
    \  for i = 1, n do\n    cars_left[i] = i\n    cars_right[i] = n + 1 - i\n  end\n\
    \  for i = 1, n do\n    for j = 1, n do\n      if cars_left[i] == cars_right[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local n = n or 1\n  local cars = {}\n  for i = 1, n do\n\
    \    cars[i] = {\n      x = math.random(0, 100),\n      y = math.random(0, 100),\n\
    \      vx = math.random(1, 10),\n      vy = math.random(1, 10),\n    }\n  end\n\
    \  local collisions = 0\n  for i = 1, n do\n    for j = 1, n do\n      if i ~=\
    \ j then\n        local c1 = cars[i]\n        local c2 = cars[j]\n        if c1.vx\
    \ > 0 and c2.vx < 0 then\n          local x1 = c1.x\n          local y1 = c1.y\n\
    \          local x2 = c2.x\n          local y2 = c2.y\n          local vx1 = c1.vx\n\
    \          local vy1 = c1.vy\n          local vx2 = c2.vx\n          local vy2\
    \ = c2.vy\n          local t = (x2 - x1) / (vx1 - vx2)\n          local y = y1\
    \ + t * vy1\n          local y_ = y2 + t * vy2\n          if y == y_ then\n  \
    \          collisions = collisions + 1\n          end\n        end\n      end\n\
    \    end\n  end\n  return collisions\nend", "    local left_to_right = {}\n  \
    \  local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n   \
    \ for i = 1, n do\n        if left_to_right[i] > right_to_left[i] then\n     \
    \       collisions = collisions + 1\n        end\n    end\n    return collisions\n\
    end", "   local function car_race_collision_helper(n, left_to_right, right_to_left)\n\
    \      if n == 0 then\n         return 0\n      else\n         local left_to_right_next\
    \ = left_to_right + 1\n         local right_to_left_next = right_to_left + 1\n\
    \         local left_to_right_collision = left_to_right_next - right_to_left\n\
    \         local right_to_left_collision = right_to_left_next - left_to_right\n\
    \         local collision = left_to_right_collision + right_to_left_collision\n\
    \         return collision + car_race_collision_helper(n - 1, left_to_right_next,\
    \ right_to_left_next)\n      end\n   end\n   return car_race_collision_helper(n,\
    \ 0, 0)\nend", "  local left_to_right = {}\n  local right_to_left = {}\n  local\
    \ collisions = 0\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n - i + 1\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "  local left_to_right = {}\n  local\
    \ right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i]\
    \ = n + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  local left_to_right = {}\n    local right_to_left = {}\n    local collisions\
    \ = 0\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i + 1\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "  local collisions = 0\n  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if left_to_right[i]\
    \ == right_to_left[j] then\n        collisions = collisions + 1\n      end\n \
    \   end\n  end\n  return collisions\nend", "    local left_to_right = {}\n   \
    \ local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n   \
    \ for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] ==\
    \ right_to_left[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend", "  local cars =\
    \ {}\n  for i = 1, n do\n    cars[i] = {\n      x = math.random(),\n      v =\
    \ math.random()\n    }\n  end\n  for i = 1, n do\n    cars[n + i] = {\n      x\
    \ = math.random(),\n      v = -math.random()\n    }\n  end\n  local collisions\
    \ = 0\n  for i = 1, n do\n    for j = n + 1, 2 * n do\n      if cars[i].v > 0\
    \ and cars[j].v < 0 then\n        local dx = cars[i].x - cars[j].x\n        local\
    \ dv = cars[i].v - cars[j].v\n        if dx > 0 and dx / dv < 0 then\n       \
    \   collisions = collisions + 1\n        end\n      end\n    end\n  end\n  return\
    \ collisions\nend", "  local left_to_right_cars = {}\n  local right_to_left_cars\
    \ = {}\n  for i = 1, n do\n    left_to_right_cars[i] = i\n    right_to_left_cars[i]\
    \ = i\n  end\n  local collisions = 0\n  local i = 1\n  local j = 1\n  while i\
    \ <= n and j <= n do\n    if left_to_right_cars[i] < right_to_left_cars[j] then\n\
    \      i = i + 1\n    elseif left_to_right_cars[i] > right_to_left_cars[j] then\n\
    \      j = j + 1\n    else\n      collisions = collisions + 1\n      i = i + 1\n\
    \      j = j + 1\n    end\n  end\n  return collisions\nend", "    local cars =\
    \ {}\n    for i = 1, n do\n        cars[i] = {\n            x = 0,\n         \
    \   v = 1\n        }\n    end\n    for i = n + 1, 2 * n do\n        cars[i] =\
    \ {\n            x = 1,\n            v = -1\n        }\n    end\n    local collision_count\
    \ = 0\n    while true do\n        local min_x = math.huge\n        local min_x_car\
    \ = nil\n        for i = 1, 2 * n do\n            local car = cars[i]\n      \
    \      if car.x < min_x then\n                min_x = car.x\n                min_x_car\
    \ = car\n            end\n        end\n        if min_x_car == nil then\n    \
    \        break\n        end\n        for i = 1, 2 * n do\n            local car\
    \ = cars[i]\n            if car ~= min_x_car then\n                car.x = car.x\
    \ + car.v\n            end\n        end\n        min_x_car.x = min_x_car.x + min_x_car.v\n\
    \        if min_x_car.x == 0 then\n            collision_count = collision_count\
    \ + 1\n        end\n    end\n    return collision_count\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collision = 0\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collision = collision + 1\n      end\n    end\n  end\n  return\
    \ collision\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    local collisions = 0\n    for i = 1, n do\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ collisions = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] =\
    \ {\n            left_to_right = true,\n            position = i\n        }\n\
    \    end\n    for i = 1, n do\n        cars[i + n] = {\n            left_to_right\
    \ = false,\n            position = i\n        }\n    end\n    for i = 1, 2 * n\
    \ do\n        for j = i + 1, 2 * n do\n            if cars[i].position == cars[j].position\
    \ and cars[i].left_to_right ~= cars[j].left_to_right then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local collisions = 0\n    local cars = {}\n    for i\
    \ = 1, n do\n        cars[i] = {\n            x = math.random(0, 100),\n     \
    \       y = math.random(0, 100),\n            vx = math.random(1, 10),\n     \
    \       vy = math.random(1, 10),\n        }\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            local car1 = cars[i]\n            local car2\
    \ = cars[j]\n            local dx = car1.x - car2.x\n            local dy = car1.y\
    \ - car2.y\n            local dvx = car1.vx - car2.vx\n            local dvy =\
    \ car1.vy - car2.vy\n            if dvx * dx + dvy * dy < 0 then\n           \
    \     collisions = collisions + 1\n            end\n        end\n    end\n   \
    \ return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ + 1 - i\n  end\n  local collisions = 0\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ count = 0\n    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n \
    \           x = math.random(),\n            v = math.random()\n        }\n   \
    \ end\n    for i = 1, n do\n        cars[n + i] = {\n            x = math.random(),\n\
    \            v = -math.random()\n        }\n    end\n    table.sort(cars, function(a,\
    \ b) return a.x < b.x end)\n    for i = 1, n * 2 - 1 do\n        if cars[i].v\
    \ > 0 and cars[i + 1].v < 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local collisions = 0\n    for i = 1, n\
    \ do\n        for j = 1, n do\n            if i == j then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "\tlocal left_to_right = {}\n\tlocal right_to_left = {}\n\tfor i = 1, n\
    \ do\n\t\tleft_to_right[i] = i\n\t\tright_to_left[i] = n + 1 - i\n\tend\n\tlocal\
    \ collision = 0\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif left_to_right[i]\
    \ == right_to_left[j] then\n\t\t\t\tcollision = collision + 1\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn collision\nend", "    local collisions = 0\n    local cars_left\
    \ = {}\n    local cars_right = {}\n    for i = 1, n do\n        cars_left[i] =\
    \ i\n        cars_right[i] = n + 1 - i\n    end\n    for i = 1, n do\n       \
    \ for j = 1, n do\n            if cars_left[i] == cars_right[j] then\n       \
    \         collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  for i = 1, n do\n    left_to_right[i] = i\n    right_to_left[i] = n\
    \ - i + 1\n  end\n  local collision = 0\n  for i = 1, n do\n    for j = 1, n do\n\
    \      if left_to_right[i] == right_to_left[j] then\n        collision = collision\
    \ + 1\n      end\n    end\n  end\n  return collision\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local collisions\
    \ = 0\n  local cars = {}\n  for i = 1, n do\n    cars[i] = {\n      x = math.random(),\n\
    \      v = math.random() * 2 - 1,\n    }\n  end\n  for i = 1, n do\n    for j\
    \ = i + 1, n do\n      local c1 = cars[i]\n      local c2 = cars[j]\n      if\
    \ c1.v < 0 and c2.v > 0 then\n        local dx = c2.x - c1.x\n        local dv\
    \ = c2.v - c1.v\n        if dv > 0 then\n          local t = dx / dv\n       \
    \   if t > 0 then\n            collisions = collisions + 1\n          end\n  \
    \      end\n      end\n    end\n  end\n  return collisions\nend", "  if n == 0\
    \ then\n    return 0\n  else\n    return n + car_race_collision(n - 1)\n  end\n\
    end", "    local collisions = 0\n    local cars = {}\n    for i = 1, n do\n  \
    \      cars[i] = {\n            x = math.random() * 1000000,\n            y =\
    \ math.random() * 1000000,\n            vx = math.random() * 1000000,\n      \
    \      vy = math.random() * 1000000,\n        }\n    end\n    for i = 1, n do\n\
    \        for j = i + 1, n do\n            local c1 = cars[i]\n            local\
    \ c2 = cars[j]\n            local dx = c1.x - c2.x\n            local dy = c1.y\
    \ - c2.y\n            local dvx = c1.vx - c2.vx\n            local dvy = c1.vy\
    \ - c2.vy\n            local dvdr = dx * dvx + dy * dvy\n            if dvdr <\
    \ 0 then\n                local dvdv = dvx * dvx + dvy * dvy\n               \
    \ local drdr = dx * dx + dy * dy\n                local sigma = 0.01\n       \
    \         local d = (dvdr * dvdr) - dvdv * (drdr - sigma * sigma)\n          \
    \      if d < 0 then\n                    -- no collision\n                else\n\
    \                    local t = (-dvdr - math.sqrt(d)) / dvdv\n               \
    \     if t < 0 then\n                        -- no collision\n               \
    \     else\n                        collisions = collisions + 1\n            \
    \        end\n                end\n            end\n        end\n    end\n   \
    \ return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    local collisions = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local left_to_right = {}\n  local right_to_left\
    \ = {}\n  local collisions = 0\n  for i = 1, n do\n    left_to_right[i] = i\n\
    \    right_to_left[i] = n - i + 1\n  end\n  for i = 1, n do\n    for j = 1, n\
    \ do\n      if left_to_right[i] == right_to_left[j] then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "    local\
    \ collisions = 0\n    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n - i + 1\n    end\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if left_to_right[i] == right_to_left[j] then\n                collisions =\
    \ collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local collisions = 0\n    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n    \
    \    for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n - i + 1\n    end\n    local count = 0\n    for i = 1,\
    \ n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    local collisions = 0\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  local collision = 0\n  for i = 1, n do\n\
    \    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collision = collision + 1\n      end\n    end\n  end\n  return\
    \ collision\nend", "    local n = n or 10\n    local cars = {}\n    for i = 1,\
    \ n do\n        cars[i] = {\n            x = math.random(),\n            v = math.random()\n\
    \        }\n    end\n    for i = 1, n do\n        cars[i + n] = {\n          \
    \  x = math.random(),\n            v = -math.random()\n        }\n    end\n  \
    \  local count = 0\n    for i = 1, n do\n        for j = 1, n do\n           \
    \ if cars[i].v > 0 and cars[j + n].v < 0 then\n                if cars[i].x <\
    \ cars[j + n].x then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "  local collisions\
    \ = 0\n  local cars = {}\n  for i = 1, n do\n    cars[i] = {\n      x = 0,\n \
    \     v = 1,\n    }\n  end\n  for i = 1, n do\n    cars[n + i] = {\n      x =\
    \ 0,\n      v = -1,\n    }\n  end\n  for i = 1, n do\n    for j = n + 1, 2 * n\
    \ do\n      if cars[i].x == cars[j].x then\n        collisions = collisions +\
    \ 1\n      end\n    end\n  end\n  return collisions\nend", "  local cars = {}\n\
    \  for i = 1, n do\n    cars[i] = {\n      x = math.random(),\n      dir = 1,\n\
    \    }\n  end\n  for i = n + 1, 2 * n do\n    cars[i] = {\n      x = math.random(),\n\
    \      dir = -1,\n    }\n  end\n  local collisions = 0\n  for i = 1, n do\n  \
    \  for j = n + 1, 2 * n do\n      if cars[i].x < cars[j].x then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  \
    \  -- TODO: implement this function\n    return 0\nend", "  local left_to_right\
    \ = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i] =\
    \ i\n    right_to_left[i] = n + 1 - i\n  end\n  local collision = 0\n  for i =\
    \ 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collision = collision + 1\n      end\n    end\n  end\n  return\
    \ collision\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "  local n = n or 0\n  local collisions = 0\n  for\
    \ i = 1, n do\n    for j = 1, n do\n      if i == j then\n        collisions =\
    \ collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n - i + 1\n  end\n  local collision = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collision = collision + 1\n      end\n    end\n  end\n  return\
    \ collision\nend", "    local n_collisions = 0\n    local left_to_right = {}\n\
    \    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n    \
    \    for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                n_collisions = n_collisions + 1\n            end\n        end\n\
    \    end\n    return n_collisions\nend", "    local left_to_right = {}\n    local\
    \ right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] = i\n    \
    \    right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] == right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local count = 0\n  \
    \  for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i] ==\
    \ right_to_left[j] then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "  local left_to_right = {}\n \
    \ local right_to_left = {}\n  local collisions = 0\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n - i + 1\n  end\n  for i = 1, n do\n    for j =\
    \ 1, n do\n      if left_to_right[i] == right_to_left[j] then\n        collisions\
    \ = collisions + 1\n      end\n    end\n  end\n  return collisions\nend", "  local\
    \ left_to_right = {}\n  local right_to_left = {}\n  for i = 1, n do\n    left_to_right[i]\
    \ = i\n    right_to_left[i] = n + 1 - i\n  end\n  local collisions = 0\n  for\
    \ i = 1, n do\n    for j = 1, n do\n      if left_to_right[i] == right_to_left[j]\
    \ then\n        collisions = collisions + 1\n      end\n    end\n  end\n  return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n - i + 1\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local collisions = 0\n    local cars = {}\n\
    \    for i = 1, n do\n        cars[i] = {\n            x = 0,\n            y =\
    \ i,\n            dx = 1,\n            dy = 0,\n        }\n    end\n    for i\
    \ = 1, n do\n        cars[n + i] = {\n            x = 0,\n            y = -i,\n\
    \            dx = -1,\n            dy = 0,\n        }\n    end\n    while true\
    \ do\n        local min_x = math.huge\n        local min_y = math.huge\n     \
    \   local max_x = -math.huge\n        local max_y = -math.huge\n        for i\
    \ = 1, 2 * n do\n            local car = cars[i]\n            min_x = math.min(min_x,\
    \ car.x)\n            min_y = math.min(min_y, car.y)\n            max_x = math.max(max_x,\
    \ car.x)\n            max_y = math.max(max_y, car.y)\n        end\n        if\
    \ max_x - min_x > max_y - min_y then\n            for i = 1, 2 * n do\n      \
    \          local car = cars[i]\n                car.x = car.x + car.dx\n     \
    \       end\n        else\n            for i = 1, 2 * n do\n                local\
    \ car = cars[i]\n                car.y = car.y + car.dy\n            end\n   \
    \     end\n        for i = 1, 2 * n do\n            local car = cars[i]\n    \
    \        for j = i + 1, 2 * n do\n                local other = cars[j]\n    \
    \            if car.x == other.x and car.y == other.y then\n                 \
    \   collisions = collisions + 1\n                end\n            end\n      \
    \  end\n    end\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local i, j, c = 1, n, 0\n    while\
    \ i <= n and j >= 1 do\n        if i == j then\n            c = c + 1\n      \
    \  else\n            c = c + 2\n        end\n        i = i + 1\n        j = j\
    \ - 1\n    end\n    return c\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n       \
    \ for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collision = collision + 1\n            end\n        end\n   \
    \ end\n    return collision\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n      \
    \  for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local collisions = 0\n    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local count = 0\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if i == j then\n                count =\
    \ count + 1\n            end\n        end\n    end\n    return count\nend", " \
    \ local left_to_right = {}\n  local right_to_left = {}\n  local i\n  for i = 1,\
    \ n do\n    left_to_right[i] = i\n    right_to_left[i] = n + 1 - i\n  end\n  local\
    \ collisions = 0\n  for i = 1, n do\n    if left_to_right[i] > right_to_left[i]\
    \ then\n      collisions = collisions + 1\n    end\n  end\n  return collisions\n\
    end", "    -- This is a very simple problem.  The key is to realize that\n   \
    \ -- the cars are moving in a straight line, and that the cars\n    -- are moving\
    \ at the same speed.  As a result, the only way\n    -- for two cars to collide\
    \ is for them to be in the same position\n    -- at the same time.  The only way\
    \ for that to happen is for\n    -- the cars to start out at the same position.\
    \  As a result,\n    -- the number of collisions is the number of cars that start\n\
    \    -- out at the same position.  That's just n.\n    return n\nend", "    --\
    \ TODO: implement this function\n    return 0\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local collisions\
    \ = 0\n    local cars_left_to_right = {}\n    local cars_right_to_left = {}\n\
    \    for i = 1, n do\n        cars_left_to_right[i] = i\n        cars_right_to_left[i]\
    \ = n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n       \
    \     if cars_left_to_right[i] == cars_right_to_left[j] then\n               \
    \ collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    local left_to_right = {}\n    local right_to_left = {}\n\
    \    for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collision = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collision = collision + 1\n            end\n        end\n    end\n\
    \    return collision\nend", "  local function car_race_collision_helper(n, left_to_right,\
    \ right_to_left)\n    if n == 0 then\n      return 0\n    else\n      return car_race_collision_helper(n\
    \ - 1, left_to_right + 1, right_to_left - 1) +\n        (left_to_right == right_to_left\
    \ and 1 or 0)\n    end\n  end\n  return car_race_collision_helper(n, 0, n - 1)\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n - i + 1\n\
    \    end\n    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local cars = {}\n    for i = 1, n do\n        cars[i] = {\n       \
    \     x = math.random() * 1000000,\n            speed = math.random() * 100\n\
    \        }\n    end\n    for i = 1, n do\n        cars[n + i] = {\n          \
    \  x = math.random() * 1000000,\n            speed = -math.random() * 100\n  \
    \      }\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = n + 1, 2 * n do\n            if cars[i].x < cars[j].x then\n           \
    \     local t = (cars[j].x - cars[i].x) / (cars[i].speed - cars[j].speed)\n  \
    \              if t >= 0 then\n                    collisions = collisions + 1\n\
    \                end\n            end\n        end\n    end\n    return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collision = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            if left_to_right[i] == right_to_left[j] then\n                collision\
    \ = collision + 1\n            end\n        end\n    end\n    return collision\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n\
    \    end\n    local collisions = 0\n    for i = 1, n do\n        for j = 1, n\
    \ do\n            if left_to_right[i] == right_to_left[j] then\n             \
    \   collisions = collisions + 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "  local cars_left = {}\n  local cars_right = {}\n  for i\
    \ = 1, n do\n    cars_left[i] = i\n    cars_right[i] = i\n  end\n  local collisions\
    \ = 0\n  while #cars_left > 0 and #cars_right > 0 do\n    local left_car = cars_left[1]\n\
    \    local right_car = cars_right[1]\n    if left_car < right_car then\n     \
    \ table.remove(cars_left, 1)\n    elseif left_car > right_car then\n      table.remove(cars_right,\
    \ 1)\n    else\n      table.remove(cars_left, 1)\n      table.remove(cars_right,\
    \ 1)\n      collisions = collisions + 1\n    end\n  end\n  return collisions\n\
    end", "    local left_to_right = {}\n    local right_to_left = {}\n    for i =\
    \ 1, n do\n        left_to_right[i] = i\n        right_to_left[i] = i\n    end\n\
    \    local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n    \
    \        if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local collisions = 0\n    local cars_left_to_right = {}\n    local\
    \ cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local collisions = 0\n  local\
    \ cars_left = {}\n  local cars_right = {}\n  for i = 1, n do\n    cars_left[i]\
    \ = i\n    cars_right[i] = n + 1 - i\n  end\n  for i = 1, n do\n    for j = 1,\
    \ n do\n      if cars_left[i] == cars_right[j] then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "  local function\
    \ car_race_collision_helper(n, left_to_right, right_to_left)\n    if n == 0 then\n\
    \      return 0\n    else\n      local left_to_right_next = left_to_right + 1\n\
    \      local right_to_left_next = right_to_left + 1\n      local left_to_right_collision\
    \ = left_to_right_next - right_to_left\n      local right_to_left_collision =\
    \ right_to_left_next - left_to_right\n      local left_to_right_collision_count\
    \ = 0\n      local right_to_left_collision_count = 0\n      if left_to_right_collision\
    \ <= 0 then\n        left_to_right_collision_count = 1\n      end\n      if right_to_left_collision\
    \ <= 0 then\n        right_to_left_collision_count = 1\n      end\n      return\
    \ left_to_right_collision_count + right_to_left_collision_count +\n        car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n    end\n  end\n  return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local left_to_right = {}\n    local right_to_left = {}\n \
    \   for i = 1, n do\n        left_to_right[i] = i\n        right_to_left[i] =\
    \ n + 1 - i\n    end\n    local collisions = 0\n    for i = 1, n do\n        for\
    \ j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n    \
    \            collisions = collisions + 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    local left_to_right = {}\n    local right_to_left\
    \ = {}\n    local collisions = 0\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "    local collisions = 0\n    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n  \
    \      for j = 1, n do\n            if left_to_right[i] == right_to_left[j] then\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend", "  local count = 0\n  for i = 1, n do\n\
    \    for j = 1, n do\n      if i == j then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend", "    local collisions = 0\n    local cars_left_to_right\
    \ = {}\n    local cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "  local collisions = 0\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if i == j then\n        collisions = collisions\
    \ + 1\n      end\n    end\n  end\n  return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i + 1\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collisions = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collisions = collisions + 1\n    \
    \        end\n        end\n    end\n    return collisions\nend", "  local n_collisions\
    \ = 0\n  local cars_left_to_right = {}\n  local cars_right_to_left = {}\n  for\
    \ i = 1, n do\n    cars_left_to_right[i] = i\n    cars_right_to_left[i] = n +\
    \ 1 - i\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if cars_left_to_right[i]\
    \ == cars_right_to_left[j] then\n        n_collisions = n_collisions + 1\n   \
    \   end\n    end\n  end\n  return n_collisions\nend", "\tlocal collisions = 0\n\
    \tlocal cars_left = {}\n\tlocal cars_right = {}\n\tfor i = 1, n do\n\t\tcars_left[i]\
    \ = i\n\t\tcars_right[i] = i\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\
    \t\tif cars_left[i] == cars_right[j] then\n\t\t\t\tcollisions = collisions + 1\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn collisions\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "  local function\
    \ car_race_collision_helper(n, left_to_right, right_to_left)\n    if n == 0 then\n\
    \      return 0\n    else\n      local left_to_right_next = left_to_right + 1\n\
    \      local right_to_left_next = right_to_left + 1\n      local left_to_right_collision\
    \ = left_to_right_next - right_to_left\n      local right_to_left_collision =\
    \ right_to_left_next - left_to_right\n      local collision = left_to_right_collision\
    \ + right_to_left_collision\n      return collision + car_race_collision_helper(n\
    \ - 1, left_to_right_next, right_to_left_next)\n    end\n  end\n  return car_race_collision_helper(n,\
    \ 0, 0)\nend", "    local collisions = 0\n    local cars_left_to_right = {}\n\
    \    local cars_right_to_left = {}\n    for i = 1, n do\n        cars_left_to_right[i]\
    \ = i\n        cars_right_to_left[i] = n + 1 - i\n    end\n    for i = 1, n do\n\
    \        for j = 1, n do\n            if cars_left_to_right[i] == cars_right_to_left[j]\
    \ then\n                collisions = collisions + 1\n            end\n       \
    \ end\n    end\n    return collisions\nend", "    local left_to_right = {}\n \
    \   local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n - i + 1\n    end\n    local collision = 0\n\
    \    for i = 1, n do\n        for j = 1, n do\n            if left_to_right[i]\
    \ == right_to_left[j] then\n                collision = collision + 1\n      \
    \      end\n        end\n    end\n    return collision\nend", "    local left_to_right\
    \ = {}\n    local right_to_left = {}\n    for i = 1, n do\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n + 1 - i\n    end\n    local count = 0\n  \
    \  for i = 1, n do\n        if left_to_right[i] > right_to_left[i] then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  \
    \  local left_to_right = {}\n    local right_to_left = {}\n    for i = 1, n do\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n + 1 - i\n    end\n\
    \    local collisions = 0\n    for i = 1, n do\n        for j = 1, n do\n    \
    \        if left_to_right[i] == right_to_left[j] then\n                collisions\
    \ = collisions + 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    local collisions = 0\n    local cars_left = {}\n    local cars_right\
    \ = {}\n    for i = 1, n do\n        cars_left[i] = i\n        cars_right[i] =\
    \ n + 1 - i\n    end\n    for i = 1, n do\n        for j = 1, n do\n         \
    \   if cars_left[i] == cars_right[j] then\n                collisions = collisions\
    \ + 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   local collisions = 0\n    local cars_left = {}\n    local cars_right = {}\n\
    \    for i = 1, n do\n        cars_left[i] = i\n        cars_right[i] = i\n  \
    \  end\n    for i = 1, n do\n        for j = 1, n do\n            if cars_left[i]\
    \ == cars_right[j] then\n                collisions = collisions + 1\n       \
    \     end\n        end\n    end\n    return collisions\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
