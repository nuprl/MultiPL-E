name: HumanEval_77_iscube
language: lua
results:
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp56d341o3.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp56d341o3.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpps32xoww.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpps32xoww.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or (a > 0 and math.floor(math.pow(a,\
    \ 1/3))^3 == a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpks1u9pzo.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpks1u9pzo.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- body\n    return a == 0 or a ==\
    \ 1 or a == -1 or (a > 0 and math.floor(math.pow(a, 1/3))^3 == a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6pdd554q.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6pdd554q.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a < 0 then\n\
    \    a = -a\n  end\n  if a == 0 then\n    return true\n  end\n  local i = 1\n\
    \  while i*i*i <= a do\n    if i*i*i == a then\n      return true\n    end\n \
    \   i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- Write your code here\n    return\
    \ math.pow(math.floor(math.pow(a, 1/3)), 3) == a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvsk0l4o.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbvsk0l4o.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph53jf_zj.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph53jf_zj.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    if a < 0 then\n\
    \        a = -a\n    end\n    if a == 0 then\n        return true\n    end\n \
    \   local n = math.floor(math.pow(a, 1/3))\n    return n * n * n == a\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiedab9ka.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpiedab9ka.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoca1jtbn.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpoca1jtbn.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwuz4418u.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwuz4418u.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqasu75zp.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqasu75zp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  local b = math.sqrt(a)\n\
    \  if b % 1 == 0 then\n    return true\n  else\n    return false\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp33cc8t4w.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp33cc8t4w.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi6hgdoff.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpi6hgdoff.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphlntd9e5.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmphlntd9e5.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsmj5mefh.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpsmj5mefh.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_3n4u5b5.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_3n4u5b5.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxviedw3j.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxviedw3j.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27 or a == 64\
    \ or a == -64 or a == 125 or a == -125 or a == 216 or a == -216 or a == 343 or\
    \ a == -343 or a == 512 or a == -512 or a == 729 or a == -729 or a == 1000 or\
    \ a == -1000 or a == 1331 or a == -1331 or a == 1728 or a == -1728 or a == 2197\
    \ or a == -2197 or a == 2744 or a == -2744 or a == 3375 or a == -3375 or a ==\
    \ 4096 or a == -4096 or a == 4913 or a == -4913 or a == 5832 or a == -5832 or\
    \ a == 6859 or a == -6859 or a == 8000 or a == -8000 or a == 9261 or a == -9261\
    \ or a == 10648 or a == -10648 or a == 12167 or a == -12167 or a == 13824 or a\
    \ == -13824 or a == 15625 or a == -15625 or a == 17576 or a == -17576 or a ==\
    \ 19683 or a == -19683 or a == 21952 or a == -21952 or a == 24389 or a == -24389\
    \ or a == 27000 or a == -27000 or a == 29791 or a == -29791 or a == 32768 or a\
    \ == -32768 or a == 35937 or a == -35937 or a == 39304 or a == -39304 or a ==\
    \ 42875 or a == -42875 or a == 46656 or a == -46656 or a == 50653 or a == -50653\
    \ or a == 54872 or a == -54872 or a == 59319 or a == -59319 or a == 64000 or a\
    \ == -64000 or a == 68921 or a == -68921 or a == 74088 or a == -74088 or a ==\
    \ 79507 or a == -79507 or a == 85184 or a == -85184 or a == 91125 or a == -91125\
    \ or a == 97336 or a == -97336 or a == 103823 or a ==\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpye8tnl94.lua:14: 'end' expected (to close 'function' at\
    \ line 11) near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a == 0 or a == 1 or a == -1 or\
    \ math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpev_1rgbc.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpev_1rgbc.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpby7llaa6.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpby7llaa6.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  local x = math.floor(math.pow(a,\
    \ 1/3))\n  return x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwqwnnyv9.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwqwnnyv9.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0earo6iv.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp0earo6iv.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ro2cawe.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9ro2cawe.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return math.pow(math.ceil(math.pow(a,1/3)),3)\
    \ == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp45r8x96f.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp45r8x96f.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return (math.cbrt(a)%1)==0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyhm2eqfe.lua:13:\
    \ attempt to call field 'cbrt' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyhm2eqfe.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n\
    \    end\n    if a < 0 then\n        a = -a\n    end\n    local x = math.floor(math.pow(a,\
    \ 1/3))\n    return x * x * x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp42uhciue.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp42uhciue.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1i8cvc7y.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1i8cvc7y.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcrxc9185.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcrxc9185.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return (a==0) or\
    \ (a==1) or (a==-1) or (math.sqrt(a)%1==0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpolewrbd1.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpolewrbd1.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm_w2y154.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpm_w2y154.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return (a >\
    \ 0 and math.floor(math.pow(a, 1/3))^3 == a) or (a == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeozany9p.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpeozany9p.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw1tl7stk.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpw1tl7stk.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27 or a == 64\
    \ or a == -64 or a == 125 or a == -125 or a == 216 or a == -216 or a == 343 or\
    \ a == -343 or a == 512 or a == -512 or a == 729 or a == -729 or a == 1000 or\
    \ a == -1000 or a == 1331 or a == -1331 or a == 1728 or a == -1728 or a == 2197\
    \ or a == -2197 or a == 2744 or a == -2744 or a == 3375 or a == -3375 or a ==\
    \ 4096 or a == -4096 or a == 4913 or a == -4913 or a == 5832 or a == -5832 or\
    \ a == 6859 or a == -6859 or a == 8000 or a == -8000 or a == 9261 or a == -9261\
    \ or a == 10648 or a == -10648 or a == 12167 or a == -12167 or a == 13824 or a\
    \ == -13824 or a == 15625 or a == -15625 or a == 17576 or a == -17576 or a ==\
    \ 19683 or a == -19683 or a == 21952 or a == -21952 or a == 24389 or a == -24389\
    \ or a == 27000 or a == -27000 or a == 29791 or a == -29791 or a == 32768 or a\
    \ == -32768 or a == 35937 or a == -35937 or a == 39304 or a == -39304 or a ==\
    \ 42875 or a == -42875 or a == 46656 or a == -46656 or a == 50653 or a == -50653\
    \ or a == 54872 or a == -54872 or a == 59319 or a == -59319 or a == 64000 or a\
    \ == -64000 or a == 68921 or a == -68921 or a == 74088 or a == -74088 or a ==\
    \ 79507 or a == -79507 or a == 85184 or a == -85184 or a == 91125 or a == -91125\
    \ or a == 97336 or a == -97336 or a == 103823 or a ==\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppq4u5_l7.lua:14: 'end' expected (to close 'function' at\
    \ line 11) near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9j1jnaa5.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9j1jnaa5.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then\n    return true\n  end\n\
    \  if a < 0 then\n    a = -a\n  end\n  local x = math.floor(math.pow(a, 1/3))\n\
    \  return math.pow(x, 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp02uhc04k.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp02uhc04k.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnskexu0m.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnskexu0m.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or a == 8 or a == -8 or a == 27 or a == -27 or a == 64\
    \ or a == -64 or a == 125 or a == -125 or a == 216 or a == -216 or a == 343 or\
    \ a == -343 or a == 512 or a == -512 or a == 729 or a == -729 or a == 1000 or\
    \ a == -1000 or a == 1331 or a == -1331 or a == 1728 or a == -1728 or a == 2197\
    \ or a == -2197 or a == 2744 or a == -2744 or a == 3375 or a == -3375 or a ==\
    \ 4096 or a == -4096 or a == 4913 or a == -4913 or a == 5832 or a == -5832 or\
    \ a == 6859 or a == -6859 or a == 8000 or a == -8000 or a == 9261 or a == -9261\
    \ or a == 10648 or a == -10648 or a == 12167 or a == -12167 or a == 13824 or a\
    \ == -13824 or a == 15625 or a == -15625 or a == 17576 or a == -17576 or a ==\
    \ 19683 or a == -19683 or a == 21952 or a == -21952 or a == 24389 or a == -24389\
    \ or a == 27000 or a == -27000 or a == 29791 or a == -29791 or a == 32768 or a\
    \ == -32768 or a == 35937 or a == -35937 or a == 39304 or a == -39304 or a ==\
    \ 42875 or a == -42875 or a == 46656 or a == -46656 or a == 50653 or a == -50653\
    \ or a == 54872 or a == -54872 or a == 59319 or a == -59319 or a == 64000 or a\
    \ == -64000 or a == 68921 or a == -68921 or a == 74088 or a == -74088 or a ==\
    \ 79507 or a == -79507 or a == 85184 or a == -85184 or a == 91125 or a == -91125\
    \ or a == 97336 or a == -97336 or a == 103823 or a ==\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp35x4rvcu.lua:14: 'end' expected (to close 'function' at\
    \ line 11) near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgfky_fbt.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpgfky_fbt.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return math.cbrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpegrr92a1.lua:13:\
    \ attempt to call field 'cbrt' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpegrr92a1.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return math.abs(a)\
    \ == math.abs(a)^(1/3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3nnc6kga.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3nnc6kga.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxpxp9y_h.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxpxp9y_h.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_b672l5z.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_b672l5z.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  for i = 1, a do\n\
    \    if i * i * i == a then\n      return true\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or (a > 0 and math.floor(math.pow(a,\
    \ 1/3)) ^ 3 == a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp53b4csfg.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp53b4csfg.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt2euezf0.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpt2euezf0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp14tqm1s7.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp14tqm1s7.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return (a ==\
    \ 0) or (a == 1) or (a == -1) or (math.sqrt(a) % 1 == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpogi1ekqo.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpogi1ekqo.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw2wewg0s.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpw2wewg0s.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or (a > 0 and math.floor(math.pow(a, 1/3))^3 == a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpizy8anv3.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpizy8anv3.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4a6yuqwp.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4a6yuqwp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy8k7enus.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpy8k7enus.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtlb_4e0.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpdtlb_4e0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpncp4473u.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpncp4473u.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd2uag5qs.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpd2uag5qs.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- Write your code here\n    return\
    \ a == 0 or math.abs(a) == math.abs(math.floor(math.pow(a, 1/3))) ^ 3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5cmq1r49.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5cmq1r49.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ (a > 0 and math.floor(math.pow(a, 1/3)) ^ 3 == a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbb1vru69.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbb1vru69.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp29wcn8m_.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp29wcn8m_.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.floor(math.pow(a, 1/3))^3\
    \ == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw9_0ny9q.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpw9_0ny9q.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ldaho8x.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7ldaho8x.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprwe_nl91.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmprwe_nl91.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- Write your code here\n    return\
    \ a == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3n_hgymv.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3n_hgymv.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn1yj66az.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpn1yj66az.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    if a == 0 then\n\
    \        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n  \
    \  local x = math.floor(math.pow(a, 1/3))\n    return x * x * x == a\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph5u3chq_.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph5u3chq_.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ay29mrk.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8ay29mrk.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf0gbyiuh.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpf0gbyiuh.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz8yrtd1c.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpz8yrtd1c.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmcx0b40e.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpmcx0b40e.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or a == 8 or a == 27 or a == -8 or a == -27\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphqa712__.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmphqa712__.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwx20uv61.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwx20uv61.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv_xzufo7.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpv_xzufo7.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local i = 1\n \
    \ while i * i * i <= a do\n    if i * i * i == a then\n      return true\n   \
    \ end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx19qu7cv.lua:18:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpx19qu7cv.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6392o71s.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6392o71s.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_e74tc7p.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_e74tc7p.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphtz73pvg.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmphtz73pvg.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- Write your code here\n    return\
    \ a == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpicpaly92.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpicpaly92.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return (a == 0)\
    \ or (a == 1) or (a == -1) or (math.sqrt(a) % 1 == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdttuw5hk.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpdttuw5hk.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local i = 1\n \
    \ while i * i * i <= a do\n    if i * i * i == a then\n      return true\n   \
    \ end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or (a > 0 and math.floor(math.pow(a,\
    \ 1/3)) ^ 3 == a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv9qed6dh.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpv9qed6dh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz4_yhk47.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpz4_yhk47.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or (a > 0 and math.floor(math.pow(a,\
    \ 1/3))^3 == a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp92oudkfa.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp92oudkfa.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a == 0 or a == 1 or (a > 0 and\
    \ math.floor(math.pow(a, 1/3))^3 == a)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7tch573f.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7tch573f.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_l5yffm8.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_l5yffm8.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7z3effim.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7z3effim.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdg2de8ik.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpdg2de8ik.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyjku293k.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpyjku293k.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    if a == 0 then\n\
    \        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n  \
    \  local i = 1\n    while i * i * i <= a do\n        if i * i * i == a then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  local x = math.floor(math.pow(a,\
    \ 1/3))\n  return a == x * x * x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp70re7sqf.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp70re7sqf.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp426lkibw.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp426lkibw.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkfu1ok_4.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkfu1ok_4.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplpdefrju.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmplpdefrju.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  local root = math.sqrt(a)\n\
    \  if root == math.floor(root) then\n    return true\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpimkm70mq.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpimkm70mq.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a < 0 then\n\
    \    a = -a\n  end\n  if a == 0 then\n    return true\n  end\n  local i = 1\n\
    \  while i * i * i <= a do\n    if i * i * i == a then\n      return true\n  \
    \  end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb04z1b23.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpb04z1b23.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp26_i7mju.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp26_i7mju.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbsu3cj5q.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbsu3cj5q.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl4mcxgrn.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpl4mcxgrn.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7vxanke7.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7vxanke7.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  if a < 0 then a = -a end\n    local x = math.floor(math.pow(a, 1/3))\n    return\
    \ math.pow(x, 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp219rrp6.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpp219rrp6.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk_af7w4g.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpk_af7w4g.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  local b = math.sqrt(a)\n\
    \  return b == math.floor(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcz321hwc.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcz321hwc.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbu77cucu.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbu77cucu.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvt5dt0dx.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvt5dt0dx.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a == 0 or a == 1 or a == -1 or\
    \ math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpla2fnsv9.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpla2fnsv9.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx1ak_hqy.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpx1ak_hqy.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpep1a8dlm.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpep1a8dlm.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    if a == 0 then\n\
    \        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n  \
    \  local i = 1\n    while i * i * i <= a do\n        if i * i * i == a then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a < 0 then\n\
    \    a = -a\n  end\n  if a == 0 then\n    return true\n  end\n  local i = 1\n\
    \  while i * i * i <= a do\n    if i * i * i == a then\n      return true\n  \
    \  end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_y5hx01h.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_y5hx01h.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8qeyz8bt.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8qeyz8bt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw5xcxc2_.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpw5xcxc2_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjdsfr5hp.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpjdsfr5hp.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.pow(math.floor(math.pow(a,\
    \ 1/3)), 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpudqp1p39.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpudqp1p39.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmposq1_2ih.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmposq1_2ih.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnzkoc_7r.lua:18:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpnzkoc_7r.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27 or a == 64 or\
    \ a == -64\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_b2_09l.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpi_b2_09l.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5fy3pxh7.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5fy3pxh7.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return a == 0 or a == 1 or a == -1 or\
    \ math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxmaaxpt4.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxmaaxpt4.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return math.pow(math.ceil(math.pow(a,\
    \ 1/3)), 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3c3674gr.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3c3674gr.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb7l6x53p.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpb7l6x53p.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfbzdk40c.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpfbzdk40c.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  if a == 0 then return true end\n  if\
    \ a < 0 then a = -a end\n  local n = math.floor(math.pow(a, 1/3))\n  return n*n*n\
    \ == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkdjgj2nd.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkdjgj2nd.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  local x = math.sqrt(a)\n\
    \  if x == math.floor(x) then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_mranj_v.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_mranj_v.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuma5_l1k.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpuma5_l1k.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj5713exa.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpj5713exa.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ (a > 0 and math.floor(math.pow(a, 1/3))^3 == a)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpway3xaxm.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpway3xaxm.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj_pfrgn5.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpj_pfrgn5.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6rpeyctc.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6rpeyctc.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzklddn18.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzklddn18.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or (a > 0 and math.sqrt(a) % 1 == 0)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpicj6lruc.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpicj6lruc.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp249suori.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp249suori.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or math.abs(a) == math.abs(math.ceil(math.pow(a,\
    \ 1/3)))^3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbzzjn_zc.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbzzjn_zc.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqit3nppy.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqit3nppy.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvalkrr7w.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvalkrr7w.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaf4evrc1.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpaf4evrc1.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local i = 1\n \
    \ while i * i * i <= a do\n    if i * i * i == a then\n      return true\n   \
    \ end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyujxwye9.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpyujxwye9.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    local x = math.cbrt(a)\n\
    \    if x == math.floor(x) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq6aat9uj.lua:13:\
    \ attempt to call field 'cbrt' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq6aat9uj.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ke5ueqy.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3ke5ueqy.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n\treturn math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1xwzab6z.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1xwzab6z.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a==0 or (a>0\
    \ and math.floor(math.pow(a,1/3))^3==a)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplj8jxnqo.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmplj8jxnqo.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or (a > 0 and math.floor(math.pow(a, 1/3)) ^ 3 == a)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9csz8rs2.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9csz8rs2.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9hqi1z8c.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9hqi1z8c.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    if a < 0 then\n\
    \        a = -a\n    end\n    if a == 0 then\n        return true\n    end\n \
    \   local i = 1\n    while i * i * i <= a do\n        if i * i * i == a then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1oty12e0.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1oty12e0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or (a > 0 and math.sqrt(a) % 1 == 0)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpprjydjbs.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpprjydjbs.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp44zhuv24.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp44zhuv24.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnbm9wcfh.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnbm9wcfh.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptmqnb7n1.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmptmqnb7n1.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return (math.cbrt(a)%1)==0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgv4qxixq.lua:13:\
    \ attempt to call field 'cbrt' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgv4qxixq.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpajk6fsq7.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpajk6fsq7.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2ibvsb80.lua:18:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp2ibvsb80.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpghc_0fk1.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpghc_0fk1.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7jti2gzc.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7jti2gzc.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx06prxzf.lua:19:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpx06prxzf.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- Write your code here\n    if a <\
    \ 0 then\n        a = -a\n    end\n    if a == 0 then\n        return true\n \
    \   end\n    local i = 1\n    while i * i * i <= a do\n        if i * i * i ==\
    \ a then\n            return true\n        end\n        i = i + 1\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpglvwqz73.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpglvwqz73.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27 or a == 64\
    \ or a == -64 or a == 125 or a == -125 or a == 216 or a == -216 or a == 343 or\
    \ a == -343 or a == 512 or a == -512 or a == 729 or a == -729 or a == 1000 or\
    \ a == -1000 or a == 1331 or a == -1331 or a == 1728 or a == -1728 or a == 2197\
    \ or a == -2197 or a == 2744 or a == -2744 or a == 3375 or a == -3375 or a ==\
    \ 4096 or a == -4096 or a == 4913 or a == -4913 or a == 5832 or a == -5832 or\
    \ a == 6859 or a == -6859 or a == 8000 or a == -8000 or a == 9261 or a == -9261\
    \ or a == 10648 or a == -10648 or a == 12167 or a == -12167 or a == 13824 or a\
    \ == -13824 or a == 15625 or a == -15625 or a == 17576 or a == -17576 or a ==\
    \ 19683 or a == -19683 or a == 21952 or a == -21952 or a == 24389 or a == -24389\
    \ or a == 27000 or a == -27000 or a == 29791 or a == -29791 or a == 32768 or a\
    \ == -32768 or a == 35937 or a == -35937 or a == 39304 or a == -39304 or a ==\
    \ 42875 or a == -42875 or a == 46656 or a == -46656 or a == 50653 or a == -50653\
    \ or a == 54872 or a == -54872 or a == 59319 or a == -59319 or a == 64000 or a\
    \ == -64000 or a == 68921 or a == -68921 or a == 74088 or a == -74088 or a ==\
    \ 79507 or a == -79507 or a == 85184 or a == -85184 or a == 91125 or a == -91125\
    \ or a == 97336 or a == -97336 or a == 103823 or a ==\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmprebnu6ny.lua:14: 'end' expected (to close 'function' at\
    \ line 11) near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp90ei9fl9.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp90ei9fl9.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or (a > 0 and math.floor(math.pow(a,\
    \ 1/3))^3 == a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqv0c8103.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqv0c8103.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local i = 1\n \
    \ while i * i * i <= a do\n    if i * i * i == a then\n      return true\n   \
    \ end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  for i = 1, a do\n\
    \    if i * i * i == a then\n      return true\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  if a < 0 then a = -a end\n    local x = math.floor(math.pow(a, 1/3))\n    return\
    \ x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4leifnhd.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4leifnhd.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    if a == 0 then\n\
    \        return true\n    end\n    if a < 0 then\n        a = -a\n    end\n  \
    \  for i = 1, a do\n        if i * i * i == a then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or a == 8 or a == 27 or a == -8 or a == -27 or a == 64 or a == -64 or a == 125\
    \ or a == -125 or a == 216 or a == -216 or a == 343 or a == -343 or a == 512 or\
    \ a == -512 or a == 729 or a == -729 or a == 1000 or a == -1000 or a == 1331 or\
    \ a == -1331 or a == 1728 or a == -1728 or a == 2197 or a == -2197 or a == 2744\
    \ or a == -2744 or a == 3375 or a == -3375 or a == 4096 or a == -4096 or a ==\
    \ 4913 or a == -4913 or a == 5832 or a == -5832 or a == 6859 or a == -6859 or\
    \ a == 8000 or a == -8000 or a == 9261 or a == -9261 or a == 10648 or a == -10648\
    \ or a == 12167 or a == -12167 or a == 13824 or a == -13824 or a == 15625 or a\
    \ == -15625 or a == 17576 or a == -17576 or a == 19683 or a == -19683 or a ==\
    \ 21952 or a == -21952 or a == 24389 or a == -24389 or a == 27000 or a == -27000\
    \ or a == 29791 or a == -29791 or a == 32768 or a == -32768 or a == 35937 or a\
    \ == -35937 or a == 39304 or a == -39304 or a == 42875 or a == -42875 or a ==\
    \ 46656 or a == -46656 or a == 50653 or a == -50653 or a == 54872 or a == -54872\
    \ or a == 59319 or a == -59319 or a == 64000 or a == -64000 or a == 68921 or a\
    \ == -68921 or a == 74088 or a == -74088 or a == 79507 or a == -79507 or a ==\
    \ 85184 or a == -85184 or a == 91125 or a == -91125 or a == 97336 or a == -97336\
    \ or a == 103823 or a == -103823 or a\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpu8ce4386.lua:13: 'end' expected (to close 'function' at\
    \ line 11) near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1f_qkmzo.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1f_qkmzo.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- body\n  return math.pow(math.floor(math.pow(a,\
    \ 1/3)), 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm0e82qr1.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpm0e82qr1.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a==0\
    \ or a==1 or a==-1 or math.sqrt(a)%1==0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnhat08sb.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnhat08sb.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqe8d94gy.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqe8d94gy.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a)%1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvp7vqh2k.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvp7vqh2k.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9jepx290.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9jepx290.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- Write your code here\n    return\
    \ math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph6_9gn0q.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph6_9gn0q.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    local b = math.abs(a)\n    local c\
    \ = math.cbrt(b)\n    if c % 1 == 0 then\n        return true\n    else\n    \
    \    return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplvr2m549.lua:13:\
    \ attempt to call field 'cbrt' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplvr2m549.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvno0dt4m.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvno0dt4m.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptz67zljo.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmptz67zljo.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    local b = math.sqrt(a)\n\
    \    if b == math.floor(b) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb3wg6n4u.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpb3wg6n4u.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1_wb80to.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1_wb80to.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd32d4oqn.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpd32d4oqn.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return a ==\
    \ 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcw6gd5lj.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcw6gd5lj.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.pow(math.ceil(math.pow(a,\
    \ 1/3)), 3) == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_v2_dvz3.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_v2_dvz3.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiiya7xm4.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpiiya7xm4.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return (a == 0)\
    \ or (a == 1) or (a == -1) or (math.sqrt(a) % 1 == 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbsukbz77.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbsukbz77.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpesw1j4cx.lua:18:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpesw1j4cx.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- Write your code here\n    return\
    \ a == 0 or a == 1 or a == -1 or math.floor(math.pow(a, 1/3))^3 == a\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbffbzbal.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbffbzbal.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    local b = math.sqrt(a)\n\
    \    if math.floor(b) == b then\n        local c = math.sqrt(b)\n        if math.floor(c)\
    \ == c then\n            return true\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp079p1n5q.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp079p1n5q.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptq6_en15.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmptq6_en15.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkbsrqs0l.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkbsrqs0l.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptth0otjk.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmptth0otjk.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  return math.sqrt(a) % 1 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3192gvvt.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3192gvvt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    if a == 0 then return true end\n  \
    \  if a < 0 then a = -a end\n    local x = math.floor(math.pow(a, 1/3))\n    return\
    \ x*x*x == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp026z42dh.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp026z42dh.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return math.sqrt(a)\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqd8qupv2.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqd8qupv2.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  local x = math.floor(math.pow(a,\
    \ 1/3))\n  return math.pow(x, 3) == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2idhhq_9.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp2idhhq_9.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    -- your code here\n    local x = math.sqrt(a)\n\
    \    if x == math.floor(x) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp42kcm3_q.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp42kcm3_q.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc5pp9ncy.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpc5pp9ncy.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return a == 0 or a == 1 or a == -1\
    \ or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp41h35t07.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp41h35t07.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    return math.sqrt(a) % 1 == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm4wd41lh.lua:20:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpm4wd41lh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  if a == 0 then\n\
    \    return true\n  end\n  if a < 0 then\n    a = -a\n  end\n  for i = 1, a do\n\
    \    if i * i * i == a then\n      return true\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
    \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
    \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfz8abbfc.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpfz8abbfc.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n    local b = math.sqrt(a)\n    return\
    \ b * b * b == a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2),\
    \ false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64),\
    \ true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
    \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzmmles5v.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzmmles5v.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that takes an integer a and returns True \n-- if this\
    \ ingeger is a cube of some integer number.\n-- Note: you may assume the input\
    \ is always valid.\n-- Examples:\n-- iscube(1) ==> True\n-- iscube(2) ==> False\n\
    -- iscube(-1) ==> True\n-- iscube(64) ==> True\n-- iscube(0) ==> True\n-- iscube(180)\
    \ ==> False\nlocal function iscube(a)\n  -- your code here\n  return a == 0 or\
    \ a == 1 or a == -1 or math.sqrt(a) % 1 == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1),\
    \ true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1),\
    \ true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180),\
    \ false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0),\
    \ true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp91xc0haf.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp91xc0haf.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
