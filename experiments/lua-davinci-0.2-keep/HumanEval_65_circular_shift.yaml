name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- \"21\"\n-- >>> circular_shift(12,\
  \ 2)\n-- \"12\"\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n\
    \        return string.reverse(s)\n    end\n    return string.sub(s, shift + 1)\
    \ .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift >= n then\n        return s:reverse()\n    end\n    return\
    \ s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n        x =\
    \ math.floor(x / 10)\n        n = n + 1\n    end\n    local m = n - shift\n  \
    \  if m <= 0 then\n        m = m + n\n    end\n    local result = {}\n    for\
    \ i = 0, n - 1 do\n        result[i] = digits[(m + i) % n]\n    end\n    return\
    \ table.concat(result)\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n     \
    \   n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n  \
    \  local result = {}\n    for i = 0, n - 1 do\n        result[i] = digits[(i +\
    \ shift) % n]\n    end\n    return table.concat(result)\nend", "    local digits\
    \ = tostring(x)\n    local ndigits = #digits\n    if shift > ndigits then\n  \
    \      return digits:reverse()\n    end\n    return digits:sub(ndigits - shift\
    \ + 1) .. digits:sub(1, ndigits - shift)\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift >= len then\n        return string.reverse(digits)\n\
    \    end\n    return string.sub(digits, shift + 1) .. string.sub(digits, 1, shift)\n\
    end", "    local digits = tostring(x)\n    local len = #digits\n    if shift >\
    \ len then\n        return string.reverse(digits)\n    end\n    return string.sub(digits,\
    \ shift + 1, len) .. string.sub(digits, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend", "   \
    \ local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    local result = {}\n    for i = 1,\
    \ n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return\
    \ table.concat(result)\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    local\
    \ result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1)\
    \ % n + 1]\n    end\n    return table.concat(result)\nend", "    local s = tostring(x)\n\
    \    local len = #s\n    if shift > len then\n        return s:reverse()\n   \
    \ end\n    return s:sub(len - shift + 1) .. s:sub(1, len - shift)\nend", "   \
    \ local digits = tostring(x)\n    local n = #digits\n    if shift >= n then\n\
    \        return string.reverse(digits)\n    end\n    local a = string.sub(digits,\
    \ 1, shift)\n    local b = string.sub(digits, shift + 1, n)\n    return b .. a\n\
    end", "    local digits = tostring(x)\n    local n = #digits\n    if shift >=\
    \ n then\n        return string.reverse(digits)\n    end\n    return string.sub(digits,\
    \ shift + 1, n) .. string.sub(digits, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    local t = {}\n    for i = 1, n do\n        t[i] = s:sub(i,\
    \ i)\n    end\n    for i = 1, shift do\n        local c = t[n]\n        for j\
    \ = n, 2, -1 do\n            t[j] = t[j - 1]\n        end\n        t[1] = c\n\
    \    end\n    return table.concat(t)\nend", "    local digits = tostring(x)\n\
    \    local n = #digits\n    if shift >= n then\n        return digits:reverse()\n\
    \    end\n    return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n +\
    \ 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n  \
    \  if shift > n then\n        return table.concat(digits, \"\")\n    end\n   \
    \ local result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift\
    \ - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ digits = tostring(x)\n    local len = #digits\n    if shift > len then\n   \
    \     return string.reverse(digits)\n    end\n    local a = string.sub(digits,\
    \ 1, shift)\n    local b = string.sub(digits, shift + 1, len)\n    return b ..\
    \ a\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n     \
    \   n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n  \
    \  end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ \"\"\n    for i = 1, n do\n        s = s .. digits[i]\n    end\n    return s\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    local result = \"\"\n\
    \    for i = 1, n do\n        result = result .. tostring(digits[(i + shift -\
    \ 1) % n + 1])\n    end\n    return result\nend", "    local digits = {}\n   \
    \ local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n       \
    \ shift = n\n    end\n    for i = 1, shift do\n        local d = digits[n]\n \
    \       for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = d\n    end\n    local s = \"\"\n    for i = 1, n do\n   \
    \     s = s .. digits[i]\n    end\n    return s\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = shift % n\n    end\n    for i = 1, shift do\n    \
    \    local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j] =\
    \ digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s = \"\
    \"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n    return\
    \ s\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n\
    \        return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    local t\
    \ = {}\n    for i = 1, n do\n        t[i] = s:sub(i, i)\n    end\n    for i =\
    \ 1, shift do\n        local c = t[n]\n        for j = n, 2, -1 do\n         \
    \   t[j] = t[j - 1]\n        end\n        t[1] = c\n    end\n    return table.concat(t)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n\
    \        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n \
    \   return s\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        digits[n + 1] = x % 10\n        x = math.floor(x / 10)\n        n = n\
    \ + 1\n    end\n    if shift > n then\n        shift = n\n    end\n    for i =\
    \ 1, shift do\n        local d = digits[n]\n        for j = n, 2, -1 do\n    \
    \        digits[j] = digits[j - 1]\n        end\n        digits[1] = d\n    end\n\
    \    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local d = digits[1]\n        for j = 1, n - 1 do\n  \
    \          digits[j] = digits[j + 1]\n        end\n        digits[n] = d\n   \
    \ end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. digits[i]\n \
    \   end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local tmp = digits[1]\n        for j = 1, n - 1 do\n\
    \            digits[j] = digits[j + 1]\n        end\n        digits[n] = tmp\n\
    \    end\n    local result = \"\"\n    for i = 1, n do\n        result = result\
    \ .. tostring(digits[i])\n    end\n    return result\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "  local digits\
    \ = {}\n  local n = 0\n  while x > 0 do\n    digits[n] = x % 10\n    x = math.floor(x\
    \ / 10)\n    n = n + 1\n  end\n  if shift > n then\n    shift = n\n  end\n  for\
    \ i = 1, shift do\n    local digit = digits[n - 1]\n    for j = n - 1, 1, -1 do\n\
    \      digits[j] = digits[j - 1]\n    end\n    digits[0] = digit\n  end\n  local\
    \ s = \"\"\n  for i = 0, n - 1 do\n    s = s .. tostring(digits[i])\n  end\n \
    \ return s\nend", "    local s = tostring(x)\n    local n = #s\n    if shift >\
    \ n then\n        return s:reverse()\n    end\n    return s:sub(n - shift + 1)\
    \ .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift >= n then\n        return s:reverse()\n    end\n    local a = s:sub(1,\
    \ n - shift)\n    local b = s:sub(n - shift + 1, n)\n    return b .. a\nend",
  "    local digits = tostring(x)\n    local n = #digits\n    local s = n - shift\n\
    \    if s < 0 then\n        s = s + n\n    end\n    return digits:sub(s + 1) ..\
    \ digits:sub(1, s)\nend", "    local digits = {}\n    local n = 0\n    while x\
    \ > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n    end\n\
    \    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = tostring(x)\n    local n = #digits\n\
    \    if shift > n then\n        return string.reverse(digits)\n    end\n    local\
    \ a = string.sub(digits, 1, shift)\n    local b = string.sub(digits, shift + 1,\
    \ n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n     \
    \   n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n  \
    \  for i = 1, shift do\n        local d = digits[n - 1]\n        for j = n - 1,\
    \ 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "    local s = tostring(x)\n\
    \    local len = #s\n    if shift > len then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, len)\n    return b .. a\nend", "    local s = tostring(x)\n    local len\
    \ = #s\n    if shift >= len then\n        return string.reverse(s)\n    end\n\
    \    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n\
    \ then\n        shift = n\n    end\n    for i = 0, shift - 1 do\n        local\
    \ tmp = digits[n - 1]\n        for j = n - 1, 1, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[0] = tmp\n    end\n    local s\
    \ = \"\"\n    for i = 0, n - 1 do\n        s = s .. tostring(digits[i])\n    end\n\
    \    return s\nend", "    local s = tostring(x)\n    local n = #s\n    local shift\
    \ = shift % n\n    return s:sub(n - shift + 1, n) .. s:sub(1, n - shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, shift + 1, n) .. string.sub(s,\
    \ 1, shift)\nend", "  local s = tostring(x)\n  local n = #s\n  if shift > n then\n\
    \    return s:reverse()\n  end\n  return s:sub(n-shift+1) .. s:sub(1, n-shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ shift > n then\n        return table.concat(digits, \"\")\n    end\n    local\
    \ result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1)\
    \ % n]\n    end\n    return table.concat(result, \"\")\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend",
  "  local digits = {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n]\
    \ = x % 10\n    x = math.floor(x / 10)\n  end\n  if shift > n then\n    shift\
    \ = n\n  end\n  for i = 1, shift do\n    local d = digits[n]\n    for j = n, 2,\
    \ -1 do\n      digits[j] = digits[j - 1]\n    end\n    digits[1] = d\n  end\n\
    \  local s = \"\"\n  for i = 1, n do\n    s = s .. tostring(digits[i])\n  end\n\
    \  return s\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        return table.concat(digits, \"\")\n \
    \   end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\")\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n\
    \        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n \
    \   return s\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ \"\"\n    for i = 1, n do\n        s = s .. digits[i]\n    end\n    return s\n\
    end", "    local digits = tostring(x)\n    local len = #digits\n    if shift >=\
    \ len then\n        return string.reverse(digits)\n    end\n    local left = string.sub(digits,\
    \ 1, shift)\n    local right = string.sub(digits, shift + 1, len)\n    return\
    \ right .. left\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    local a = string.sub(s,\
    \ 1, shift)\n    local b = string.sub(s, shift + 1, n)\n    return b .. a\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = shift % n\n    end\n    local result = {}\n    for\
    \ i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result)\nend", "    local digits = {}\n    local n =\
    \ 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n     \
    \   x = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    for i = 1, shift do\n        local d = digits[n]\n        for j\
    \ = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[1]\
    \ = d\n    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. digits[i]\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local digits = {}\n\
    \    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x\
    \ % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n     \
    \   shift = shift % n\n    end\n    local result = {}\n    for i = 1, n do\n \
    \       result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local digits = tostring(x)\n    local len = #digits\n\
    \    if shift > len then\n        return string.reverse(digits)\n    end\n   \
    \ local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n  \
    \  local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x %\
    \ 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n       \
    \ return table.concat(digits, \"\")\n    end\n    local result = {}\n    for i\
    \ = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n  \
    \  return table.concat(result, \"\")\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        for i = 1, n do\n           \
    \ x = x * 10 + digits[i]\n        end\n        return tostring(x)\n    end\n \
    \   local y = 0\n    for i = 1, n do\n        y = y * 10 + digits[(i + shift -\
    \ 1) % n + 1]\n    end\n    return tostring(y)\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift > len then\n        return digits:reverse()\n\
    \    end\n    local left = digits:sub(1, len - shift)\n    local right = digits:sub(len\
    \ - shift + 1, len)\n    return right .. left\nend", "    local digits = {}\n\
    \    while x > 0 do\n        table.insert(digits, x % 10)\n        x = math.floor(x\
    \ / 10)\n    end\n    local n = #digits\n    if shift > n then\n        shift\
    \ = shift % n\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits))\n    end\n    local s = \"\"\n    for i = 1, n do\n\
    \        s = s .. tostring(digits[i])\n    end\n    return s\nend", "  local s\
    \ = tostring(x)\n  local n = #s\n  if shift > n then\n    return string.reverse(s)\n\
    \  end\n  return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend",
  "    local s = tostring(x)\n    local len = #s\n    if shift > len then\n      \
    \  return string.reverse(s)\n    end\n    return string.sub(s, len - shift + 1)\
    \ .. string.sub(s, 1, len - shift)\nend", "    local digits = tostring(x)\n  \
    \  local length = #digits\n    if shift > length then\n        return string.reverse(digits)\n\
    \    end\n    local left = string.sub(digits, 1, shift)\n    local right = string.sub(digits,\
    \ shift + 1, length)\n    return right .. left\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        n =\
    \ n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n\
    \    if shift > n then\n        shift = shift % n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n \
    \   return s\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    local i = n - shift\n    if i < 1 then\n        return\
    \ s:reverse()\n    end\n    return s:sub(i + 1) .. s:sub(1, i)\nend", "    local\
    \ digits = tostring(x)\n    local len = #digits\n    if shift >= len then\n  \
    \      return string.reverse(digits)\n    end\n    local a = string.sub(digits,\
    \ 1, shift)\n    local b = string.sub(digits, shift + 1, len)\n    return b ..\
    \ a\nend", "    local s = tostring(x)\n    local l = #s\n    if shift > l then\n\
    \        return string.reverse(s)\n    end\n    return string.sub(s, l - shift\
    \ + 1) .. string.sub(s, 1, l - shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n\
    \    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    local r = s:sub(n - shift + 1, n) .. s:sub(1, n - shift)\n    return\
    \ r\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n     \
    \   n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n  \
    \  end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n \
    \   return s\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return s:reverse()\n    end\n    return s:sub(n - shift +\
    \ 1) .. s:sub(1, n - shift)\nend", "    local digits = {}\n    local n = 0\n \
    \   while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x =\
    \ math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n\
    \    for i = 1, shift do\n        local d = digits[n]\n        for j = n, 2, -1\
    \ do\n            digits[j] = digits[j - 1]\n        end\n        digits[1] =\
    \ d\n    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local d = digits[1]\n        for j = 1, n - 1 do\n  \
    \          digits[j] = digits[j + 1]\n        end\n        digits[n] = d\n   \
    \ end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = shift % n\n    end\n\
    \    for i = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n\
    \    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local n = #s\n \
    \   if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return s:reverse()\n    end\n    return\
    \ s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "  local digits = tostring(x)\n\
    \  local n = #digits\n  if shift >= n then\n    return digits:reverse()\n  end\n\
    \  return digits:sub(n - shift + 1) .. digits:sub(1, n - shift)\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n      \
    \  digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift >\
    \ n then\n        shift = n\n    end\n    for i = 1, shift do\n        local digit\
    \ = digits[n]\n        for j = n, 2, -1 do\n            digits[j] = digits[j -\
    \ 1]\n        end\n        digits[1] = digit\n    end\n    local s = \"\"\n  \
    \  for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n    return\
    \ s\nend", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n\
    \        return string.reverse(s)\n    end\n    return string.sub(s, n - shift\
    \ + 1) .. string.sub(s, 1, n - shift)\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        shift\
    \ = n\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return string.reverse(s)\n    end\n    return string.sub(s, shift + 1)\
    \ .. string.sub(s, 1, shift)\nend", "    local digits = tostring(x)\n    local\
    \ n = #digits\n    if shift > n then\n        return string.reverse(digits)\n\
    \    end\n    return string.sub(digits, shift + 1, n) .. string.sub(digits, 1,\
    \ shift)\nend", "  local digits = {}\n  local n = 0\n  while x > 0 do\n    digits[n\
    \ + 1] = x % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n  if shift\
    \ > n then\n    return table.concat(digits, \"\")\n  end\n  local result = {}\n\
    \  for i = 1, n do\n    result[i] = digits[(i + shift - 1) % n + 1]\n  end\n \
    \ return table.concat(result, \"\")\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   return string.sub(s, shift+1, n) .. string.sub(s, 1, shift)\nend", "    local\
    \ digits = tostring(x)\n    local len = #digits\n    if shift >= len then\n  \
    \      return string.reverse(digits)\n    end\n    local left = string.sub(digits,\
    \ 1, shift)\n    local right = string.sub(digits, shift + 1, len)\n    return\
    \ right .. left\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    for i = 1, shift do\n        local d = digits[n]\n        for\
    \ j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n      \
    \  digits[1] = d\n    end\n    return table.concat(digits, \"\")\nend", "    local\
    \ s = tostring(x)\n    local len = #s\n    if shift > len then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, len - shift + 1) .. string.sub(s,\
    \ 1, len - shift)\nend", "    local s = tostring(x)\n    if shift > #s then\n\
    \        return string.reverse(s)\n    end\n    return string.sub(s, shift + 1)\
    \ .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return string.reverse(s)\n    end\n    local\
    \ a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n   \
    \ return b .. a\nend", "  local digits = {}\n  local n = 0\n  while x > 0 do\n\
    \    n = n + 1\n    digits[n] = x % 10\n    x = math.floor(x / 10)\n  end\n  if\
    \ shift > n then\n    shift = n\n  end\n  for i = 1, shift do\n    local d = digits[n]\n\
    \    for j = n, 2, -1 do\n      digits[j] = digits[j - 1]\n    end\n    digits[1]\
    \ = d\n  end\n  local s = \"\"\n  for i = 1, n do\n    s = s .. tostring(digits[i])\n\
    \  end\n  return s\nend", "    local s = tostring(x)\n    local n = #s\n    shift\
    \ = shift % n\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", " \
    \   local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = (x - digits[n]) / 10\n    end\n    if\
    \ shift > n then\n        shift = n\n    end\n    for i = 1, shift do\n      \
    \  local digit = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = digit\n    end\n    local\
    \ result = \"\"\n    for i = 1, n do\n        result = result .. tostring(digits[i])\n\
    \    end\n    return result\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local n = #tostring(x)\n   \
    \ if shift > n then\n        return string.reverse(tostring(x))\n    end\n   \
    \ local s = tostring(x)\n    local a = string.sub(s, 1, shift)\n    local b =\
    \ string.sub(s, shift + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend",
  "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n +\
    \ 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n  \
    \  if shift > n then\n        shift = n\n    end\n    local result = {}\n    for\
    \ i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1,\
    \ n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return s:reverse()\n    end\n    return s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    for i = 1, shift do\n        local\
    \ d = digits[n]\n        for j = n, 2, -1 do\n            digits[j] = digits[j\
    \ - 1]\n        end\n        digits[1] = d\n    end\n    local s = \"\"\n    for\
    \ i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend",
  "    local s = tostring(x)\n    local l = #s\n    if shift >= l then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, shift + 1) .. string.sub(s,\
    \ 1, shift)\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        digits[n + 1] = x % 10\n        x = math.floor(x / 10)\n        n = n\
    \ + 1\n    end\n    local m = n - shift\n    if m < 0 then\n        m = n\n  \
    \  end\n    local y = 0\n    for i = 0, m - 1 do\n        y = y * 10 + digits[i\
    \ + 1]\n    end\n    for i = m, n - 1 do\n        y = y * 10 + digits[i + 1 -\
    \ m]\n    end\n    return y\nend", "    local digits = {}\n    while x > 0 do\n\
    \        table.insert(digits, x % 10)\n        x = math.floor(x / 10)\n    end\n\
    \    local n = #digits\n    if shift > n then\n        shift = shift % n\n   \
    \ end\n    for i = 1, shift do\n        table.insert(digits, 1, table.remove(digits))\n\
    \    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        local d = digits[n]\n        for j = n, 2, -1 do\n  \
    \          digits[j] = digits[j - 1]\n        end\n        digits[1] = d\n   \
    \ end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits, \"\
    \")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] =\
    \ digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result, \"\
    \")\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n     \
    \   n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n  \
    \  end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n \
    \   return s\nend", "    local str = tostring(x)\n    local len = #str\n    if\
    \ shift > len then\n        return string.reverse(str)\n    end\n    local left\
    \ = string.sub(str, 1, shift)\n    local right = string.sub(str, shift + 1, len)\n\
    \    return right .. left\nend", "    local digits = {}\n    local n = 0\n   \
    \ while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = shift % n\n    end\n\
    \    if shift > 0 then\n        local tmp = {}\n        for i = 1, n do\n    \
    \        tmp[i] = digits[(i + shift - 1) % n + 1]\n        end\n        digits\
    \ = tmp\n    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local s = tostring(x)\n    local len = #s\n\
    \    if shift > len then\n        return s:reverse()\n    end\n    return s:sub(len\
    \ - shift + 1) .. s:sub(1, len - shift)\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        shift\
    \ = shift % n\n    end\n    for i = 1, shift do\n        local d = digits[n]\n\
    \        for j = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n\
    \        digits[1] = d\n    end\n    local s = \"\"\n    for i = 1, n do\n   \
    \     s = s .. tostring(digits[i])\n    end\n    return s\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > n then\n \
    \       shift = shift % n\n    end\n    local result = {}\n    for i = 1, n do\n\
    \        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "    local digits = tostring(x)\n    local len = #digits\n    if shift >\
    \ len then\n        return string.reverse(digits)\n    end\n    local left = string.sub(digits,\
    \ 1, shift)\n    local right = string.sub(digits, shift + 1, len)\n    return\
    \ right .. left\nend", "    local s = tostring(x)\n    if shift >= #s then\n \
    \       return s:reverse()\n    end\n    return s:sub(shift + 1) .. s:sub(1, shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return string.reverse(s)\n    end\n    return string.sub(s, shift + 1)\
    \ .. string.sub(s, 1, shift)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x\
    \ = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n  \
    \  end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result)\nend", "\tlocal\
    \ s = tostring(x)\n\tif shift > #s then\n\t\treturn s:reverse()\n\tend\n\treturn\
    \ s:sub(shift + 1) .. s:sub(1, shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return string.reverse(s)\n    end\n \
    \   return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, n - shift + 1) .. string.sub(s,\
    \ 1, n - shift)\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        return table.concat(digits)\n\
    \    end\n    local result = {}\n    for i = 1, n do\n        result[i] = digits[(i\
    \ + shift - 1) % n + 1]\n    end\n    return table.concat(result)\nend", "   \
    \ local digits = {}\n    local i = 0\n    while x > 0 do\n        i = i + 1\n\
    \        digits[i] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > i then\n        shift = i\n    end\n    for j = 1, shift do\n        local\
    \ d = digits[i]\n        for k = i, 2, -1 do\n            digits[k] = digits[k\
    \ - 1]\n        end\n        digits[1] = d\n    end\n    local s = \"\"\n    for\
    \ j = 1, i do\n        s = s .. tostring(digits[j])\n    end\n    return s\nend",
  "    local x_str = tostring(x)\n    local x_len = #x_str\n    if shift >= x_len\
    \ then\n        return string.reverse(x_str)\n    end\n    local x_str_1 = string.sub(x_str,\
    \ 1, shift)\n    local x_str_2 = string.sub(x_str, shift + 1, x_len)\n    return\
    \ x_str_2 .. x_str_1\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n     \
    \   n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n  \
    \  for i = 0, shift - 1 do\n        local d = digits[n - 1]\n        for j = n\
    \ - 1, 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "  local digits =\
    \ {}\n  local n = 0\n  while x > 0 do\n    n = n + 1\n    digits[n] = x % 10\n\
    \    x = math.floor(x / 10)\n  end\n  if shift >= n then\n    for i = 1, n do\n\
    \      x = x * 10 + digits[i]\n    end\n    return tostring(x)\n  end\n  for i\
    \ = 1, shift do\n    x = x * 10 + digits[i]\n  end\n  for i = shift + 1, n do\n\
    \    x = x * 10 + digits[i]\n  end\n  return tostring(x)\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    if shift > n then\n        return s:reverse()\n\
    \    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n    local n\
    \ = #s\n    if shift > n then\n        return s:reverse()\n    end\n    return\
    \ s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits\
    \ = {}\n    local n = 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n\
    \        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift > n\
    \ then\n        return table.concat(digits, \"\")\n    end\n    local result =\
    \ {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n\
    \    end\n    return table.concat(result, \"\")\nend", "  local s = tostring(x)\n\
    \  local n = #s\n  if shift > n then\n    return string.reverse(s)\n  end\n  return\
    \ string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local\
    \ digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n + 1] = x\
    \ % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if shift\
    \ > n then\n        return table.concat(digits, \"\")\n    end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n +\
    \ 1]\n    end\n    return table.concat(result, \"\")\nend", "    local s = tostring(x)\n\
    \    local len = #s\n    if shift > len then\n        return s:reverse()\n   \
    \ end\n    return s:sub(len - shift + 1) .. s:sub(1, len - shift)\nend", "   \
    \ local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, shift + 1) .. string.sub(s,\
    \ 1, shift)\nend", "    local digits = tostring(x)\n    local len = #digits\n\
    \    local shift = shift % len\n    return digits:sub(len - shift + 1) .. digits:sub(1,\
    \ len - shift)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return s:reverse()\n    end\n    return s:sub(n - shift +\
    \ 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift >= n then\n        return s:reverse()\n    end\n    return s:sub(n-shift+1)\
    \ .. s:sub(1, n-shift)\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    while shift > n do\n        shift = shift - n\n    end\n\
    \    while shift > 0 do\n        local d = digits[n]\n        for i = n, 2, -1\
    \ do\n            digits[i] = digits[i - 1]\n        end\n        digits[1] =\
    \ d\n        shift = shift - 1\n    end\n    local s = \"\"\n    for i = 1, n\
    \ do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend", "   \
    \ local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ string.reverse(s)\n    end\n    return string.sub(s, n - shift + 1) .. string.sub(s,\
    \ 1, n - shift)\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n        n\
    \ = n + 1\n    end\n    if shift > n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local result = {}\n    for i = 0, n - 1 do\n        result[i]\
    \ = digits[(i + shift) % n]\n    end\n    return table.concat(result, \"\")\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n\
    \ + 1] = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n\
    \    if shift > n then\n        shift = n\n    end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = digits[(i + shift - 1) % n + 1]\n    end\n\
    \    return table.concat(result)\nend", "    local digits = {}\n    local n =\
    \ 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n     \
    \   x = math.floor(x / 10)\n    end\n    if shift > n then\n        shift = n\n\
    \    end\n    for i = 1, shift do\n        local d = digits[n]\n        for j\
    \ = n, 2, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[1]\
    \ = d\n    end\n    local s = \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n\
    \    end\n    return s\nend", "    local digits = {}\n    local n = 0\n    while\
    \ x > 0 do\n        digits[n + 1] = x % 10\n        x = math.floor(x / 10)\n \
    \       n = n + 1\n    end\n    if shift > n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result,\
    \ \"\")\nend", "  local s = tostring(x)\n  local n = #s\n  if shift > n then\n\
    \    return string.reverse(s)\n  end\n  return string.sub(s, n - shift + 1) ..\
    \ string.sub(s, 1, n - shift)\nend", "    local digits = {}\n    local n = 0\n\
    \    while x > 0 do\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \        n = n + 1\n    end\n    if shift > n then\n        shift = n\n    end\n\
    \    for i = 1, shift do\n        local d = digits[n - 1]\n        for j = n -\
    \ 1, 1, -1 do\n            digits[j] = digits[j - 1]\n        end\n        digits[0]\
    \ = d\n    end\n    local s = \"\"\n    for i = 0, n - 1 do\n        s = s ..\
    \ tostring(digits[i])\n    end\n    return s\nend", "    local s = tostring(x)\n\
    \    local len = #s\n    if shift >= len then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local digits = tostring(x)\n    local len = #digits\n    if shift >\
    \ len then\n        return string.reverse(digits)\n    end\n    local left = string.sub(digits,\
    \ 1, shift)\n    local right = string.sub(digits, shift + 1, len)\n    return\
    \ right .. left\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    for i\
    \ = 1, shift do\n        n = n + 1\n        digits[n] = digits[i]\n    end\n \
    \   local result = \"\"\n    for i = n, 1, -1 do\n        result = result .. tostring(digits[i])\n\
    \    end\n    return result\nend", "    local digits = tostring(x)\n    local\
    \ n = #digits\n    if shift > n then\n        return string.reverse(digits)\n\
    \    end\n    local s = string.sub(digits, shift + 1, n)\n    local t = string.sub(digits,\
    \ 1, shift)\n    return s .. t\nend", "    local s = tostring(x)\n    local n\
    \ = #s\n    if shift > n then\n        return s:reverse()\n    end\n    return\
    \ s:sub(n-shift+1) .. s:sub(1, n-shift)\nend", "    local digits = {}\n    local\
    \ n = 0\n    while x > 0 do\n        n = n + 1\n        digits[n] = x % 10\n \
    \       x = math.floor(x / 10)\n    end\n    if shift > n then\n        shift\
    \ = n\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result)\n\
    end", "    local digits = tostring(x)\n    local n = #digits\n    if shift > n\
    \ then\n        return string.reverse(digits)\n    end\n    return string.sub(digits,\
    \ shift + 1, n) .. string.sub(digits, 1, shift)\nend", "    local digits = tostring(x)\n\
    \    local len = #digits\n    if shift > len then\n        return string.reverse(digits)\n\
    \    end\n    return string.sub(digits, shift + 1, len) .. string.sub(digits,\
    \ 1, shift)\nend", "    local digits = tostring(x)\n    local n = #digits\n  \
    \  if shift > n then\n        return string.reverse(digits)\n    end\n    return\
    \ string.sub(digits, shift + 1, n) .. string.sub(digits, 1, shift)\nend", "  \
    \  local s = tostring(x)\n    local n = #s\n    if shift > n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n \
    \       return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "    local digits = {}\n    local n = 0\n    while x > 0 do\n\
    \        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x / 10)\n\
    \    end\n    if shift > n then\n        shift = n\n    end\n    for i = 1, shift\
    \ do\n        local d = digits[n]\n        for j = n, 2, -1 do\n            digits[j]\
    \ = digits[j - 1]\n        end\n        digits[1] = d\n    end\n    local s =\
    \ \"\"\n    for i = 1, n do\n        s = s .. tostring(digits[i])\n    end\n \
    \   return s\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return s:reverse()\n    end\n    return s:sub(n - shift +\
    \ 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift >= n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, shift + 1) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local digits\
    \ = tostring(x)\n    local n = #digits\n    if shift >= n then\n        return\
    \ string.reverse(digits)\n    end\n    return string.sub(digits, shift + 1, n)\
    \ .. string.sub(digits, 1, shift)\nend", "    local digits = {}\n    local n =\
    \ 0\n    while x > 0 do\n        digits[n + 1] = x % 10\n        x = math.floor(x\
    \ / 10)\n        n = n + 1\n    end\n    if shift > n then\n        return table.concat(digits,\
    \ \"\")\n    end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = digits[(i + shift - 1) % n + 1]\n    end\n    return table.concat(result,\
    \ \"\")\nend", "    local s = tostring(x)\n    local n = #s\n    local i = n -\
    \ shift\n    if i < 1 then\n        i = i + n\n    end\n    return s:sub(i + 1)\
    \ .. s:sub(1, i)\nend", "    local s = tostring(x)\n    local n = #s\n    if shift\
    \ > n then\n        return string.reverse(s)\n    end\n    return string.sub(s,\
    \ shift + 1, n) .. string.sub(s, 1, shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    local a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift\
    \ + 1, n)\n    return b .. a\nend", "    local s = tostring(x)\n    local n =\
    \ #s\n    if shift > n then\n        return string.reverse(s)\n    end\n    local\
    \ a = string.sub(s, 1, shift)\n    local b = string.sub(s, shift + 1, n)\n   \
    \ return b .. a\nend", "    local digits = {}\n    local n = 0\n    while x >\
    \ 0 do\n        n = n + 1\n        digits[n] = x % 10\n        x = math.floor(x\
    \ / 10)\n    end\n    if shift > n then\n        shift = n\n    end\n    local\
    \ result = {}\n    for i = 1, n do\n        result[i] = digits[(i + shift - 1)\
    \ % n + 1]\n    end\n    return table.concat(result)\nend", "\tlocal s = tostring(x)\n\
    \tlocal n = #s\n\tif shift > n then\n\t\treturn s:reverse()\n\tend\n\treturn s:sub(n\
    \ - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n    local\
    \ n = #s\n    if shift > n then\n        return s:reverse()\n    end\n    return\
    \ s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return string.reverse(s)\n \
    \   end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local digits = {}\n    local n = 0\n    while x > 0 do\n        digits[n]\
    \ = x % 10\n        x = math.floor(x / 10)\n        n = n + 1\n    end\n    if\
    \ shift > n then\n        return table.concat(digits, \"\")\n    end\n    local\
    \ result = {}\n    for i = 0, n - 1 do\n        result[i] = digits[(i + shift)\
    \ % n]\n    end\n    return table.concat(result, \"\")\nend", "    local digits\
    \ = tostring(x)\n    local len = #digits\n    if shift > len then\n        return\
    \ string.reverse(digits)\n    end\n    local a = string.sub(digits, 1, shift)\n\
    \    local b = string.sub(digits, shift + 1, len)\n    return b .. a\nend", " \
    \   local digits = {}\n    local n = 0\n    while x > 0 do\n        n = n + 1\n\
    \        digits[n] = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift\
    \ > n then\n        shift = n\n    end\n    for i = 1, shift do\n        local\
    \ digit = digits[1]\n        for j = 1, n - 1 do\n            digits[j] = digits[j\
    \ + 1]\n        end\n        digits[n] = digit\n    end\n    local s = \"\"\n\
    \    for i = 1, n do\n        s = s .. digits[i]\n    end\n    return s\nend",
  "    local s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return\
    \ s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\n\
    end", "    local digits = {}\n    while x > 0 do\n        digits[#digits + 1]\
    \ = x % 10\n        x = math.floor(x / 10)\n    end\n    if shift > #digits then\n\
    \        shift = shift % #digits\n    end\n    for i = 1, shift do\n        table.insert(digits,\
    \ 1, table.remove(digits))\n    end\n    local s = \"\"\n    for i = 1, #digits\
    \ do\n        s = s .. tostring(digits[i])\n    end\n    return s\nend", "   \
    \ local digits = {}\n    local x_copy = x\n    local i = 0\n    while x_copy >\
    \ 0 do\n        i = i + 1\n        digits[i] = x_copy % 10\n        x_copy = math.floor(x_copy\
    \ / 10)\n    end\n    local n = i\n    local y = 0\n    for i = 1, n do\n    \
    \    y = y * 10 + digits[(i + shift - 1) % n + 1]\n    end\n    return tostring(y)\n\
    end", "    local digits = tostring(x)\n    local n = #digits\n    if shift > n\
    \ then\n        return string.reverse(digits)\n    end\n    local a = string.sub(digits,\
    \ 1, shift)\n    local b = string.sub(digits, shift + 1, n)\n    return b .. a\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return string.reverse(s)\n    end\n    return string.sub(s, shift + 1,\
    \ n) .. string.sub(s, 1, shift)\nend", "    local str = tostring(x)\n    local\
    \ len = #str\n    if shift > len then\n        return str:reverse()\n    end\n\
    \    return str:sub(len - shift + 1) .. str:sub(1, len - shift)\nend", "    local\
    \ str = tostring(x)\n    local len = #str\n    if shift > len then\n        return\
    \ string.reverse(str)\n    end\n    return string.sub(str, shift + 1, len) ..\
    \ string.sub(str, 1, shift)\nend", "    local s = tostring(x)\n    local n = #s\n\
    \    if shift > n then\n        return string.reverse(s)\n    end\n    return\
    \ string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\nend", "    local\
    \ s = tostring(x)\n    local n = #s\n    if shift >= n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, n - shift + 1) .. string.sub(s, 1, n - shift)\n\
    end", "    local s = tostring(x)\n    local n = #s\n    if shift > n then\n  \
    \      return s:reverse()\n    end\n    return s:sub(n - shift + 1) .. s:sub(1,\
    \ n - shift)\nend", "  local digits = {}\n  local n = 0\n  while x > 0 do\n  \
    \  digits[n] = x % 10\n    x = math.floor(x / 10)\n    n = n + 1\n  end\n  if\
    \ shift > n then\n    shift = n\n  end\n  for i = 1, shift do\n    local d = digits[n\
    \ - 1]\n    for j = n - 1, 1, -1 do\n      digits[j] = digits[j - 1]\n    end\n\
    \    digits[0] = d\n  end\n  local s = \"\"\n  for i = 0, n - 1 do\n    s = s\
    \ .. tostring(digits[i])\n  end\n  return s\nend", "    local s = tostring(x)\n\
    \    local n = #s\n    if shift > n then\n        return s:reverse()\n    end\n\
    \    return s:sub(n - shift + 1) .. s:sub(1, n - shift)\nend", "    local s =\
    \ tostring(x)\n    local n = #s\n    if shift > n then\n        return string.reverse(s)\n\
    \    end\n    return string.sub(s, shift + 1, n) .. string.sub(s, 1, shift)\n\
    end", "    local digits = tostring(x)\n    local n = #digits\n    local shift\
    \ = shift % n\n    if shift == 0 then\n        return digits\n    elseif shift\
    \ > n then\n        return string.reverse(digits)\n    else\n        return string.sub(digits,\
    \ shift + 1) .. string.sub(digits, 1, shift)\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
