name: HumanEval_136_largest_smallest_integers
language: lua
prompt: "-- Create a function that returns a tuple (a, b), where 'a' is\n-- the largest\
  \ of negative integers, and 'b' is the smallest\n-- of positive integers in a list.\n\
  -- If there is no negative or positive integers, return them as None.\n-- Examples:\n\
  -- largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n-- largest_smallest_integers([])\
  \ == (None, None)\n-- largest_smallest_integers([0]) == (None, None)\nlocal function\
  \ largest_smallest_integers(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n\
  \    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2,\
  \ 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5,\
  \ 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7,\
  \ 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}),\
  \ {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1,\
  \ -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}),\
  \ {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n  \
  \  lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local largest_negative = nil\n  local smallest_positive = nil\n \
    \ for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative ==\
    \ nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local largest_negative, smallest_positive = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local max_neg, min_pos = nil, nil\n  for _, v in ipairs(lst) do\n   \
    \ if v < 0 then\n      if not max_neg or v > max_neg then\n        max_neg = v\n\
    \      end\n    elseif v > 0 then\n      if not min_pos or v < min_pos then\n\
    \        min_pos = v\n      end\n    end\n  end\n  return max_neg, min_pos\nend",
  "    local min, max = nil, nil\n    for _, v in ipairs(lst) do\n        if v > 0\
    \ then\n            if not min or v < min then\n                min = v\n    \
    \        end\n        elseif v < 0 then\n            if not max or v > max then\n\
    \                max = v\n            end\n        end\n    end\n    return max,\
    \ min\nend", "    local largest_negative = nil\n    local smallest_positive =\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local min, max = nil, nil\n  for _, v in ipairs(lst) do\n    if v > 0\
    \ then\n      if not min or v < min then\n        min = v\n      end\n    elseif\
    \ v < 0 then\n      if not max or v > max then\n        max = v\n      end\n \
    \   end\n  end\n  return max, min\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local a, b = None, None\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if a == None or v > a then\n        \
    \        a = v\n            end\n        elseif v > 0 then\n            if b ==\
    \ None or v < b then\n                b = v\n            end\n        end\n  \
    \  end\n    return a, b\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local max_neg, min_pos = nil, nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if not max_neg or v\
    \ > max_neg then\n                max_neg = v\n            end\n        elseif\
    \ v > 0 then\n            if not min_pos or v < min_pos then\n               \
    \ min_pos = v\n            end\n        end\n    end\n    return max_neg, min_pos\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local max_neg, min_pos = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if not max_neg or v > max_neg then\n     \
    \           max_neg = v\n            end\n        elseif v > 0 then\n        \
    \    if not min_pos or v < min_pos then\n                min_pos = v\n       \
    \     end\n        end\n    end\n    return max_neg, min_pos\nend", "  local min,\
    \ max = nil, nil\n  for _, v in ipairs(lst) do\n    if v > 0 then\n      if not\
    \ min or v < min then\n        min = v\n      end\n    elseif v < 0 then\n   \
    \   if not max or v > max then\n        max = v\n      end\n    end\n  end\n \
    \ return max, min\nend", "    local largest_negative = nil\n    local smallest_positive\
    \ = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if\
    \ largest_negative == nil or v > largest_negative then\n                largest_negative\
    \ = v\n            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local min, max = nil, nil\n    for _, v in ipairs(lst) do\n       \
    \ if v > 0 then\n            if min == nil or v < min then\n                min\
    \ = v\n            end\n        elseif v < 0 then\n            if max == nil or\
    \ v > max then\n                max = v\n            end\n        end\n    end\n\
    \    return max, min\nend", "  local max_neg, min_pos = nil, nil\n  for _, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if not max_neg or v > max_neg then\n\
    \        max_neg = v\n      end\n    elseif v > 0 then\n      if not min_pos or\
    \ v < min_pos then\n        min_pos = v\n      end\n    end\n  end\n  return max_neg,\
    \ min_pos\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if a == nil or v > a then\n              \
    \  a = v\n            end\n        elseif v > 0 then\n            if b == nil\
    \ or v < b then\n                b = v\n            end\n        end\n    end\n\
    \    return a, b\nend", "    local largest_negative, smallest_positive = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_neg, smallest_pos = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if largest_neg == nil or v > largest_neg\
    \ then\n                largest_neg = v\n            end\n        elseif v > 0\
    \ then\n            if smallest_pos == nil or v < smallest_pos then\n        \
    \        smallest_pos = v\n            end\n        end\n    end\n    return largest_neg,\
    \ smallest_pos\nend", "  -- your code here\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local a, b = None, None\n\
    \    for _, v in ipairs(lst) do\n        if v > 0 then\n            if b == None\
    \ or v < b then\n                b = v\n            end\n        elseif v < 0\
    \ then\n            if a == None or v > a then\n                a = v\n      \
    \      end\n        end\n    end\n    return a, b\nend", "    local min, max =\
    \ nil, nil\n    for _, v in ipairs(lst) do\n        if v > 0 then\n          \
    \  if not min or v < min then\n                min = v\n            end\n    \
    \    elseif v < 0 then\n            if not max or v > max then\n             \
    \   max = v\n            end\n        end\n    end\n    return max, min\nend",
  "  local largest_negative = nil\n  local smallest_positive = nil\n  for _, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if largest_negative == nil or v > largest_negative\
    \ then\n        largest_negative = v\n      end\n    elseif v > 0 then\n     \
    \ if smallest_positive == nil or v < smallest_positive then\n        smallest_positive\
    \ = v\n      end\n    end\n  end\n  return largest_negative, smallest_positive\n\
    end", "    local a, b = None, None\n    for _, v in ipairs(lst) do\n        if\
    \ v < 0 then\n            if a == None or v > a then\n                a = v\n\
    \            end\n        elseif v > 0 then\n            if b == None or v < b\
    \ then\n                b = v\n            end\n        end\n    end\n    return\
    \ a, b\nend", "    local min, max = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v > 0 then\n            if not min or v < min then\n             \
    \   min = v\n            end\n        elseif v < 0 then\n            if not max\
    \ or v > max then\n                max = v\n            end\n        end\n   \
    \ end\n    return max, min\nend", "    local max_neg, min_pos = nil, nil\n   \
    \ for _, v in ipairs(lst) do\n        if v < 0 then\n            if not max_neg\
    \ or v > max_neg then\n                max_neg = v\n            end\n        elseif\
    \ v > 0 then\n            if not min_pos or v < min_pos then\n               \
    \ min_pos = v\n            end\n        end\n    end\n    return max_neg, min_pos\n\
    end", "    local min, max = nil, nil\n    for _, v in ipairs(lst) do\n       \
    \ if v > 0 then\n            if not min or v < min then\n                min =\
    \ v\n            end\n        elseif v < 0 then\n            if not max or v >\
    \ max then\n                max = v\n            end\n        end\n    end\n \
    \   return max, min\nend", "    local max_neg, min_pos = nil, nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if max_neg == nil or\
    \ v > max_neg then\n                max_neg = v\n            end\n        elseif\
    \ v > 0 then\n            if min_pos == nil or v < min_pos then\n            \
    \    min_pos = v\n            end\n        end\n    end\n    return max_neg, min_pos\n\
    end", "    local a, b = None, None\n    for _, v in ipairs(lst) do\n        if\
    \ v < 0 then\n            if a == None or v > a then\n                a = v\n\
    \            end\n        elseif v > 0 then\n            if b == None or v < b\
    \ then\n                b = v\n            end\n        end\n    end\n    return\
    \ a, b\nend", "    local largest_negative = nil\n    local smallest_positive =\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local min, max = nil, nil\n    for _, v in ipairs(lst) do\n       \
    \ if v > 0 then\n            if not min or v < min then\n                min =\
    \ v\n            end\n        elseif v < 0 then\n            if not max or v >\
    \ max then\n                max = v\n            end\n        end\n    end\n \
    \   return max, min\nend", "  local largest_negative, smallest_positive = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative\
    \ == nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "  local largest_negative, smallest_positive = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative\
    \ == nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local a, b = None, None\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if a == None or v > a then\n        \
    \        a = v\n            end\n        elseif v > 0 then\n            if b ==\
    \ None or v < b then\n                b = v\n            end\n        end\n  \
    \  end\n    return a, b\nend", "    local largest, smallest = nil, nil\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 then\n            if largest == nil\
    \ or v > largest then\n                largest = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest == nil or v < smallest then\n          \
    \      smallest = v\n            end\n        end\n    end\n    return largest,\
    \ smallest\nend", "    local a, b = None, None\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if a == None or v > a then\n             \
    \   a = v\n            end\n        elseif v > 0 then\n            if b == None\
    \ or v < b then\n                b = v\n            end\n        end\n    end\n\
    \    return a, b\nend", "    local a, b = None, None\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if b == None or v < b then\n        \
    \        b = v\n            end\n        elseif v < 0 then\n            if a ==\
    \ None or v > a then\n                a = v\n            end\n        end\n  \
    \  end\n    return a, b\nend", "  local a, b = None, None\n  for _, v in ipairs(lst)\
    \ do\n    if v > 0 then\n      if b == None or v < b then\n        b = v\n   \
    \   end\n    elseif v < 0 then\n      if a == None or v > a then\n        a =\
    \ v\n      end\n    end\n  end\n  return a, b\nend", "    local largest_negative,\
    \ smallest_positive\n    for _, v in ipairs(lst) do\n        if v < 0 then\n \
    \           if not largest_negative or v > largest_negative then\n           \
    \     largest_negative = v\n            end\n        elseif v > 0 then\n     \
    \       if not smallest_positive or v < smallest_positive then\n             \
    \   smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local min, max = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if not min or v < min then\n        \
    \        min = v\n            end\n        elseif v < 0 then\n            if not\
    \ max or v > max then\n                max = v\n            end\n        end\n\
    \    end\n    return max, min\nend", "    local a, b = None, None\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if a == None or v >\
    \ a then\n                a = v\n            end\n        elseif v > 0 then\n\
    \            if b == None or v < b then\n                b = v\n            end\n\
    \        end\n    end\n    return a, b\nend", "    local min, max = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v > 0 then\n            if not min\
    \ or v < min then\n                min = v\n            end\n        elseif v\
    \ < 0 then\n            if not max or v > max then\n                max = v\n\
    \            end\n        end\n    end\n    return max, min\nend", "    local\
    \ min, max = nil, nil\n    for _, v in ipairs(lst) do\n        if v > 0 then\n\
    \            if min == nil or v < min then\n                min = v\n        \
    \    end\n        elseif v < 0 then\n            if max == nil or v > max then\n\
    \                max = v\n            end\n        end\n    end\n    return max,\
    \ min\nend", "    local min_pos, max_neg = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if min_pos == nil or v < min_pos then\n\
    \                min_pos = v\n            end\n        elseif v < 0 then\n   \
    \         if max_neg == nil or v > max_neg then\n                max_neg = v\n\
    \            end\n        end\n    end\n    return max_neg, min_pos\nend", " \
    \ local min, max = nil, nil\n  for _, v in ipairs(lst) do\n    if v > 0 then\n\
    \      if not min or v < min then\n        min = v\n      end\n    elseif v <\
    \ 0 then\n      if not max or v > max then\n        max = v\n      end\n    end\n\
    \  end\n  return max, min\nend", "    local a, b = None, None\n    for _, v in\
    \ ipairs(lst) do\n        if v < 0 then\n            if a == None or v > a then\n\
    \                a = v\n            end\n        elseif v > 0 then\n         \
    \   if b == None or v < b then\n                b = v\n            end\n     \
    \   end\n    end\n    return a, b\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "  local largest_negative, smallest_positive = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative\
    \ == nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local max_neg, min_pos = nil, nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if not max_neg or v\
    \ > max_neg then\n                max_neg = v\n            end\n        elseif\
    \ v > 0 then\n            if not min_pos or v < min_pos then\n               \
    \ min_pos = v\n            end\n        end\n    end\n    return max_neg, min_pos\n\
    end", "  local largest_negative, smallest_positive = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if largest_negative == nil or v > largest_negative\
    \ then\n        largest_negative = v\n      end\n    elseif v > 0 then\n     \
    \ if smallest_positive == nil or v < smallest_positive then\n        smallest_positive\
    \ = v\n      end\n    end\n  end\n  return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 then\n            if a == nil or v > a then\n                a = v\n   \
    \         end\n        elseif v > 0 then\n            if b == nil or v < b then\n\
    \                b = v\n            end\n        end\n    end\n    return a, b\n\
    end", "    local max_neg, min_pos = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if max_neg == nil or v > max_neg then\n  \
    \              max_neg = v\n            end\n        elseif v > 0 then\n     \
    \       if min_pos == nil or v < min_pos then\n                min_pos = v\n \
    \           end\n        end\n    end\n    return max_neg, min_pos\nend", "  \
    \  local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n\
    \            if a == nil or v > a then\n                a = v\n            end\n\
    \        elseif v > 0 then\n            if b == nil or v < b then\n          \
    \      b = v\n            end\n        end\n    end\n    return a, b\nend", " \
    \   local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v > 0 then\n\
    \            if b == nil or v < b then\n                b = v\n            end\n\
    \        elseif v < 0 then\n            if a == nil or v > a then\n          \
    \      a = v\n            end\n        end\n    end\n    return a, b\nend", " \
    \   local largest_negative, smallest_positive = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local a,\
    \ b = nil, nil\n    for _, v in ipairs(lst) do\n        if v > 0 then\n      \
    \      if b == nil or v < b then\n                b = v\n            end\n   \
    \     elseif v < 0 then\n            if a == nil or v > a then\n             \
    \   a = v\n            end\n        end\n    end\n    return a, b\nend", "  local\
    \ max_neg, min_pos = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if max_neg == nil or v > max_neg then\n        max_neg = v\n      end\n\
    \    elseif v > 0 then\n      if min_pos == nil or v < min_pos then\n        min_pos\
    \ = v\n      end\n    end\n  end\n  return max_neg, min_pos\nend", "  local a,\
    \ b = nil, nil\n  for _, v in ipairs(lst) do\n    if v > 0 then\n      if not\
    \ b or v < b then\n        b = v\n      end\n    elseif v < 0 then\n      if not\
    \ a or v > a then\n        a = v\n      end\n    end\n  end\n  return a, b\nend",
  "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n\
    \            if a == nil or v > a then\n                a = v\n            end\n\
    \        elseif v > 0 then\n            if b == nil or v < b then\n          \
    \      b = v\n            end\n        end\n    end\n    return a, b\nend", " \
    \   local largest_negative, smallest_positive = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "  local largest_negative,\
    \ smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "    local a, b =\
    \ None, None\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if a == None or v > a then\n                a = v\n            end\n    \
    \    elseif v > 0 then\n            if b == None or v < b then\n             \
    \   b = v\n            end\n        end\n    end\n    return a, b\nend", "   \
    \ local min, max = nil, nil\n    for _, v in ipairs(lst) do\n        if v > 0\
    \ then\n            if min == nil or v < min then\n                min = v\n \
    \           end\n        elseif v < 0 then\n            if max == nil or v > max\
    \ then\n                max = v\n            end\n        end\n    end\n    return\
    \ max, min\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if a == nil or v > a then\n              \
    \  a = v\n            end\n        elseif v > 0 then\n            if b == nil\
    \ or v < b then\n                b = v\n            end\n        end\n    end\n\
    \    return a, b\nend", "    local a, b = None, None\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if a == None or v > a then\n        \
    \        a = v\n            end\n        elseif v > 0 then\n            if b ==\
    \ None or v < b then\n                b = v\n            end\n        end\n  \
    \  end\n    return a, b\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "  local largest_negative, smallest_positive = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative\
    \ == nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local largest_negative = nil\n    local smallest_positive\
    \ = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if\
    \ largest_negative == nil or v > largest_negative then\n                largest_negative\
    \ = v\n            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local min, max = nil, nil\n    for _, v in ipairs(lst) do\n       \
    \ if v > 0 then\n            if not min or v < min then\n                min =\
    \ v\n            end\n        elseif v < 0 then\n            if not max or v >\
    \ max then\n                max = v\n            end\n        end\n    end\n \
    \   return max, min\nend", "    local max_neg, min_pos = nil, nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if max_neg == nil or\
    \ v > max_neg then\n                max_neg = v\n            end\n        elseif\
    \ v > 0 then\n            if min_pos == nil or v < min_pos then\n            \
    \    min_pos = v\n            end\n        end\n    end\n    return max_neg, min_pos\n\
    end", "    local a, b = None, None\n    for _, v in ipairs(lst) do\n        if\
    \ v > 0 then\n            if b == None or v < b then\n                b = v\n\
    \            end\n        elseif v < 0 then\n            if a == None or v > a\
    \ then\n                a = v\n            end\n        end\n    end\n    return\
    \ a, b\nend", "    local a, b = None, None\n    for i = 1, #lst do\n        if\
    \ lst[i] < 0 and (a == None or lst[i] > a) then\n            a = lst[i]\n    \
    \    elseif lst[i] > 0 and (b == None or lst[i] < b) then\n            b = lst[i]\n\
    \        end\n    end\n    return a, b\nend", "    local a, b = nil, nil\n   \
    \ for _, v in ipairs(lst) do\n        if v < 0 then\n            if a == nil or\
    \ v > a then\n                a = v\n            end\n        elseif v > 0 then\n\
    \            if b == nil or v < b then\n                b = v\n            end\n\
    \        end\n    end\n    return a, b\nend", "  local min, max = nil, nil\n \
    \ for _, v in ipairs(lst) do\n    if v > 0 then\n      if not min or v < min then\n\
    \        min = v\n      end\n    elseif v < 0 then\n      if not max or v > max\
    \ then\n        max = v\n      end\n    end\n  end\n  return max, min\nend", " \
    \   local max_neg, min_pos = nil, nil\n    for _, v in ipairs(lst) do\n      \
    \  if v < 0 then\n            if max_neg == nil or v > max_neg then\n        \
    \        max_neg = v\n            end\n        elseif v > 0 then\n           \
    \ if min_pos == nil or v < min_pos then\n                min_pos = v\n       \
    \     end\n        end\n    end\n    return max_neg, min_pos\nend", "  local largest_negative\
    \ = nil\n  local smallest_positive = nil\n  for _, v in ipairs(lst) do\n    if\
    \ v < 0 then\n      if largest_negative == nil or v > largest_negative then\n\
    \        largest_negative = v\n      end\n    elseif v > 0 then\n      if smallest_positive\
    \ == nil or v < smallest_positive then\n        smallest_positive = v\n      end\n\
    \    end\n  end\n  return largest_negative, smallest_positive\nend", "    local\
    \ largest_negative, smallest_positive = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local min,\
    \ max = nil, nil\n    for _, v in ipairs(lst) do\n        if v > 0 then\n    \
    \        if min == nil or v < min then\n                min = v\n            end\n\
    \        elseif v < 0 then\n            if max == nil or v > max then\n      \
    \          max = v\n            end\n        end\n    end\n    return max, min\n\
    end", "  local a, b = None, None\n  for _, v in ipairs(lst) do\n    if v > 0 then\n\
    \      if b == None or v < b then\n        b = v\n      end\n    elseif v < 0\
    \ then\n      if a == None or v > a then\n        a = v\n      end\n    end\n\
    \  end\n  return a, b\nend", "    local max_neg, min_pos = nil, nil\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if max_neg == nil or\
    \ v > max_neg then\n                max_neg = v\n            end\n        elseif\
    \ v > 0 then\n            if min_pos == nil or v < min_pos then\n            \
    \    min_pos = v\n            end\n        end\n    end\n    return max_neg, min_pos\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ > 0 then\n            if b == nil or v < b then\n                b = v\n   \
    \         end\n        elseif v < 0 then\n            if a == nil or v > a then\n\
    \                a = v\n            end\n        end\n    end\n    return a, b\n\
    end", "    local min, max = nil, nil\n    for _, v in ipairs(lst) do\n       \
    \ if v > 0 then\n            if not min or v < min then\n                min =\
    \ v\n            end\n        elseif v < 0 then\n            if not max or v >\
    \ max then\n                max = v\n            end\n        end\n    end\n \
    \   return max, min\nend", "    local largest_negative, smallest_positive = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local min_positive = nil\n    local max_negative = nil\n    for _,\
    \ v in ipairs(lst) do\n        if v > 0 then\n            if not min_positive\
    \ or v < min_positive then\n                min_positive = v\n            end\n\
    \        elseif v < 0 then\n            if not max_negative or v > max_negative\
    \ then\n                max_negative = v\n            end\n        end\n    end\n\
    \    return max_negative, min_positive\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    -- your code here\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "  -- your code here\nend",
  "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n\
    \            if a == nil or v > a then\n                a = v\n            end\n\
    \        elseif v > 0 then\n            if b == nil or v < b then\n          \
    \      b = v\n            end\n        end\n    end\n    return a, b\nend", " \
    \   local min, max = nil, nil\n    for _, v in ipairs(lst) do\n        if v >\
    \ 0 then\n            if not min or v < min then\n                min = v\n  \
    \          end\n        elseif v < 0 then\n            if not max or v > max then\n\
    \                max = v\n            end\n        end\n    end\n    return max,\
    \ min\nend", "    local min_pos = nil\n    local max_neg = nil\n    for _, v in\
    \ ipairs(lst) do\n        if v > 0 then\n            if min_pos == nil or v <\
    \ min_pos then\n                min_pos = v\n            end\n        elseif v\
    \ < 0 then\n            if max_neg == nil or v > max_neg then\n              \
    \  max_neg = v\n            end\n        end\n    end\n    return max_neg, min_pos\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local a, b = None, None\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if a == None or v > a then\n        a = v\n      end\n    elseif v > 0\
    \ then\n      if b == None or v < b then\n        b = v\n      end\n    end\n\
    \  end\n  return a, b\nend", "    local min, max = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if not min or v < min then\n        \
    \        min = v\n            end\n        elseif v < 0 then\n            if not\
    \ max or v > max then\n                max = v\n            end\n        end\n\
    \    end\n    return max, min\nend", "    local largest_negative = nil\n    local\
    \ smallest_positive = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n\
    \            if largest_negative == nil or v > largest_negative then\n       \
    \         largest_negative = v\n            end\n        elseif v > 0 then\n \
    \           if smallest_positive == nil or v < smallest_positive then\n      \
    \          smallest_positive = v\n            end\n        end\n    end\n    return\
    \ largest_negative, smallest_positive\nend", "  local largest_negative = nil\n\
    \  local smallest_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local a,\
    \ b = None, None\n    for _, v in ipairs(lst) do\n        if v < 0 then\n    \
    \        if a == None or v > a then\n                a = v\n            end\n\
    \        elseif v > 0 then\n            if b == None or v < b then\n         \
    \       b = v\n            end\n        end\n    end\n    return a, b\nend", " \
    \   local a, b = None, None\n    for _, v in ipairs(lst) do\n        if v > 0\
    \ then\n            if b == None or v < b then\n                b = v\n      \
    \      end\n        elseif v < 0 then\n            if a == None or v > a then\n\
    \                a = v\n            end\n        end\n    end\n    return a, b\n\
    end", "    local min_pos = nil\n    local max_neg = nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if min_pos == nil or v < min_pos then\n\
    \                min_pos = v\n            end\n        elseif v < 0 then\n   \
    \         if max_neg == nil or v > max_neg then\n                max_neg = v\n\
    \            end\n        end\n    end\n    return max_neg, min_pos\nend", " \
    \   local a, b = None, None\n    for _, v in ipairs(lst) do\n        if v < 0\
    \ then\n            if a == None or v > a then\n                a = v\n      \
    \      end\n        elseif v > 0 then\n            if b == None or v < b then\n\
    \                b = v\n            end\n        end\n    end\n    return a, b\n\
    end", "    local min_pos = nil\n    local max_neg = nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if min_pos == nil or v < min_pos then\n\
    \                min_pos = v\n            end\n        elseif v < 0 then\n   \
    \         if max_neg == nil or v > max_neg then\n                max_neg = v\n\
    \            end\n        end\n    end\n    return max_neg, min_pos\nend", " \
    \   local min, max = nil, nil\n    for _, v in ipairs(lst) do\n        if v >\
    \ 0 then\n            if not min or v < min then\n                min = v\n  \
    \          end\n        elseif v < 0 then\n            if not max or v > max then\n\
    \                max = v\n            end\n        end\n    end\n    return max,\
    \ min\nend", "    local largest_negative, smallest_positive = nil, nil\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = nil, nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 then\n            if a == nil or v > a then\n                a = v\n   \
    \         end\n        elseif v > 0 then\n            if b == nil or v < b then\n\
    \                b = v\n            end\n        end\n    end\n    return a, b\n\
    end", "    local max_neg, min_pos = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if not max_neg or v > max_neg then\n     \
    \           max_neg = v\n            end\n        elseif v > 0 then\n        \
    \    if not min_pos or v < min_pos then\n                min_pos = v\n       \
    \     end\n        end\n    end\n    return max_neg, min_pos\nend", "    local\
    \ largest, smallest = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest == nil or v > largest then\n                largest\
    \ = v\n            end\n        elseif v > 0 then\n            if smallest ==\
    \ nil or v < smallest then\n                smallest = v\n            end\n  \
    \      end\n    end\n    return largest, smallest\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, n in ipairs(lst) do\n        if n <\
    \ 0 then\n            if largest_negative == nil or n > largest_negative then\n\
    \                largest_negative = n\n            end\n        elseif n > 0 then\n\
    \            if smallest_positive == nil or n < smallest_positive then\n     \
    \           smallest_positive = n\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local a, b = nil, nil\n\
    \    for _, v in ipairs(lst) do\n        if v > 0 then\n            if b == nil\
    \ or v < b then\n                b = v\n            end\n        elseif v < 0\
    \ then\n            if a == nil or v > a then\n                a = v\n       \
    \     end\n        end\n    end\n    return a, b\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "  local a, b = None, None\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if a == None or v > a\
    \ then\n        a = v\n      end\n    elseif v > 0 then\n      if b == None or\
    \ v < b then\n        b = v\n      end\n    end\n  end\n  return a, b\nend", " \
    \ local a, b = None, None\n  for _, v in ipairs(lst) do\n    if v < 0 then\n \
    \     if a == None or v > a then\n        a = v\n      end\n    elseif v > 0 then\n\
    \      if b == None or v < b then\n        b = v\n      end\n    end\n  end\n\
    \  return a, b\nend", "    local largest_negative = nil\n    local smallest_positive\
    \ = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if\
    \ largest_negative == nil or v > largest_negative then\n                largest_negative\
    \ = v\n            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local min = nil\n    local max = nil\n    for _, v in ipairs(lst) do\n\
    \        if v > 0 then\n            if min == nil or v < min then\n          \
    \      min = v\n            end\n        elseif v < 0 then\n            if max\
    \ == nil or v > max then\n                max = v\n            end\n        end\n\
    \    end\n    return max, min\nend", "    local a, b = None, None\n    for _,\
    \ v in ipairs(lst) do\n        if v < 0 then\n            if a == None or v >\
    \ a then\n                a = v\n            end\n        elseif v > 0 then\n\
    \            if b == None or v < b then\n                b = v\n            end\n\
    \        end\n    end\n    return a, b\nend", "    local a, b = None, None\n \
    \   for _, v in ipairs(lst) do\n        if v < 0 then\n            if a == None\
    \ or v > a then\n                a = v\n            end\n        elseif v > 0\
    \ then\n            if b == None or v < b then\n                b = v\n      \
    \      end\n        end\n    end\n    return a, b\nend", "    local a, b = None,\
    \ None\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if\
    \ a == None or v > a then\n                a = v\n            end\n        elseif\
    \ v > 0 then\n            if b == None or v < b then\n                b = v\n\
    \            end\n        end\n    end\n    return a, b\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local a,\
    \ b = None, None\n    for _, v in ipairs(lst) do\n        if v < 0 then\n    \
    \        if a == None or v > a then\n                a = v\n            end\n\
    \        elseif v > 0 then\n            if b == None or v < b then\n         \
    \       b = v\n            end\n        end\n    end\n    return a, b\nend", " \
    \   local max_neg, min_pos = nil, nil\n    for _, v in ipairs(lst) do\n      \
    \  if v < 0 then\n            if not max_neg or v > max_neg then\n           \
    \     max_neg = v\n            end\n        elseif v > 0 then\n            if\
    \ not min_pos or v < min_pos then\n                min_pos = v\n            end\n\
    \        end\n    end\n    return max_neg, min_pos\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local a, b = None, None\n\
    \    for _, v in ipairs(lst) do\n        if v < 0 then\n            if a == None\
    \ or v > a then\n                a = v\n            end\n        elseif v > 0\
    \ then\n            if b == None or v < b then\n                b = v\n      \
    \      end\n        end\n    end\n    return a, b\nend", "  local largest_negative,\
    \ smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "    local max_neg,\
    \ min_pos = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n\
    \            if max_neg == nil or v > max_neg then\n                max_neg =\
    \ v\n            end\n        elseif v > 0 then\n            if min_pos == nil\
    \ or v < min_pos then\n                min_pos = v\n            end\n        end\n\
    \    end\n    return max_neg, min_pos\nend", "    local a, b = None, None\n  \
    \  for _, v in ipairs(lst) do\n        if v < 0 then\n            if a == None\
    \ or v > a then\n                a = v\n            end\n        elseif v > 0\
    \ then\n            if b == None or v < b then\n                b = v\n      \
    \      end\n        end\n    end\n    return a, b\nend", "    local a, b = None,\
    \ None\n    for _, v in ipairs(lst) do\n        if v > 0 then\n            if\
    \ b == None or v < b then\n                b = v\n            end\n        elseif\
    \ v < 0 then\n            if a == None or v > a then\n                a = v\n\
    \            end\n        end\n    end\n    return a, b\nend", "  local min_pos,\
    \ max_neg = math.huge, -math.huge\n  for _, v in ipairs(lst) do\n    if v > 0\
    \ then\n      min_pos = math.min(min_pos, v)\n    elseif v < 0 then\n      max_neg\
    \ = math.max(max_neg, v)\n    end\n  end\n  return max_neg == -math.huge and nil\
    \ or max_neg, min_pos == math.huge and nil or min_pos\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local max_neg, min_pos\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if max_neg == nil or v > max_neg then\n                max_neg = v\n    \
    \        end\n        elseif v > 0 then\n            if min_pos == nil or v <\
    \ min_pos then\n                min_pos = v\n            end\n        end\n  \
    \  end\n    return max_neg, min_pos\nend", "    local min_pos, max_neg = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v > 0 then\n            if min_pos\
    \ == nil or v < min_pos then\n                min_pos = v\n            end\n \
    \       elseif v < 0 then\n            if max_neg == nil or v > max_neg then\n\
    \                max_neg = v\n            end\n        end\n    end\n    return\
    \ max_neg, min_pos\nend", "  local pos, neg = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v > 0 then\n      if pos == nil or v < pos then\n        pos = v\n\
    \      end\n    elseif v < 0 then\n      if neg == nil or v > neg then\n     \
    \   neg = v\n      end\n    end\n  end\n  return neg, pos\nend", "    local a,\
    \ b = None, None\n    for _, v in ipairs(lst) do\n        if v > 0 then\n    \
    \        if b == None or v < b then\n                b = v\n            end\n\
    \        elseif v < 0 then\n            if a == None or v > a then\n         \
    \       a = v\n            end\n        end\n    end\n    return a, b\nend", " \
    \   local a, b = None, None\n    for _, v in ipairs(lst) do\n        if v < 0\
    \ then\n            if a == None or v > a then\n                a = v\n      \
    \      end\n        elseif v > 0 then\n            if b == None or v < b then\n\
    \                b = v\n            end\n        end\n    end\n    return a, b\n\
    end", "  -- your code here\nend", "    local a, b = nil, nil\n    for _, v in\
    \ ipairs(lst) do\n        if v < 0 then\n            if a == nil or v > a then\n\
    \                a = v\n            end\n        elseif v > 0 then\n         \
    \   if b == nil or v < b then\n                b = v\n            end\n      \
    \  end\n    end\n    return a, b\nend", "    local a, b = None, None\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 then\n            if a == None or v\
    \ > a then\n                a = v\n            end\n        elseif v > 0 then\n\
    \            if b == None or v < b then\n                b = v\n            end\n\
    \        end\n    end\n    return a, b\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if a == nil or v > a then\n         \
    \       a = v\n            end\n        elseif v > 0 then\n            if b ==\
    \ nil or v < b then\n                b = v\n            end\n        end\n   \
    \ end\n    return a, b\nend", "    local largest, smallest = nil, nil\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 then\n            if largest == nil\
    \ or v > largest then\n                largest = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest == nil or v < smallest then\n          \
    \      smallest = v\n            end\n        end\n    end\n    return largest,\
    \ smallest\nend", "    local min = nil\n    local max = nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if min == nil or v < min then\n     \
    \           min = v\n            end\n        elseif v < 0 then\n            if\
    \ max == nil or v > max then\n                max = v\n            end\n     \
    \   end\n    end\n    return max, min\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local largest_negative = nil\n    local smallest_positive\
    \ = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if\
    \ largest_negative == nil or v > largest_negative then\n                largest_negative\
    \ = v\n            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local a, b = None, None\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if a == None or v > a then\n        a = v\n      end\n    elseif v > 0\
    \ then\n      if b == None or v < b then\n        b = v\n      end\n    end\n\
    \  end\n  return a, b\nend", "  local min, max = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v > 0 then\n      if min == nil or v < min then\n        min = v\n\
    \      end\n    elseif v < 0 then\n      if max == nil or v > max then\n     \
    \   max = v\n      end\n    end\n  end\n  return max, min\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "    local largest_negative\
    \ = nil\n    local smallest_positive = nil\n    for _, v in ipairs(lst) do\n \
    \       if v < 0 then\n            if largest_negative == nil or v > largest_negative\
    \ then\n                largest_negative = v\n            end\n        elseif\
    \ v > 0 then\n            if smallest_positive == nil or v < smallest_positive\
    \ then\n                smallest_positive = v\n            end\n        end\n\
    \    end\n    return largest_negative, smallest_positive\nend", "    local a,\
    \ b = None, None\n    for _, v in ipairs(lst) do\n        if v < 0 then\n    \
    \        if a == None or v > a then\n                a = v\n            end\n\
    \        elseif v > 0 then\n            if b == None or v < b then\n         \
    \       b = v\n            end\n        end\n    end\n    return a, b\nend", " \
    \ local largest_negative = nil\n  local smallest_positive = nil\n  for _, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if largest_negative == nil or v > largest_negative\
    \ then\n        largest_negative = v\n      end\n    elseif v > 0 then\n     \
    \ if smallest_positive == nil or v < smallest_positive then\n        smallest_positive\
    \ = v\n      end\n    end\n  end\n  return largest_negative, smallest_positive\n\
    end", "    -- your code here\nend", "    local a, b = nil, nil\n    for _, v in\
    \ ipairs(lst) do\n        if v < 0 then\n            if a == nil or v > a then\n\
    \                a = v\n            end\n        elseif v > 0 then\n         \
    \   if b == nil or v < b then\n                b = v\n            end\n      \
    \  end\n    end\n    return a, b\nend", "    local largest_negative = nil\n  \
    \  local smallest_positive = nil\n    for _, v in ipairs(lst) do\n        if v\
    \ < 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "  local largest_negative,\
    \ smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "    local largest_negative,\
    \ smallest_positive = nil, nil\n    for _, v in ipairs(lst) do\n        if v <\
    \ 0 then\n            if largest_negative == nil or v > largest_negative then\n\
    \                largest_negative = v\n            end\n        elseif v > 0 then\n\
    \            if smallest_positive == nil or v < smallest_positive then\n     \
    \           smallest_positive = v\n            end\n        end\n    end\n   \
    \ return largest_negative, smallest_positive\nend", "  local a, b = None, None\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if a == None or v > a\
    \ then\n        a = v\n      end\n    elseif v > 0 then\n      if b == None or\
    \ v < b then\n        b = v\n      end\n    end\n  end\n  return a, b\nend", " \
    \   local max, min = nil, nil\n    for _, v in ipairs(lst) do\n        if v >\
    \ 0 then\n            if min == nil or v < min then\n                min = v\n\
    \            end\n        elseif v < 0 then\n            if max == nil or v >\
    \ max then\n                max = v\n            end\n        end\n    end\n \
    \   return max, min\nend", "    local min, max = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if not min or v < min then\n        \
    \        min = v\n            end\n        elseif v < 0 then\n            if not\
    \ max or v > max then\n                max = v\n            end\n        end\n\
    \    end\n    return max, min\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local min_pos, max_neg = nil, nil\n    for _,\
    \ v in ipairs(lst) do\n        if v > 0 then\n            if min_pos == nil or\
    \ v < min_pos then\n                min_pos = v\n            end\n        elseif\
    \ v < 0 then\n            if max_neg == nil or v > max_neg then\n            \
    \    max_neg = v\n            end\n        end\n    end\n    return max_neg, min_pos\n\
    end", "  local largest_negative, smallest_positive = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if not largest_negative or v > largest_negative\
    \ then\n        largest_negative = v\n      end\n    elseif v > 0 then\n     \
    \ if not smallest_positive or v < smallest_positive then\n        smallest_positive\
    \ = v\n      end\n    end\n  end\n  return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local largest_negative, smallest_positive = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if largest_negative == nil or v > largest_negative\
    \ then\n        largest_negative = v\n      end\n    elseif v > 0 then\n     \
    \ if smallest_positive == nil or v < smallest_positive then\n        smallest_positive\
    \ = v\n      end\n    end\n  end\n  return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "  local min, max = nil, nil\n  for _, v in ipairs(lst) do\n    if v > 0\
    \ then\n      if not min or v < min then\n        min = v\n      end\n    elseif\
    \ v < 0 then\n      if not max or v > max then\n        max = v\n      end\n \
    \   end\n  end\n  return max, min\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "    local min, max = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if not min or v < min then\n        \
    \        min = v\n            end\n        elseif v < 0 then\n            if not\
    \ max or v > max then\n                max = v\n            end\n        end\n\
    \    end\n    return max, min\nend", "    local a, b = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if a == nil or v > a then\n\
    \                a = v\n            end\n        elseif v > 0 then\n         \
    \   if b == nil or v < b then\n                b = v\n            end\n      \
    \  end\n    end\n    return a, b\nend", "    local a, b = None, None\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 then\n            if a == None or v\
    \ > a then\n                a = v\n            end\n        elseif v > 0 then\n\
    \            if b == None or v < b then\n                b = v\n            end\n\
    \        end\n    end\n    return a, b\nend", "    local largest_negative, smallest_positive\
    \ = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n        \
    \    if largest_negative == nil or v > largest_negative then\n               \
    \ largest_negative = v\n            end\n        elseif v > 0 then\n         \
    \   if smallest_positive == nil or v < smallest_positive then\n              \
    \  smallest_positive = v\n            end\n        end\n    end\n    return largest_negative,\
    \ smallest_positive\nend", "  local largest_negative, smallest_positive = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative\
    \ == nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "  local min, max = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v > 0 then\n      if not min or v < min then\n        min = v\n \
    \     end\n    elseif v < 0 then\n      if not max or v > max then\n        max\
    \ = v\n      end\n    end\n  end\n  return max, min\nend", "    local a, b = None,\
    \ None\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if\
    \ a == None or v > a then\n                a = v\n            end\n        elseif\
    \ v > 0 then\n            if b == None or v < b then\n                b = v\n\
    \            end\n        end\n    end\n    return a, b\nend", "  local largest_negative,\
    \ smallest_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest_negative == nil or v > largest_negative then\n        largest_negative\
    \ = v\n      end\n    elseif v > 0 then\n      if smallest_positive == nil or\
    \ v < smallest_positive then\n        smallest_positive = v\n      end\n    end\n\
    \  end\n  return largest_negative, smallest_positive\nend", "  local min = nil\n\
    \  local max = nil\n  for _, v in ipairs(lst) do\n    if v > 0 then\n      if\
    \ min == nil or v < min then\n        min = v\n      end\n    elseif v < 0 then\n\
    \      if max == nil or v > max then\n        max = v\n      end\n    end\n  end\n\
    \  return max, min\nend", "    local largest_negative, smallest_positive = nil,\
    \ nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local max_neg, min_pos = nil, nil\n    for _, v in ipairs(lst) do\n\
    \        if v < 0 then\n            if not max_neg or v > max_neg then\n     \
    \           max_neg = v\n            end\n        elseif v > 0 then\n        \
    \    if not min_pos or v < min_pos then\n                min_pos = v\n       \
    \     end\n        end\n    end\n    return max_neg, min_pos\nend", "    local\
    \ min, max = nil, nil\n    for _, v in ipairs(lst) do\n        if v > 0 then\n\
    \            if not min or v < min then\n                min = v\n           \
    \ end\n        elseif v < 0 then\n            if not max or v > max then\n   \
    \             max = v\n            end\n        end\n    end\n    return max,\
    \ min\nend", "    local largest_negative, smallest_positive = nil, nil\n    for\
    \ _, v in ipairs(lst) do\n        if v < 0 then\n            if largest_negative\
    \ == nil or v > largest_negative then\n                largest_negative = v\n\
    \            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    -- your code here\nend", "  local largest_negative, smallest_positive\
    \ = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest_negative\
    \ == nil or v > largest_negative then\n        largest_negative = v\n      end\n\
    \    elseif v > 0 then\n      if smallest_positive == nil or v < smallest_positive\
    \ then\n        smallest_positive = v\n      end\n    end\n  end\n  return largest_negative,\
    \ smallest_positive\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v < 0 then\n            if a == nil or v > a then\n         \
    \       a = v\n            end\n        elseif v > 0 then\n            if b ==\
    \ nil or v < b then\n                b = v\n            end\n        end\n   \
    \ end\n    return a, b\nend", "    local a, b = nil, nil\n    for _, v in ipairs(lst)\
    \ do\n        if v > 0 then\n            if b == nil or v < b then\n         \
    \       b = v\n            end\n        elseif v < 0 then\n            if a ==\
    \ nil or v > a then\n                a = v\n            end\n        end\n   \
    \ end\n    return a, b\nend", "    local largest_negative, smallest_positive =\
    \ nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n          \
    \  if largest_negative == nil or v > largest_negative then\n                largest_negative\
    \ = v\n            end\n        elseif v > 0 then\n            if smallest_positive\
    \ == nil or v < smallest_positive then\n                smallest_positive = v\n\
    \            end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local largest_negative, smallest_positive = nil, nil\n    for _, v\
    \ in ipairs(lst) do\n        if v < 0 then\n            if largest_negative ==\
    \ nil or v > largest_negative then\n                largest_negative = v\n   \
    \         end\n        elseif v > 0 then\n            if smallest_positive ==\
    \ nil or v < smallest_positive then\n                smallest_positive = v\n \
    \           end\n        end\n    end\n    return largest_negative, smallest_positive\n\
    end", "    local a, b = None, None\n    for _, v in ipairs(lst) do\n        if\
    \ v < 0 then\n            if a == None or v > a then\n                a = v\n\
    \            end\n        elseif v > 0 then\n            if b == None or v < b\
    \ then\n                b = v\n            end\n        end\n    end\n    return\
    \ a, b\nend", "  -- your code here\nend", "    local min, max = nil, nil\n   \
    \ for _, v in ipairs(lst) do\n        if v > 0 then\n            if not min or\
    \ v < min then\n                min = v\n            end\n        elseif v < 0\
    \ then\n            if not max or v > max then\n                max = v\n    \
    \        end\n        end\n    end\n    return max, min\nend", "    local max_neg,\
    \ min_pos = nil, nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n\
    \            if not max_neg or v > max_neg then\n                max_neg = v\n\
    \            end\n        elseif v > 0 then\n            if not min_pos or v <\
    \ min_pos then\n                min_pos = v\n            end\n        end\n  \
    \  end\n    return max_neg, min_pos\nend", "    local min, max = nil, nil\n  \
    \  for _, v in ipairs(lst) do\n        if v > 0 then\n            if min == nil\
    \ or v < min then\n                min = v\n            end\n        elseif v\
    \ < 0 then\n            if max == nil or v > max then\n                max = v\n\
    \            end\n        end\n    end\n    return max, min\nend", "  -- your\
    \ code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
