name: HumanEval_51_remove_vowels
language: lua
results:
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfzm226j1.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmpfzm226j1.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for _, vowel in ipairs(vowels) do\n \
    \           if char == vowel then\n                is_vowel = true\n         \
    \       break\n            end\n        end\n        if not is_vowel then\n  \
    \          result = result .. char\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for _, vowel in ipairs(vowels) do\n \
    \           if char == vowel then\n                is_vowel = true\n         \
    \       break\n            end\n        end\n        if not is_vowel then\n  \
    \          new_text = new_text .. char\n        end\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph4znkw02.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph4znkw02.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmph4znkw02.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if not is_vowel then\n            result\
    \ = result .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfw_4rzny.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfw_4rzny.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpfw_4rzny.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppzmrvl33.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppzmrvl33.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmppzmrvl33.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if not is_vowel then\n            new_text\
    \ = new_text .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptexuw0om.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptexuw0om.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmptexuw0om.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local text = text:gsub('[aeiouAEIOU]', '')\n    return text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for _, vowel in ipairs(vowels) do\n \
    \           if char == vowel then\n                is_vowel = true\n         \
    \       break\n            end\n        end\n        if not is_vowel then\n  \
    \          result = result .. char\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwzkamy7v.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwzkamy7v.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpwzkamy7v.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local c = text:sub(i, i)\n   \
    \     if not table.contains(vowels, c) then\n            result = result .. c\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmps2c4rvtx.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmps2c4rvtx.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmps2c4rvtx.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local c = text:sub(i, i)\n \
    \       if not table.contains(vowels, c) then\n            new_text = new_text\
    \ .. c\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphlya5s58.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphlya5s58.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmphlya5s58.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwtvzah15.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwtvzah15.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpwtvzah15.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aeiouAEIOU'\n    local result = ''\n    for i = 1, #text\
    \ do\n        local c = text:sub(i, i)\n        if not vowels:find(c) then\n \
    \           result = result .. c\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not vowels[char] then\n            new_text = new_text .. char\n \
    \       end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnfw2r8z0.lua:28:\
    \ expected: \\n\"bcdf\\nghjklm\"\\nactual: \\n\"abcdef\\nghijklm\"\\nstack traceback:\\\
    n\\t/tmp/tmpnfw2r8z0.lua:28: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj5ue2fcx.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpj5ue2fcx.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpj5ue2fcx.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsfwdo6gu.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsfwdo6gu.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpsfwdo6gu.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local c = text:sub(i, i)\n   \
    \     local is_vowel = false\n        for _, v in ipairs(vowels) do\n        \
    \    if c == v then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if not is_vowel then\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for _, v in ipairs(vowels) do\n     \
    \       if char == v then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if not is_vowel then\n            result\
    \ = result .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for _, vowel in ipairs(vowels) do\n \
    \           if char == vowel then\n                is_vowel = true\n         \
    \       break\n            end\n        end\n        if not is_vowel then\n  \
    \          new_text = new_text .. char\n        end\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgce3n5s_.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgce3n5s_.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpgce3n5s_.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aeiouAEIOU'\n    local text_without_vowels = ''\n    for\
    \ i = 1, #text do\n        local char = text:sub(i, i)\n        if not vowels:find(char)\
    \ then\n            text_without_vowels = text_without_vowels .. char\n      \
    \  end\n    end\n    return text_without_vowels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprbm1ox6v.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmprbm1ox6v.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not vowels[char] then\n            result = result .. char\n     \
    \   end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx37pqlcq.lua:28:\
    \ expected: \\n\"bcdf\\nghjklm\"\\nactual: \\n\"abcdef\\nghijklm\"\\nstack traceback:\\\
    n\\t/tmp/tmpx37pqlcq.lua:28: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptij4jcfd.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptij4jcfd.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmptij4jcfd.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7qi8338v.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7qi8338v.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp7qi8338v.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpclf4cu3b.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpclf4cu3b.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpclf4cu3b.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz3b1cnwr.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmpz3b1cnwr.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ result = ''\n  for i = 1, #text do\n    local char = text:sub(i, i)\n    if\
    \ not table.contains(vowels, char) then\n      result = result .. char\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjhcunwoy.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjhcunwoy.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpjhcunwoy.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7z28abvm.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmp7z28abvm.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local letter = text:sub(i, i)\n\
    \        if not table.contains(vowels, letter) then\n            new_text = new_text\
    \ .. letter\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjgq8m6w2.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjgq8m6w2.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpjgq8m6w2.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        if not contains(vowels, text:sub(i,\
    \ i)) then\n            result = result .. text:sub(i, i)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpprd6lsys.lua:16:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpprd6lsys.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpprd6lsys.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo49a36_c.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmpo49a36_c.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aeiouAEIOU'\n    local result = text:gsub('[aeiouAEIOU]',\
    \ '')\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3oelvv9i.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3oelvv9i.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp3oelvv9i.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aeiouAEIOU'\n    local new_text = ''\n    for i = 1, #text\
    \ do\n        local char = text:sub(i, i)\n        if not vowels:find(char) then\n\
    \            new_text = new_text .. char\n        end\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpw9_26yot.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpw9_26yot.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpw9_26yot.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj0mm625q.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmpj0mm625q.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnf6e7jzc.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmpnf6e7jzc.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local result = ''\n  for i = 1, #text do\n    local c = text:sub(i, i)\n  \
    \  if not is_vowel(c) then\n      result = result .. c\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdmvsh6mf.lua:16:\
    \ attempt to call global 'is_vowel' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdmvsh6mf.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpdmvsh6mf.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local result = ''\n    for i = 1, #text do\n        local c = text:sub(i,\
    \ i)\n        if not is_vowel(c) then\n            result = result .. c\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpip1fhbb_.lua:16:\
    \ attempt to call global 'is_vowel' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpip1fhbb_.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpip1fhbb_.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr2tdqher.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr2tdqher.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpr2tdqher.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aeiouAEIOU'\n    local new_text = ''\n    for i = 1, #text\
    \ do\n        local char = text:sub(i, i)\n        if not vowels:find(char) then\n\
    \            new_text = new_text .. char\n        end\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmoczjod4.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmoczjod4.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpmoczjod4.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local result = ''\n  for i = 1, #text do\n    local char = text:sub(i, i)\n\
    \    if not is_vowel(char) then\n      result = result .. char\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9sox55u0.lua:16:\
    \ attempt to call global 'is_vowel' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9sox55u0.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp9sox55u0.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not vowels[char] then\n            result = result .. char\n     \
    \   end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9hr76xkf.lua:28:\
    \ expected: \\n\"bcdf\\nghjklm\"\\nactual: \\n\"abcdef\\nghijklm\"\\nstack traceback:\\\
    n\\t/tmp/tmp9hr76xkf.lua:28: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpixgeecz_.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpixgeecz_.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpixgeecz_.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz9sjgl99.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpz9sjgl99.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpz9sjgl99.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbejevkhl.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmpbejevkhl.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for _, vowel in ipairs(vowels) do\n \
    \           if char == vowel then\n                is_vowel = true\n         \
    \       break\n            end\n        end\n        if not is_vowel then\n  \
    \          new_text = new_text .. char\n        end\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_b1zhgqr.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_b1zhgqr.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp_b1zhgqr.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  local vowels = 'aeiouAEIOU'\n  local new_text = ''\n  for i = 1, #text do\n\
    \    local char = text:sub(i, i)\n    if not vowels:find(char) then\n      new_text\
    \ = new_text .. char\n    end\n  end\n  return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp22mglq02.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp22mglq02.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp22mglq02.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppo8w89du.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppo8w89du.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmppo8w89du.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \treturn text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpku8t9x6s.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpku8t9x6s.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpku8t9x6s.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal new_text\
    \ = ''\n\tfor i = 1, #text do\n\t\tlocal char = text:sub(i, i)\n\t\tlocal is_vowel\
    \ = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j] then\n\t\t\t\t\
    is_vowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not is_vowel then\n\
    \t\t\tnew_text = new_text .. char\n\t\tend\n\tend\n\treturn new_text\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not contains(vowels, char) then\n            result = result .. char\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqg33gr4j.lua:17:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqg33gr4j.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpqg33gr4j.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpklbvwodg.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpklbvwodg.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpklbvwodg.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpydtqkqd0.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpydtqkqd0.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpydtqkqd0.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local ch = text:sub(i, i)\n  \
    \      if not table.contains(vowels, ch) then\n            result = result ..\
    \ ch\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplvdfcq9l.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplvdfcq9l.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmplvdfcq9l.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local result = ''\n    for i = 1, #text do\n        local char = text:sub(i,\
    \ i)\n        if not is_vowel(char) then\n            result = result .. char\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpel29xo97.lua:16:\
    \ attempt to call global 'is_vowel' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpel29xo97.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpel29xo97.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkr_6ybzr.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkr_6ybzr.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpkr_6ybzr.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local result = ''\n    for i = 1, #text do\n        local c = text:sub(i,\
    \ i)\n        if not is_vowel(c) then\n            result = result .. c\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqbk4j52h.lua:16:\
    \ attempt to call global 'is_vowel' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqbk4j52h.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpqbk4j52h.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptvlt8hp_.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptvlt8hp_.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmptvlt8hp_.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal new_text\
    \ = ''\n\tfor i = 1, #text do\n\t\tlocal char = text:sub(i, i)\n\t\tif not table.contains(vowels,\
    \ char) then\n\t\t\tnew_text = new_text .. char\n\t\tend\n\tend\n\treturn new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0jh6huha.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0jh6huha.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp0jh6huha.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        local is_vowel = false\n        for _, vowel in ipairs(vowels) do\n \
    \           if char == vowel then\n                is_vowel = true\n         \
    \       break\n            end\n        end\n        if not is_vowel then\n  \
    \          new_text = new_text .. char\n        end\n    end\n    return new_text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk3tdd1l_.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpk3tdd1l_.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpk3tdd1l_.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return string.gsub(text, '[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxv97mhth.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmpxv97mhth.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk2lc0o8e.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpk2lc0o8e.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpk2lc0o8e.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not contains(vowels, char) then\n            result = result .. char\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp91soslnb.lua:17:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp91soslnb.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp91soslnb.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6zziavae.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6zziavae.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp6zziavae.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa8stvbj7.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa8stvbj7.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpa8stvbj7.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpijs89c97.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpijs89c97.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpijs89c97.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptzl1rvq_.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptzl1rvq_.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmptzl1rvq_.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        if not contains(vowels, text:sub(i,\
    \ i)) then\n            new_text = new_text .. text:sub(i, i)\n        end\n \
    \   end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_vowels\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppoio_vnf.lua:16:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppoio_vnf.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmppoio_vnf.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local c = text:sub(i, i)\n \
    \       if not table.contains(vowels, c) then\n            new_text = new_text\
    \ .. c\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpukond0l5.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpukond0l5.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpukond0l5.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt_p0wpo1.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt_p0wpo1.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpt_p0wpo1.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7eg693im.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7eg693im.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp7eg693im.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb39kfzks.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmpb39kfzks.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplkibinw3.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplkibinw3.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmplkibinw3.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprc6dt237.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmprc6dt237.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not vowels[char] then\n            new_text = new_text .. char\n \
    \       end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnf6nat0q.lua:28:\
    \ expected: \\n\"bcdf\\nghjklm\"\\nactual: \\n\"abcdef\\nghijklm\"\\nstack traceback:\\\
    n\\t/tmp/tmpnf6nat0q.lua:28: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            new_text = new_text\
    \ .. char\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqrj2_g6_.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqrj2_g6_.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpqrj2_g6_.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ new_text = ''\n    for i = 1, #text do\n        local letter = text:sub(i, i)\n\
    \        if not table.contains(vowels, letter) then\n            new_text = new_text\
    \ .. letter\n        end\n    end\n    return new_text\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz8cvqjvb.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpz8cvqjvb.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpz8cvqjvb.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = 'aeiouAEIOU'\n    local result = ''\n    for i = 1, #text\
    \ do\n        local char = text:sub(i, i)\n        if not vowels:find(char) then\n\
    \            result = result .. char\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_vowels\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('abcdef\\\
    nghijklm'), 'bcdf\\nghjklm')\n    lu.assertEquals(candidate('fedcba'), 'fdcb')\n\
    \    lu.assertEquals(candidate('eeeee'), '')\n    lu.assertEquals(candidate('acBAA'),\
    \ 'cB')\n    lu.assertEquals(candidate('EcBOO'), 'cB')\n    lu.assertEquals(candidate('ybcd'),\
    \ 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiou]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_00_dde_.lua:23:\
    \ expected: \"cB\"\\nactual: \"cBAA\"\\nstack traceback:\\n\\t/tmp/tmp_00_dde_.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not contains(vowels, char) then\n            result = result .. char\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpiru04a0f.lua:17:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpiru04a0f.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpiru04a0f.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqg5u6xjx.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqg5u6xjx.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpqg5u6xjx.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ result = ''\n    for i = 1, #text do\n        local char = text:sub(i, i)\n\
    \        if not table.contains(vowels, char) then\n            result = result\
    \ .. char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcd0md3go.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcd0md3go.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpcd0md3go.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \    return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- remove_vowels is a function that takes string and returns string without\
    \ vowels.\n-- >>> remove_vowels('')\n-- ''\n-- >>> remove_vowels('abcdef')\n--\
    \ 'bcdf'\n-- >>> remove_vowels('aaaaa')\n-- ''\n-- >>> remove_vowels('aaBAA')\n\
    -- 'B'\n-- >>> remove_vowels('zbcd')\n-- 'zbcd'\nlocal function remove_vowels(text)\n\
    \  return text:gsub('[aeiouAEIOU]', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_vowels\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('abcdef\\nghijklm'), 'bcdf\\nghjklm')\n \
    \   lu.assertEquals(candidate('fedcba'), 'fdcb')\n    lu.assertEquals(candidate('eeeee'),\
    \ '')\n    lu.assertEquals(candidate('acBAA'), 'cB')\n    lu.assertEquals(candidate('EcBOO'),\
    \ 'cB')\n    lu.assertEquals(candidate('ybcd'), 'ybcd')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
