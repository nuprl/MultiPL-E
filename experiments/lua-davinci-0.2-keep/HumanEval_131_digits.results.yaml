name: HumanEval_131_digits
language: lua
results:
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnq2nd9hx.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnq2nd9hx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxlrbdfq_.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxlrbdfq_.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf5pboxxd.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf5pboxxd.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local r = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       r = r * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpman8rr7i.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpman8rr7i.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            res = res * digit\n       \
    \ end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_h24p34n.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_h24p34n.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphlscoltd.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphlscoltd.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpumgwy2m6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpumgwy2m6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp12esklo.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp12esklo.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu_8997oi.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu_8997oi.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp27463j7v.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp27463j7v.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbx6_wmqv.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbx6_wmqv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy6h55hu9.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpy6h55hu9.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3z_jbkn9.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3z_jbkn9.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx9hs0qvt.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpx9hs0qvt.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqafc9cxn.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqafc9cxn.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpen7lusvo.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpen7lusvo.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpthkb4hfr.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpthkb4hfr.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps67s40wg.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps67s40wg.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv43nan6v.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpv43nan6v.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  for\
    \ c in tostring(n):gmatch(\"%d\") do\n    c = tonumber(c)\n    if c % 2 == 1 then\n\
    \      r = r * c\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp78_jmho2.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp78_jmho2.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      result\
    \ = result * d\n    end\n    n = math.floor(n / 10)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcfsoli3u.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpcfsoli3u.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn6l3efju.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpn6l3efju.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5dy_qja1.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5dy_qja1.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4y7pmm80.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4y7pmm80.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpthhj_4hl.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpthhj_4hl.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp740xb4w5.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp740xb4w5.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwzjbolmf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwzjbolmf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc47khv9x.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc47khv9x.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local s = tostring(n)\n\
    \  local r = 1\n  for i = 1, #s do\n    local d = tonumber(s:sub(i, i))\n    if\
    \ d % 2 == 1 then\n      r = r * d\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsxk31gph.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsxk31gph.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp48rv_ite.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp48rv_ite.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyxl6_72t.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyxl6_72t.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcrarzkfy.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpcrarzkfy.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt2at95qw.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt2at95qw.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnjxjtb37.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnjxjtb37.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      sum = sum * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy94hobxv.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpy94hobxv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_c163ikh.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_c163ikh.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwvhh2eie.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwvhh2eie.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphr6jn6r8.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphr6jn6r8.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 ~= 0 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplo7fith_.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmplo7fith_.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppzm4mtde.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppzm4mtde.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpld488kbt.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpld488kbt.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpevs2gbba.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpevs2gbba.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb7vv5_05.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpb7vv5_05.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi838kbib.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpi838kbib.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfxsol9o6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfxsol9o6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa7fzuzld.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa7fzuzld.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphvolv6tt.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphvolv6tt.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9kypvyfh.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9kypvyfh.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph5z9cggd.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmph5z9cggd.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvxyavdth.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvxyavdth.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsle2jixt.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsle2jixt.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeegm9rh7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpeegm9rh7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7o3_typz.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7o3_typz.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmslij9e8.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmslij9e8.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2o4wcln8.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2o4wcln8.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf9vrpjsr.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf9vrpjsr.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5cu_ox23.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5cu_ox23.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpctqi8g3n.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpctqi8g3n.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmtl2vlvi.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmtl2vlvi.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local ret = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      ret =\
    \ ret * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz9f_62b9.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz9f_62b9.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4rh_u1pz.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4rh_u1pz.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz0b05tk5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz0b05tk5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpolwx__q_.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpolwx__q_.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkshkpnvq.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkshkpnvq.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpub2mgi3f.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpub2mgi3f.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2t_88_t8.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2t_88_t8.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp353ioyqd.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp353ioyqd.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_k6rd9qa.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_k6rd9qa.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmibm8c4p.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmibm8c4p.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2yzlzpx9.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2yzlzpx9.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvtglqqt3.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvtglqqt3.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprjful5k1.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprjful5k1.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnti8pzfu.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnti8pzfu.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkz8_dl9_.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkz8_dl9_.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp10edjz7g.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp10edjz7g.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj4nb1pln.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj4nb1pln.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe2lbwf2y.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpe2lbwf2y.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz29ioyg5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz29ioyg5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfjxx6ilp.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfjxx6ilp.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk8hheczu.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpk8hheczu.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpssl5tg7k.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpssl5tg7k.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwvozp1s3.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwvozp1s3.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local prod = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            prod = prod * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2w9kpkqh.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2w9kpkqh.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = (n - d) / 10\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5wlhmd3v.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5wlhmd3v.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvk3ts80r.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvk3ts80r.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnolhhfw7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnolhhfw7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpduilakmz.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpduilakmz.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local s = tostring(n)\n\
    \  local p = 1\n  for i = 1, #s do\n    local d = tonumber(s:sub(i, i))\n    if\
    \ d % 2 == 1 then\n      p = p * d\n    end\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqh5yrlh2.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqh5yrlh2.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1s1d8grg.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1s1d8grg.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt2oarc0r.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt2oarc0r.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf2t3l1m2.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf2t3l1m2.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1vn766_v.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1vn766_v.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa4eemh01.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa4eemh01.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphx9fqrll.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphx9fqrll.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_qx7hmy7.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_qx7hmy7.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf7rqyukv.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf7rqyukv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ki0i7ah.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7ki0i7ah.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphyd97abt.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphyd97abt.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1zh6u9o.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj1zh6u9o.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      sum = sum * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6mrmppd7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6mrmppd7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoqg8szgj.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpoqg8szgj.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbnoz4x_7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbnoz4x_7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppyzlt6ie.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppyzlt6ie.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_o_w4wdk.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_o_w4wdk.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfnvjjzt6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfnvjjzt6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc75be2qx.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc75be2qx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1a3kn0oo.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1a3kn0oo.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_4h50vxx.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_4h50vxx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbkipz9ib.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbkipz9ib.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            res = res * digit\n       \
    \ end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfvxfvape.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfvxfvape.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm1nfsgcp.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm1nfsgcp.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7lrrhhdy.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7lrrhhdy.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6t4zgv6g.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6t4zgv6g.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpazb8hbmg.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpazb8hbmg.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmhr0cp0x.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmhr0cp0x.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw5_arisd.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw5_arisd.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7hkasav6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7hkasav6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpripdwk5d.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpripdwk5d.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqr9yr8fj.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqr9yr8fj.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy9d59oxh.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpy9d59oxh.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkp91qhyu.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpkp91qhyu.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            res = res * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpal1mewc5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpal1mewc5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptg2t7_8f.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptg2t7_8f.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj7dfdnnk.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj7dfdnnk.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaz33xu32.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpaz33xu32.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2sb9de3m.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2sb9de3m.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2h5mxcm0.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2h5mxcm0.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_edcptim.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_edcptim.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpguj2vbd1.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpguj2vbd1.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            result = result * digit\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpup0wzzzv.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpup0wzzzv.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmponl2bizc.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmponl2bizc.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0sv9rvr8.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0sv9rvr8.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_2yx6q83.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_2yx6q83.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptq1ukz9g.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptq1ukz9g.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptazsk40s.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptazsk40s.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wxfn0vb.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8wxfn0vb.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local res = 1\n \
    \   while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n   \
    \         res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9vokh4tl.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9vokh4tl.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxxtkfgnq.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxxtkfgnq.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa_yrnxnz.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa_yrnxnz.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz07kai8o.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz07kai8o.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjjsyqxcq.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjjsyqxcq.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp55a_5zw4.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp55a_5zw4.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu1e03rps.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu1e03rps.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  for i = 1, #tostring(n) do\n    local digit = tonumber(tostring(n):sub(i, i))\n\
    \    if digit % 2 ~= 0 then\n      result = result * digit\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj133kq_n.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj133kq_n.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpklxvzf7k.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpklxvzf7k.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp0fs3jrj.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpp0fs3jrj.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpabcq3l0c.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpabcq3l0c.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmmq1thv_.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmmq1thv_.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptf93x29j.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptf93x29j.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprj3dpgzy.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprj3dpgzy.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvcx_ee4t.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvcx_ee4t.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4uv2169m.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4uv2169m.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ih5xilu.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0ih5xilu.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local p = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      p = p * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp244z8y9n.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp244z8y9n.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqajlqrqn.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqajlqrqn.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpve5gvxw5.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpve5gvxw5.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjue7bgn3.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjue7bgn3.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl5o6a5jo.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpl5o6a5jo.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp44xnl791.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp44xnl791.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ijncxa8.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3ijncxa8.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    for i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i,\
    \ i))\n        if digit % 2 ~= 0 then\n            result = result * digit\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi44ujbb2.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpi44ujbb2.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyfx0twfb.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyfx0twfb.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldr1ael0.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpldr1ael0.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3et3lpxr.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3et3lpxr.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpitfw_cew.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpitfw_cew.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo4kasgl8.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpo4kasgl8.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt9lmbi2i.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt9lmbi2i.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7lh5scyc.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7lh5scyc.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpamtw3rcq.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpamtw3rcq.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1_k2qbt6.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1_k2qbt6.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local product = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            product = product * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj4u_ha9_.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj4u_ha9_.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzcax276o.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzcax276o.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      res =\
    \ res * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_fu5m3r0.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_fu5m3r0.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwf74e_vs.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwf74e_vs.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_6_qkq7c.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_6_qkq7c.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu2n5bk1z.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu2n5bk1z.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpngof2mz7.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpngof2mz7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg6nx3q7y.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpg6nx3q7y.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1afvvx9d.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1afvvx9d.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbayvlx1w.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbayvlx1w.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuc_8bc93.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuc_8bc93.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc3chdjlo.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc3chdjlo.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmplp2s00.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmplp2s00.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local sum = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbdp03qte.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbdp03qte.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr21vpjnf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpr21vpjnf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzbuzxrdf.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzbuzxrdf.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcht4ziyh.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpcht4ziyh.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpova96eet.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpova96eet.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local r = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 ~= 0 then\n      r = r * d\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8cnxgx6x.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8cnxgx6x.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqaf7cdyk.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqaf7cdyk.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd26h5wcp.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpd26h5wcp.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxwoq4j7a.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxwoq4j7a.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local prod = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod *\
    \ d\n    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeqqg6769.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpeqqg6769.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt9rnd7fh.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt9rnd7fh.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpljih1nrc.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpljih1nrc.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu2w_w64e.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu2w_w64e.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  product = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb7by7wgb.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpb7by7wgb.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n    local result = 1\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            result = result * digit\n        end\n        n = math.floor(n /\
    \ 10)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprwsrs3ic.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprwsrs3ic.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local res = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3wggnscg.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3wggnscg.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local result = 1\n\
    \  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n    \
    \  result = result * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ly6ygsx.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5ly6ygsx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
