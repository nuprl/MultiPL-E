name: HumanEval_98_count_upper
language: lua
results:
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwg57iim0.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwg57iim0.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpud5bpwye.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpud5bpwye.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_aema175.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_aema175.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and is_upper(s:sub(i,\
    \ i)) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpl71ao67l.lua:9:\
    \ attempt to call global 'is_upper' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpl71ao67l.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpl71ao67l.lua:19: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwypl2691.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwypl2691.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc3ltlhcn.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpc3ltlhcn.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi1dwll95.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi1dwll95.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8o_3zkjk.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8o_3zkjk.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbjpmw6z6.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbjpmw6z6.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvtadq7xx.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpvtadq7xx.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0reuakmp.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0reuakmp.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjd1uowvp.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpjd1uowvp.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv0vrmv6s.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpv0vrmv6s.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppjm6tx40.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmppjm6tx40.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj03indbl.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpj03indbl.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphnaufgxc.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmphnaufgxc.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5vtlfhx6.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5vtlfhx6.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9sq6dj39.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9sq6dj39.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw3zzzvbu.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpw3zzzvbu.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6gse56pt.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6gse56pt.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxj9j5wda.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpxj9j5wda.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if c:match('[AEIOU]') and i % 2 == 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6gks5gjg.lua:20:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6gks5gjg.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe3qcmv3o.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpe3qcmv3o.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpojtbww5l.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpojtbww5l.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbgzgzq8m.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbgzgzq8m.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv7kfpb1s.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpv7kfpb1s.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzprwjx02.lua:13:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzprwjx02.lua:13: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfofpu4nq.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfofpu4nq.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppqqy6n7b.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmppqqy6n7b.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpetntbikt.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpetntbikt.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps4umdcxs.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmps4umdcxs.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp28kn4qap.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp28kn4qap.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2ibs832x.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2ibs832x.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdf7ra0o0.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdf7ra0o0.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp2o4mod1.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpp2o4mod1.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuhzi6mr5.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpuhzi6mr5.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzpe78for.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzpe78for.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq3fmjim3.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpq3fmjim3.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp51qut7_k.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp51qut7_k.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph717h326.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmph717h326.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx64z_eqq.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpx64z_eqq.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldtz7b7j.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpldtz7b7j.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq4jrjpeh.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpq4jrjpeh.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzatprwop.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzatprwop.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv1mxy27_.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpv1mxy27_.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if i % 2 == 0 and c:match('[AEIOU]') then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbz1rxgr0.lua:20:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbz1rxgr0.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpztcuc5j6.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpztcuc5j6.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe289_0gd.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpe289_0gd.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqckrrqt4.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqckrrqt4.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi2pq1tnj.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi2pq1tnj.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk0645p0g.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk0645p0g.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2dove6s.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpj2dove6s.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ivqhfqh.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8ivqhfqh.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3a5xlnns.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3a5xlnns.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2ni2i5qk.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2ni2i5qk.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpodcijc7h.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpodcijc7h.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpahxef9pn.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpahxef9pn.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa66h9snz.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpa66h9snz.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2iey7y2i.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2iey7y2i.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5t4flmz0.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5t4flmz0.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphsark2kn.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmphsark2kn.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp95wjaoss.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp95wjaoss.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpob9s9trd.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpob9s9trd.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0r8y9xm0.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0r8y9xm0.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy9a3wgay.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpy9a3wgay.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprpx91y2o.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmprpx91y2o.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp25uyo1o.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpp25uyo1o.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfiirvfu9.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfiirvfu9.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfnczop6b.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfnczop6b.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpygrbi4ql.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpygrbi4ql.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ohdbngw.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3ohdbngw.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmploomggin.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmploomggin.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu1c2b4xv.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpu1c2b4xv.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_3osyfig.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_3osyfig.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxdc5mdx0.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpxdc5mdx0.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps0k5zv1b.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmps0k5zv1b.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppx4kd134.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmppx4kd134.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqbsy3fi1.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqbsy3fi1.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl2yg59gu.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpl2yg59gu.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5wve8_xx.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5wve8_xx.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp00yc36c6.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp00yc36c6.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8n1zo1pu.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8n1zo1pu.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphzyrn2lt.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmphzyrn2lt.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi0_gdsb9.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi0_gdsb9.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5fp40rwx.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5fp40rwx.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppld5y6e1.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmppld5y6e1.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy7sq_wlk.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpy7sq_wlk.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphq9h966c.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmphq9h966c.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcvpcedj1.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcvpcedj1.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp21xlq8po.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp21xlq8po.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqeitxcas.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqeitxcas.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4daus845.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4daus845.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj3t5vka0.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpj3t5vka0.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1yqa3dax.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1yqa3dax.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpip4mbjun.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpip4mbjun.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3nyqk_3o.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3nyqk_3o.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp48c6j_kd.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp48c6j_kd.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp10dx8fr4.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp10dx8fr4.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4z9008z2.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4z9008z2.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx4t847zm.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpx4t847zm.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx6oqqzly.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpx6oqqzly.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi1_ygyqa.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi1_ygyqa.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj051qvbb.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpj051qvbb.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpza1unm4w.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpza1unm4w.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpraxcbbk3.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpraxcbbk3.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3hbu9yr7.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3hbu9yr7.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpihp_fxmj.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpihp_fxmj.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj17f9dxz.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpj17f9dxz.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnfinoym_.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnfinoym_.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjxrk1c5r.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpjxrk1c5r.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcw3rpopw.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcw3rpopw.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9zfkaqww.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9zfkaqww.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsnkw5t6e.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpsnkw5t6e.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj4soy0x2.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpj4soy0x2.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp582olvae.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp582olvae.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8xa2_dtg.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8xa2_dtg.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprwv36vdg.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmprwv36vdg.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxcaf2gql.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpxcaf2gql.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1m28_hp6.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1m28_hp6.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgktlo3m1.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpgktlo3m1.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if i % 2 == 0 and c:match('[AEIOU]') then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp14cty2r8.lua:20:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp14cty2r8.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx4s4clgj.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpx4s4clgj.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcb7hufg0.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcb7hufg0.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp81j_ror7.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp81j_ror7.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if i % 2 == 0 and c:match('[AEIOU]') then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmlszhisl.lua:20:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmlszhisl.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldwrvqut.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpldwrvqut.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl9t_7oct.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpl9t_7oct.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6xuz727a.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6xuz727a.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5k37cus6.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5k37cus6.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp66vq9x3a.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp66vq9x3a.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkfcxks2a.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkfcxks2a.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkib3zjho.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkib3zjho.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and string.match(s,\
    \ '[AEIOU]') then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
    \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6qwzdrw6.lua:19:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp6qwzdrw6.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyoxzumsc.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpyoxzumsc.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppnlpn670.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmppnlpn670.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphsrwwg61.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmphsrwwg61.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmglah7hc.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmglah7hc.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9j0ajuwl.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9j0ajuwl.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr30gvoly.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr30gvoly.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpymimzy3c.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpymimzy3c.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps4hpb771.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmps4hpb771.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwg12hq4m.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwg12hq4m.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiqir05rt.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpiqir05rt.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvf5yhi42.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpvf5yhi42.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm72obmjx.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpm72obmjx.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5v6_9emd.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5v6_9emd.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu8u6561b.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpu8u6561b.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6claw33z.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6claw33z.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpytbcazyl.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpytbcazyl.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3dned68k.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3dned68k.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfmoyuk6r.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfmoyuk6r.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph3kpcdrt.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmph3kpcdrt.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmputluoj3i.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmputluoj3i.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp69a_8wx_.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp69a_8wx_.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnxgxhbkc.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnxgxhbkc.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiu3kyjv4.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpiu3kyjv4.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp29an35e9.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp29an35e9.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjheobl8q.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpjheobl8q.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptu68hc0o.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmptu68hc0o.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_hmkivmo.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_hmkivmo.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaa5qtvut.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpaa5qtvut.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpalc4he_g.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpalc4he_g.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp27wyti29.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp27wyti29.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9uql2tyn.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9uql2tyn.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbzorgpte.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbzorgpte.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0zq98w27.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0zq98w27.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph9sz4ekf.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmph9sz4ekf.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp490ap70r.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp490ap70r.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgyvgczwp.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpgyvgczwp.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcrvqdyr3.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcrvqdyr3.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpge4hg2a4.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpge4hg2a4.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0vy9u9yv.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0vy9u9yv.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplifpo21f.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmplifpo21f.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnphrgsk_.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnphrgsk_.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp757yxnus.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp757yxnus.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpocs7gusw.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpocs7gusw.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.match(s,\
    \ \"[AEIOU]\") then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
    \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
    \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkd9xijoq.lua:19:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpkd9xijoq.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdouggds2.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdouggds2.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp35gzexox.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp35gzexox.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv80_9yb0.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpv80_9yb0.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppapf8c1n.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmppapf8c1n.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5fohme3h.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5fohme3h.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5i8plsy1.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5i8plsy1.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn6_n6d0j.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpn6_n6d0j.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ws06kdz.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1ws06kdz.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptg7blhb8.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmptg7blhb8.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8qkf1yuk.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8qkf1yuk.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbghf47qz.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbghf47qz.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo22rdz2q.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpo22rdz2q.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpluxznfak.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpluxznfak.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzt70kk1.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpvzt70kk1.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1z6la7nq.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1z6la7nq.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8z34x3jd.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8z34x3jd.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4qa7nx3r.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4qa7nx3r.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa3mw0jnw.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpa3mw0jnw.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp49cz88gd.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp49cz88gd.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpacry9i1d.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpacry9i1d.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'),\
    \ 1)\n    lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp02duumfo.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp02duumfo.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdf5kkwut.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdf5kkwut.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
    -- For example:\n-- count_upper('aBCdEf') returns 1\n-- count_upper('abcdefg')\
    \ returns 0\n-- count_upper('dBBE') returns 0\nlocal function count_upper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):match('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_upper\n    lu.assertEquals(candidate('aBCdEf'), 1)\n \
    \   lu.assertEquals(candidate('abcdefg'), 0)\n    lu.assertEquals(candidate('dBBE'),\
    \ 0)\n    lu.assertEquals(candidate('B'), 0)\n    lu.assertEquals(candidate('U'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('EEEE'),\
    \ 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzgrecr5l.lua:19:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzgrecr5l.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
