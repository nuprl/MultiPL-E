name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a list of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\n-- match_parens(['()(', ')'])\
  \ == 'Yes'\n-- match_parens([')', ')']) == 'No'\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function count_parens(s)\n    local cnt =\
    \ 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return -1\n      end\n    end\n    return cnt\n  end\n  local cnt1 = count_parens(lst[1])\n\
    \  local cnt2 = count_parens(lst[2])\n  if cnt1 < 0 or cnt2 < 0 then\n    return\
    \ 'No'\n  end\n  if cnt1 == cnt2 then\n    return 'Yes'\n  end\n  return 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for c in s:gmatch('.')\
    \ do\n      if c == '(' then\n        cnt = cnt + 1\n      else\n        cnt =\
    \ cnt - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n\
    \    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return\
    \ (is_good(s1 .. s2) or is_good(s2 .. s1)) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n       \
    \ local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    local s1,\
    \ s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function balanced(s)\n    local count = 0\n    for i\
    \ = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count + 1\n  \
    \    else\n        count = count - 1\n      end\n      if count < 0 then\n   \
    \     return false\n      end\n    end\n    return count == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return balanced(s1 .. s2) or balanced(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local s = table.concat(lst)\n  local cnt = 0\n  for\
    \ i = 1, #s do\n    if s:sub(i, i) == '(' then\n      cnt = cnt + 1\n    else\n\
    \      cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return 'No'\n    end\n\
    \  end\n  return cnt == 0 and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(str)\n    local count = 0\n    for i = 1, #str do\n      if str:sub(i,\
    \ i) == '(' then\n        count = count + 1\n      else\n        count = count\
    \ - 1\n      end\n      if count < 0 then\n        return false\n      end\n \
    \   end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and\
    \ 'Yes' or 'No'\nend", "    local function is_good(s)\n        local count = 0\n\
    \        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n          \
    \      count = count + 1\n            else\n                count = count - 1\n\
    \            end\n            if count < 0 then\n                return false\n\
    \            end\n        end\n        return count == 0\n    end\n    return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n     \
    \       if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n          \
    \  else\n                cnt = cnt - 1\n            end\n            if cnt <\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return cnt == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or\
    \ 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i = 1,\
    \ #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local s = table.concat(lst)\n\
    \    local cnt = 0\n    for i = 1, #s do\n        if s:sub(i, i) == '(' then\n\
    \            cnt = cnt + 1\n        else\n            cnt = cnt - 1\n        end\n\
    \        if cnt < 0 then\n            return 'No'\n        end\n    end\n    return\
    \ cnt == 0 and 'Yes' or 'No'\nend", "    local cnt = 0\n    for _, s in ipairs(lst)\
    \ do\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n     \
    \           cnt = cnt + 1\n            else\n                cnt = cnt - 1\n \
    \           end\n            if cnt < 0 then\n                return 'No'\n  \
    \          end\n        end\n    end\n    return cnt == 0 and 'Yes' or 'No'\n\
    end", "    local function is_good(s)\n        local cnt = 0\n        for i = 1,\
    \ #s do\n            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n\
    \            else\n                cnt = cnt - 1\n            end\n          \
    \  if cnt < 0 then\n                return false\n            end\n        end\n\
    \        return cnt == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function helper(s)\n    local count = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count + 1\n    \
    \  else\n        count = count - 1\n      end\n      if count < 0 then\n     \
    \   return false\n      end\n    end\n    return count == 0\n  end\n  local s1,\
    \ s2 = lst[1], lst[2]\n  return (helper(s1 .. s2) or helper(s2 .. s1)) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n       \
    \ local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    return (is_good(lst[1])\
    \ and is_good(lst[2])) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for c in s:gmatch('.') do\n      if c == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local count = 0\n    for i = 1, #s do\n      local c = s:sub(i,\
    \ i)\n      if c == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local\
    \ function is_good(str)\n    local stack = {}\n    for i = 1, #str do\n      local\
    \ c = str:sub(i, i)\n      if c == '(' then\n        table.insert(stack, c)\n\
    \      else\n        if #stack == 0 then\n          return false\n        end\n\
    \        table.remove(stack)\n      end\n    end\n    return #stack == 0\n  end\n\
    \  local function dfs(lst, cur)\n    if #lst == 0 then\n      return is_good(cur)\n\
    \    end\n    local a, b = lst[1], lst[2]\n    return dfs(table.slice(lst, 2),\
    \ cur .. a) or\n           dfs(table.slice(lst, 2), cur .. b)\n  end\n  return\
    \ dfs(lst, '') and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ count = 0\n    for c in s:gmatch('.') do\n      if c == '(' then\n        count\
    \ = count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local count\
    \ = 0\n    for c in s:gmatch('.') do\n      if c == '(' then\n        count =\
    \ count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "    local cnt = 0\n    for _, s in ipairs(lst)\
    \ do\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n     \
    \           cnt = cnt + 1\n            else\n                cnt = cnt - 1\n \
    \           end\n            if cnt < 0 then\n                return 'No'\n  \
    \          end\n        end\n    end\n    return cnt == 0 and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local count\
    \ = 0\n        for c in s:gmatch('.') do\n            if c == '(' then\n     \
    \           count = count + 1\n            else\n                count = count\
    \ - 1\n            end\n            if count < 0 then\n                return\
    \ false\n            end\n        end\n        return count == 0\n    end\n  \
    \  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(str)\n    local count = 0\n    for i = 1, #str do\n      if str:sub(i,\
    \ i) == '(' then\n        count = count + 1\n      else\n        count = count\
    \ - 1\n      end\n      if count < 0 then\n        return false\n      end\n \
    \   end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return\
    \ is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local count = 0\n    for c in s:gmatch('.') do\n\
    \      if c == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n\
    \        local count = 0\n        for c in s:gmatch('.') do\n            if c\
    \ == '(' then\n                count = count + 1\n            else\n         \
    \       count = count - 1\n            end\n            if count < 0 then\n  \
    \              return false\n            end\n        end\n        return count\
    \ == 0\n    end\n    return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or\
    \ 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i = 1,\
    \ #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local\
    \ function count_parens(s)\n    local cnt = 0\n    for c in s:gmatch('.') do\n\
    \      if c == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n    end\n    return cnt\n  end\n  local cnt1, cnt2 = count_parens(lst[1]),\
    \ count_parens(lst[2])\n  if cnt1 == 0 and cnt2 == 0 then\n    return 'Yes'\n\
    \  elseif cnt1 == 0 and cnt2 < 0 then\n    return 'Yes'\n  elseif cnt1 > 0 and\
    \ cnt2 == 0 then\n    return 'Yes'\n  elseif cnt1 < 0 and cnt2 == 0 then\n   \
    \ return 'Yes'\n  elseif cnt1 > 0 and cnt2 < 0 and cnt1 + cnt2 == 0 then\n   \
    \ return 'Yes'\n  elseif cnt1 < 0 and cnt2 > 0 and cnt1 + cnt2 == 0 then\n   \
    \ return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(str)\n    local count = 0\n    for c in str:gmatch('%(') do\n      count\
    \ = count + 1\n    end\n    for c in str:gmatch('%)') do\n      count = count\
    \ - 1\n    end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n    \
    \  else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n       \
    \ local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    local s1,\
    \ s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local s = table.concat(lst)\n  local cnt = 0\n  for i = 1,\
    \ #s do\n    if s:sub(i, i) == '(' then\n      cnt = cnt + 1\n    else\n     \
    \ cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return 'No'\n    end\n  end\n\
    \  return cnt == 0 and 'Yes' or 'No'\nend", "    local function is_good(s)\n \
    \       local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) ==\
    \ '(' then\n                cnt = cnt + 1\n            else\n                cnt\
    \ = cnt - 1\n            end\n            if cnt < 0 then\n                return\
    \ false\n            end\n        end\n        return cnt == 0\n    end\n    return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function check(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return check(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "    local function is_good(s)\n        local count = 0\n        for i =\
    \ 1, #s do\n            if s:sub(i, i) == '(' then\n                count = count\
    \ + 1\n            else\n                count = count - 1\n            end\n\
    \            if count < 0 then\n                return false\n            end\n\
    \        end\n        return count == 0\n    end\n    return is_good(lst[1] ..\
    \ lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  if is_good(lst[1])\
    \ and is_good(lst[2]) then\n    return 'Yes'\n  end\n  if is_good(lst[1] .. lst[2])\
    \ then\n    return 'Yes'\n  end\n  if is_good(lst[2] .. lst[1]) then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n\
    \        local count = 0\n        for c in s:gmatch('.') do\n            if c\
    \ == '(' then\n                count = count + 1\n            else\n         \
    \       count = count - 1\n            end\n            if count < 0 then\n  \
    \              return false\n            end\n        end\n        return count\
    \ == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "    local function is_good(s)\n\
    \        local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) ==\
    \ '(' then\n                cnt = cnt + 1\n            else\n                cnt\
    \ = cnt - 1\n            end\n            if cnt < 0 then\n                return\
    \ false\n            end\n        end\n        return cnt == 0\n    end\n    local\
    \ s1, s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "    local function is_good(str)\n        local count =\
    \ 0\n        for i = 1, #str do\n            if str:sub(i, i) == '(' then\n  \
    \              count = count + 1\n            else\n                count = count\
    \ - 1\n            end\n            if count < 0 then\n                return\
    \ false\n            end\n        end\n        return count == 0\n    end\n  \
    \  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local function\
    \ is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n            if\
    \ s:sub(i, i) == '(' then\n                cnt = cnt + 1\n            else\n \
    \               cnt = cnt - 1\n            end\n            if cnt < 0 then\n\
    \                return false\n            end\n        end\n        return cnt\
    \ == 0\n    end\n    if is_good(lst[1]) and is_good(lst[2]) then\n        return\
    \ 'Yes'\n    end\n    if is_good(lst[1] .. lst[2]) then\n        return 'Yes'\n\
    \    end\n    if is_good(lst[2] .. lst[1]) then\n        return 'Yes'\n    end\n\
    \    return 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n    \
    \  else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "    local function is_good(str)\n        local count =\
    \ 0\n        for i = 1, #str do\n            if str:sub(i, i) == '(' then\n  \
    \              count = count + 1\n            else\n                count = count\
    \ - 1\n            end\n            if count < 0 then\n                return\
    \ false\n            end\n        end\n        return count == 0\n    end\n  \
    \  local str1, str2 = lst[1], lst[2]\n    return is_good(str1 .. str2) or is_good(str2\
    \ .. str1) and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local\
    \ cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    local s1,\
    \ s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(str)\n    local cnt = 0\n    for i\
    \ = 1, #str do\n      if str:sub(i, i) == '(' then\n        cnt = cnt + 1\n  \
    \    else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1],\
    \ lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\n\
    end", "    local function is_good(s)\n        local cnt = 0\n        for i = 1,\
    \ #s do\n            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n\
    \            else\n                cnt = cnt - 1\n            end\n          \
    \  if cnt < 0 then\n                return false\n            end\n        end\n\
    \        return cnt == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    return\
    \ is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i)\
    \ == '(' then\n        count = count + 1\n      else\n        count = count -\
    \ 1\n      end\n      if count < 0 then\n        return false\n      end\n   \
    \ end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return\
    \ is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local s1, s2 = lst[1], lst[2]\n    local c1, c2\
    \ = 0, 0\n    for i = 1, #s1 do\n        if s1:sub(i, i) == '(' then\n       \
    \     c1 = c1 + 1\n        else\n            c1 = c1 - 1\n        end\n    end\n\
    \    for i = 1, #s2 do\n        if s2:sub(i, i) == '(' then\n            c2 =\
    \ c2 + 1\n        else\n            c2 = c2 - 1\n        end\n    end\n    if\
    \ c1 == 0 and c2 == 0 then\n        return 'Yes'\n    elseif c1 == 0 and c2 ~=\
    \ 0 then\n        return 'No'\n    elseif c1 ~= 0 and c2 == 0 then\n        return\
    \ 'No'\n    elseif c1 > 0 and c2 < 0 then\n        return 'Yes'\n    elseif c1\
    \ < 0 and c2 > 0 then\n        return 'Yes'\n    else\n        return 'No'\n \
    \   end\nend", "  local function is_good(s)\n    local count = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count + 1\n    \
    \  else\n        count = count - 1\n      end\n      if count < 0 then\n     \
    \   return false\n      end\n    end\n    return count == 0\n  end\n  local s1,\
    \ s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local count = 0\n    for i\
    \ = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count + 1\n  \
    \    else\n        count = count - 1\n      end\n      if count < 0 then\n   \
    \     return false\n      end\n    end\n    return count == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local function count_parens(s)\n    local c = 0\n  \
    \  for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        c = c + 1\n   \
    \   else\n        c = c - 1\n      end\n      if c < 0 then\n        return false\n\
    \      end\n    end\n    return c == 0\n  end\n  return count_parens(lst[1] ..\
    \ lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local function check(s)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n    \
    \  else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1],\
    \ lst[2]\n  return check(s1 .. s2) or check(s2 .. s1) and 'Yes' or 'No'\nend",
  "    local function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n\
    \            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n     \
    \       else\n                cnt = cnt - 1\n            end\n            if cnt\
    \ < 0 then\n                return false\n            end\n        end\n     \
    \   return cnt == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    return is_good(s1\
    \ .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(str)\n\
    \    local cnt = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n\
    \        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "  local function is_good(str)\n    local count\
    \ = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n        count\
    \ = count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  local str = lst[1] .. lst[2]\n  return is_good(str) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local count\
    \ = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n    \
    \            count = count + 1\n            else\n                count = count\
    \ - 1\n            end\n            if count < 0 then\n                return\
    \ false\n            end\n        end\n        return count == 0\n    end\n  \
    \  local s1, s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 ..\
    \ s1) and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local cnt\
    \ = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n    \
    \            cnt = cnt + 1\n            else\n                cnt = cnt - 1\n\
    \            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    local s1,\
    \ s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local s1, s2 = lst[1], lst[2]\n  local c1, c2 =\
    \ 0, 0\n  for i = 1, #s1 do\n    if s1:sub(i, i) == '(' then\n      c1 = c1 +\
    \ 1\n    else\n      c1 = c1 - 1\n    end\n  end\n  for i = 1, #s2 do\n    if\
    \ s2:sub(i, i) == '(' then\n      c2 = c2 + 1\n    else\n      c2 = c2 - 1\n \
    \   end\n  end\n  if c1 == 0 and c2 == 0 then\n    return 'Yes'\n  elseif c1 ==\
    \ 0 and c2 < 0 then\n    return 'Yes'\n  elseif c1 < 0 and c2 == 0 then\n    return\
    \ 'Yes'\n  elseif c1 < 0 and c2 < 0 then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local function is_good(s)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n      local c = s:sub(i, i)\n      if c == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n    \
    \  else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ count = 0\n    for c in s:gmatch('.') do\n      if c == '(' then\n        count\
    \ = count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'\nend",
  "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local n = 0\n    for i = 1,\
    \ #s do\n      if s:sub(i, i) == '(' then\n        n = n + 1\n      else\n   \
    \     n = n - 1\n      end\n      if n < 0 then\n        return false\n      end\n\
    \    end\n    return n == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local s1, s2 = lst[1], lst[2]\n    local c1, c2\
    \ = 0, 0\n    for i = 1, #s1 do\n        if s1:sub(i, i) == '(' then\n       \
    \     c1 = c1 + 1\n        else\n            c1 = c1 - 1\n        end\n    end\n\
    \    for i = 1, #s2 do\n        if s2:sub(i, i) == '(' then\n            c2 =\
    \ c2 + 1\n        else\n            c2 = c2 - 1\n        end\n    end\n    if\
    \ c1 == 0 and c2 == 0 then\n        return 'Yes'\n    elseif c1 > 0 and c2 < 0\
    \ and c1 + c2 == 0 then\n        return 'Yes'\n    elseif c1 < 0 and c2 > 0 and\
    \ c1 + c2 == 0 then\n        return 'Yes'\n    else\n        return 'No'\n   \
    \ end\nend", "    local function count_parens(s)\n        local cnt = 0\n    \
    \    for i = 1, #s do\n            if s:sub(i, i) == '(' then\n              \
    \  cnt = cnt + 1\n            else\n                cnt = cnt - 1\n          \
    \  end\n        end\n        return cnt\n    end\n    local s1, s2 = lst[1], lst[2]\n\
    \    local cnt1, cnt2 = count_parens(s1), count_parens(s2)\n    if cnt1 == 0 and\
    \ cnt2 == 0 then\n        return 'Yes'\n    elseif cnt1 == 0 and cnt2 ~= 0 then\n\
    \        return 'No'\n    elseif cnt1 ~= 0 and cnt2 == 0 then\n        return\
    \ 'No'\n    elseif cnt1 > 0 and cnt2 > 0 then\n        return 'No'\n    elseif\
    \ cnt1 < 0 and cnt2 < 0 then\n        return 'No'\n    else\n        return 'Yes'\n\
    \    end\nend", "    local function is_good(s)\n        local count = 0\n    \
    \    for c in s:gmatch('.') do\n            if c == '(' then\n               \
    \ count = count + 1\n            else\n                count = count - 1\n   \
    \         end\n            if count < 0 then\n                return false\n \
    \           end\n        end\n        return count == 0\n    end\n    return (is_good(lst[1])\
    \ and is_good(lst[2])) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ s1, s2 = lst[1], lst[2]\n    local c1, c2 = 0, 0\n    for i = 1, #s1 do\n  \
    \      if s1:sub(i, i) == '(' then\n            c1 = c1 + 1\n        else\n  \
    \          c1 = c1 - 1\n        end\n    end\n    for i = 1, #s2 do\n        if\
    \ s2:sub(i, i) == '(' then\n            c2 = c2 + 1\n        else\n          \
    \  c2 = c2 - 1\n        end\n    end\n    if c1 == 0 and c2 == 0 then\n      \
    \  return 'Yes'\n    elseif c1 == 0 and c2 < 0 then\n        return 'Yes'\n  \
    \  elseif c1 < 0 and c2 == 0 then\n        return 'Yes'\n    elseif c1 < 0 and\
    \ c2 < 0 then\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  local s1, s2\
    \ = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "    local function is_good(str)\n        local cnt = 0\n   \
    \     for i = 1, #str do\n            if str:sub(i, i) == '(' then\n         \
    \       cnt = cnt + 1\n            else\n                cnt = cnt - 1\n     \
    \       end\n            if cnt < 0 then\n                return false\n     \
    \       end\n        end\n        return cnt == 0\n    end\n    local s1, s2 =\
    \ lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local count = 0\n    for i\
    \ = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count + 1\n  \
    \    else\n        count = count - 1\n      end\n      if count < 0 then\n   \
    \     return false\n      end\n    end\n    return count == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "    local function count_parens(s)\n        local count\
    \ = 0\n        for c in s:gmatch('.') do\n            if c == '(' then\n     \
    \           count = count + 1\n            else\n                count = count\
    \ - 1\n            end\n        end\n        return count\n    end\n    local\
    \ count1 = count_parens(lst[1])\n    local count2 = count_parens(lst[2])\n   \
    \ if count1 == 0 and count2 == 0 then\n        return 'Yes'\n    elseif count1\
    \ == 0 or count2 == 0 then\n        return 'No'\n    elseif count1 == count2 then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "  local\
    \ function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local\
    \ function is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        count = count + 1\n      else\n        count = count\
    \ - 1\n      end\n      if count < 0 then\n        return false\n      end\n \
    \   end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return\
    \ is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i)\
    \ == '(' then\n        count = count + 1\n      else\n        count = count -\
    \ 1\n      end\n      if count < 0 then\n        return false\n      end\n   \
    \ end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return\
    \ is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  \
    \  local function balance(s)\n        local cnt = 0\n        for i = 1, #s do\n\
    \            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n     \
    \       else\n                cnt = cnt - 1\n            end\n            if cnt\
    \ < 0 then\n                return false\n            end\n        end\n     \
    \   return cnt == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    return balance(s1\
    \ .. s2) or balance(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'\nend",
  "  local function is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local\
    \ function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "    local function is_good(s)\n        local cnt = 0\n        for i = 1,\
    \ #s do\n            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n\
    \            else\n                cnt = cnt - 1\n            end\n          \
    \  if cnt < 0 then\n                return false\n            end\n        end\n\
    \        return cnt == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "    local function is_good(s)\n        local cnt = 0\n     \
    \   for i = 1, #s do\n            if s:sub(i, i) == '(' then\n               \
    \ cnt = cnt + 1\n            else\n                cnt = cnt - 1\n           \
    \ end\n            if cnt < 0 then\n                return false\n           \
    \ end\n        end\n        return cnt == 0\n    end\n    return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n       \
    \ local count = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '('\
    \ then\n                count = count + 1\n            else\n                count\
    \ = count - 1\n            end\n            if count < 0 then\n              \
    \  return false\n            end\n        end\n        return count == 0\n   \
    \ end\n    local s1, s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "  local function _match_parens(lst, acc)\n\
    \    if #lst == 0 then\n      return acc == 0 and 'Yes' or 'No'\n    end\n   \
    \ local s = lst[1]\n    local n = #s\n    for i = 1, n do\n      local c = s:sub(i,\
    \ i)\n      if c == '(' then\n        acc = acc + 1\n      else\n        acc =\
    \ acc - 1\n      end\n      if acc < 0 then\n        return 'No'\n      end\n\
    \    end\n    return _match_parens({table.unpack(lst, 2)}, acc)\n  end\n  return\
    \ _match_parens(lst, 0)\nend", "    local function is_good(s)\n        local cnt\
    \ = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n    \
    \            cnt = cnt + 1\n            else\n                cnt = cnt - 1\n\
    \            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    local s1,\
    \ s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "    local s = table.concat(lst)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n        if s:sub(i, i) == '(' then\n            cnt = cnt + 1\n\
    \        else\n            cnt = cnt - 1\n        end\n        if cnt < 0 then\n\
    \            return 'No'\n        end\n    end\n    return cnt == 0 and 'Yes'\
    \ or 'No'\nend", "  local function check(s)\n    local cnt = 0\n    for i = 1,\
    \ #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return (check(lst[1]) and check(lst[2]))\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local count = 0\n\
    \    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count\
    \ + 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n    \
    \  else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n       \
    \ local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    local s1,\
    \ s2 = lst[1], lst[2]\n    if is_good(s1) then\n        return 'Yes'\n    end\n\
    \    if is_good(s2) then\n        return 'Yes'\n    end\n    if is_good(s1 ..\
    \ s2) then\n        return 'Yes'\n    end\n    if is_good(s2 .. s1) then\n   \
    \     return 'Yes'\n    end\n    return 'No'\nend", "  local function is_good(str)\n\
    \    local count = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n     \
    \       if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n          \
    \  else\n                cnt = cnt - 1\n            end\n            if cnt <\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return cnt == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    return is_good(s1\
    \ .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "    local function is_good(s)\n\
    \        local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) ==\
    \ '(' then\n                cnt = cnt + 1\n            else\n                cnt\
    \ = cnt - 1\n            end\n            if cnt < 0 then\n                return\
    \ false\n            end\n        end\n        return cnt == 0\n    end\n    local\
    \ s1, s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "    local function is_good(s)\n        local cnt = 0\n\
    \        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n          \
    \      cnt = cnt + 1\n            else\n                cnt = cnt - 1\n      \
    \      end\n            if cnt < 0 then\n                return false\n      \
    \      end\n        end\n        return cnt == 0\n    end\n    local s1, s2 =\
    \ lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local count = 0\n    for i\
    \ = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count + 1\n  \
    \    else\n        count = count - 1\n      end\n      if count < 0 then\n   \
    \     return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local count = 0\n    for c in s:gmatch('.') do\n\
    \      if c == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local s = table.concat(lst)\n    local c = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) == '(' then\n            c = c +\
    \ 1\n        else\n            c = c - 1\n        end\n        if c < 0 then\n\
    \            return 'No'\n        end\n    end\n    return c == 0 and 'Yes' or\
    \ 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i = 1,\
    \ #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local cnt =\
    \ 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n      \
    \          cnt = cnt + 1\n            else\n                cnt = cnt - 1\n  \
    \          end\n            if cnt < 0 then\n                return false\n  \
    \          end\n        end\n        return cnt == 0\n    end\n    local s1, s2\
    \ = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local cnt =\
    \ 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n      \
    \          cnt = cnt + 1\n            else\n                cnt = cnt - 1\n  \
    \          end\n            if cnt < 0 then\n                return false\n  \
    \          end\n        end\n        return cnt == 0\n    end\n    local s1, s2\
    \ = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function check_parens(str)\n    local count = 0\n  \
    \  for i = 1, #str do\n      if str:sub(i, i) == '(' then\n        count = count\
    \ + 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return check_parens(s1 .. s2) or check_parens(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local\
    \ cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    local s1,\
    \ s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(str)\n\
    \    local count = 0\n    for i = 1, #str do\n      local c = str:sub(i, i)\n\
    \      if c == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local\
    \ function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for c in s:gmatch('.')\
    \ do\n      if c == '(' then\n        cnt = cnt + 1\n      else\n        cnt =\
    \ cnt - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n\
    \    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return\
    \ is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "    local s\
    \ = table.concat(lst)\n    local cnt = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c == '(' then\n            cnt = cnt + 1\n     \
    \   else\n            cnt = cnt - 1\n        end\n        if cnt < 0 then\n  \
    \          return 'No'\n        end\n    end\n    return cnt == 0 and 'Yes' or\
    \ 'No'\nend", "    local function is_good(s)\n        local count = 0\n      \
    \  for c in s:gmatch('.') do\n            if c == '(' then\n                count\
    \ = count + 1\n            else\n                count = count - 1\n         \
    \   end\n            if count < 0 then\n                return false\n       \
    \     end\n        end\n        return count == 0\n    end\n    local s1, s2 =\
    \ lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local open = 0\n    local close = 0\n    for _,\
    \ v in ipairs(lst) do\n        for _, c in ipairs(v:split()) do\n            if\
    \ c == '(' then\n                open = open + 1\n            else\n         \
    \       close = close + 1\n            end\n        end\n    end\n    if open\
    \ == close then\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end", "  local function is_good(s)\n    local count = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        count = count + 1\n      else\n   \
    \     count = count - 1\n      end\n      if count < 0 then\n        return false\n\
    \      end\n    end\n    return count == 0\n  end\n  return is_good(lst[1] ..\
    \ lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for c in s:gmatch('.') do\n      if c == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend",
  "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1\
    \ .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i)\
    \ == '(' then\n        count = count + 1\n      else\n        count = count -\
    \ 1\n      end\n      if count < 0 then\n        return false\n      end\n   \
    \ end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local count = 0\n    for i\
    \ = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count + 1\n  \
    \    else\n        count = count - 1\n      end\n      if count < 0 then\n   \
    \     return false\n      end\n    end\n    return count == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local function is_good(str)\n    local balance = 0\n\
    \    for i = 1, #str do\n      local c = str:sub(i, i)\n      if c == '(' then\n\
    \        balance = balance + 1\n      else\n        balance = balance - 1\n  \
    \    end\n      if balance < 0 then\n        return false\n      end\n    end\n\
    \    return balance == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1\
    \ .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for c in s:gmatch('.') do\n      if c == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend",
  "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "    local left, right = 0, 0\n    for _, s in ipairs(lst) do\n\
    \        for c in s:gmatch('.') do\n            if c == '(' then\n           \
    \     left = left + 1\n            else\n                right = right + 1\n \
    \           end\n        end\n    end\n    return left == right and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n       \
    \ local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    local s1,\
    \ s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(str)\n    local count = 0\n    for\
    \ i = 1, #str do\n      if str:sub(i, i) == '(' then\n        count = count +\
    \ 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  local\
    \ str1, str2 = lst[1], lst[2]\n  return is_good(str1 .. str2) or is_good(str2\
    \ .. str1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local count\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count =\
    \ count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "    local function count_parens(s)\n      \
    \  local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '('\
    \ then\n                cnt = cnt + 1\n            else\n                cnt =\
    \ cnt - 1\n            end\n        end\n        return cnt\n    end\n    local\
    \ cnt1, cnt2 = count_parens(lst[1]), count_parens(lst[2])\n    if cnt1 == 0 and\
    \ cnt2 == 0 then\n        return 'Yes'\n    elseif cnt1 == 0 and cnt2 > 0 then\n\
    \        return 'No'\n    elseif cnt1 > 0 and cnt2 == 0 then\n        return 'No'\n\
    \    elseif cnt1 > 0 and cnt2 > 0 then\n        return 'Yes'\n    elseif cnt1\
    \ < 0 and cnt2 < 0 then\n        return 'Yes'\n    elseif cnt1 < 0 and cnt2 >\
    \ 0 then\n        return 'No'\n    elseif cnt1 > 0 and cnt2 < 0 then\n       \
    \ return 'No'\n    end\nend", "  local function is_good(s)\n    local cnt = 0\n\
    \    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n       \
    \ local count = 0\n        for c in s:gmatch('.') do\n            if c == '('\
    \ then\n                count = count + 1\n            else\n                count\
    \ = count - 1\n            end\n            if count < 0 then\n              \
    \  return false\n            end\n        end\n        return count == 0\n   \
    \ end\n    local s1, s2 = lst[1], lst[2]\n    return (is_good(s1 .. s2) or is_good(s2\
    \ .. s1)) and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local\
    \ count = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                count = count + 1\n            else\n                count =\
    \ count - 1\n            end\n            if count < 0 then\n                return\
    \ false\n            end\n        end\n        return count == 0\n    end\n  \
    \  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local balance = 0\n    for i = 1, #s do\n   \
    \   if s:sub(i, i) == '(' then\n        balance = balance + 1\n      else\n  \
    \      balance = balance - 1\n      end\n      if balance < 0 then\n        return\
    \ false\n      end\n    end\n    return balance == 0\n  end\n  local s1, s2 =\
    \ lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or\
    \ 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i = 1,\
    \ #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \   local s1, s2 = lst[1], lst[2]\n    local c1, c2 = 0, 0\n    for i = 1, #s1\
    \ do\n        if s1:sub(i, i) == '(' then\n            c1 = c1 + 1\n        else\n\
    \            c1 = c1 - 1\n        end\n    end\n    for i = 1, #s2 do\n      \
    \  if s2:sub(i, i) == '(' then\n            c2 = c2 + 1\n        else\n      \
    \      c2 = c2 - 1\n        end\n    end\n    if c1 == 0 and c2 == 0 then\n  \
    \      return 'Yes'\n    elseif c1 == 0 and c2 < 0 then\n        return 'Yes'\n\
    \    elseif c1 < 0 and c2 == 0 then\n        return 'Yes'\n    elseif c1 < 0 and\
    \ c2 < 0 then\n        return 'Yes'\n    else\n        return 'No'\n    end\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function helper(s)\n\
    \    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  return helper(lst[1] .. lst[2]) and 'Yes' or 'No'\nend",
  "    local function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n\
    \            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n     \
    \       else\n                cnt = cnt - 1\n            end\n            if cnt\
    \ < 0 then\n                return false\n            end\n        end\n     \
    \   return cnt == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    return is_good(s1\
    \ .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "    local open, close\
    \ = 0, 0\n    for i = 1, #lst[1] do\n        if lst[1]:sub(i, i) == '(' then\n\
    \            open = open + 1\n        else\n            close = close + 1\n  \
    \      end\n    end\n    for i = 1, #lst[2] do\n        if lst[2]:sub(i, i) ==\
    \ '(' then\n            open = open + 1\n        else\n            close = close\
    \ + 1\n        end\n    end\n    if open == close then\n        return 'Yes'\n\
    \    else\n        return 'No'\n    end\nend", "    local function is_good(s)\n\
    \        local count = 0\n        for i = 1, #s do\n            if s:sub(i, i)\
    \ == '(' then\n                count = count + 1\n            else\n         \
    \       count = count - 1\n            end\n            if count < 0 then\n  \
    \              return false\n            end\n        end\n        return count\
    \ == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend",
  "  local function is_good(str)\n    local cnt = 0\n    for i = 1, #str do\n    \
    \  if str:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt\
    \ = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n\
    \    end\n    return cnt == 0\n  end\n  local function concat(str1, str2)\n  \
    \  if is_good(str1 .. str2) then\n      return 'Yes'\n    elseif is_good(str2\
    \ .. str1) then\n      return 'Yes'\n    else\n      return 'No'\n    end\n  end\n\
    \  return concat(lst[1], lst[2])\nend", "    local function is_good(s)\n     \
    \   local count = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '('\
    \ then\n                count = count + 1\n            else\n                count\
    \ = count - 1\n            end\n            if count < 0 then\n              \
    \  return false\n            end\n        end\n        return count == 0\n   \
    \ end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local\
    \ function is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        count = count + 1\n      else\n        count = count\
    \ - 1\n      end\n      if count < 0 then\n        return false\n      end\n \
    \   end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and\
    \ 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n    \
    \  else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n     \
    \       if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n          \
    \  else\n                cnt = cnt - 1\n            end\n            if cnt <\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return cnt == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    if is_good(s1\
    \ .. s2) then\n        return 'Yes'\n    elseif is_good(s2 .. s1) then\n     \
    \   return 'Yes'\n    else\n        return 'No'\n    end\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'\n\
    end", "    local function is_good(s)\n        local count = 0\n        for i =\
    \ 1, #s do\n            if s:sub(i, i) == '(' then\n                count = count\
    \ + 1\n            else\n                count = count - 1\n            end\n\
    \            if count < 0 then\n                return false\n            end\n\
    \        end\n        return count == 0\n    end\n    return is_good(lst[1] ..\
    \ lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  if is_good(s1) and is_good(s2) then\n    return 'Yes'\n\
    \  end\n  if is_good(s1 .. s2) then\n    return 'Yes'\n  end\n  if is_good(s2\
    \ .. s1) then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local count = 0\n    for i = 1, #s do\n     \
    \ if s:sub(i, i) == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local\
    \ function is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        count = count + 1\n      else\n        count = count\
    \ - 1\n      end\n      if count < 0 then\n        return false\n      end\n \
    \   end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return\
    \ is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "    local s1,\
    \ s2 = lst[1], lst[2]\n    local c1, c2 = 0, 0\n    for i = 1, #s1 do\n      \
    \  if s1:sub(i, i) == '(' then\n            c1 = c1 + 1\n        else\n      \
    \      c1 = c1 - 1\n        end\n    end\n    for i = 1, #s2 do\n        if s2:sub(i,\
    \ i) == '(' then\n            c2 = c2 + 1\n        else\n            c2 = c2 -\
    \ 1\n        end\n    end\n    if c1 == 0 and c2 == 0 then\n        return 'Yes'\n\
    \    elseif c1 == 0 and c2 < 0 then\n        return 'Yes'\n    elseif c1 < 0 and\
    \ c2 == 0 then\n        return 'Yes'\n    elseif c1 < 0 and c2 < 0 then\n    \
    \    return 'Yes'\n    else\n        return 'No'\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
