name: HumanEval_103_rounded_avg
language: lua
results:
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  for i = n, m do\n\
    \    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n + 1))\n  return\
    \ avg == 0 and 0 or \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptrxqt25g.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmptrxqt25g.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg6yc7ht2.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpg6yc7ht2.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpg6yc7ht2.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = sum\
    \ / (m - n + 1)\n  return string.format(\"0b%s\", tostring(math.floor(avg + 0.5)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpioojgagb.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpioojgagb.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. tostring(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqxf2a3sf.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpqxf2a3sf.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9w8orhfa.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp9w8orhfa.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp9w8orhfa.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa1w5d8ef.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpa1w5d8ef.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpa1w5d8ef.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr3byxtyg.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpr3byxtyg.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpq6bviqo0.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpq6bviqo0.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpq6bviqo0.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  for i = n, m do\n\
    \    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n + 1))\n  return\
    \ avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjve0iesq.lua:22:\
    \ expected: \"0b11\"\\nactual: 3\\nstack traceback:\\n\\t/tmp/tmpjve0iesq.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local avg = math.floor((n + m) / 2)\n  return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtkabt4h.lua:21:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpdtkabt4h.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw25lo1qb.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpw25lo1qb.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"0b%s\"\
    , tostring(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiur1jik5.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpiur1jik5.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor((n + m)\
    \ / 2)\n  if n > m then\n    return -1\n  else\n    return \"0b\" .. tostring(avg)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzlbkzje7.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpzlbkzje7.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk5ntgpep.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpk5ntgpep.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpk5ntgpep.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplaor45k_.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmplaor45k_.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkz1la1vm.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpkz1la1vm.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = sum / (m - n + 1)\n    return string.format(\"0b%s\"\
    , tostring(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj18_u4sg.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpj18_u4sg.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2yy9jh6x.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp2yy9jh6x.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplncxtzll.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmplncxtzll.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmplncxtzll.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp84hxiypa.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp84hxiypa.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphkg7nq8r.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmphkg7nq8r.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmphkg7nq8r.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsxfeerzm.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpsxfeerzm.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local avg = math.floor((n + m) / 2)\n    return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnwxhm0sh.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpnwxhm0sh.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9guw41ar.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp9guw41ar.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzql7o6yx.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpzql7o6yx.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.rshift(sum, (m - n + 1))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpei6jrjbx.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpei6jrjbx.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpei6jrjbx.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpne1nvaod.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpne1nvaod.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpne1nvaod.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_llsopjw.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp_llsopjw.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmp_llsopjw.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", tostring(bit32.bnot(bit32.lshift(bit32.rshift(sum, m\
    \ - n + 1), 1))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpn2xyqjov.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpn2xyqjov.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpn2xyqjov.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptw659x_c.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmptw659x_c.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmptw659x_c.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  for i = n, m do\n\
    \    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n + 1))\n  return\
    \ avg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqa6r2aqu.lua:22:\
    \ expected: \"0b11\"\\nactual: 3\\nstack traceback:\\n\\t/tmp/tmpqa6r2aqu.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = sum\
    \ / (m - n + 1)\n  return string.format(\"0b%s\", tostring(math.floor(avg + 0.5)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp3shzm9_.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpp3shzm9_.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpclzsbedq.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpclzsbedq.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9imbhlxi.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp9imbhlxi.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.rshift(sum / (m - n + 1) + 0.5, 0)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpazkurd5x.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpazkurd5x.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpazkurd5x.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = math.floor(sum / (m - n + 1))\n  return \"0b\" .. tostring(avg)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpntza45cn.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpntza45cn.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpal4tx832.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpal4tx832.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppncyr0c0.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmppncyr0c0.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmppncyr0c0.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiooe_r3t.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpiooe_r3t.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp215x7ec0.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp215x7ec0.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = sum / (m - n + 1)\n    return string.format(\"0b%s\"\
    , tostring(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2b42uqu8.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp2b42uqu8.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpybnay9rg.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpybnay9rg.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", dec2bin(math.floor(sum / (m - n + 1))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp61mk38t6.lua:16:\
    \ attempt to call global 'dec2bin' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp61mk38t6.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp61mk38t6.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = math.floor(sum / (m - n + 1))\n  return \"0b\" .. avg\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphzznsdxd.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmphzznsdxd.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_mp39b9r.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp_mp39b9r.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_pd25mhi.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp_pd25mhi.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmp_pd25mhi.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn0huhl44.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpn0huhl44.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local avg = math.floor((n + m) / 2)\n    return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0cdqyqa9.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp0cdqyqa9.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", tostring(bit32.rshift(sum / (m - n + 1) + 0.5, 0)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpex5dnigo.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpex5dnigo.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpex5dnigo.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq3jheelh.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpq3jheelh.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  for i = n, m do\n\
    \    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n + 1))\n  if n\
    \ > m then\n    return -1\n  else\n    return \"0b\" .. tostring(avg)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ngyougw.lua:26:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp4ngyougw.lua:26:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpom7uklje.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpom7uklje.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"\
    0b%s\", tostring(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkgsf_sje.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpkgsf_sje.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpulvkia41.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpulvkia41.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp05k5ts3k.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp05k5ts3k.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo7aaplty.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpo7aaplty.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphml6mdyq.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmphml6mdyq.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm2mcy1_8.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpm2mcy1_8.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpm2mcy1_8.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcxkhj29g.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpcxkhj29g.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppwd7ybsi.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmppwd7ybsi.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"\
    0b%s\", tostring(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwt18pmhx.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpwt18pmhx.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. tostring(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplnhkt819.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmplnhkt819.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv0nbpd2y.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpv0nbpd2y.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1isivvkj.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp1isivvkj.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp618q6ac1.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp618q6ac1.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmp618q6ac1.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  for i = n, m do\n\
    \    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n + 1))\n  return\
    \ avg >= 0 and \"0b\" .. tostring(avg) or -1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx_xhh63i.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpx_xhh63i.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcgr_acxy.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpcgr_acxy.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"0b%s\"\
    , tostring(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu9nqiyvb.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpu9nqiyvb.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    local sum = 0\n    for i = n,\
    \ m do\n        sum = sum + i\n    end\n    local avg = math.floor(sum / (m -\
    \ n + 1))\n    return string.format(\"0b%s\", tostring(avg))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgbcezray.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpgbcezray.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpx2u8kare.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpx2u8kare.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpx2u8kare.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3lhe_ont.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp3lhe_ont.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", tostring(bit32.rshift(sum, (m - n + 1))))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmijedrqm.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmijedrqm.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpmijedrqm.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor((n + m)\
    \ / 2)\n  return (n > m) and -1 or string.format(\"0b%s\", tostring(avg))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcu2j6n3o.lua:18:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpcu2j6n3o.lua:18:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfj33xyxl.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpfj33xyxl.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpfj33xyxl.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ht7fmij.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp8ht7fmij.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg):reverse():gsub(\"(%d%d%d)\"\
    ,\"%1,\"):reverse():gsub(\",$\",\"\"):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprg2spsaq.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmprg2spsaq.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  return \"0b\" .. tostring(avg)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgff1q5yw.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpgff1q5yw.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpan1g6abk.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpan1g6abk.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpan1g6abk.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.rshift(sum / (m - n + 1) + 0.5, 0)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpeu5nfny6.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpeu5nfny6.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpeu5nfny6.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local avg = math.floor((n + m) / 2)\n    return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbkuo0tiy.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpbkuo0tiy.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1s0053oh.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp1s0053oh.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpymajjn34.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpymajjn34.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpymajjn34.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpozn3t5ea.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpozn3t5ea.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz0tpjlz1.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpz0tpjlz1.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpruyn2jfn.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpruyn2jfn.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwoc67mlf.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpwoc67mlf.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4esubs7t.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp4esubs7t.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp4esubs7t.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe4cik70n.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpe4cik70n.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpe4cik70n.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg27ov9fg.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpg27ov9fg.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpg27ov9fg.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgxnypggl.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpgxnypggl.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc2yumdbj.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpc2yumdbj.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwddax56e.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpwddax56e.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpwddax56e.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.rshift(sum, m - n + 1)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjbywv_4i.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjbywv_4i.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpjbywv_4i.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn63eiyg7.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpn63eiyg7.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.bnot(bit32.rshift(bit32.band(sum, bit32.lshift(1, math.ceil(math.log(sum)\
    \ / math.log(2))) - 1), 1))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2mfqim1k.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2mfqim1k.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp2mfqim1k.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptgf40h1u.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmptgf40h1u.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    local avg = math.floor((n + m)\
    \ / 2)\n    if n > m then\n        return -1\n    else\n        return string.format(\"\
    0b%s\", tostring(avg))\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk5h3yfxd.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpk5h3yfxd.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ return string.format(\"0b%s\", math.tointeger(math.floor((n + m) / 2)))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg1nk1fi0.lua:12:\
    \ attempt to call field 'tointeger' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpg1nk1fi0.lua:12:\
    \ in function 'candidate'\\n\\t/tmp/tmpg1nk1fi0.lua:18: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu3y036g3.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpu3y036g3.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.rshift(sum / (m - n + 1) + 0.5, 0)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpynpxdysl.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpynpxdysl.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpynpxdysl.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz924qf78.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpz924qf78.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ return string.format(\"0b%s\", tostring(math.floor((n + m) / 2)))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzeko68vq.lua:18:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpzeko68vq.lua:18:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkqssb8iz.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpkqssb8iz.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  return (n + m) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptr_lm6n1.lua:17:\
    \ expected: \"0b11\"\\nactual: 3\\nstack traceback:\\n\\t/tmp/tmptr_lm6n1.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpd0z2o7uj.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpd0z2o7uj.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpd0z2o7uj.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpifjft8u0.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpifjft8u0.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaoos1u0u.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpaoos1u0u.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", tostring(bit32.rshift(sum / (m - n + 1) + 0.5, 0)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpspidvcmx.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpspidvcmx.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpspidvcmx.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptal2sscw.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmptal2sscw.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdz8eq_3p.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpdz8eq_3p.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpdz8eq_3p.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  for i = n, m do\n\
    \    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n + 1))\n  return\
    \ avg == 0 and 0 or (\"0b\" .. tostring(avg))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9sp6_m69.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp9sp6_m69.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzi36k3g3.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpzi36k3g3.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. dec2bin(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfaeiwtvj.lua:16:\
    \ attempt to call global 'dec2bin' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfaeiwtvj.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpfaeiwtvj.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcbb2rbj1.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpcbb2rbj1.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpth4chw3p.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpth4chw3p.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    local avg = math.floor((n + m)\
    \ / 2)\n    if n > m then\n        return -1\n    else\n        return \"0b\"\
    \ .. tostring(avg)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoaev7mv4.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpoaev7mv4.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_7v4ikpb.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp_7v4ikpb.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdcaj7jqf.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpdcaj7jqf.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpdcaj7jqf.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"\
    0b%s\", tostring(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe6wqpe0t.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpe6wqpe0t.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  for i = n, m do\n\
    \    sum = sum + i\n  end\n  sum = sum / (m - n + 1)\n  sum = math.floor(sum +\
    \ 0.5)\n  return string.format(\"0b%s\", tostring(sum))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8l9mi7a5.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp8l9mi7a5.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp126f96e.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpp126f96e.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpp126f96e.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor((n + m)\
    \ / 2)\n  if n > m then\n    return -1\n  else\n    return \"0b\" .. tostring(avg)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpchqirbi7.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpchqirbi7.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return string.format(\"0b%s\", tostring(avg))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd_444w_z.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpd_444w_z.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = sum / (m - n + 1)\n  local rounded = math.floor(avg + 0.5)\n  return \"\
    0b\" .. tostring(rounded)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphm5svxw1.lua:26:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmphm5svxw1.lua:26:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8iloj_h3.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp8iloj_h3.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp8iloj_h3.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkc293hu3.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpkc293hu3.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpkc293hu3.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = sum / (m - n + 1)\n  return string.format(\"0b%s\", tostring(math.floor(avg\
    \ + 0.5)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_xkcpb0p.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp_xkcpb0p.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm6u67_e7.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpm6u67_e7.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpm6u67_e7.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxc7jdh21.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpxc7jdh21.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpxc7jdh21.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaszayp01.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpaszayp01.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg_93liw4.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpg_93liw4.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor((n + m)\
    \ / 2)\n  if n > m then\n    return -1\n  else\n    return \"0b\" .. tostring(avg)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2w2lzxtu.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp2w2lzxtu.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor((n + m)\
    \ / 2)\n  if n > m then\n    return -1\n  else\n    return \"0b\" .. tostring(avg)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp36js0r46.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp36js0r46.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph6re387w.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmph6re387w.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmph6re387w.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz_61luxz.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpz_61luxz.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp74rumtv3.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp74rumtv3.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(math.floor(sum / (m - n + 1))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplhge5qgs.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmplhge5qgs.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.rshift(sum, m - n)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbj83syrl.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbj83syrl.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpbj83syrl.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"\
    0b%s\", to_binary(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkv4ctlg5.lua:19:\
    \ attempt to call global 'to_binary' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkv4ctlg5.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpkv4ctlg5.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl4kac50f.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpl4kac50f.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0rzvcjdh.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp0rzvcjdh.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplipotlhp.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmplipotlhp.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptluekohb.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmptluekohb.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"\
    0b%s\", tostring(avg))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwf_qeamn.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpwf_qeamn.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdndyh55v.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpdndyh55v.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnd305rag.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpnd305rag.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(bit32.rshift(sum, m - n))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmps25w7o6i.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmps25w7o6i.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmps25w7o6i.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.rshift(sum / (m - n + 1) + 0.5, 0)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_0d734ip.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_0d734ip.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp_0d734ip.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppw99qr1e.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmppw99qr1e.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz7xwfs44.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpz7xwfs44.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpz7xwfs44.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk0ph02a4.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpk0ph02a4.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpk0ph02a4.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxjet0o1s.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpxjet0o1s.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpxjet0o1s.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5vemtw3q.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp5vemtw3q.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ return string.format(\"0b%s\", dec2bin(math.floor((n + m) / 2)))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxjur873r.lua:12:\
    \ attempt to call global 'dec2bin' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxjur873r.lua:12:\
    \ in function 'candidate'\\n\\t/tmp/tmpxjur873r.lua:18: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl4kaxks3.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpl4kaxks3.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwd9xa7wi.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpwd9xa7wi.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor((n + m)\
    \ / 2)\n  if n > m then\n    return -1\n  else\n    return \"0b\" .. string.format(\"\
    %b\", avg)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6x40ijec.lua:15:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp6x40ijec.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp6x40ijec.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    return string.format(\"0b%s\", dec2bin(math.floor(sum / (m - n +\
    \ 1))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp80zq0hhl.lua:18:\
    \ attempt to call global 'dec2bin' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp80zq0hhl.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmp80zq0hhl.lua:24: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", tostring(bit32.rshift(sum, m - n)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0tolmnsv.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0tolmnsv.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp0tolmnsv.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphouki6c5.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmphouki6c5.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn_ha0xpu.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpn_ha0xpu.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp83x3cd55.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp83x3cd55.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdsn2s_57.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpdsn2s_57.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplkxju7az.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmplkxju7az.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmplkxju7az.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8hpntukt.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp8hpntukt.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz57uoebh.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpz57uoebh.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj248ls3d.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpj248ls3d.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyqfdlrib.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpyqfdlrib.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkipbvjer.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpkipbvjer.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphmx6f9z.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpphmx6f9z.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxzk0a7qs.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpxzk0a7qs.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ return string.format(\"0b%s\", dec2bin(math.floor((n + m) / 2)))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3nghmbnq.lua:12:\
    \ attempt to call global 'dec2bin' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3nghmbnq.lua:12:\
    \ in function 'candidate'\\n\\t/tmp/tmp3nghmbnq.lua:18: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local avg = math.floor((n + m) / 2)\n    return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0alebrj4.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp0alebrj4.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxu08cqd0.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpxu08cqd0.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpxu08cqd0.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", tostring(bit32.bnot(bit32.lshift(bit32.rshift(sum, m\
    \ - n + 1), 1))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsburgv0y.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsburgv0y.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpsburgv0y.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl_180yet.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpl_180yet.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpksd_pl1_.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpksd_pl1_.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgk2ulr3w.lua:19:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpgk2ulr3w.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdcsewlq2.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpdcsewlq2.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(math.floor(sum / (m - n + 1)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpncbufq8h.lua:22:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpncbufq8h.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", tostring(bit32.rshift(sum, m - n)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphmj81t11.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphmj81t11.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmphmj81t11.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3cgbol8q.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp3cgbol8q.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmp3cgbol8q.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9bpcg1tk.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp9bpcg1tk.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_zmq330w.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp_zmq330w.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2tyyfcmt.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmp2tyyfcmt.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp2tyyfcmt.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpndfa3d11.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpndfa3d11.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi5u4qcs2.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpi5u4qcs2.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyc2aq5cd.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpyc2aq5cd.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpta0wtma7.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpta0wtma7.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then\n        return\
    \ -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n\
    \    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\"\
    \ .. string.format(\"%b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpay_adp7l.lua:19:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpay_adp7l.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpay_adp7l.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. string.format(\"%b\", avg)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpu20qcswt.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpu20qcswt.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpu20qcswt.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe9_gtmoi.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpe9_gtmoi.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpe9_gtmoi.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = math.floor(sum / (m - n + 1))\n  return string.format(\"0b%s\", tostring(avg))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp71nye8sj.lua:25:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp71nye8sj.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", tostring(bit32.rshift(sum, (m - n + 1))))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxg9dt3dn.lua:16:\
    \ attempt to index global 'bit32' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxg9dt3dn.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpxg9dt3dn.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzc_6wdst.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpzc_6wdst.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqnjkhybn.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmpqnjkhybn.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7xh3geat.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmp7xh3geat.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps1_7_78t.lua:17:\
    \ expected: \"0b11\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmps1_7_78t.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n    if n > m then return -1 end\n\
    \    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return \"0b\" .. string.format(\"\
    %b\", avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpahpsg9gg.lua:17:\
    \ invalid option '%b' to 'format'\\nstack traceback:\\n\\t/tmp/tmpahpsg9gg.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpahpsg9gg.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return \"0b\" .. tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp195wguiv.lua:23:\
    \ expected: \"0b11\"\\nactual: \"0b3\"\\nstack traceback:\\n\\t/tmp/tmp195wguiv.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
