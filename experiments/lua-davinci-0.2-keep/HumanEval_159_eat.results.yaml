name: HumanEval_159_eat
language: lua
results:
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp10hxwhuy.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmp10hxwhuy.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdwpz_dxc.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpdwpz_dxc.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {remaining + number, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7jmsmbcb.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmp7jmsmbcb.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total < need then\n    return {total, 0}\n  else\n    return\
    \ {need, total - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf01g2d9s.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpf01g2d9s.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmr9vjltb.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpmr9vjltb.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsgekq9gi.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpsgekq9gi.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpak5n7avy.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmpak5n7avy.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- Your code here\n    return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq30ecmuc.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpq30ecmuc.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number + need\n  if eaten > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {eaten, remaining - eaten}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ns_5kar.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp0ns_5kar.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpetju4z5o.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpetju4z5o.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwb7_szcu.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpwb7_szcu.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz79qt5ea.lua:30:\
    \ expected: {11, 4}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpz79qt5ea.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9fj5ie9i.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmp9fj5ie9i.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvrzdpgde.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpvrzdpgde.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxr9h3l1z.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmpxr9h3l1z.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzkiyq6c7.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpzkiyq6c7.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return { need, total - need }\n  else\n    return { total,\
    \ 0 }\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptpi03p5q.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmptpi03p5q.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp765343t.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpp765343t.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkaay07w8.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpkaay07w8.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number + math.min(need, remaining)\n\
    \    return {eaten, math.max(0, remaining - need)}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + need\n    if total\
    \ > remaining then\n        return {remaining, 0}\n    else\n        return {total,\
    \ remaining - total}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4pvt2agp.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp4pvt2agp.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppeo7vvp0.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmppeo7vvp0.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp77flljf_.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmp77flljf_.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf_r6qdpb.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpf_r6qdpb.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number + need\n  if eaten > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {eaten, remaining - eaten}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8mvzfiti.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp8mvzfiti.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2wcwiae8.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmp2wcwiae8.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvbedrqsr.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpvbedrqsr.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number + need\n  local left =\
    \ remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {eaten,\
    \ left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpybov16tr.lua:38:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpybov16tr.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps1_tqmi7.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmps1_tqmi7.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmperyuko45.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmperyuko45.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + need, remaining - need}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpat_xtp11.lua:33:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmpat_xtp11.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    local total = number\
    \ + remaining\n    if total >= need then\n        return {need, total - need}\n\
    \    else\n        return {total, 0}\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdwfy9kp2.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpdwfy9kp2.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {number + need, remaining - (number + need)}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqd0vhckx.lua:34:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpqd0vhckx.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiwl2opmb.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpiwl2opmb.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0hv8zlhx.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmp0hv8zlhx.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    local total = number\
    \ + need\n    if total > remaining then\n        return {remaining, 0}\n    else\n\
    \        return {total, remaining - total}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgrr_f7du.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpgrr_f7du.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total < need then\n    return {total, 0}\n  else\n    return\
    \ {need, total - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphqhczp7i.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmphqhczp7i.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvfh_75y6.lua:37:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpvfh_75y6.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if remaining >= need then\n\
    \    return number + need, remaining - need\n  else\n    return number + remaining,\
    \ 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf3hxz_5y.lua:35:\
    \ expected: {11, 4}\\nactual: 11\\nstack traceback:\\n\\t/tmp/tmpf3hxz_5y.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if number + need > remaining then\n      \
    \  return {remaining, 0}\n    else\n        return {number + need, remaining -\
    \ (number + need)}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt8zmek0h.lua:34:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpt8zmek0h.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    if number + need <=\
    \ remaining then\n        return {number + need, remaining - (number + need)}\n\
    \    else\n        return {number + remaining, 0}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw58ih2wi.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmpw58ih2wi.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbgoew9y6.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpbgoew9y6.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf1rtlhox.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpf1rtlhox.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local result = {}\n  local eaten = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    eaten = eaten\
    \ + left\n    left = 0\n  end\n  result[1] = eaten\n  result[2] = left\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk4cci8_j.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpk4cci8_j.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfopw10w6.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpfopw10w6.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj5azvywt.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmpj5azvywt.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6b1dip7x.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp6b1dip7x.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local result = {}\n  if remaining < need then\n\
    \    result[1] = number + remaining\n    result[2] = 0\n  else\n    result[1]\
    \ = number + need\n    result[2] = remaining - need\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptwsw6bl9.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmptwsw6bl9.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa4py_zuz.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpa4py_zuz.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc0z6s4gn.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmpc0z6s4gn.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb7aun72_.lua:40:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpb7aun72_.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwca40nuo.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpwca40nuo.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    local total = number\
    \ + need\n    if total > remaining then\n        return {remaining, 0}\n    else\n\
    \        return {total, remaining - total}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplrqls6sz.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmplrqls6sz.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    local\
    \ left = total - need\n    if left < 0 then\n        left = 0\n    end\n    return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprpn611_h.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 9}\\nstack traceback:\\n\\t/tmp/tmprpn611_h.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdp4nurpf.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpdp4nurpf.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  local left =\
    \ remaining - need\n  if total > remaining then\n    total = remaining\n    left\
    \ = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp86cz2jsf.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp86cz2jsf.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1hci1nry.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp1hci1nry.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfrwaa35w.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpfrwaa35w.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need <= remaining then\n    return\
    \ {number + need, remaining - (number + need)}\n  else\n    return {number + remaining,\
    \ 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9f6tmwr6.lua:34:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmp9f6tmwr6.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {remaining + number, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyfhsgn1k.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmpyfhsgn1k.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  local left = total - need\n  if left < 0 then\n    left = 0\n \
    \ end\n  return {need + number, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe8kxpu_0.lua:36:\
    \ expected: {11, 4}\\nactual: {11, 9}\\nstack traceback:\\n\\t/tmp/tmpe8kxpu_0.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4n1zb1_n.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp4n1zb1_n.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2n9ik0be.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmp2n9ik0be.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need <= remaining then\n    return\
    \ {number + need, remaining - (number + need)}\n  else\n    return {remaining\
    \ + number, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprde5ii0t.lua:34:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmprde5ii0t.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps6olomef.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmps6olomef.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpghcclgul.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpghcclgul.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    total = total\
    \ + left\n    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm3vkvk1r.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpm3vkvk1r.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp526bulau.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp526bulau.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {need, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7rmytgqp.lua:37:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp7rmytgqp.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvtrt1jm7.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpvtrt1jm7.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmfnjv6wk.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpmfnjv6wk.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpltu_bdh0.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpltu_bdh0.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n\
    \  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu49i3g9v.lua:39:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpu49i3g9v.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  local left = total - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {need, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ftfdpfz.lua:37:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp1ftfdpfz.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number + need\n  local left =\
    \ remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {eaten,\
    \ left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy383rxei.lua:38:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpy383rxei.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpafxqv6ef.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpafxqv6ef.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8iknwvk2.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmp8iknwvk2.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if total > remaining then\n    total\
    \ = remaining\n    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvy9vqlb8.lua:37:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpvy9vqlb8.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb2tn3th2.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpb2tn3th2.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    if number + need <= remaining then\n     \
    \   return {number + need, remaining - (number + need)}\n    else\n        return\
    \ {remaining + number, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphqve9q9.lua:34:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmpphqve9q9.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_t__p1eq.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp_t__p1eq.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    return {total,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvpmpf4ps.lua:40:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpvpmpf4ps.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    local total = number\
    \ + need\n    if total > remaining then\n        return {remaining, 0}\n    else\n\
    \        return {total, remaining - total}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa0v0ncpg.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpa0v0ncpg.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplurmlugj.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmplurmlugj.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprych3_7h.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmprych3_7h.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8j3yzwng.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp8j3yzwng.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    if total\
    \ >= need then\n        return {need, total - need}\n    else\n        return\
    \ {total, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcslqs0xa.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpcslqs0xa.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvm4o2z32.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpvm4o2z32.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7c_div6a.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp7c_div6a.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  local left = total - need\n  if left < 0 then\n    left = 0\n \
    \ end\n  return {need, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpde5zg4z6.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpde5zg4z6.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_b1_g2w2.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp_b1_g2w2.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {number + need, remaining - (number + need)}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp526xpcu_.lua:34:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp526xpcu_.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ < need then\n    return {total, 0}\n  else\n    return {need, total - need}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzeiw0wjj.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpzeiw0wjj.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnllmxoxl.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmpnllmxoxl.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpseybwgpv.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmpseybwgpv.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total < need then\n    return {total, 0}\n  else\n    return\
    \ {need, total - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpth8bhvq4.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpth8bhvq4.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw9eah14g.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpw9eah14g.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphsksm0rx.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmphsksm0rx.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {number + need, remaining - (number + need)}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7ro38p8.lua:34:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpz7ro38p8.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp468izqhk.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp468izqhk.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm49lxtzo.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmpm49lxtzo.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2n0uucma.lua:37:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp2n0uucma.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx8xon6br.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpx8xon6br.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphnr1hqb8.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmphnr1hqb8.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpet6gdt7_.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpet6gdt7_.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n\
    \  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6d_a5b3_.lua:39:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmp6d_a5b3_.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n\
    \  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppf47hblz.lua:39:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmppf47hblz.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjll85_9v.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpjll85_9v.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n\
    \  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgldgidat.lua:39:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpgldgidat.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfdqhtqk0.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpfdqhtqk0.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    total = total\
    \ + left\n    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  local left =\
    \ remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {total,\
    \ left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeo7xhcx3.lua:38:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpeo7xhcx3.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptlkwp_mm.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmptlkwp_mm.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt03iyxdy.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpt03iyxdy.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgezzh69g.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpgezzh69g.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1eez0iue.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp1eez0iue.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total > need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7kygayds.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp7kygayds.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk5x0d06x.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpk5x0d06x.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    if total\
    \ < need then\n        return {total, 0}\n    else\n        return {need, total\
    \ - need}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv436e6v0.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpv436e6v0.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    if total\
    \ >= need then\n        return {need, total - need}\n    else\n        return\
    \ {total, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzqdgze2.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpvzqdgze2.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcke_s6xy.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpcke_s6xy.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp847h96it.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp847h96it.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpelkge2w0.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpelkge2w0.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp69m7zrnc.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp69m7zrnc.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_jtovnz.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmps_jtovnz.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzggei94v.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpzggei94v.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgz2d52ka.lua:30:\
    \ expected: {11, 4}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpgz2d52ka.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkfetm8rh.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpkfetm8rh.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn5p1ummu.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmpn5p1ummu.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  local left\
    \ = total - need\n  if left < 0 then\n    return {total, 0}\n  else\n    return\
    \ {need, left}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzjitxw_k.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpzjitxw_k.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  local left\
    \ = total - need\n  if left < 0 then\n    return {total, 0}\n  else\n    return\
    \ {total, left}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiya568hs.lua:36:\
    \ expected: {11, 4}\\nactual: {15, 9}\\nstack traceback:\\n\\t/tmp/tmpiya568hs.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp7lez2vg.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmpp7lez2vg.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ < need then\n    return {total, 0}\n  else\n    return {need, total - need}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp09f6v_ej.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp09f6v_ej.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc7ci_of7.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpc7ci_of7.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjjntt58t.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpjjntt58t.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7yy0we3k.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp7yy0we3k.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpypl1sg25.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpypl1sg25.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1v7zou1d.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp1v7zou1d.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {number + need, remaining - (number + need)}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo6dflhv0.lua:34:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpo6dflhv0.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    if total\
    \ >= need then\n        return {need, total - need}\n    else\n        return\
    \ {total, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp35f0t_9.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpp35f0t_9.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + need\n    if total\
    \ > remaining then\n        return {remaining, 0}\n    else\n        return {total,\
    \ remaining - total}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp114gxfot.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp114gxfot.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1j25s21p.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp1j25s21p.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n\
    \  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaj8nbav9.lua:39:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpaj8nbav9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local eaten = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n\
    \  return {eaten, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3zlpfqlq.lua:39:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmp3zlpfqlq.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  local left = total - need\n  if left < 0 then\n    left = 0\n \
    \ end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy5e9sgpx.lua:36:\
    \ expected: {11, 4}\\nactual: {15, 9}\\nstack traceback:\\n\\t/tmp/tmpy5e9sgpx.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqp3qpv63.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpqp3qpv63.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local eaten = number + need\n    local left\
    \ = remaining - need\n    if left < 0 then\n        eaten = eaten + left\n   \
    \     left = 0\n    end\n    return {eaten, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n\
    \  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpntytcyfg.lua:39:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpntytcyfg.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {number + need, remaining - (number + need)}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpefeeog4c.lua:34:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpefeeog4c.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - number - need}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuo7q8odn.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmpuo7q8odn.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtkk2wte.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpdtkk2wte.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfjecrhie.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmpfjecrhie.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7igqw6_7.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp7igqw6_7.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkppm1lk2.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpkppm1lk2.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  local left =\
    \ remaining - total\n  if left < 0 then\n    total = total + left\n    left =\
    \ 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl634947j.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpl634947j.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  local left =\
    \ remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {total,\
    \ left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpascodef_.lua:38:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpascodef_.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    if total\
    \ >= need then\n        return {need, total - need}\n    else\n        return\
    \ {total, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk600lkvt.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpk600lkvt.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_1szh7pg.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp_1szh7pg.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number + need\n  local left =\
    \ remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {eaten,\
    \ left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq71g_jcb.lua:38:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpq71g_jcb.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need <= remaining then\n    return\
    \ {number + need, remaining - (number + need)}\n  else\n    return {number + remaining,\
    \ 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphwmfzfpi.lua:34:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmphwmfzfpi.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6m7pqlsp.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp6m7pqlsp.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm1pb62k5.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpm1pb62k5.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  if number + need <= remaining then\n    return\
    \ {number + need, remaining - (number + need)}\n  else\n    return {number + remaining,\
    \ 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptf4378ve.lua:34:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmptf4378ve.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3qdhhvb6.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp3qdhhvb6.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2iluhtgf.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp2iluhtgf.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    if total\
    \ >= need then\n        return {need, total - need}\n    else\n        return\
    \ {total, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptfaod8je.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmptfaod8je.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnyih2_6y.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpnyih2_6y.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpflxzbnd3.lua:35:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpflxzbnd3.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe0epq813.lua:30:\
    \ expected: {11, 4}\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpe0epq813.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_cien125.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp_cien125.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5zm7hvsz.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp5zm7hvsz.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxwrmtnuv.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpxwrmtnuv.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    local total = number\
    \ + remaining\n    if total >= need then\n        return {need, total - need}\n\
    \    else\n        return {total, 0}\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6m8az3sn.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp6m8az3sn.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1mfj3nu0.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp1mfj3nu0.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {remaining + number, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcvvv86te.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmpcvvv86te.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {remaining + number, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1yjy8sa6.lua:35:\
    \ expected: {11, 4}\\nactual: {15, 0}\\nstack traceback:\\n\\t/tmp/tmp1yjy8sa6.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total < need then\n    return {total, 0}\n  else\n    return\
    \ {need, total - need}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxbwjyul8.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpxbwjyul8.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  return {number + need,\
    \ remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphefpnwum.lua:34:\
    \ expected: {7, 0}\\nactual: {13, -6}\\nstack traceback:\\n\\t/tmp/tmphefpnwum.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2zintmy8.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp2zintmy8.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvltq7gy1.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpvltq7gy1.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnaea8ru7.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpnaea8ru7.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8l3tfb8b.lua:37:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmp8l3tfb8b.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpybjb1ows.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpybjb1ows.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local eaten = number + need\n  local left =\
    \ remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {eaten,\
    \ left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjw9rotaz.lua:38:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpjw9rotaz.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    -- your code here\n    local total = number\
    \ + remaining\n    if total >= need then\n        return {need, total - need}\n\
    \    else\n        return {total, 0}\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps0mpc6z5.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmps0mpc6z5.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr3oi66p7.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpr3oi66p7.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb7wdzvoh.lua:36:\
    \ expected: {11, 4}\\nactual: {10, 0}\\nstack traceback:\\n\\t/tmp/tmpb7wdzvoh.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- your code here\n  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwrcijlcq.lua:36:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpwrcijlcq.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = number + remaining\n    if total\
    \ >= need then\n        return { need, total - need }\n    else\n        return\
    \ { total, 0 }\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzcprxkt0.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmpzcprxkt0.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2tko5ywa.lua:35:\
    \ expected: {11, 4}\\nactual: {6, 9}\\nstack traceback:\\n\\t/tmp/tmp2tko5ywa.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  -- Your code here\n  local total = number +\
    \ need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n\
    \  return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwrxpiej4.lua:39:\
    \ expected: {7, 0}\\nactual: {13, 0}\\nstack traceback:\\n\\t/tmp/tmpwrxpiej4.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
