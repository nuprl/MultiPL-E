name: HumanEval_6_parse_nested_parens
language: lua
prompt: "-- Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n-- For each of the group, output the deepest\
  \ level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  -- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
  \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n \
  \   lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
  \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_group = 0\n    for i = 1, #paren_group do\n      if paren_group:sub(i,\
    \ i) == '(' then\n        nesting = nesting + 1\n        if nesting > max_nesting_group\
    \ then\n          max_nesting_group = nesting\n        end\n      elseif paren_group:sub(i,\
    \ i) == ')' then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_group)\n  end\n  return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local paren_levels = {}\n    for _,\
    \ paren_group in ipairs(paren_groups) do\n        local paren_level = 0\n    \
    \    local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend", "    local paren_groups = stringx.split(paren_string, '\
    \ ')\n    local max_nesting = {}\n    for _, group in ipairs(paren_groups) do\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ _, char in ipairs(group) do\n            if char == '(' then\n             \
    \   nesting = nesting + 1\n            elseif char == ')' then\n             \
    \   nesting = nesting - 1\n            end\n            if nesting > max_nesting_in_group\
    \ then\n                max_nesting_in_group = nesting\n            end\n    \
    \    end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n \
    \   return max_nesting\nend", "    local paren_groups = split(paren_string, '\
    \ ')\n    local max_nesting = {}\n    for i, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n\
    \            if char == '(' then\n                nesting = nesting + 1\n    \
    \        elseif char == ')' then\n                nesting = nesting - 1\n    \
    \        end\n            if nesting > max_nesting_in_group then\n           \
    \     max_nesting_in_group = nesting\n            end\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            if paren_group:sub(j, j)\
    \ == '(' then\n                nesting = nesting + 1\n                if nesting\
    \ > max_nesting_in_group then\n                    max_nesting_in_group = nesting\n\
    \                end\n            elseif paren_group:sub(j, j) == ')' then\n \
    \               nesting = nesting - 1\n            end\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = {}\n    for group in paren_string:gmatch('%S+') do\n        local level =\
    \ 0\n        local max_level = 0\n        for c in group:gmatch('.') do\n    \
    \        if c == '(' then\n                level = level + 1\n            elseif\
    \ c == ')' then\n                level = level - 1\n            end\n        \
    \    max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            if paren_group:sub(j, j)\
    \ == '(' then\n                nesting = nesting + 1\n                if nesting\
    \ > max_nesting_in_group then\n                    max_nesting_in_group = nesting\n\
    \                end\n            elseif paren_group:sub(j, j) == ')' then\n \
    \               nesting = nesting - 1\n            end\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend", "  local paren_list\
    \ = {}\n  local paren_depth = 0\n  local max_depth = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      paren_depth\
    \ = paren_depth + 1\n      if paren_depth > max_depth then\n        max_depth\
    \ = paren_depth\n      end\n    elseif c == ')' then\n      paren_depth = paren_depth\
    \ - 1\n    elseif c == ' ' then\n      table.insert(paren_list, max_depth)\n \
    \     max_depth = 0\n    end\n  end\n  table.insert(paren_list, max_depth)\n \
    \ return paren_list\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for _, paren\
    \ in ipairs(stringx.split(paren_group, '')) do\n            if paren == '(' then\n\
    \                level = level + 1\n            elseif paren == ')' then\n   \
    \             level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_levels, max_level)\n    end\n\
    \    return paren_levels\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i, paren_group in ipairs(paren_groups)\
    \ do\n        local current_nesting = 0\n        local max_current_nesting = 0\n\
    \        for j = 1, #paren_group do\n            if paren_group:sub(j, j) == '('\
    \ then\n                current_nesting = current_nesting + 1\n            elseif\
    \ paren_group:sub(j, j) == ')' then\n                if current_nesting > max_current_nesting\
    \ then\n                    max_current_nesting = current_nesting\n          \
    \      end\n                current_nesting = current_nesting - 1\n          \
    \  end\n        end\n        max_nesting[i] = max_current_nesting\n    end\n \
    \   return max_nesting\nend", "  local paren_groups = {}\n  for paren_group in\
    \ paren_string:gmatch('%S+') do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for paren in paren_group:gmatch('.') do\n      if paren == '(' then\n\
    \        nesting = nesting + 1\n      elseif paren == ')' then\n        nesting\
    \ = nesting - 1\n      end\n      max_nesting = math.max(max_nesting, nesting)\n\
    \    end\n    table.insert(paren_groups, max_nesting)\n  end\n  return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_level = 0\n        local level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            if level > max_level then\n\
    \                max_level = level\n            end\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ stringx.split(paren_string, ' ')\n  local max_nesting = {}\n  for i = 1, #paren_groups\
    \ do\n    local paren_group = paren_groups[i]\n    local nesting = 0\n    local\
    \ max_nesting_local = 0\n    for j = 1, #paren_group do\n      local c = paren_group:sub(j,\
    \ j)\n      if c == '(' then\n        nesting = nesting + 1\n        if nesting\
    \ > max_nesting_local then\n          max_nesting_local = nesting\n        end\n\
    \      elseif c == ')' then\n        nesting = nesting - 1\n      end\n    end\n\
    \    table.insert(max_nesting, max_nesting_local)\n  end\n  return max_nesting\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \      elseif c == ')' then\n                depth = depth - 1\n            end\n\
    \            max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ stringx.split(paren_string, ' ')\n  local depths = {}\n  for i, paren_group\
    \ in ipairs(paren_groups) do\n    local depth = 0\n    local max_depth = 0\n \
    \   for c in paren_group:gmatch('.') do\n      if c == '(' then\n        depth\
    \ = depth + 1\n        max_depth = math.max(max_depth, depth)\n      elseif c\
    \ == ')' then\n        depth = depth - 1\n      end\n    end\n    depths[i] =\
    \ max_depth\n  end\n  return depths\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_levels = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local level = 0\n    local max_level = 0\n    for c in paren_group:gmatch('.')\
    \ do\n      if c == '(' then\n        level = level + 1\n        max_level = math.max(max_level,\
    \ level)\n      elseif c == ')' then\n        level = level - 1\n      end\n \
    \   end\n    table.insert(max_levels, max_level)\n  end\n  return max_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local group = paren_groups[i]\n\
    \        local paren_stack = {}\n        local max_level = 0\n        for j =\
    \ 1, #group do\n            local char = group:sub(j, j)\n            if char\
    \ == '(' then\n                table.insert(paren_stack, char)\n             \
    \   max_level = math.max(max_level, #paren_stack)\n            elseif char ==\
    \ ')' then\n                table.remove(paren_stack)\n            end\n     \
    \   end\n        table.insert(max_nesting, max_level)\n    end\n    return max_nesting\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for i = 1, #paren_group do\n\
    \            if paren_group:sub(i, i) == '(' then\n                nest_level\
    \ = nest_level + 1\n            elseif paren_group:sub(i, i) == ')' then\n   \
    \             nest_level = nest_level - 1\n            end\n            if nest_level\
    \ > max_nest_level then\n                max_nest_level = nest_level\n       \
    \     end\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend", "    local max_nesting = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local nesting = 0\n  \
    \      local max_nesting_in_group = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nest_level = 0\n        local max_nest_level = 0\n        for j\
    \ = 1, #paren_group do\n            local c = paren_group:sub(j, j)\n        \
    \    if c == '(' then\n                nest_level = nest_level + 1\n         \
    \   elseif c == ')' then\n                nest_level = nest_level - 1\n      \
    \      end\n            max_nest_level = math.max(max_nest_level, nest_level)\n\
    \        end\n        max_nest_levels[i] = max_nest_level\n    end\n    return\
    \ max_nest_levels\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \          max_level = math.max(max_level, level)\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n        end\n    \
    \    table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for i = 1, #paren_group do\n     \
    \       if paren_group:sub(i, i) == '(' then\n                level = level +\
    \ 1\n                max_level = math.max(max_level, level)\n            elseif\
    \ paren_group:sub(i, i) == ')' then\n                level = level - 1\n     \
    \       end\n        end\n        table.insert(max_levels, max_level)\n    end\n\
    \    return max_levels\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nested_parens = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local max_nested_paren = 0\n        local current_nested_paren =\
    \ 0\n        for i = 1, #paren_group do\n            if paren_group:sub(i, i)\
    \ == '(' then\n                current_nested_paren = current_nested_paren + 1\n\
    \            elseif paren_group:sub(i, i) == ')' then\n                current_nested_paren\
    \ = current_nested_paren - 1\n            end\n            if current_nested_paren\
    \ > max_nested_paren then\n                max_nested_paren = current_nested_paren\n\
    \            end\n        end\n        table.insert(max_nested_parens, max_nested_paren)\n\
    \    end\n    return max_nested_parens\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i = 1, #paren_groups do\n        local\
    \ paren_group = paren_groups[i]\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            local char = paren_group:sub(j,\
    \ j)\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        max_nesting[i] = max_nesting_in_group\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local current_nesting = 0\n        local max_current_nesting = 0\n\
    \        for c in paren_group:gmatch('.') do\n            if c == '(' then\n \
    \               current_nesting = current_nesting + 1\n            elseif c ==\
    \ ')' then\n                current_nesting = current_nesting - 1\n          \
    \  end\n            max_current_nesting = math.max(max_current_nesting, current_nesting)\n\
    \        end\n        table.insert(max_nesting, max_current_nesting)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i = 1, #paren_groups do\n        local\
    \ paren_group = paren_groups[i]\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            local char = paren_group:sub(j,\
    \ j)\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        max_nesting[i] = max_nesting_in_group\n    end\n\
    \    return max_nesting\nend", "  local max_nesting = {}\n  local current_nesting\
    \ = 0\n  local max_current_nesting = 0\n  for i = 1, #paren_string do\n    local\
    \ char = paren_string:sub(i, i)\n    if char == '(' then\n      current_nesting\
    \ = current_nesting + 1\n      if current_nesting > max_current_nesting then\n\
    \        max_current_nesting = current_nesting\n      end\n    elseif char ==\
    \ ')' then\n      current_nesting = current_nesting - 1\n      if current_nesting\
    \ == 0 then\n        table.insert(max_nesting, max_current_nesting)\n        max_current_nesting\
    \ = 0\n      end\n    end\n  end\n  return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nestings = {}\n    for i =\
    \ 1, #paren_groups do\n        local paren_group = paren_groups[i]\n        local\
    \ max_nesting = 0\n        local current_nesting = 0\n        for j = 1, #paren_group\
    \ do\n            local paren = paren_group:sub(j, j)\n            if paren ==\
    \ '(' then\n                current_nesting = current_nesting + 1\n          \
    \  elseif paren == ')' then\n                current_nesting = current_nesting\
    \ - 1\n            end\n            if current_nesting > max_nesting then\n  \
    \              max_nesting = current_nesting\n            end\n        end\n \
    \       table.insert(max_nestings, max_nesting)\n    end\n    return max_nestings\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for i = 1, #paren_group do\n     \
    \       local char = paren_group:sub(i, i)\n            if char == '(' then\n\
    \                paren_level = paren_level + 1\n            elseif char == ')'\
    \ then\n                paren_level = paren_level - 1\n            end\n     \
    \       max_level = math.max(max_level, paren_level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local max_nesting =\
    \ {}\n    for paren_group in paren_string:gmatch('%b()') do\n        local nesting\
    \ = 0\n        for c in paren_group:gmatch('%b()') do\n            nesting = nesting\
    \ + 1\n        end\n        table.insert(max_nesting, nesting)\n    end\n    return\
    \ max_nesting\nend", "    local paren_groups = stringx.split(paren_string, ' ')\n\
    \    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups) do\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ i = 1, #paren_group do\n            if paren_group:sub(i, i) == '(' then\n \
    \               nesting = nesting + 1\n                max_nesting_in_group =\
    \ math.max(max_nesting_in_group, nesting)\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_levels = {}\n    for _, group in ipairs(paren_groups) do\n\
    \        local level = 0\n        local max_level = 0\n        for c in group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \          max_level = math.max(max_level, level)\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n        end\n    \
    \    table.insert(max_levels, max_level)\n    end\n    return max_levels\nend",
  "    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local max_depth = 0\n    local depth = 0\n    local depths = {}\n \
    \   for c in paren_string:gmatch('.') do\n        if c == '(' then\n         \
    \   depth = depth + 1\n            if depth > max_depth then\n               \
    \ max_depth = depth\n            end\n        elseif c == ')' then\n         \
    \   depths[#depths + 1] = depth\n            depth = depth - 1\n        end\n\
    \    end\n    return depths\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nestings = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local max_nesting = 0\n        local current_nesting = 0\n     \
    \   for i = 1, #paren_group do\n            if paren_group:sub(i, i) == '(' then\n\
    \                current_nesting = current_nesting + 1\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                current_nesting = current_nesting - 1\n    \
    \        end\n            max_nesting = math.max(max_nesting, current_nesting)\n\
    \        end\n        table.insert(max_nestings, max_nesting)\n    end\n    return\
    \ max_nestings\nend", "    local paren_groups = stringx.split(paren_string, '\
    \ ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for _, char in ipairs(paren_group) do\n            if char == '(' then\n\
    \                nesting = nesting + 1\n            elseif char == ')' then\n\
    \                nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "    local max_nesting\
    \ = {}\n    local current_nesting = 0\n    local max_nesting_so_far = 0\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            current_nesting = current_nesting + 1\n \
    \           if current_nesting > max_nesting_so_far then\n                max_nesting_so_far\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      max_nesting[#max_nesting + 1] = max_nesting_so_far\n            current_nesting\
    \ = current_nesting - 1\n        end\n    end\n    return max_nesting\nend", " \
    \   local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \      elseif c == ')' then\n                depth = depth - 1\n            end\n\
    \            max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            if paren_group:sub(j, j)\
    \ == '(' then\n                nesting = nesting + 1\n                if nesting\
    \ > max_nesting_in_group then\n                    max_nesting_in_group = nesting\n\
    \                end\n            elseif paren_group:sub(j, j) == ')' then\n \
    \               nesting = nesting - 1\n            end\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend", "  local paren_groups\
    \ = {}\n  for paren_group in paren_string:gmatch('%S+') do\n    local max_nesting\
    \ = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('.') do\n  \
    \    if paren == '(' then\n        nesting = nesting + 1\n      elseif paren ==\
    \ ')' then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting\
    \ then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_list = {}\n\
    \    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local current_nesting = 0\n        for char in paren_group:gmatch('.')\
    \ do\n            if char == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif char == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(paren_list, max_nesting)\n    end\n    return paren_list\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                level = level + 1\n\
    \            elseif paren == ')' then\n                level = level - 1\n   \
    \         end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \     max_level = math.max(max_level, level)\n            elseif c == ')' then\n\
    \                level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i =\
    \ 1, #paren_groups do\n        local group = paren_groups[i]\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for j = 1, #group do\n\
    \            local char = group:sub(j, j)\n            if char == '(' then\n \
    \               nesting = nesting + 1\n            elseif char == ')' then\n \
    \               nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    local max_nesting_in_group = 0\n    for _, char\
    \ in ipairs(paren_group) do\n      if char == '(' then\n        nesting = nesting\
    \ + 1\n      elseif char == ')' then\n        nesting = nesting - 1\n      end\n\
    \      if nesting > max_nesting_in_group then\n        max_nesting_in_group =\
    \ nesting\n      end\n    end\n    table.insert(max_nesting, max_nesting_in_group)\n\
    \  end\n  return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for _, char in ipairs(paren_group) do\n            if char == '(' then\n\
    \                nesting = nesting + 1\n            elseif char == ')' then\n\
    \                nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local paren_levels = {}\n    for _,\
    \ paren_group in ipairs(paren_groups) do\n        local paren_level = 0\n    \
    \    local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend", "  local paren_groups = split(paren_string, ' ')\n  local\
    \ paren_levels = {}\n  for i, paren_group in ipairs(paren_groups) do\n    local\
    \ paren_level = 0\n    local max_paren_level = 0\n    for j = 1, #paren_group\
    \ do\n      local char = paren_group:sub(j, j)\n      if char == '(' then\n  \
    \      paren_level = paren_level + 1\n      elseif char == ')' then\n        paren_level\
    \ = paren_level - 1\n      end\n      if paren_level > max_paren_level then\n\
    \        max_paren_level = paren_level\n      end\n    end\n    paren_levels[i]\
    \ = max_paren_level\n  end\n  return paren_levels\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local paren_levels = {}\n    for _,\
    \ paren_group in ipairs(paren_groups) do\n        local paren_level = 0\n    \
    \    local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend", "  local paren_groups = stringx.split(paren_string, ' ')\n\
    \  local max_nesting = {}\n  for i = 1, #paren_groups do\n    local paren_group\
    \ = paren_groups[i]\n    local nesting = 0\n    local max_nesting_i = 0\n    for\
    \ j = 1, #paren_group do\n      local paren = paren_group:sub(j, j)\n      if\
    \ paren == '(' then\n        nesting = nesting + 1\n      elseif paren == ')'\
    \ then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting_i\
    \ then\n        max_nesting_i = nesting\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_i)\n  end\n  return max_nesting\nend", "    local paren_groups =\
    \ stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for i = 1, #paren_group do\n            if paren_group:sub(i, i)\
    \ == '(' then\n                nesting = nesting + 1\n                max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = split(paren_string, '\
    \ ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for _, paren\
    \ in ipairs(paren_group) do\n            if paren == '(' then\n              \
    \  level = level + 1\n            elseif paren == ')' then\n                level\
    \ = level - 1\n            end\n            if level > max_level then\n      \
    \          max_level = level\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_levels\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local level\
    \ = 0\n        local max_level = 0\n        for char in paren_group:gmatch('.')\
    \ do\n            if char == '(' then\n                level = level + 1\n   \
    \         elseif char == ')' then\n                level = level - 1\n       \
    \     end\n            max_level = math.max(max_level, level)\n        end\n \
    \       table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                nesting = nesting\
    \ + 1\n            elseif paren == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = paren_string:split('\
    \ ')\n    local max_levels = {}\n    for _, group in ipairs(paren_groups) do\n\
    \        local level = 0\n        local max_level = 0\n        for c in group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(max_levels,\
    \ max_level)\n    end\n    return max_levels\nend", "    local paren_list = {}\n\
    \    local paren_stack = {}\n    local max_level = 0\n    local current_level\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            current_level = current_level + 1\n\
    \            if current_level > max_level then\n                max_level = current_level\n\
    \            end\n            table.insert(paren_stack, c)\n        elseif c ==\
    \ ')' then\n            table.remove(paren_stack)\n            current_level =\
    \ current_level - 1\n        elseif c == ' ' then\n            table.insert(paren_list,\
    \ max_level)\n            max_level = 0\n            current_level = 0\n     \
    \   end\n    end\n    table.insert(paren_list, max_level)\n    return paren_list\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nest_level = nest_level\
    \ + 1\n            elseif char == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            max_nest_level = math.max(max_nest_level,\
    \ nest_level)\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend", "  local max_depth = 0\n  local depth\
    \ = 0\n  local depths = {}\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif c == ')' then\n     \
    \ depths[#depths + 1] = depth\n      depth = depth - 1\n    end\n  end\n  return\
    \ depths\nend", "    local paren_groups = stringx.split(paren_string, ' ')\n \
    \   local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups) do\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ c in paren_group:gmatch('.') do\n            if c == '(' then\n            \
    \    nesting = nesting + 1\n                if nesting > max_nesting_in_group\
    \ then\n                    max_nesting_in_group = nesting\n                end\n\
    \            elseif c == ')' then\n                nesting = nesting - 1\n   \
    \         end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for c in paren_group:gmatch('.') do\n            if c == '(' then\n     \
    \           nesting = nesting + 1\n                if nesting > max_nesting_in_group\
    \ then\n                    max_nesting_in_group = nesting\n                end\n\
    \            elseif c == ')' then\n                nesting = nesting - 1\n   \
    \         end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local paren_levels = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local paren_level = 0\n    local max_level = 0\n    for i = 1, #paren_group\
    \ do\n      if paren_group:sub(i, i) == '(' then\n        paren_level = paren_level\
    \ + 1\n      elseif paren_group:sub(i, i) == ')' then\n        paren_level = paren_level\
    \ - 1\n      end\n      max_level = math.max(max_level, paren_level)\n    end\n\
    \    table.insert(paren_levels, max_level)\n  end\n  return paren_levels\nend",
  "    local paren_levels = {}\n    local current_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_level = current_level + 1\n        elseif char == ')' then\n\
    \            current_level = current_level - 1\n        elseif char == ' ' then\n\
    \            table.insert(paren_levels, current_level)\n            current_level\
    \ = 0\n        end\n    end\n    table.insert(paren_levels, current_level)\n \
    \   return paren_levels\nend", "  local max_nesting = 0\n  local nesting = 0\n\
    \  local max_nesting_list = {}\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      nesting = nesting + 1\n      if nesting > max_nesting\
    \ then\n        max_nesting = nesting\n      end\n    elseif c == ')' then\n \
    \     nesting = nesting - 1\n    elseif c == ' ' then\n      max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n      max_nesting = 0\n      nesting = 0\n    end\n  end\n\
    \  max_nesting_list[#max_nesting_list + 1] = max_nesting\n  return max_nesting_list\n\
    end", "    local depth = 0\n    local max_depth = 0\n    local depths = {}\n \
    \   for i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n\
    \        if char == '(' then\n            depth = depth + 1\n            if depth\
    \ > max_depth then\n                max_depth = depth\n            end\n     \
    \   elseif char == ')' then\n            depth = depth - 1\n        elseif char\
    \ == ' ' then\n            depths[#depths + 1] = max_depth\n            max_depth\
    \ = 0\n            depth = 0\n        end\n    end\n    depths[#depths + 1] =\
    \ max_depth\n    return depths\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local paren_level = 0\n        local max_level = 0\n        for\
    \ i = 1, #paren_group do\n            if paren_group:sub(i, i) == '(' then\n \
    \               paren_level = paren_level + 1\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                paren_level = paren_level - 1\n            end\n\
    \            max_level = math.max(max_level, paren_level)\n        end\n     \
    \   table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('%S') do\n            if paren == '(' then\n         \
    \       nesting = nesting + 1\n            elseif paren == ')' then\n        \
    \        nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                nest_level = nest_level\
    \ + 1\n            elseif paren == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            max_nest_level = math.max(max_nest_level,\
    \ nest_level)\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend", "  local max_nesting = 0\n  local\
    \ nesting = 0\n  local max_nesting_list = {}\n  for i = 1, #paren_string do\n\
    \    local c = paren_string:sub(i, i)\n    if c == '(' then\n      nesting = nesting\
    \ + 1\n      if nesting > max_nesting then\n        max_nesting = nesting\n  \
    \    end\n    elseif c == ')' then\n      nesting = nesting - 1\n    elseif c\
    \ == ' ' then\n      max_nesting_list[#max_nesting_list + 1] = max_nesting\n \
    \     max_nesting = 0\n      nesting = 0\n    end\n  end\n  max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n  return max_nesting_list\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i =\
    \ 1, #paren_groups do\n        local paren_group = paren_groups[i]\n        local\
    \ nesting = 0\n        local max_nesting_in_group = 0\n        for j = 1, #paren_group\
    \ do\n            local c = paren_group:sub(j, j)\n            if c == '(' then\n\
    \                nesting = nesting + 1\n            elseif c == ')' then\n   \
    \             nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i =\
    \ 1, #paren_groups do\n        local paren_group = paren_groups[i]\n        local\
    \ nesting = 0\n        local max_nesting_local = 0\n        for j = 1, #paren_group\
    \ do\n            local paren = paren_group:sub(j, j)\n            if paren ==\
    \ '(' then\n                nesting = nesting + 1\n            elseif paren ==\
    \ ')' then\n                nesting = nesting - 1\n            end\n         \
    \   if nesting > max_nesting_local then\n                max_nesting_local = nesting\n\
    \            end\n        end\n        max_nesting[i] = max_nesting_local\n  \
    \  end\n    return max_nesting\nend", "    local max_nesting = 0\n    local nesting\
    \ = 0\n    local max_nesting_list = {}\n    for i = 1, #paren_string do\n    \
    \    local c = paren_string:sub(i, i)\n        if c == '(' then\n            nesting\
    \ = nesting + 1\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        elseif c == ')' then\n            nesting\
    \ = nesting - 1\n        elseif c == ' ' then\n            max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n            max_nesting = 0\n            nesting = 0\n \
    \       end\n    end\n    max_nesting_list[#max_nesting_list + 1] = max_nesting\n\
    \    return max_nesting_list\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for j = 1, #paren_group do\n            if paren_group:sub(j, j) == '(' then\n\
    \                nesting = nesting + 1\n                if nesting > max_nesting_in_group\
    \ then\n                    max_nesting_in_group = nesting\n                end\n\
    \            elseif paren_group:sub(j, j) == ')' then\n                nesting\
    \ = nesting - 1\n            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local max_level = 0\n        local level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local paren_levels = {}\n    for _,\
    \ paren_group in ipairs(paren_groups) do\n        local level = 0\n        local\
    \ max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group, ''))\
    \ do\n            if paren == '(' then\n                level = level + 1\n  \
    \          elseif paren == ')' then\n                level = level - 1\n     \
    \       end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \          elseif c == ')' then\n                nesting = nesting - 1\n     \
    \       end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local max_nesting = 0\n    local\
    \ cur_nesting = 0\n    local nesting_list = {}\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    cur_nesting = cur_nesting + 1\n            if cur_nesting > max_nesting then\n\
    \                max_nesting = cur_nesting\n            end\n        elseif c\
    \ == ')' then\n            cur_nesting = cur_nesting - 1\n        elseif c ==\
    \ ' ' then\n            table.insert(nesting_list, max_nesting)\n            max_nesting\
    \ = 0\n            cur_nesting = 0\n        end\n    end\n    table.insert(nesting_list,\
    \ max_nesting)\n    return nesting_list\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local paren_levels = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local level = 0\n    local max_level = 0\n    for i = 1, string.len(paren_group)\
    \ do\n      local char = string.sub(paren_group, i, i)\n      if char == '(' then\n\
    \        level = level + 1\n        max_level = math.max(max_level, level)\n \
    \     elseif char == ')' then\n        level = level - 1\n      end\n    end\n\
    \    table.insert(paren_levels, max_level)\n  end\n  return paren_levels\nend",
  "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nest_level = nest_level +\
    \ 1\n            elseif c == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            max_nest_level = math.max(max_nest_level,\
    \ nest_level)\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend", "    local paren_levels = {}\n   \
    \ local paren_level = 0\n    local paren_start = 0\n    local paren_end = 0\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            paren_level = paren_level + 1\n        \
    \    if paren_level == 1 then\n                paren_start = i\n            end\n\
    \        elseif c == ')' then\n            if paren_level == 1 then\n        \
    \        paren_end = i\n                table.insert(paren_levels, paren_level)\n\
    \                paren_level = 0\n            else\n                paren_level\
    \ = paren_level - 1\n            end\n        end\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i = 1, #paren_groups do\n        local\
    \ paren_group = paren_groups[i]\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            local char = paren_group:sub(j,\
    \ j)\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        max_nesting[i] = max_nesting_in_group\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_this_group = 0\n  \
    \      for _, paren in ipairs(stringx.split(paren_group, '')) do\n           \
    \ if paren == '(' then\n                nesting = nesting + 1\n              \
    \  max_nesting_this_group = math.max(max_nesting_this_group, nesting)\n      \
    \      elseif paren == ')' then\n                nesting = nesting - 1\n     \
    \       end\n        end\n        table.insert(max_nesting, max_nesting_this_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i = 1, #paren_groups do\n        local\
    \ paren_group = paren_groups[i]\n        local paren_stack = {}\n        local\
    \ max_nesting_level = 0\n        for j = 1, #paren_group do\n            local\
    \ paren = paren_group:sub(j, j)\n            if paren == '(' then\n          \
    \      table.insert(paren_stack, paren)\n                max_nesting_level = math.max(max_nesting_level,\
    \ #paren_stack)\n            elseif paren == ')' then\n                table.remove(paren_stack)\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for _, char in ipairs(paren_group) do\n            if char == '(' then\n\
    \                nesting = nesting + 1\n            elseif char == ')' then\n\
    \                nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local level\
    \ = 0\n        local max_level = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                level = level + 1\n  \
    \          elseif paren == ')' then\n                level = level - 1\n     \
    \       end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_groups, max_level)\n    end\n    return paren_groups\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = stringx.split(paren_string, ' ')\n  local paren_levels\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local paren_level\
    \ = 0\n    local max_level = 0\n    for c in paren_group:gmatch('.') do\n    \
    \  if c == '(' then\n        paren_level = paren_level + 1\n      elseif c ==\
    \ ')' then\n        paren_level = paren_level - 1\n      end\n      max_level\
    \ = math.max(max_level, paren_level)\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for i = 1,\
    \ #paren_group do\n            local char = paren_group:sub(i, i)\n          \
    \  if char == '(' then\n                level = level + 1\n                max_level\
    \ = math.max(max_level, level)\n            elseif char == ')' then\n        \
    \        level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_depth = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local depth = 0\n        local max_depth_in_group\
    \ = 0\n        for char in stringx.chars(paren_group) do\n            if char\
    \ == '(' then\n                depth = depth + 1\n                max_depth_in_group\
    \ = math.max(max_depth_in_group, depth)\n            elseif char == ')' then\n\
    \                depth = depth - 1\n            else\n                error('Invalid\
    \ input')\n            end\n        end\n        table.insert(max_depth, max_depth_in_group)\n\
    \    end\n    return max_depth\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \          max_level = math.max(max_level, level)\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n        end\n    \
    \    table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local level = 0\n        local max_level = 0\n        for j = 1, #paren_group\
    \ do\n            local paren = paren_group:sub(j, j)\n            if paren ==\
    \ '(' then\n                level = level + 1\n            elseif paren == ')'\
    \ then\n                level = level - 1\n            end\n            max_level\
    \ = math.max(max_level, level)\n        end\n        paren_levels[i] = max_level\n\
    \    end\n    return paren_levels\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nested_parens = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local paren_stack = {}\n        local max_nested = 0\n        for\
    \ i = 1, #paren_group do\n            local paren = paren_group:sub(i, i)\n  \
    \          if paren == '(' then\n                table.insert(paren_stack, paren)\n\
    \            elseif paren == ')' then\n                table.remove(paren_stack)\n\
    \            end\n            max_nested = math.max(max_nested, #paren_stack)\n\
    \        end\n        table.insert(max_nested_parens, max_nested)\n    end\n \
    \   return max_nested_parens\nend", "    local paren_groups = split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i, group in ipairs(paren_groups) do\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #group do\n            if group:sub(j, j) == '(' then\n             \
    \   nesting = nesting + 1\n            elseif group:sub(j, j) == ')' then\n  \
    \              nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i = 1, #paren_groups do\n        local\
    \ paren_group = paren_groups[i]\n        local nesting = 0\n        local max_nesting_i\
    \ = 0\n        for j = 1, #paren_group do\n            local char = paren_group:sub(j,\
    \ j)\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_i then\n              \
    \  max_nesting_i = nesting\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_i)\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for _, char in ipairs(stringx.split(paren_group, '')) do\n    \
    \        if char == '(' then\n                nesting = nesting + 1\n        \
    \    elseif char == ')' then\n                nesting = nesting - 1\n        \
    \    end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = split(paren_string, '\
    \ ')\n    local max_nesting = {}\n    for i, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for j = 1, #paren_group do\n            local c = paren_group:sub(j, j)\n\
    \            if c == '(' then\n                nesting = nesting + 1\n       \
    \     elseif c == ')' then\n                nesting = nesting - 1\n          \
    \  end\n            if nesting > max_nesting_in_group then\n                max_nesting_in_group\
    \ = nesting\n            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for _, c in utf8.next, paren_group do\n            if c == '(' then\n   \
    \             nesting = nesting + 1\n                if nesting > max_nesting_in_group\
    \ then\n                    max_nesting_in_group = nesting\n                end\n\
    \            elseif c == ')' then\n                nesting = nesting - 1\n   \
    \         end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local max_nesting = 0\n    local\
    \ max_nesting_list = {}\n    local current_nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         current_nesting = current_nesting + 1\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        elseif c == ')' then\n            max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n            max_nesting = 0\n            current_nesting\
    \ = 0\n        end\n    end\n    return max_nesting_list\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            if paren_group:sub(j, j)\
    \ == '(' then\n                nesting = nesting + 1\n                if nesting\
    \ > max_nesting_in_group then\n                    max_nesting_in_group = nesting\n\
    \                end\n            elseif paren_group:sub(j, j) == ')' then\n \
    \               nesting = nesting - 1\n            end\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nested_parens = {}\n    for\
    \ i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n     \
    \   local max_nesting = 0\n        local current_nesting = 0\n        for j =\
    \ 1, #paren_group do\n            local char = paren_group:sub(j, j)\n       \
    \     if char == '(' then\n                current_nesting = current_nesting +\
    \ 1\n            elseif char == ')' then\n                current_nesting = current_nesting\
    \ - 1\n            end\n            if current_nesting > max_nesting then\n  \
    \              max_nesting = current_nesting\n            end\n        end\n \
    \       table.insert(max_nested_parens, max_nesting)\n    end\n    return max_nested_parens\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_i = 0\n        for j = 1,\
    \ #paren_group do\n            local paren = paren_group:sub(j, j)\n         \
    \   if paren == '(' then\n                nesting = nesting + 1\n            elseif\
    \ paren == ')' then\n                nesting = nesting - 1\n            end\n\
    \            if nesting > max_nesting_i then\n                max_nesting_i =\
    \ nesting\n            end\n        end\n        table.insert(max_nesting, max_nesting_i)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local paren_level = 0\n        local max_level = 0\n        for\
    \ _, paren in ipairs(stringx.split(paren_group, '')) do\n            if paren\
    \ == '(' then\n                paren_level = paren_level + 1\n            elseif\
    \ paren == ')' then\n                paren_level = paren_level - 1\n         \
    \   end\n            max_level = math.max(max_level, paren_level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(paren_group)\
    \ do\n            if paren == '(' then\n                level = level + 1\n  \
    \          elseif paren == ')' then\n                level = level - 1\n     \
    \       end\n            if level > max_level then\n                max_level\
    \ = level\n            end\n        end\n        table.insert(paren_levels, max_level)\n\
    \    end\n    return paren_levels\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for i = 1, #paren_groups do\n    local paren_group\
    \ = paren_groups[i]\n    local nesting = 0\n    local max_nesting_in_group = 0\n\
    \    for j = 1, #paren_group do\n      local char = paren_group:sub(j, j)\n  \
    \    if char == '(' then\n        nesting = nesting + 1\n      elseif char ==\
    \ ')' then\n        nesting = nesting - 1\n      end\n      max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n    end\n    max_nesting[i] = max_nesting_in_group\n\
    \  end\n  return max_nesting\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch('%S+') do\n    local max_nesting = 0\n    local nesting\
    \ = 0\n    for paren in paren_group:gmatch('%S') do\n      if paren == '(' then\n\
    \        nesting = nesting + 1\n      elseif paren == ')' then\n        nesting\
    \ = nesting - 1\n      end\n      if nesting > max_nesting then\n        max_nesting\
    \ = nesting\n      end\n    end\n    table.insert(paren_groups, max_nesting)\n\
    \  end\n  return paren_groups\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for i = 1, #paren_groups do\n    local group\
    \ = paren_groups[i]\n    local nesting = 0\n    local max_nesting_for_group =\
    \ 0\n    for j = 1, #group do\n      local char = group:sub(j, j)\n      if char\
    \ == '(' then\n        nesting = nesting + 1\n      elseif char == ')' then\n\
    \        nesting = nesting - 1\n      end\n      if nesting > max_nesting_for_group\
    \ then\n        max_nesting_for_group = nesting\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_for_group)\n  end\n  return max_nesting\nend", "    local paren_list\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local depth\
    \ = 0\n        local max_depth = 0\n        for paren in paren_group:gmatch('%S')\
    \ do\n            if paren == '(' then\n                depth = depth + 1\n  \
    \          elseif paren == ')' then\n                depth = depth - 1\n     \
    \       end\n            if depth > max_depth then\n                max_depth\
    \ = depth\n            end\n        end\n        table.insert(paren_list, max_depth)\n\
    \    end\n    return paren_list\nend", "    local max_nesting = 0\n    local current_nesting\
    \ = 0\n    local max_nesting_list = {}\n    for i = 1, #paren_string do\n    \
    \    local char = paren_string:sub(i, i)\n        if char == '(' then\n      \
    \      current_nesting = current_nesting + 1\n            if current_nesting >\
    \ max_nesting then\n                max_nesting = current_nesting\n          \
    \  end\n        elseif char == ')' then\n            current_nesting = current_nesting\
    \ - 1\n        elseif char == ' ' then\n            table.insert(max_nesting_list,\
    \ max_nesting)\n            max_nesting = 0\n            current_nesting = 0\n\
    \        end\n    end\n    table.insert(max_nesting_list, max_nesting)\n    return\
    \ max_nesting_list\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local paren_level = 0\n        local max_level = 0\n        for\
    \ _, paren in ipairs(stringx.split(paren_group, '')) do\n            if paren\
    \ == '(' then\n                paren_level = paren_level + 1\n            elseif\
    \ paren == ')' then\n                paren_level = paren_level - 1\n         \
    \   end\n            max_level = math.max(max_level, paren_level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if char == '(' then\n                nesting = nesting\
    \ + 1\n            elseif char == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for _, char in ipairs(paren_group) do\n            if char == '(' then\n\
    \                nesting = nesting + 1\n            elseif char == ')' then\n\
    \                nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for _, char in ipairs(stringx.split(paren_group, '')) do\n    \
    \        if char == '(' then\n                nesting = nesting + 1\n        \
    \    elseif char == ')' then\n                nesting = nesting - 1\n        \
    \    end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for _, char\
    \ in ipairs(paren_group) do\n            if char == '(' then\n               \
    \ level = level + 1\n                max_level = math.max(max_level, level)\n\
    \            elseif char == ')' then\n                level = level - 1\n    \
    \        end\n        end\n        table.insert(paren_levels, max_level)\n   \
    \ end\n    return paren_levels\nend", "    local paren_list = stringx.split(paren_string)\n\
    \    local max_nesting = {}\n    for _, paren_group in ipairs(paren_list) do\n\
    \        local nesting = 0\n        local max_nesting_local = 0\n        for i\
    \ = 1, #paren_group do\n            if paren_group:sub(i, i) == '(' then\n   \
    \             nesting = nesting + 1\n                max_nesting_local = math.max(max_nesting_local,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_local)\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = split(paren_string, ' ')\n    local max_nesting = {}\n    for i, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            local char = paren_group:sub(j,\
    \ j)\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   max_nesting[i] = max_nesting_in_group\n    end\n    return max_nesting\nend",
  "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #group do\n            local char = group:sub(j, j)\n            if char\
    \ == '(' then\n                nesting = nesting + 1\n            elseif char\
    \ == ')' then\n                nesting = nesting - 1\n            end\n      \
    \      max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n      \
    \  end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n   \
    \ return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, group in ipairs(paren_groups) do\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ _, char in ipairs(group) do\n            if char == '(' then\n             \
    \   nesting = nesting + 1\n            elseif char == ')' then\n             \
    \   nesting = nesting - 1\n            end\n            max_nesting_in_group =\
    \ math.max(max_nesting_in_group, nesting)\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for i = 1, #group do\n            if group:sub(i, i) == '(' then\n\
    \                nesting = nesting + 1\n                max_nesting_in_group =\
    \ math.max(max_nesting_in_group, nesting)\n            elseif group:sub(i, i)\
    \ == ')' then\n                nesting = nesting - 1\n            end\n      \
    \  end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n   \
    \ return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for i = 1, #paren_group do\n            if paren_group:sub(i, i) == '(' then\n\
    \                nesting = nesting + 1\n                max_nesting_in_group =\
    \ math.max(max_nesting_in_group, nesting)\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "  local max_nesting = 0\n  local max_nesting_list\
    \ = {}\n  local paren_list = stringx.split(paren_string)\n  for _, paren in ipairs(paren_list)\
    \ do\n    local nesting = 0\n    for i = 1, #paren do\n      if paren:sub(i, i)\
    \ == '(' then\n        nesting = nesting + 1\n      elseif paren:sub(i, i) ==\
    \ ')' then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(max_nesting_list,\
    \ nesting)\n  end\n  return max_nesting_list\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for i, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    local max_nesting_in_group = 0\n    for c in\
    \ paren_group:gmatch('.') do\n      if c == '(' then\n        nesting = nesting\
    \ + 1\n        if nesting > max_nesting_in_group then\n          max_nesting_in_group\
    \ = nesting\n        end\n      elseif c == ')' then\n        nesting = nesting\
    \ - 1\n      end\n    end\n    max_nesting[i] = max_nesting_in_group\n  end\n\
    \  return max_nesting\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for i = 1, #paren_groups do\n    local paren_group\
    \ = paren_groups[i]\n    local nesting = 0\n    local max_nesting_in_group = 0\n\
    \    for j = 1, #paren_group do\n      local paren = paren_group:sub(j, j)\n \
    \     if paren == '(' then\n        nesting = nesting + 1\n      elseif paren\
    \ == ')' then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting_in_group\
    \ then\n        max_nesting_in_group = nesting\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_depth = {}\n    for i = 1,\
    \ #paren_groups do\n        local cur_depth = 0\n        local max_cur_depth =\
    \ 0\n        for j = 1, #paren_groups[i] do\n            if paren_groups[i]:sub(j,\
    \ j) == '(' then\n                cur_depth = cur_depth + 1\n                if\
    \ cur_depth > max_cur_depth then\n                    max_cur_depth = cur_depth\n\
    \                end\n            elseif paren_groups[i]:sub(j, j) == ')' then\n\
    \                cur_depth = cur_depth - 1\n            end\n        end\n   \
    \     max_depth[i] = max_cur_depth\n    end\n    return max_depth\nend", "   \
    \ local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch('%S+') do\n    local max_nesting = 0\n    local cur_nesting\
    \ = 0\n    for paren in paren_group:gmatch('.') do\n      if paren == '(' then\n\
    \        cur_nesting = cur_nesting + 1\n      elseif paren == ')' then\n     \
    \   cur_nesting = cur_nesting - 1\n      end\n      max_nesting = math.max(max_nesting,\
    \ cur_nesting)\n    end\n    table.insert(paren_groups, max_nesting)\n  end\n\
    \  return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_level = 0\n        local\
    \ level = 0\n        for c in paren_group:gmatch('.') do\n            if c ==\
    \ '(' then\n                level = level + 1\n            elseif c == ')' then\n\
    \                level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        paren_groups[#paren_groups + 1] = max_level\n \
    \   end\n    return paren_groups\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i = 1, #paren_groups do\n        local\
    \ paren_group = paren_groups[i]\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            local paren = paren_group:sub(j,\
    \ j)\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   max_nesting[i] = max_nesting_in_group\n    end\n    return max_nesting\nend",
  "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \      elseif c == ')' then\n                depth = depth - 1\n            end\n\
    \            max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local paren_levels = {}\n    for _,\
    \ paren_group in ipairs(paren_groups) do\n        local paren_level = 0\n    \
    \    local max_level = 0\n        for paren in paren_group:gmatch('%b()') do\n\
    \            paren_level = paren_level + 1\n            max_level = math.max(max_level,\
    \ paren_level)\n        end\n        table.insert(paren_levels, max_level)\n \
    \   end\n    return paren_levels\nend", "  local paren_list = {}\n  local paren_stack\
    \ = {}\n  local max_depth = 0\n  local cur_depth = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      cur_depth\
    \ = cur_depth + 1\n      if cur_depth > max_depth then\n        max_depth = cur_depth\n\
    \      end\n      table.insert(paren_stack, c)\n    elseif c == ')' then\n   \
    \   table.remove(paren_stack)\n      cur_depth = cur_depth - 1\n    elseif c ==\
    \ ' ' then\n      table.insert(paren_list, max_depth)\n      max_depth = 0\n \
    \     cur_depth = 0\n    end\n  end\n  table.insert(paren_list, max_depth)\n \
    \ return paren_list\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    local max_nesting_in_group = 0\n    for c in\
    \ paren_group:gmatch('.') do\n      if c == '(' then\n        nesting = nesting\
    \ + 1\n        if nesting > max_nesting_in_group then\n          max_nesting_in_group\
    \ = nesting\n        end\n      elseif c == ')' then\n        nesting = nesting\
    \ - 1\n      end\n    end\n    table.insert(max_nesting, max_nesting_in_group)\n\
    \  end\n  return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_group = 0\n       \
    \ for c in paren_group:gmatch('.') do\n            if c == '(' then\n        \
    \        nesting = nesting + 1\n                if nesting > max_nesting_group\
    \ then\n                    max_nesting_group = nesting\n                end\n\
    \            elseif c == ')' then\n                nesting = nesting - 1\n   \
    \         end\n        end\n        table.insert(max_nesting, max_nesting_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ '%s+')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local paren_level = 0\n        local max_level = 0\n        for\
    \ c in paren_group:gmatch('.') do\n            if c == '(' then\n            \
    \    paren_level = paren_level + 1\n            elseif c == ')' then\n       \
    \         paren_level = paren_level - 1\n            end\n            max_level\
    \ = math.max(max_level, paren_level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i =\
    \ 1, #paren_groups do\n        local paren_group = paren_groups[i]\n        local\
    \ nesting = 0\n        local max_nesting_in_group = 0\n        for j = 1, #paren_group\
    \ do\n            local char = paren_group:sub(j, j)\n            if char == '('\
    \ then\n                nesting = nesting + 1\n            elseif char == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = split(paren_string, ' ')\n    local max_nesting = {}\n    for i = 1, #paren_groups\
    \ do\n        local paren_group = paren_groups[i]\n        local nesting = 0\n\
    \        local max_nesting_in_group = 0\n        for j = 1, #paren_group do\n\
    \            local char = paren_group:sub(j, j)\n            if char == '(' then\n\
    \                nesting = nesting + 1\n            elseif char == ')' then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for i = 1, #paren_groups do\n    local paren_group\
    \ = paren_groups[i]\n    local nesting = 0\n    local max_nesting_in_group = 0\n\
    \    for j = 1, #paren_group do\n      local char = paren_group:sub(j, j)\n  \
    \    if char == '(' then\n        nesting = nesting + 1\n      elseif char ==\
    \ ')' then\n        nesting = nesting - 1\n      end\n      max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n    end\n    max_nesting[i] = max_nesting_in_group\n\
    \  end\n  return max_nesting\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local cur_nesting = 0\n    local max_cur_nesting = 0\n    for i = 1,\
    \ #paren_group do\n      if paren_group:sub(i, i) == '(' then\n        cur_nesting\
    \ = cur_nesting + 1\n      elseif paren_group:sub(i, i) == ')' then\n        cur_nesting\
    \ = cur_nesting - 1\n      end\n      max_cur_nesting = math.max(max_cur_nesting,\
    \ cur_nesting)\n    end\n    table.insert(max_nesting, max_cur_nesting)\n  end\n\
    \  return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for i = 1,\
    \ #paren_group do\n            local char = paren_group:sub(i, i)\n          \
    \  if char == '(' then\n                level = level + 1\n                max_level\
    \ = math.max(max_level, level)\n            elseif char == ')' then\n        \
    \        level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = split(paren_string, ' ')\n    local paren_levels = {}\n    for i, paren_group\
    \ in ipairs(paren_groups) do\n        local paren_level = 0\n        local max_paren_level\
    \ = 0\n        for j = 1, #paren_group do\n            if paren_group:sub(j, j)\
    \ == '(' then\n                paren_level = paren_level + 1\n            elseif\
    \ paren_group:sub(j, j) == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            if paren_level > max_paren_level then\n  \
    \              max_paren_level = paren_level\n            end\n        end\n \
    \       paren_levels[i] = max_paren_level\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                nesting = nesting\
    \ + 1\n            elseif paren == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for i = 1, #paren_group do\n            if paren_group:sub(i, i) == '(' then\n\
    \                nesting = nesting + 1\n                max_nesting_in_group =\
    \ math.max(max_nesting_in_group, nesting)\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for c in paren_group:gmatch('.') do\n            if c ==\
    \ '(' then\n                nesting = nesting + 1\n            elseif c == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            max_nesting\
    \ = math.max(max_nesting, nesting)\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ char = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif char == ')' then\n            paren_level\
    \ = paren_level - 1\n        elseif char == ' ' then\n            table.insert(paren_levels,\
    \ paren_level)\n            paren_level = 0\n        end\n    end\n    return\
    \ paren_levels\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    paren_groups[#paren_groups\
    \ + 1] = max_nesting\n  end\n  return paren_groups\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i =\
    \ 1, #paren_groups do\n        local paren_group = paren_groups[i]\n        local\
    \ nesting = 0\n        local max_nesting_i = 0\n        for j = 1, #paren_group\
    \ do\n            local paren = paren_group:sub(j, j)\n            if paren ==\
    \ '(' then\n                nesting = nesting + 1\n            elseif paren ==\
    \ ')' then\n                nesting = nesting - 1\n            end\n         \
    \   if nesting > max_nesting_i then\n                max_nesting_i = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_i)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local paren_level = 0\n        local max_level = 0\n        for\
    \ c in paren_group:gmatch('.') do\n            if c == '(' then\n            \
    \    paren_level = paren_level + 1\n            elseif c == ')' then\n       \
    \         paren_level = paren_level - 1\n            end\n            max_level\
    \ = math.max(max_level, paren_level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "  local paren_groups =\
    \ stringx.split(paren_string, ' ')\n  local max_nesting = {}\n  for i = 1, #paren_groups\
    \ do\n    local paren_group = paren_groups[i]\n    local nesting = 0\n    local\
    \ max_nesting_in_group = 0\n    for j = 1, #paren_group do\n      local paren\
    \ = paren_group:sub(j, j)\n      if paren == '(' then\n        nesting = nesting\
    \ + 1\n      elseif paren == ')' then\n        nesting = nesting - 1\n      end\n\
    \      if nesting > max_nesting_in_group then\n        max_nesting_in_group =\
    \ nesting\n      end\n    end\n    max_nesting[i] = max_nesting_in_group\n  end\n\
    \  return max_nesting\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local paren_levels = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local level = 0\n    local max_level = 0\n    for _, paren in ipairs(paren_group)\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "  local paren_groups = stringx.split(paren_string, ' ')\n\
    \  local max_nesting = {}\n  for i = 1, #paren_groups do\n    local paren_group\
    \ = paren_groups[i]\n    local max_nesting_level = 0\n    local nesting_level\
    \ = 0\n    for j = 1, #paren_group do\n      local c = paren_group:sub(j, j)\n\
    \      if c == '(' then\n        nesting_level = nesting_level + 1\n      elseif\
    \ c == ')' then\n        nesting_level = nesting_level - 1\n      end\n      if\
    \ nesting_level > max_nesting_level then\n        max_nesting_level = nesting_level\n\
    \      end\n    end\n    table.insert(max_nesting, max_nesting_level)\n  end\n\
    \  return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for i = 1, #paren_group do\n            if paren_group:sub(i, i) == '(' then\n\
    \                nesting = nesting + 1\n                max_nesting_in_group =\
    \ math.max(max_nesting_in_group, nesting)\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_levels = {}\n    for i = 1, #paren_groups do\n        local\
    \ group = paren_groups[i]\n        local level = 0\n        local max_level =\
    \ 0\n        for j = 1, #group do\n            local char = group:sub(j, j)\n\
    \            if char == '(' then\n                level = level + 1\n        \
    \    elseif char == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(max_levels,\
    \ max_level)\n    end\n    return max_levels\nend", "    local paren_groups =\
    \ stringx.split(paren_string, ' ')\n    local max_nest_levels = {}\n    for _,\
    \ paren_group in ipairs(paren_groups) do\n        local nest_level = 0\n     \
    \   local max_nest_level = 0\n        for c in paren_group:gmatch('.') do\n  \
    \          if c == '(' then\n                nest_level = nest_level + 1\n   \
    \         elseif c == ')' then\n                nest_level = nest_level - 1\n\
    \            end\n            max_nest_level = math.max(max_nest_level, nest_level)\n\
    \        end\n        table.insert(max_nest_levels, max_nest_level)\n    end\n\
    \    return max_nest_levels\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i = 1, #paren_groups do\n        local\
    \ paren_group = paren_groups[i]\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for j = 1, #paren_group do\n            local paren = paren_group:sub(j,\
    \ j)\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend", "  local paren_groups = split(paren_string, ' ')\n  local\
    \ max_nesting = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local\
    \ nesting = 0\n    local max_nesting_in_group = 0\n    for _, char in ipairs(paren_group)\
    \ do\n      if char == '(' then\n        nesting = nesting + 1\n      elseif char\
    \ == ')' then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting_in_group\
    \ then\n        max_nesting_in_group = nesting\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend", "  local paren_groups\
    \ = {}\n  for group in paren_string:gmatch('%S+') do\n    local level = 0\n  \
    \  local max_level = 0\n    for paren in group:gmatch('.') do\n      if paren\
    \ == '(' then\n        level = level + 1\n      elseif paren == ')' then\n   \
    \     level = level - 1\n      end\n      max_level = math.max(max_level, level)\n\
    \    end\n    table.insert(paren_groups, max_level)\n  end\n  return paren_groups\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local depth\
    \ = 0\n        local max_depth = 0\n        for i = 1, #paren_group do\n     \
    \       if paren_group:sub(i, i) == '(' then\n                depth = depth +\
    \ 1\n                max_depth = math.max(max_depth, depth)\n            elseif\
    \ paren_group:sub(i, i) == ')' then\n                depth = depth - 1\n     \
    \       end\n        end\n        table.insert(max_nesting, max_depth)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \          max_level = math.max(max_level, level)\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n        end\n    \
    \    table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "  local paren_groups = stringx.split(paren_string, ' ')\n  local paren_levels\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local paren_level\
    \ = 0\n    local max_level = 0\n    for char in paren_group:gmatch('.') do\n \
    \     if char == '(' then\n        paren_level = paren_level + 1\n      elseif\
    \ char == ')' then\n        paren_level = paren_level - 1\n      end\n      max_level\
    \ = math.max(max_level, paren_level)\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend", "  local paren_list = {}\n \
    \ local paren_level = 0\n  local max_level = 0\n  for i = 1, #paren_string do\n\
    \    local c = paren_string:sub(i, i)\n    if c == '(' then\n      paren_level\
    \ = paren_level + 1\n      if paren_level > max_level then\n        max_level\
    \ = paren_level\n      end\n    elseif c == ')' then\n      paren_level = paren_level\
    \ - 1\n    elseif c == ' ' then\n      table.insert(paren_list, max_level)\n \
    \     max_level = 0\n      paren_level = 0\n    end\n  end\n  table.insert(paren_list,\
    \ max_level)\n  return paren_list\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for i = 1, #paren_groups do\n       \
    \ local paren_group = paren_groups[i]\n        local paren_level = 0\n       \
    \ local max_level = 0\n        for j = 1, #paren_group do\n            local paren\
    \ = paren_group:sub(j, j)\n            if paren == '(' then\n                paren_level\
    \ = paren_level + 1\n            elseif paren == ')' then\n                paren_level\
    \ = paren_level - 1\n            end\n            max_level = math.max(max_level,\
    \ paren_level)\n        end\n        paren_levels[i] = max_level\n    end\n  \
    \  return paren_levels\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \          max_level = math.max(max_level, level)\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n        end\n    \
    \    table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_in_group = 0\n    for j = 1, #paren_group\
    \ do\n      local char = paren_group:sub(j, j)\n      if char == '(' then\n  \
    \      nesting = nesting + 1\n      elseif char == ')' then\n        nesting =\
    \ nesting - 1\n      end\n      max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n    end\n    max_nesting[i] = max_nesting_in_group\n  end\n  return\
    \ max_nesting\nend", "    local paren_groups = stringx.split(paren_string, ' ')\n\
    \    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups) do\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ _, char in ipairs(paren_group) do\n            if char == '(' then\n       \
    \         nesting = nesting + 1\n            elseif char == ')' then\n       \
    \         nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "  local paren_groups\
    \ = stringx.split(paren_string, ' ')\n  local max_nesting = {}\n  for _, paren_group\
    \ in ipairs(paren_groups) do\n    local nesting = 0\n    local max_nesting_in_group\
    \ = 0\n    for i = 1, #paren_group do\n      if paren_group:sub(i, i) == '(' then\n\
    \        nesting = nesting + 1\n        if nesting > max_nesting_in_group then\n\
    \          max_nesting_in_group = nesting\n        end\n      elseif paren_group:sub(i,\
    \ i) == ')' then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for i =\
    \ 1, #paren_groups do\n        local paren_group = paren_groups[i]\n        local\
    \ nesting = 0\n        local max_nesting_in_group = 0\n        for j = 1, #paren_group\
    \ do\n            local char = paren_group:sub(j, j)\n            if char == '('\
    \ then\n                nesting = nesting + 1\n            elseif char == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_group\
    \ = 0\n        for c in paren_group:gmatch('.') do\n            if c == '(' then\n\
    \                nesting = nesting + 1\n                if nesting > max_nesting_group\
    \ then\n                    max_nesting_group = nesting\n                end\n\
    \            elseif c == ')' then\n                nesting = nesting - 1\n   \
    \         end\n        end\n        table.insert(max_nesting, max_nesting_group)\n\
    \    end\n    return max_nesting\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for i = 1, #paren_groups do\n    local paren_group\
    \ = paren_groups[i]\n    local nesting = 0\n    local max_nesting_in_group = 0\n\
    \    for j = 1, #paren_group do\n      local paren = paren_group:sub(j, j)\n \
    \     if paren == '(' then\n        nesting = nesting + 1\n      elseif paren\
    \ == ')' then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting_in_group\
    \ then\n        max_nesting_in_group = nesting\n      end\n    end\n    max_nesting[i]\
    \ = max_nesting_in_group\n  end\n  return max_nesting\nend", "  local paren_groups\
    \ = {}\n  for paren_group in paren_string:gmatch('%S+') do\n    local max_nesting\
    \ = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('%S') do\n \
    \     if paren == '(' then\n        nesting = nesting + 1\n      elseif paren\
    \ == ')' then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting\
    \ then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    local max_nesting_in_group = 0\n    for c in\
    \ paren_group:gmatch('.') do\n      if c == '(' then\n        nesting = nesting\
    \ + 1\n        if nesting > max_nesting_in_group then\n          max_nesting_in_group\
    \ = nesting\n        end\n      elseif c == ')' then\n        nesting = nesting\
    \ - 1\n      end\n    end\n    table.insert(max_nesting, max_nesting_in_group)\n\
    \  end\n  return max_nesting\nend", "  local max_nesting = 0\n  local nesting\
    \ = 0\n  local max_nesting_list = {}\n  for i = 1, #paren_string do\n    local\
    \ char = paren_string:sub(i, i)\n    if char == '(' then\n      nesting = nesting\
    \ + 1\n      if nesting > max_nesting then\n        max_nesting = nesting\n  \
    \    end\n    elseif char == ')' then\n      nesting = nesting - 1\n    elseif\
    \ char == ' ' then\n      max_nesting_list[#max_nesting_list + 1] = max_nesting\n\
    \      max_nesting = 0\n      nesting = 0\n    end\n  end\n  max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n  return max_nesting_list\nend", "    local max_nesting\
    \ = 0\n    local nesting = 0\n    local max_nesting_list = {}\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            nesting = nesting + 1\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        elseif\
    \ char == ')' then\n            nesting = nesting - 1\n        elseif char ==\
    \ ' ' then\n            max_nesting_list[#max_nesting_list + 1] = max_nesting\n\
    \            max_nesting = 0\n            nesting = 0\n        end\n    end\n\
    \    max_nesting_list[#max_nesting_list + 1] = max_nesting\n    return max_nesting_list\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nest_level = 0\n        local max_nest_level = 0\n        for j\
    \ = 1, #paren_group do\n            local paren = paren_group:sub(j, j)\n    \
    \        if paren == '(' then\n                nest_level = nest_level + 1\n \
    \           elseif paren == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            if nest_level > max_nest_level then\n    \
    \            max_nest_level = nest_level\n            end\n        end\n     \
    \   table.insert(max_nest_levels, max_nest_level)\n    end\n    return max_nest_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend", "    local paren_groups = stringx.split(paren_string, ' ')\n\
    \    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups) do\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ i = 1, #paren_group do\n            if paren_group:sub(i, i) == '(' then\n \
    \               nesting = nesting + 1\n                max_nesting_in_group =\
    \ math.max(max_nesting_in_group, nesting)\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for c in paren_group:gmatch('.') do\n            if c == '(' then\n     \
    \           nesting = nesting + 1\n                if nesting > max_nesting_in_group\
    \ then\n                    max_nesting_in_group = nesting\n                end\n\
    \            elseif c == ')' then\n                nesting = nesting - 1\n   \
    \         end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    local max_nesting_group = 0\n    for c in paren_group:gmatch('.')\
    \ do\n      if c == '(' then\n        nesting = nesting + 1\n        if nesting\
    \ > max_nesting_group then\n          max_nesting_group = nesting\n        end\n\
    \      elseif c == ')' then\n        nesting = nesting - 1\n      end\n    end\n\
    \    table.insert(max_nesting, max_nesting_group)\n  end\n  return max_nesting\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local paren_level = 0\n        local max_level = 0\n        for j = 1,\
    \ #paren_group do\n            local paren = paren_group:sub(j, j)\n         \
    \   if paren == '(' then\n                paren_level = paren_level + 1\n    \
    \        elseif paren == ')' then\n                paren_level = paren_level -\
    \ 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        paren_levels[i] = max_level\n    end\n    return paren_levels\n\
    end", "    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nested_parens\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local max_nested_paren\
    \ = 0\n        local current_nested_paren = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                current_nested_paren\
    \ = current_nested_paren + 1\n            elseif paren == ')' then\n         \
    \       current_nested_paren = current_nested_paren - 1\n            end\n   \
    \         if current_nested_paren > max_nested_paren then\n                max_nested_paren\
    \ = current_nested_paren\n            end\n        end\n        table.insert(max_nested_parens,\
    \ max_nested_paren)\n    end\n    return max_nested_parens\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for i = 1, #paren_group do\n            if paren_group:sub(i, i)\
    \ == '(' then\n                nesting = nesting + 1\n                max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for c in paren_group:gmatch('.') do\n            if c == '(' then\n     \
    \           nesting = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif c == ')' then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for i, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_level = 0\n       \
    \ for j = 1, #paren_group do\n            if paren_group:sub(j, j) == '(' then\n\
    \                nesting = nesting + 1\n                if nesting > max_nesting_level\
    \ then\n                    max_nesting_level = nesting\n                end\n\
    \            elseif paren_group:sub(j, j) == ')' then\n                nesting\
    \ = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_level)\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nest_levels = {}\n    for\
    \ i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n     \
    \   local nest_level = 0\n        local max_nest_level = 0\n        for j = 1,\
    \ #paren_group do\n            local paren = paren_group:sub(j, j)\n         \
    \   if paren == '(' then\n                nest_level = nest_level + 1\n      \
    \      elseif paren == ')' then\n                nest_level = nest_level - 1\n\
    \            end\n            if nest_level > max_nest_level then\n          \
    \      max_nest_level = nest_level\n            end\n        end\n        max_nest_levels[i]\
    \ = max_nest_level\n    end\n    return max_nest_levels\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for _, c in ipairs(paren_group) do\n            if c == '(' then\n\
    \                nesting = nesting + 1\n            elseif c == ')' then\n   \
    \             nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "    local paren_group\
    \ = stringx.split(paren_string, ' ')\n    local paren_depth = {}\n    for i =\
    \ 1, #paren_group do\n        local paren_count = 0\n        local max_count =\
    \ 0\n        for j = 1, #paren_group[i] do\n            if paren_group[i]:sub(j,\
    \ j) == '(' then\n                paren_count = paren_count + 1\n            elseif\
    \ paren_group[i]:sub(j, j) == ')' then\n                paren_count = paren_count\
    \ - 1\n            end\n            if paren_count > max_count then\n        \
    \        max_count = paren_count\n            end\n        end\n        table.insert(paren_depth,\
    \ max_count)\n    end\n    return paren_depth\nend", "    local paren_groups =\
    \ stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for i = 1, #paren_group do\n            if paren_group:sub(i, i)\
    \ == '(' then\n                nesting = nesting + 1\n                max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n            elseif paren_group:sub(i,\
    \ i) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local max_level = 0\n        local level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(max_nesting,\
    \ max_level)\n    end\n    return max_nesting\nend", "    local paren_groups =\
    \ split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for _, char in ipairs(paren_group) do\n            if char == '('\
    \ then\n                nesting = nesting + 1\n            elseif char == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            if\
    \ nesting > max_nesting_in_group then\n                max_nesting_in_group =\
    \ nesting\n            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for c in paren_group:gmatch('.') do\n            if c == '(' then\n     \
    \           nesting = nesting + 1\n                if nesting > max_nesting_in_group\
    \ then\n                    max_nesting_in_group = nesting\n                end\n\
    \            elseif c == ')' then\n                nesting = nesting - 1\n   \
    \         end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local level = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \          max_level = math.max(max_level, level)\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n        end\n    \
    \    table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_groups = split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_this_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \          elseif c == ')' then\n                nesting = nesting - 1\n     \
    \       end\n            if nesting > max_nesting_this_group then\n          \
    \      max_nesting_this_group = nesting\n            end\n        end\n      \
    \  table.insert(max_nesting, max_nesting_this_group)\n    end\n    return max_nesting\n\
    end", "    local max_depth = 0\n    local depth = 0\n    local depths = {}\n \
    \   for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n  \
    \      if c == '(' then\n            depth = depth + 1\n            if depth >\
    \ max_depth then\n                max_depth = depth\n            end\n       \
    \ elseif c == ')' then\n            depth = depth - 1\n        elseif c == ' '\
    \ then\n            depths[#depths + 1] = max_depth\n            max_depth = 0\n\
    \            depth = 0\n        end\n    end\n    depths[#depths + 1] = max_depth\n\
    \    return depths\nend", "    local paren_groups = stringx.split(paren_string,\
    \ ' ')\n    local paren_levels = {}\n    for i = 1, #paren_groups do\n       \
    \ local paren_group = paren_groups[i]\n        local level = 0\n        local\
    \ max_level = 0\n        for j = 1, #paren_group do\n            local char =\
    \ paren_group:sub(j, j)\n            if char == '(' then\n                level\
    \ = level + 1\n                max_level = math.max(max_level, level)\n      \
    \      elseif char == ')' then\n                level = level - 1\n          \
    \  end\n        end\n        paren_levels[i] = max_level\n    end\n    return\
    \ paren_levels\nend", "    local max_nest = 0\n    local nest_level = 0\n    local\
    \ nest_levels = {}\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            nest_level = nest_level + 1\n    \
    \        if nest_level > max_nest then\n                max_nest = nest_level\n\
    \            end\n        elseif c == ')' then\n            nest_level = nest_level\
    \ - 1\n        elseif c == ' ' then\n            table.insert(nest_levels, max_nest)\n\
    \            max_nest = 0\n            nest_level = 0\n        end\n    end\n\
    \    table.insert(nest_levels, max_nest)\n    return nest_levels\nend", "    local\
    \ paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels =\
    \ {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for i = 1, #paren_group do\n\
    \            if paren_group:sub(i, i) == '(' then\n                nest_level\
    \ = nest_level + 1\n            elseif paren_group:sub(i, i) == ')' then\n   \
    \             nest_level = nest_level - 1\n            end\n            if nest_level\
    \ > max_nest_level then\n                max_nest_level = nest_level\n       \
    \     end\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend", "  local paren_groups = stringx.split(paren_string,\
    \ ' ')\n  local max_nesting = {}\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    local max_nesting_in_group = 0\n    for _, char\
    \ in utf8.next, paren_group do\n      if char == '(' then\n        nesting = nesting\
    \ + 1\n      elseif char == ')' then\n        nesting = nesting - 1\n      end\n\
    \      max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n    end\n\
    \    table.insert(max_nesting, max_nesting_in_group)\n  end\n  return max_nesting\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
