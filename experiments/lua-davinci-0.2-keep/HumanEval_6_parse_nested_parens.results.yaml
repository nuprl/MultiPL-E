name: HumanEval_6_parse_nested_parens
language: lua
results:
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_group = 0\n    for i = 1, #paren_group do\n      if paren_group:sub(i,\
    \ i) == '(' then\n        nesting = nesting + 1\n        if nesting > max_nesting_group\
    \ then\n          max_nesting_group = nesting\n        end\n      elseif paren_group:sub(i,\
    \ i) == ')' then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_group)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpx2t0c1w2.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpx2t0c1w2.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpx2t0c1w2.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5g33y6bm.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp5g33y6bm.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp5g33y6bm.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        local max_nesting_in_group = 0\n        for _, char in ipairs(group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8l2j7m_1.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8l2j7m_1.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp8l2j7m_1.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local max_nesting = {}\n\
    \    for i, paren_group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        local max_nesting_in_group = 0\n        for j = 1, #paren_group do\n\
    \            local char = paren_group:sub(j, j)\n            if char == '(' then\n\
    \                nesting = nesting + 1\n            elseif char == ')' then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3qsehw_c.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3qsehw_c.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp3qsehw_c.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for j = 1, #paren_group\
    \ do\n            if paren_group:sub(j, j) == '(' then\n                nesting\
    \ = nesting + 1\n                if nesting > max_nesting_in_group then\n    \
    \                max_nesting_in_group = nesting\n                end\n       \
    \     elseif paren_group:sub(j, j) == ')' then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyilauvvy.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyilauvvy.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpyilauvvy.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch('%S+') do\n\
    \        local level = 0\n        local max_level = 0\n        for c in group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for j = 1, #paren_group\
    \ do\n            if paren_group:sub(j, j) == '(' then\n                nesting\
    \ = nesting + 1\n                if nesting > max_nesting_in_group then\n    \
    \                max_nesting_in_group = nesting\n                end\n       \
    \     elseif paren_group:sub(j, j) == ')' then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2wnw3bnf.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2wnw3bnf.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp2wnw3bnf.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_list = {}\n  local paren_depth = 0\n  local max_depth = 0\n  for\
    \ i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '('\
    \ then\n      paren_depth = paren_depth + 1\n      if paren_depth > max_depth\
    \ then\n        max_depth = paren_depth\n      end\n    elseif c == ')' then\n\
    \      paren_depth = paren_depth - 1\n    elseif c == ' ' then\n      table.insert(paren_list,\
    \ max_depth)\n      max_depth = 0\n    end\n  end\n  table.insert(paren_list,\
    \ max_depth)\n  return paren_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                level = level + 1\n\
    \            elseif paren == ')' then\n                level = level - 1\n   \
    \         end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4cwd2daw.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4cwd2daw.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp4cwd2daw.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i, paren_group in ipairs(paren_groups) do\n        local current_nesting\
    \ = 0\n        local max_current_nesting = 0\n        for j = 1, #paren_group\
    \ do\n            if paren_group:sub(j, j) == '(' then\n                current_nesting\
    \ = current_nesting + 1\n            elseif paren_group:sub(j, j) == ')' then\n\
    \                if current_nesting > max_current_nesting then\n             \
    \       max_current_nesting = current_nesting\n                end\n         \
    \       current_nesting = current_nesting - 1\n            end\n        end\n\
    \        max_nesting[i] = max_current_nesting\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbs4x4323.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbs4x4323.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpbs4x4323.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+') do\n\
    \    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      max_nesting\
    \ = math.max(max_nesting, nesting)\n    end\n    table.insert(paren_groups, max_nesting)\n\
    \  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_level = 0\n        local level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            if level > max_level then\n\
    \                max_level = level\n            end\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_local = 0\n    for j = 1, #paren_group\
    \ do\n      local c = paren_group:sub(j, j)\n      if c == '(' then\n        nesting\
    \ = nesting + 1\n        if nesting > max_nesting_local then\n          max_nesting_local\
    \ = nesting\n        end\n      elseif c == ')' then\n        nesting = nesting\
    \ - 1\n      end\n    end\n    table.insert(max_nesting, max_nesting_local)\n\
    \  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3mvcwd4m.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3mvcwd4m.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp3mvcwd4m.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphh20frgc.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphh20frgc.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmphh20frgc.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \      elseif c == ')' then\n                depth = depth - 1\n            end\n\
    \            max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local depths = {}\n\
    \  for i, paren_group in ipairs(paren_groups) do\n    local depth = 0\n    local\
    \ max_depth = 0\n    for c in paren_group:gmatch('.') do\n      if c == '(' then\n\
    \        depth = depth + 1\n        max_depth = math.max(max_depth, depth)\n \
    \     elseif c == ')' then\n        depth = depth - 1\n      end\n    end\n  \
    \  depths[i] = max_depth\n  end\n  return depths\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpax8dle_9.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpax8dle_9.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpax8dle_9.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_levels =\
    \ {}\n  for _, paren_group in ipairs(paren_groups) do\n    local level = 0\n \
    \   local max_level = 0\n    for c in paren_group:gmatch('.') do\n      if c ==\
    \ '(' then\n        level = level + 1\n        max_level = math.max(max_level,\
    \ level)\n      elseif c == ')' then\n        level = level - 1\n      end\n \
    \   end\n    table.insert(max_levels, max_level)\n  end\n  return max_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdtf0p1l_.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdtf0p1l_.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpdtf0p1l_.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local group = paren_groups[i]\n\
    \        local paren_stack = {}\n        local max_level = 0\n        for j =\
    \ 1, #group do\n            local char = group:sub(j, j)\n            if char\
    \ == '(' then\n                table.insert(paren_stack, char)\n             \
    \   max_level = math.max(max_level, #paren_stack)\n            elseif char ==\
    \ ')' then\n                table.remove(paren_stack)\n            end\n     \
    \   end\n        table.insert(max_nesting, max_level)\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplx6zs4am.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplx6zs4am.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmplx6zs4am.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for i = 1, #paren_group do\n\
    \            if paren_group:sub(i, i) == '(' then\n                nest_level\
    \ = nest_level + 1\n            elseif paren_group:sub(i, i) == ')' then\n   \
    \             nest_level = nest_level - 1\n            end\n            if nest_level\
    \ > max_nest_level then\n                max_nest_level = nest_level\n       \
    \     end\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmvvs0ohh.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmvvs0ohh.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpmvvs0ohh.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for paren in paren_group:gmatch('.') do\n            if paren == '(' then\n\
    \                nesting = nesting + 1\n            elseif paren == ')' then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nest_level = 0\n        local max_nest_level = 0\n        for j\
    \ = 1, #paren_group do\n            local c = paren_group:sub(j, j)\n        \
    \    if c == '(' then\n                nest_level = nest_level + 1\n         \
    \   elseif c == ')' then\n                nest_level = nest_level - 1\n      \
    \      end\n            max_nest_level = math.max(max_nest_level, nest_level)\n\
    \        end\n        max_nest_levels[i] = max_nest_level\n    end\n    return\
    \ max_nest_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0zbv055y.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0zbv055y.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp0zbv055y.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \     max_level = math.max(max_level, level)\n            elseif c == ')' then\n\
    \                level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmqohgwrd.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmqohgwrd.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpmqohgwrd.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for i = 1, #paren_group do\n     \
    \       if paren_group:sub(i, i) == '(' then\n                level = level +\
    \ 1\n                max_level = math.max(max_level, level)\n            elseif\
    \ paren_group:sub(i, i) == ')' then\n                level = level - 1\n     \
    \       end\n        end\n        table.insert(max_levels, max_level)\n    end\n\
    \    return max_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7el5cm5s.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7el5cm5s.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp7el5cm5s.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nested_parens\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local max_nested_paren\
    \ = 0\n        local current_nested_paren = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                current_nested_paren\
    \ = current_nested_paren + 1\n            elseif paren_group:sub(i, i) == ')'\
    \ then\n                current_nested_paren = current_nested_paren - 1\n    \
    \        end\n            if current_nested_paren > max_nested_paren then\n  \
    \              max_nested_paren = current_nested_paren\n            end\n    \
    \    end\n        table.insert(max_nested_parens, max_nested_paren)\n    end\n\
    \    return max_nested_parens\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptyfduv13.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptyfduv13.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmptyfduv13.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj8xxzypt.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpj8xxzypt.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpj8xxzypt.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local current_nesting\
    \ = 0\n        local max_current_nesting = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif c == ')' then\n                current_nesting = current_nesting\
    \ - 1\n            end\n            max_current_nesting = math.max(max_current_nesting,\
    \ current_nesting)\n        end\n        table.insert(max_nesting, max_current_nesting)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcvvve1nj.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcvvve1nj.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpcvvve1nj.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzilc9iqg.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzilc9iqg.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpzilc9iqg.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = {}\n  local current_nesting = 0\n  local max_current_nesting\
    \ = 0\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n\
    \    if char == '(' then\n      current_nesting = current_nesting + 1\n      if\
    \ current_nesting > max_current_nesting then\n        max_current_nesting = current_nesting\n\
    \      end\n    elseif char == ')' then\n      current_nesting = current_nesting\
    \ - 1\n      if current_nesting == 0 then\n        table.insert(max_nesting, max_current_nesting)\n\
    \        max_current_nesting = 0\n      end\n    end\n  end\n  return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nestings\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local max_nesting = 0\n        local current_nesting = 0\n        for\
    \ j = 1, #paren_group do\n            local paren = paren_group:sub(j, j)\n  \
    \          if paren == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif paren == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(max_nestings, max_nesting)\n    end\n    return\
    \ max_nestings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkil2jg5g.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkil2jg5g.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpkil2jg5g.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for i = 1, #paren_group do\n     \
    \       local char = paren_group:sub(i, i)\n            if char == '(' then\n\
    \                paren_level = paren_level + 1\n            elseif char == ')'\
    \ then\n                paren_level = paren_level - 1\n            end\n     \
    \       max_level = math.max(max_level, paren_level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_2ncsn7x.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_2ncsn7x.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp_2ncsn7x.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = {}\n    for paren_group in paren_string:gmatch('%b()')\
    \ do\n        local nesting = 0\n        for c in paren_group:gmatch('%b()') do\n\
    \            nesting = nesting + 1\n        end\n        table.insert(max_nesting,\
    \ nesting)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp56j4nb0f.lua:21:\
    \ expected: {2, 3, 1, 3}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmp56j4nb0f.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                nesting\
    \ = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpu5m_pvy7.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpu5m_pvy7.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpu5m_pvy7.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_levels\
    \ = {}\n    for _, group in ipairs(paren_groups) do\n        local level = 0\n\
    \        local max_level = 0\n        for c in group:gmatch('.') do\n        \
    \    if c == '(' then\n                level = level + 1\n                max_level\
    \ = math.max(max_level, level)\n            elseif c == ')' then\n           \
    \     level = level - 1\n            end\n        end\n        table.insert(max_levels,\
    \ max_level)\n    end\n    return max_levels\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmporlqyw6g.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmporlqyw6g.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmporlqyw6g.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuymnkid4.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuymnkid4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpuymnkid4.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    local depths = {}\n    for\
    \ c in paren_string:gmatch('.') do\n        if c == '(' then\n            depth\
    \ = depth + 1\n            if depth > max_depth then\n                max_depth\
    \ = depth\n            end\n        elseif c == ')' then\n            depths[#depths\
    \ + 1] = depth\n            depth = depth - 1\n        end\n    end\n    return\
    \ depths\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppedzpcjl.lua:27:\
    \ expected: {2, 3, 1, 3}\\nactual: {2, 2, 1, 3, 2, 1, 1, 3, 2, 2, 2, 1}\\nstack\
    \ traceback:\\n\\t/tmp/tmppedzpcjl.lua:27: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nestings\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local max_nesting\
    \ = 0\n        local current_nesting = 0\n        for i = 1, #paren_group do\n\
    \            if paren_group:sub(i, i) == '(' then\n                current_nesting\
    \ = current_nesting + 1\n            elseif paren_group:sub(i, i) == ')' then\n\
    \                current_nesting = current_nesting - 1\n            end\n    \
    \        max_nesting = math.max(max_nesting, current_nesting)\n        end\n \
    \       table.insert(max_nestings, max_nesting)\n    end\n    return max_nestings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp6qpg0qa.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpp6qpg0qa.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpp6qpg0qa.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpareopn_o.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpareopn_o.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpareopn_o.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = {}\n    local current_nesting = 0\n    local max_nesting_so_far\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting_so_far then\n            \
    \    max_nesting_so_far = current_nesting\n            end\n        elseif char\
    \ == ')' then\n            max_nesting[#max_nesting + 1] = max_nesting_so_far\n\
    \            current_nesting = current_nesting - 1\n        end\n    end\n   \
    \ return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbut5bpjy.lua:28:\
    \ expected: {2, 3, 1, 3}\\nactual: {2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3}\\nstack\
    \ traceback:\\n\\t/tmp/tmpbut5bpjy.lua:28: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \      elseif c == ')' then\n                depth = depth - 1\n            end\n\
    \            max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for j = 1, #paren_group\
    \ do\n            if paren_group:sub(j, j) == '(' then\n                nesting\
    \ = nesting + 1\n                if nesting > max_nesting_in_group then\n    \
    \                max_nesting_in_group = nesting\n                end\n       \
    \     elseif paren_group:sub(j, j) == ')' then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcb_ipbv_.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcb_ipbv_.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpcb_ipbv_.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+') do\n\
    \    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_list = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local current_nesting = 0\n     \
    \   for char in paren_group:gmatch('.') do\n            if char == '(' then\n\
    \                current_nesting = current_nesting + 1\n            elseif char\
    \ == ')' then\n                current_nesting = current_nesting - 1\n       \
    \     end\n            if current_nesting > max_nesting then\n               \
    \ max_nesting = current_nesting\n            end\n        end\n        table.insert(paren_list,\
    \ max_nesting)\n    end\n    return paren_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                level = level + 1\n\
    \            elseif paren == ')' then\n                level = level - 1\n   \
    \         end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpn8bkhlpg.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpn8bkhlpg.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpn8bkhlpg.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \     max_level = math.max(max_level, level)\n            elseif c == ')' then\n\
    \                level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpu40mwfty.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpu40mwfty.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpu40mwfty.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #group do\n            local char = group:sub(j, j)\n            if char\
    \ == '(' then\n                nesting = nesting + 1\n            elseif char\
    \ == ')' then\n                nesting = nesting - 1\n            end\n      \
    \      if nesting > max_nesting_in_group then\n                max_nesting_in_group\
    \ = nesting\n            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfev_xowp.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfev_xowp.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpfev_xowp.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_in_group = 0\n    for _, char in ipairs(paren_group) do\n\
    \      if char == '(' then\n        nesting = nesting + 1\n      elseif char ==\
    \ ')' then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting_in_group\
    \ then\n        max_nesting_in_group = nesting\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp14b83gn4.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp14b83gn4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp14b83gn4.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprvi0r6xo.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprvi0r6xo.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmprvi0r6xo.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnw82aa2o.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnw82aa2o.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpnw82aa2o.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = split(paren_string, ' ')\n  local paren_levels = {}\n\
    \  for i, paren_group in ipairs(paren_groups) do\n    local paren_level = 0\n\
    \    local max_paren_level = 0\n    for j = 1, #paren_group do\n      local char\
    \ = paren_group:sub(j, j)\n      if char == '(' then\n        paren_level = paren_level\
    \ + 1\n      elseif char == ')' then\n        paren_level = paren_level - 1\n\
    \      end\n      if paren_level > max_paren_level then\n        max_paren_level\
    \ = paren_level\n      end\n    end\n    paren_levels[i] = max_paren_level\n \
    \ end\n  return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmxxbs8ml.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmxxbs8ml.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpmxxbs8ml.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5yxtzlq6.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp5yxtzlq6.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp5yxtzlq6.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_i = 0\n    for j = 1, #paren_group\
    \ do\n      local paren = paren_group:sub(j, j)\n      if paren == '(' then\n\
    \        nesting = nesting + 1\n      elseif paren == ')' then\n        nesting\
    \ = nesting - 1\n      end\n      if nesting > max_nesting_i then\n        max_nesting_i\
    \ = nesting\n      end\n    end\n    table.insert(max_nesting, max_nesting_i)\n\
    \  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgu0ivjsa.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgu0ivjsa.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpgu0ivjsa.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                nesting\
    \ = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxhu3p_cf.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxhu3p_cf.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpxhu3p_cf.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local paren_levels = {}\n\
    \    for _, paren_group in ipairs(paren_groups) do\n        local level = 0\n\
    \        local max_level = 0\n        for _, paren in ipairs(paren_group) do\n\
    \            if paren == '(' then\n                level = level + 1\n       \
    \     elseif paren == ')' then\n                level = level - 1\n          \
    \  end\n            if level > max_level then\n                max_level = level\n\
    \            end\n        end\n        table.insert(paren_levels, max_level)\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyfp5xq7u.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyfp5xq7u.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpyfp5xq7u.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for char in\
    \ paren_group:gmatch('.') do\n            if char == '(' then\n              \
    \  level = level + 1\n            elseif char == ')' then\n                level\
    \ = level - 1\n            end\n            max_level = math.max(max_level, level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                nesting = nesting\
    \ + 1\n            elseif paren == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5wfls2cx.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp5wfls2cx.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp5wfls2cx.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = paren_string:split(' ')\n    local max_levels = {}\n\
    \    for _, group in ipairs(paren_groups) do\n        local level = 0\n      \
    \  local max_level = 0\n        for c in group:gmatch('.') do\n            if\
    \ c == '(' then\n                level = level + 1\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n            max_level\
    \ = math.max(max_level, level)\n        end\n        table.insert(max_levels,\
    \ max_level)\n    end\n    return max_levels\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyylfx1a_.lua:7:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyylfx1a_.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpyylfx1a_.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_list = {}\n    local paren_stack = {}\n    local max_level =\
    \ 0\n    local current_level = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == '(' then\n            current_level\
    \ = current_level + 1\n            if current_level > max_level then\n       \
    \         max_level = current_level\n            end\n            table.insert(paren_stack,\
    \ c)\n        elseif c == ')' then\n            table.remove(paren_stack)\n  \
    \          current_level = current_level - 1\n        elseif c == ' ' then\n \
    \           table.insert(paren_list, max_level)\n            max_level = 0\n \
    \           current_level = 0\n        end\n    end\n    table.insert(paren_list,\
    \ max_level)\n    return paren_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nest_level = nest_level\
    \ + 1\n            elseif char == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            max_nest_level = math.max(max_nest_level,\
    \ nest_level)\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdq7zqq9o.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdq7zqq9o.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpdq7zqq9o.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  local depths = {}\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      depth\
    \ = depth + 1\n      if depth > max_depth then\n        max_depth = depth\n  \
    \    end\n    elseif c == ')' then\n      depths[#depths + 1] = depth\n      depth\
    \ = depth - 1\n    end\n  end\n  return depths\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp82ukvold.lua:28:\
    \ expected: {2, 3, 1, 3}\\nactual: {2, 2, 1, 3, 2, 1, 1, 3, 2, 2, 2, 1}\\nstack\
    \ traceback:\\n\\t/tmp/tmp82ukvold.lua:28: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \              if nesting > max_nesting_in_group then\n                    max_nesting_in_group\
    \ = nesting\n                end\n            elseif c == ')' then\n         \
    \       nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfm30rzj5.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfm30rzj5.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpfm30rzj5.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \              if nesting > max_nesting_in_group then\n                    max_nesting_in_group\
    \ = nesting\n                end\n            elseif c == ')' then\n         \
    \       nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpecjpswsl.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpecjpswsl.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpecjpswsl.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local paren_levels\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local paren_level\
    \ = 0\n    local max_level = 0\n    for i = 1, #paren_group do\n      if paren_group:sub(i,\
    \ i) == '(' then\n        paren_level = paren_level + 1\n      elseif paren_group:sub(i,\
    \ i) == ')' then\n        paren_level = paren_level - 1\n      end\n      max_level\
    \ = math.max(max_level, paren_level)\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4ytirolb.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4ytirolb.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp4ytirolb.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local current_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_level = current_level + 1\n        elseif char == ')' then\n\
    \            current_level = current_level - 1\n        elseif char == ' ' then\n\
    \            table.insert(paren_levels, current_level)\n            current_level\
    \ = 0\n        end\n    end\n    table.insert(paren_levels, current_level)\n \
    \   return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps0spnz6o.lua:27:\
    \ expected: {2, 3, 1, 3}\\nactual: {0, 0, 0, 0}\\nstack traceback:\\n\\t/tmp/tmps0spnz6o.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local nesting = 0\n  local max_nesting_list = {}\n\
    \  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c\
    \ == '(' then\n      nesting = nesting + 1\n      if nesting > max_nesting then\n\
    \        max_nesting = nesting\n      end\n    elseif c == ')' then\n      nesting\
    \ = nesting - 1\n    elseif c == ' ' then\n      max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n      max_nesting = 0\n      nesting = 0\n    end\n  end\n\
    \  max_nesting_list[#max_nesting_list + 1] = max_nesting\n  return max_nesting_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local depth = 0\n    local max_depth = 0\n    local depths = {}\n    for\
    \ i = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n     \
    \   if char == '(' then\n            depth = depth + 1\n            if depth >\
    \ max_depth then\n                max_depth = depth\n            end\n       \
    \ elseif char == ')' then\n            depth = depth - 1\n        elseif char\
    \ == ' ' then\n            depths[#depths + 1] = max_depth\n            max_depth\
    \ = 0\n            depth = 0\n        end\n    end\n    depths[#depths + 1] =\
    \ max_depth\n    return depths\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for i = 1, #paren_group do\n     \
    \       if paren_group:sub(i, i) == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren_group:sub(i, i) == ')' then\n                paren_level\
    \ = paren_level - 1\n            end\n            max_level = math.max(max_level,\
    \ paren_level)\n        end\n        table.insert(paren_levels, max_level)\n \
    \   end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgximegz1.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgximegz1.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpgximegz1.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('%S') do\n            if paren == '(' then\n         \
    \       nesting = nesting + 1\n            elseif paren == ')' then\n        \
    \        nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                nest_level = nest_level\
    \ + 1\n            elseif paren == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            max_nest_level = math.max(max_nest_level,\
    \ nest_level)\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr4ldmyya.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr4ldmyya.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpr4ldmyya.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local nesting = 0\n  local max_nesting_list = {}\n\
    \  for i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c\
    \ == '(' then\n      nesting = nesting + 1\n      if nesting > max_nesting then\n\
    \        max_nesting = nesting\n      end\n    elseif c == ')' then\n      nesting\
    \ = nesting - 1\n    elseif c == ' ' then\n      max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n      max_nesting = 0\n      nesting = 0\n    end\n  end\n\
    \  max_nesting_list[#max_nesting_list + 1] = max_nesting\n  return max_nesting_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local c = paren_group:sub(j, j)\n      \
    \      if c == '(' then\n                nesting = nesting + 1\n            elseif\
    \ c == ')' then\n                nesting = nesting - 1\n            end\n    \
    \        max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n    \
    \    end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp__vlj4fc.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp__vlj4fc.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp__vlj4fc.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_local = 0\n        for j\
    \ = 1, #paren_group do\n            local paren = paren_group:sub(j, j)\n    \
    \        if paren == '(' then\n                nesting = nesting + 1\n       \
    \     elseif paren == ')' then\n                nesting = nesting - 1\n      \
    \      end\n            if nesting > max_nesting_local then\n                max_nesting_local\
    \ = nesting\n            end\n        end\n        max_nesting[i] = max_nesting_local\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp683l7y61.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp683l7y61.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp683l7y61.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local nesting = 0\n    local max_nesting_list\
    \ = {}\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            nesting = nesting + 1\n          \
    \  if nesting > max_nesting then\n                max_nesting = nesting\n    \
    \        end\n        elseif c == ')' then\n            nesting = nesting - 1\n\
    \        elseif c == ' ' then\n            max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n            max_nesting = 0\n            nesting = 0\n \
    \       end\n    end\n    max_nesting_list[#max_nesting_list + 1] = max_nesting\n\
    \    return max_nesting_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for j = 1, #paren_group\
    \ do\n            if paren_group:sub(j, j) == '(' then\n                nesting\
    \ = nesting + 1\n                if nesting > max_nesting_in_group then\n    \
    \                max_nesting_in_group = nesting\n                end\n       \
    \     elseif paren_group:sub(j, j) == ')' then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_jl2ae3p.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_jl2ae3p.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp_jl2ae3p.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local max_level\
    \ = 0\n        local level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \ elseif c == ')' then\n                level = level - 1\n            end\n \
    \           max_level = math.max(max_level, level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr4kd04sg.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr4kd04sg.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpr4kd04sg.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                level = level + 1\n\
    \            elseif paren == ')' then\n                level = level - 1\n   \
    \         end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp07ov3ho1.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp07ov3ho1.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp07ov3ho1.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \          elseif c == ')' then\n                nesting = nesting - 1\n     \
    \       end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4nyzven4.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4nyzven4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp4nyzven4.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local cur_nesting = 0\n    local nesting_list\
    \ = {}\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            cur_nesting = cur_nesting + 1\n  \
    \          if cur_nesting > max_nesting then\n                max_nesting = cur_nesting\n\
    \            end\n        elseif c == ')' then\n            cur_nesting = cur_nesting\
    \ - 1\n        elseif c == ' ' then\n            table.insert(nesting_list, max_nesting)\n\
    \            max_nesting = 0\n            cur_nesting = 0\n        end\n    end\n\
    \    table.insert(nesting_list, max_nesting)\n    return nesting_list\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local paren_levels\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local level = 0\n\
    \    local max_level = 0\n    for i = 1, string.len(paren_group) do\n      local\
    \ char = string.sub(paren_group, i, i)\n      if char == '(' then\n        level\
    \ = level + 1\n        max_level = math.max(max_level, level)\n      elseif char\
    \ == ')' then\n        level = level - 1\n      end\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsttj28vz.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsttj28vz.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpsttj28vz.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nest_level = nest_level +\
    \ 1\n            elseif c == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            max_nest_level = math.max(max_nest_level,\
    \ nest_level)\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0101b9vp.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0101b9vp.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp0101b9vp.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n            if paren_level == 1 then\n                paren_start\
    \ = i\n            end\n        elseif c == ')' then\n            if paren_level\
    \ == 1 then\n                paren_end = i\n                table.insert(paren_levels,\
    \ paren_level)\n                paren_level = 0\n            else\n          \
    \      paren_level = paren_level - 1\n            end\n        end\n    end\n\
    \    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp14w5tm5x.lua:34:\
    \ expected: {2, 3, 1, 3}\\nactual: {1, 1, 1, 1}\\nstack traceback:\\n\\t/tmp/tmp14w5tm5x.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n\
    \    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgka9krtp.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgka9krtp.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpgka9krtp.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmps5rl30dh.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmps5rl30dh.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmps5rl30dh.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_this_group = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                nesting = nesting\
    \ + 1\n                max_nesting_this_group = math.max(max_nesting_this_group,\
    \ nesting)\n            elseif paren == ')' then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        table.insert(max_nesting, max_nesting_this_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg2_bcc7j.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpg2_bcc7j.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpg2_bcc7j.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local paren_stack = {}\n        local max_nesting_level = 0\n       \
    \ for j = 1, #paren_group do\n            local paren = paren_group:sub(j, j)\n\
    \            if paren == '(' then\n                table.insert(paren_stack, paren)\n\
    \                max_nesting_level = math.max(max_nesting_level, #paren_stack)\n\
    \            elseif paren == ')' then\n                table.remove(paren_stack)\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_level)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz6okufkr.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpz6okufkr.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpz6okufkr.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcuikywyg.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcuikywyg.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpcuikywyg.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjpc91nrw.lua:23:\
    \ expected: \\n{2, 3, 1, 3}\\nactual: \\n{\\n    1,\\n    2,\\n    1,\\n    2,\\\
    n    1,\\n    0,\\n    0,\\n    1,\\n    2,\\n    3,\\n    2,\\n    1,\\n    0,\\\
    n    0,\\n    1,\\n    0,\\n    0,\\n    1,\\n    2,\\n    3,\\n    2,\\n    1,\\\
    n    2,\\n    1,\\n    2,\\n    1,\\n    0\\n}\\nstack traceback:\\n\\t/tmp/tmpjpc91nrw.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local paren_levels\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local paren_level\
    \ = 0\n    local max_level = 0\n    for c in paren_group:gmatch('.') do\n    \
    \  if c == '(' then\n        paren_level = paren_level + 1\n      elseif c ==\
    \ ')' then\n        paren_level = paren_level - 1\n      end\n      max_level\
    \ = math.max(max_level, paren_level)\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt14i6xtu.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt14i6xtu.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpt14i6xtu.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for i = 1, #paren_group do\n     \
    \       local char = paren_group:sub(i, i)\n            if char == '(' then\n\
    \                level = level + 1\n                max_level = math.max(max_level,\
    \ level)\n            elseif char == ')' then\n                level = level -\
    \ 1\n            end\n        end\n        table.insert(paren_levels, max_level)\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphuharqz6.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphuharqz6.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmphuharqz6.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_depth\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local depth\
    \ = 0\n        local max_depth_in_group = 0\n        for char in stringx.chars(paren_group)\
    \ do\n            if char == '(' then\n                depth = depth + 1\n   \
    \             max_depth_in_group = math.max(max_depth_in_group, depth)\n     \
    \       elseif char == ')' then\n                depth = depth - 1\n         \
    \   else\n                error('Invalid input')\n            end\n        end\n\
    \        table.insert(max_depth, max_depth_in_group)\n    end\n    return max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmps58z1rmq.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmps58z1rmq.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmps58z1rmq.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \     max_level = math.max(max_level, level)\n            elseif c == ')' then\n\
    \                level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdd4qk5pg.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdd4qk5pg.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpdd4qk5pg.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local level = 0\n        local max_level = 0\n        for j = 1, #paren_group\
    \ do\n            local paren = paren_group:sub(j, j)\n            if paren ==\
    \ '(' then\n                level = level + 1\n            elseif paren == ')'\
    \ then\n                level = level - 1\n            end\n            max_level\
    \ = math.max(max_level, level)\n        end\n        paren_levels[i] = max_level\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprgbx2w5m.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprgbx2w5m.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmprgbx2w5m.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nested_parens\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_stack\
    \ = {}\n        local max_nested = 0\n        for i = 1, #paren_group do\n   \
    \         local paren = paren_group:sub(i, i)\n            if paren == '(' then\n\
    \                table.insert(paren_stack, paren)\n            elseif paren ==\
    \ ')' then\n                table.remove(paren_stack)\n            end\n     \
    \       max_nested = math.max(max_nested, #paren_stack)\n        end\n       \
    \ table.insert(max_nested_parens, max_nested)\n    end\n    return max_nested_parens\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcr7k14n4.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcr7k14n4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpcr7k14n4.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local max_nesting = {}\n\
    \    for i, group in ipairs(paren_groups) do\n        local nesting = 0\n    \
    \    local max_nesting_in_group = 0\n        for j = 1, #group do\n          \
    \  if group:sub(j, j) == '(' then\n                nesting = nesting + 1\n   \
    \         elseif group:sub(j, j) == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            if nesting > max_nesting_in_group then\n \
    \               max_nesting_in_group = nesting\n            end\n        end\n\
    \        max_nesting[i] = max_nesting_in_group\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg0708tw5.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpg0708tw5.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpg0708tw5.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_i = 0\n        for j = 1,\
    \ #paren_group do\n            local char = paren_group:sub(j, j)\n          \
    \  if char == '(' then\n                nesting = nesting + 1\n            elseif\
    \ char == ')' then\n                nesting = nesting - 1\n            end\n \
    \           if nesting > max_nesting_i then\n                max_nesting_i = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_i)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg1l5k2_a.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpg1l5k2_a.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpg1l5k2_a.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if char == '(' then\n                nesting = nesting\
    \ + 1\n            elseif char == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptb9gr96i.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptb9gr96i.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmptb9gr96i.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local max_nesting = {}\n\
    \    for i, paren_group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        local max_nesting_in_group = 0\n        for j = 1, #paren_group do\n\
    \            local c = paren_group:sub(j, j)\n            if c == '(' then\n \
    \               nesting = nesting + 1\n            elseif c == ')' then\n    \
    \            nesting = nesting - 1\n            end\n            if nesting >\
    \ max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpop1cxajk.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpop1cxajk.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpop1cxajk.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, c in utf8.next,\
    \ paren_group do\n            if c == '(' then\n                nesting = nesting\
    \ + 1\n                if nesting > max_nesting_in_group then\n              \
    \      max_nesting_in_group = nesting\n                end\n            elseif\
    \ c == ')' then\n                nesting = nesting - 1\n            end\n    \
    \    end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n \
    \   return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1nvcar1j.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1nvcar1j.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp1nvcar1j.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local max_nesting_list = {}\n    local current_nesting\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif c == ')' then\n         \
    \   max_nesting_list[#max_nesting_list + 1] = max_nesting\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        end\n    end\n    return max_nesting_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplgjif809.lua:29:\
    \ expected: {2, 3, 1, 3}\\nactual: {2, 1, 0, 3, 0, 0, 1, 3, 0, 1, 1, 0}\\nstack\
    \ traceback:\\n\\t/tmp/tmplgjif809.lua:29: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for j = 1, #paren_group\
    \ do\n            if paren_group:sub(j, j) == '(' then\n                nesting\
    \ = nesting + 1\n                if nesting > max_nesting_in_group then\n    \
    \                max_nesting_in_group = nesting\n                end\n       \
    \     elseif paren_group:sub(j, j) == ')' then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplibx2si9.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplibx2si9.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmplibx2si9.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nested_parens\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local max_nesting = 0\n        local current_nesting = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif char == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(max_nested_parens, max_nesting)\n    end\n    return\
    \ max_nested_parens\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9fke_060.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9fke_060.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp9fke_060.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_i = 0\n        for j = 1,\
    \ #paren_group do\n            local paren = paren_group:sub(j, j)\n         \
    \   if paren == '(' then\n                nesting = nesting + 1\n            elseif\
    \ paren == ')' then\n                nesting = nesting - 1\n            end\n\
    \            if nesting > max_nesting_i then\n                max_nesting_i =\
    \ nesting\n            end\n        end\n        table.insert(max_nesting, max_nesting_i)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmmhmkimw.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmmhmkimw.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpmmhmkimw.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpb_w6rkes.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpb_w6rkes.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpb_w6rkes.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local paren_levels = {}\n\
    \    for _, paren_group in ipairs(paren_groups) do\n        local level = 0\n\
    \        local max_level = 0\n        for _, paren in ipairs(paren_group) do\n\
    \            if paren == '(' then\n                level = level + 1\n       \
    \     elseif paren == ')' then\n                level = level - 1\n          \
    \  end\n            if level > max_level then\n                max_level = level\n\
    \            end\n        end\n        table.insert(paren_levels, max_level)\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprbpz74yg.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprbpz74yg.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmprbpz74yg.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_in_group = 0\n    for j = 1, #paren_group\
    \ do\n      local char = paren_group:sub(j, j)\n      if char == '(' then\n  \
    \      nesting = nesting + 1\n      elseif char == ')' then\n        nesting =\
    \ nesting - 1\n      end\n      max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n    end\n    max_nesting[i] = max_nesting_in_group\n  end\n  return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3txvh8_b.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3txvh8_b.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp3txvh8_b.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+') do\n\
    \    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('%S')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local group = paren_groups[i]\n   \
    \ local nesting = 0\n    local max_nesting_for_group = 0\n    for j = 1, #group\
    \ do\n      local char = group:sub(j, j)\n      if char == '(' then\n        nesting\
    \ = nesting + 1\n      elseif char == ')' then\n        nesting = nesting - 1\n\
    \      end\n      if nesting > max_nesting_for_group then\n        max_nesting_for_group\
    \ = nesting\n      end\n    end\n    table.insert(max_nesting, max_nesting_for_group)\n\
    \  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptc_n_hb4.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptc_n_hb4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmptc_n_hb4.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_list = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local depth = 0\n        local max_depth = 0\n        for paren\
    \ in paren_group:gmatch('%S') do\n            if paren == '(' then\n         \
    \       depth = depth + 1\n            elseif paren == ')' then\n            \
    \    depth = depth - 1\n            end\n            if depth > max_depth then\n\
    \                max_depth = depth\n            end\n        end\n        table.insert(paren_list,\
    \ max_depth)\n    end\n    return paren_list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    local max_nesting_list\
    \ = {}\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_nesting = current_nesting\
    \ + 1\n            if current_nesting > max_nesting then\n                max_nesting\
    \ = current_nesting\n            end\n        elseif char == ')' then\n      \
    \      current_nesting = current_nesting - 1\n        elseif char == ' ' then\n\
    \            table.insert(max_nesting_list, max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        end\n    end\n    table.insert(max_nesting_list,\
    \ max_nesting)\n    return max_nesting_list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8o5xleqk.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8o5xleqk.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp8o5xleqk.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if char == '(' then\n                nesting = nesting\
    \ + 1\n            elseif char == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuov99a6v.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuov99a6v.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpuov99a6v.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkrzox1nq.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkrzox1nq.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpkrzox1nq.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if char == '(' then\n                nesting = nesting\
    \ + 1\n            elseif char == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdgonlty0.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdgonlty0.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpdgonlty0.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                level = level + 1\n   \
    \             max_level = math.max(max_level, level)\n            elseif char\
    \ == ')' then\n                level = level - 1\n            end\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1ey0oa2q.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1ey0oa2q.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp1ey0oa2q.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_list = stringx.split(paren_string)\n    local max_nesting = {}\n\
    \    for _, paren_group in ipairs(paren_list) do\n        local nesting = 0\n\
    \        local max_nesting_local = 0\n        for i = 1, #paren_group do\n   \
    \         if paren_group:sub(i, i) == '(' then\n                nesting = nesting\
    \ + 1\n                max_nesting_local = math.max(max_nesting_local, nesting)\n\
    \            elseif paren_group:sub(i, i) == ')' then\n                nesting\
    \ = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_local)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9wvi2fxk.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9wvi2fxk.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp9wvi2fxk.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local max_nesting = {}\n\
    \    for i, paren_group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        local max_nesting_in_group = 0\n        for j = 1, #paren_group do\n\
    \            local char = paren_group:sub(j, j)\n            if char == '(' then\n\
    \                nesting = nesting + 1\n            elseif char == ')' then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        max_nesting[i] = max_nesting_in_group\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpet3t_lof.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpet3t_lof.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpet3t_lof.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #group do\n            local char = group:sub(j, j)\n            if char\
    \ == '(' then\n                nesting = nesting + 1\n            elseif char\
    \ == ')' then\n                nesting = nesting - 1\n            end\n      \
    \      max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n      \
    \  end\n        table.insert(max_nesting, max_nesting_in_group)\n    end\n   \
    \ return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgsb17lzu.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgsb17lzu.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpgsb17lzu.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        local max_nesting_in_group = 0\n        for _, char in ipairs(group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8ra30k55.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8ra30k55.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp8ra30k55.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        local max_nesting_in_group = 0\n        for i = 1, #group do\n      \
    \      if group:sub(i, i) == '(' then\n                nesting = nesting + 1\n\
    \                max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \            elseif group:sub(i, i) == ')' then\n                nesting = nesting\
    \ - 1\n            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqcf7dcjf.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqcf7dcjf.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpqcf7dcjf.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                nesting\
    \ = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxu8xdcxr.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxu8xdcxr.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpxu8xdcxr.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local max_nesting_list = {}\n  local paren_list =\
    \ stringx.split(paren_string)\n  for _, paren in ipairs(paren_list) do\n    local\
    \ nesting = 0\n    for i = 1, #paren do\n      if paren:sub(i, i) == '(' then\n\
    \        nesting = nesting + 1\n      elseif paren:sub(i, i) == ')' then\n   \
    \     nesting = nesting - 1\n      end\n    end\n    table.insert(max_nesting_list,\
    \ nesting)\n  end\n  return max_nesting_list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph4tybs40.lua:9:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph4tybs40.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmph4tybs40.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_in_group = 0\n    for c in paren_group:gmatch('.') do\n\
    \      if c == '(' then\n        nesting = nesting + 1\n        if nesting > max_nesting_in_group\
    \ then\n          max_nesting_in_group = nesting\n        end\n      elseif c\
    \ == ')' then\n        nesting = nesting - 1\n      end\n    end\n    max_nesting[i]\
    \ = max_nesting_in_group\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpad4jl2qj.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpad4jl2qj.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpad4jl2qj.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_in_group = 0\n    for j = 1, #paren_group\
    \ do\n      local paren = paren_group:sub(j, j)\n      if paren == '(' then\n\
    \        nesting = nesting + 1\n      elseif paren == ')' then\n        nesting\
    \ = nesting - 1\n      end\n      if nesting > max_nesting_in_group then\n   \
    \     max_nesting_in_group = nesting\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnmiv21_f.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnmiv21_f.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpnmiv21_f.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_depth\
    \ = {}\n    for i = 1, #paren_groups do\n        local cur_depth = 0\n       \
    \ local max_cur_depth = 0\n        for j = 1, #paren_groups[i] do\n          \
    \  if paren_groups[i]:sub(j, j) == '(' then\n                cur_depth = cur_depth\
    \ + 1\n                if cur_depth > max_cur_depth then\n                   \
    \ max_cur_depth = cur_depth\n                end\n            elseif paren_groups[i]:sub(j,\
    \ j) == ')' then\n                cur_depth = cur_depth - 1\n            end\n\
    \        end\n        max_depth[i] = max_cur_depth\n    end\n    return max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpizlz5_j0.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpizlz5_j0.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpizlz5_j0.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzqr0olar.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzqr0olar.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpzqr0olar.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+') do\n\
    \    local max_nesting = 0\n    local cur_nesting = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        cur_nesting = cur_nesting + 1\n    \
    \  elseif paren == ')' then\n        cur_nesting = cur_nesting - 1\n      end\n\
    \      max_nesting = math.max(max_nesting, cur_nesting)\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_level = 0\n        local level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        paren_groups[#paren_groups\
    \ + 1] = max_level\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local paren = paren_group:sub(j, j)\n  \
    \          if paren == '(' then\n                nesting = nesting + 1\n     \
    \       elseif paren == ')' then\n                nesting = nesting - 1\n    \
    \        end\n            if nesting > max_nesting_in_group then\n           \
    \     max_nesting_in_group = nesting\n            end\n        end\n        max_nesting[i]\
    \ = max_nesting_in_group\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpab257gs8.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpab257gs8.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpab257gs8.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \      elseif c == ')' then\n                depth = depth - 1\n            end\n\
    \            max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for paren in paren_group:gmatch('%b()')\
    \ do\n            paren_level = paren_level + 1\n            max_level = math.max(max_level,\
    \ paren_level)\n        end\n        table.insert(paren_levels, max_level)\n \
    \   end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp69medgqc.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp69medgqc.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp69medgqc.lua:24: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_list = {}\n  local paren_stack = {}\n  local max_depth = 0\n  local\
    \ cur_depth = 0\n  for i = 1, #paren_string do\n    local c = paren_string:sub(i,\
    \ i)\n    if c == '(' then\n      cur_depth = cur_depth + 1\n      if cur_depth\
    \ > max_depth then\n        max_depth = cur_depth\n      end\n      table.insert(paren_stack,\
    \ c)\n    elseif c == ')' then\n      table.remove(paren_stack)\n      cur_depth\
    \ = cur_depth - 1\n    elseif c == ' ' then\n      table.insert(paren_list, max_depth)\n\
    \      max_depth = 0\n      cur_depth = 0\n    end\n  end\n  table.insert(paren_list,\
    \ max_depth)\n  return paren_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_in_group = 0\n    for c in paren_group:gmatch('.') do\n\
    \      if c == '(' then\n        nesting = nesting + 1\n        if nesting > max_nesting_in_group\
    \ then\n          max_nesting_in_group = nesting\n        end\n      elseif c\
    \ == ')' then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4paoi45o.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4paoi45o.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp4paoi45o.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \              if nesting > max_nesting_group then\n                    max_nesting_group\
    \ = nesting\n                end\n            elseif c == ')' then\n         \
    \       nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5akzaqzq.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp5akzaqzq.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp5akzaqzq.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, '%s+')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                paren_level = paren_level + 1\n\
    \            elseif c == ')' then\n                paren_level = paren_level -\
    \ 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpskb64swp.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpskb64swp.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpskb64swp.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvzaochi5.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvzaochi5.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpvzaochi5.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local max_nesting = {}\n\
    \    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            if nesting > max_nesting_in_group then\n              \
    \  max_nesting_in_group = nesting\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgzkzu3jl.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgzkzu3jl.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpgzkzu3jl.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_in_group = 0\n    for j = 1, #paren_group\
    \ do\n      local char = paren_group:sub(j, j)\n      if char == '(' then\n  \
    \      nesting = nesting + 1\n      elseif char == ')' then\n        nesting =\
    \ nesting - 1\n      end\n      max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n    end\n    max_nesting[i] = max_nesting_in_group\n  end\n  return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpaog661q7.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpaog661q7.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpaog661q7.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local cur_nesting\
    \ = 0\n    local max_cur_nesting = 0\n    for i = 1, #paren_group do\n      if\
    \ paren_group:sub(i, i) == '(' then\n        cur_nesting = cur_nesting + 1\n \
    \     elseif paren_group:sub(i, i) == ')' then\n        cur_nesting = cur_nesting\
    \ - 1\n      end\n      max_cur_nesting = math.max(max_cur_nesting, cur_nesting)\n\
    \    end\n    table.insert(max_nesting, max_cur_nesting)\n  end\n  return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr6golulh.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr6golulh.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpr6golulh.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for i = 1, #paren_group do\n     \
    \       local char = paren_group:sub(i, i)\n            if char == '(' then\n\
    \                level = level + 1\n                max_level = math.max(max_level,\
    \ level)\n            elseif char == ')' then\n                level = level -\
    \ 1\n            end\n        end\n        table.insert(paren_levels, max_level)\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpb0qgdmp0.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpb0qgdmp0.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpb0qgdmp0.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local paren_levels = {}\n\
    \    for i, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_paren_level = 0\n        for j = 1, #paren_group do\n\
    \            if paren_group:sub(j, j) == '(' then\n                paren_level\
    \ = paren_level + 1\n            elseif paren_group:sub(j, j) == ')' then\n  \
    \              paren_level = paren_level - 1\n            end\n            if\
    \ paren_level > max_paren_level then\n                max_paren_level = paren_level\n\
    \            end\n        end\n        paren_levels[i] = max_paren_level\n   \
    \ end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2gk0yo6l.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2gk0yo6l.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp2gk0yo6l.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                nesting = nesting\
    \ + 1\n            elseif paren == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnqhaq5dp.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnqhaq5dp.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpnqhaq5dp.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                nesting\
    \ = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk5vao8e3.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpk5vao8e3.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpk5vao8e3.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for c\
    \ in paren_group:gmatch('.') do\n            if c == '(' then\n              \
    \  nesting = nesting + 1\n            elseif c == ')' then\n                nesting\
    \ = nesting - 1\n            end\n            max_nesting = math.max(max_nesting,\
    \ nesting)\n        end\n        table.insert(paren_groups, max_nesting)\n   \
    \ end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        elseif char == ' ' then\n\
    \            table.insert(paren_levels, paren_level)\n            paren_level\
    \ = 0\n        end\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps0yv3ro5.lua:26:\
    \ expected: {2, 3, 1, 3}\\nactual: {0, 0, 0}\\nstack traceback:\\n\\t/tmp/tmps0yv3ro5.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+') do\n\
    \    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    paren_groups[#paren_groups\
    \ + 1] = max_nesting\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_i = 0\n        for j = 1,\
    \ #paren_group do\n            local paren = paren_group:sub(j, j)\n         \
    \   if paren == '(' then\n                nesting = nesting + 1\n            elseif\
    \ paren == ')' then\n                nesting = nesting - 1\n            end\n\
    \            if nesting > max_nesting_i then\n                max_nesting_i =\
    \ nesting\n            end\n        end\n        table.insert(max_nesting, max_nesting_i)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7ikf1ve4.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7ikf1ve4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp7ikf1ve4.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                paren_level = paren_level + 1\n\
    \            elseif c == ')' then\n                paren_level = paren_level -\
    \ 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr0c7uvnx.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr0c7uvnx.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpr0c7uvnx.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_in_group = 0\n    for j = 1, #paren_group\
    \ do\n      local paren = paren_group:sub(j, j)\n      if paren == '(' then\n\
    \        nesting = nesting + 1\n      elseif paren == ')' then\n        nesting\
    \ = nesting - 1\n      end\n      if nesting > max_nesting_in_group then\n   \
    \     max_nesting_in_group = nesting\n      end\n    end\n    max_nesting[i] =\
    \ max_nesting_in_group\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsu156b3_.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsu156b3_.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpsu156b3_.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local paren_levels\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local level = 0\n\
    \    local max_level = 0\n    for _, paren in ipairs(paren_group) do\n      if\
    \ paren == '(' then\n        level = level + 1\n      elseif paren == ')' then\n\
    \        level = level - 1\n      end\n      max_level = math.max(max_level, level)\n\
    \    end\n    table.insert(paren_levels, max_level)\n  end\n  return paren_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp490x6o5h.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp490x6o5h.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp490x6o5h.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local max_nesting_level = 0\n    local nesting_level = 0\n    for j = 1,\
    \ #paren_group do\n      local c = paren_group:sub(j, j)\n      if c == '(' then\n\
    \        nesting_level = nesting_level + 1\n      elseif c == ')' then\n     \
    \   nesting_level = nesting_level - 1\n      end\n      if nesting_level > max_nesting_level\
    \ then\n        max_nesting_level = nesting_level\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_level)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6i4cb0aa.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6i4cb0aa.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp6i4cb0aa.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                nesting\
    \ = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo4x610h6.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpo4x610h6.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpo4x610h6.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local group = paren_groups[i]\n\
    \        local level = 0\n        local max_level = 0\n        for j = 1, #group\
    \ do\n            local char = group:sub(j, j)\n            if char == '(' then\n\
    \                level = level + 1\n            elseif char == ')' then\n    \
    \            level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(max_levels, max_level)\n    end\n\
    \    return max_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbdfi1dp0.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbdfi1dp0.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpbdfi1dp0.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nest_level = nest_level +\
    \ 1\n            elseif c == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            max_nest_level = math.max(max_nest_level,\
    \ nest_level)\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1pifqibd.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1pifqibd.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp1pifqibd.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local paren = paren_group:sub(j, j)\n  \
    \          if paren == '(' then\n                nesting = nesting + 1\n     \
    \       elseif paren == ')' then\n                nesting = nesting - 1\n    \
    \        end\n            if nesting > max_nesting_in_group then\n           \
    \     max_nesting_in_group = nesting\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0hwi68eh.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0hwi68eh.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp0hwi68eh.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_levels, max_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpefp93uea.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpefp93uea.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpefp93uea.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = split(paren_string, ' ')\n  local max_nesting = {}\n \
    \ for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n    local\
    \ max_nesting_in_group = 0\n    for _, char in ipairs(paren_group) do\n      if\
    \ char == '(' then\n        nesting = nesting + 1\n      elseif char == ')' then\n\
    \        nesting = nesting - 1\n      end\n      if nesting > max_nesting_in_group\
    \ then\n        max_nesting_in_group = nesting\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8za2lvbu.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8za2lvbu.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp8za2lvbu.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch('%S+') do\n   \
    \ local level = 0\n    local max_level = 0\n    for paren in group:gmatch('.')\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local depth\
    \ = 0\n        local max_depth = 0\n        for i = 1, #paren_group do\n     \
    \       if paren_group:sub(i, i) == '(' then\n                depth = depth +\
    \ 1\n                max_depth = math.max(max_depth, depth)\n            elseif\
    \ paren_group:sub(i, i) == ')' then\n                depth = depth - 1\n     \
    \       end\n        end\n        table.insert(max_nesting, max_depth)\n    end\n\
    \    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz6oaofdx.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpz6oaofdx.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpz6oaofdx.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \     max_level = math.max(max_level, level)\n            elseif c == ')' then\n\
    \                level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzsezjqlv.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzsezjqlv.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpzsezjqlv.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local paren_levels\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local paren_level\
    \ = 0\n    local max_level = 0\n    for char in paren_group:gmatch('.') do\n \
    \     if char == '(' then\n        paren_level = paren_level + 1\n      elseif\
    \ char == ')' then\n        paren_level = paren_level - 1\n      end\n      max_level\
    \ = math.max(max_level, paren_level)\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuje2h4lp.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuje2h4lp.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpuje2h4lp.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_list = {}\n  local paren_level = 0\n  local max_level = 0\n  for\
    \ i = 1, #paren_string do\n    local c = paren_string:sub(i, i)\n    if c == '('\
    \ then\n      paren_level = paren_level + 1\n      if paren_level > max_level\
    \ then\n        max_level = paren_level\n      end\n    elseif c == ')' then\n\
    \      paren_level = paren_level - 1\n    elseif c == ' ' then\n      table.insert(paren_list,\
    \ max_level)\n      max_level = 0\n      paren_level = 0\n    end\n  end\n  table.insert(paren_list,\
    \ max_level)\n  return paren_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local paren_level = 0\n        local max_level = 0\n        for j = 1,\
    \ #paren_group do\n            local paren = paren_group:sub(j, j)\n         \
    \   if paren == '(' then\n                paren_level = paren_level + 1\n    \
    \        elseif paren == ')' then\n                paren_level = paren_level -\
    \ 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        paren_levels[i] = max_level\n    end\n    return paren_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpujd80ky4.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpujd80ky4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpujd80ky4.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \     max_level = math.max(max_level, level)\n            elseif c == ')' then\n\
    \                level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp83qujkz0.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp83qujkz0.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp83qujkz0.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_in_group = 0\n    for j = 1, #paren_group\
    \ do\n      local char = paren_group:sub(j, j)\n      if char == '(' then\n  \
    \      nesting = nesting + 1\n      elseif char == ')' then\n        nesting =\
    \ nesting - 1\n      end\n      max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n    end\n    max_nesting[i] = max_nesting_in_group\n  end\n  return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpc3dtens_.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpc3dtens_.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpc3dtens_.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp69efhclm.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp69efhclm.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp69efhclm.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_in_group = 0\n    for i = 1, #paren_group do\n      if\
    \ paren_group:sub(i, i) == '(' then\n        nesting = nesting + 1\n        if\
    \ nesting > max_nesting_in_group then\n          max_nesting_in_group = nesting\n\
    \        end\n      elseif paren_group:sub(i, i) == ')' then\n        nesting\
    \ = nesting - 1\n      end\n    end\n    table.insert(max_nesting, max_nesting_in_group)\n\
    \  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr3sb4ucu.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr3sb4ucu.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpr3sb4ucu.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp71u1l4_a.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp71u1l4_a.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp71u1l4_a.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \              if nesting > max_nesting_group then\n                    max_nesting_group\
    \ = nesting\n                end\n            elseif c == ')' then\n         \
    \       nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvanrnx6j.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvanrnx6j.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpvanrnx6j.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for i = 1, #paren_groups do\n    local paren_group = paren_groups[i]\n\
    \    local nesting = 0\n    local max_nesting_in_group = 0\n    for j = 1, #paren_group\
    \ do\n      local paren = paren_group:sub(j, j)\n      if paren == '(' then\n\
    \        nesting = nesting + 1\n      elseif paren == ')' then\n        nesting\
    \ = nesting - 1\n      end\n      if nesting > max_nesting_in_group then\n   \
    \     max_nesting_in_group = nesting\n      end\n    end\n    max_nesting[i] =\
    \ max_nesting_in_group\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprs0u1oqn.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprs0u1oqn.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmprs0u1oqn.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+') do\n\
    \    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('%S')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_in_group = 0\n    for c in paren_group:gmatch('.') do\n\
    \      if c == '(' then\n        nesting = nesting + 1\n        if nesting > max_nesting_in_group\
    \ then\n          max_nesting_in_group = nesting\n        end\n      elseif c\
    \ == ')' then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphebygt_r.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphebygt_r.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmphebygt_r.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local nesting = 0\n  local max_nesting_list = {}\n\
    \  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if\
    \ char == '(' then\n      nesting = nesting + 1\n      if nesting > max_nesting\
    \ then\n        max_nesting = nesting\n      end\n    elseif char == ')' then\n\
    \      nesting = nesting - 1\n    elseif char == ' ' then\n      max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n      max_nesting = 0\n      nesting = 0\n    end\n  end\n\
    \  max_nesting_list[#max_nesting_list + 1] = max_nesting\n  return max_nesting_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local nesting = 0\n    local max_nesting_list\
    \ = {}\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            nesting = nesting + 1\n       \
    \     if nesting > max_nesting then\n                max_nesting = nesting\n \
    \           end\n        elseif char == ')' then\n            nesting = nesting\
    \ - 1\n        elseif char == ' ' then\n            max_nesting_list[#max_nesting_list\
    \ + 1] = max_nesting\n            max_nesting = 0\n            nesting = 0\n \
    \       end\n    end\n    max_nesting_list[#max_nesting_list + 1] = max_nesting\n\
    \    return max_nesting_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nest_level = 0\n        local max_nest_level = 0\n        for j\
    \ = 1, #paren_group do\n            local paren = paren_group:sub(j, j)\n    \
    \        if paren == '(' then\n                nest_level = nest_level + 1\n \
    \           elseif paren == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            if nest_level > max_nest_level then\n    \
    \            max_nest_level = nest_level\n            end\n        end\n     \
    \   table.insert(max_nest_levels, max_nest_level)\n    end\n    return max_nest_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwwq0qfv9.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwwq0qfv9.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpwwq0qfv9.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nesting = 0\n        local max_nesting_in_group = 0\n        for\
    \ j = 1, #paren_group do\n            local char = paren_group:sub(j, j)\n   \
    \         if char == '(' then\n                nesting = nesting + 1\n       \
    \     elseif char == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \        end\n        max_nesting[i] = max_nesting_in_group\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyxa58vc4.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyxa58vc4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpyxa58vc4.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                nesting\
    \ = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp33iaqbdq.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp33iaqbdq.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp33iaqbdq.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \              if nesting > max_nesting_in_group then\n                    max_nesting_in_group\
    \ = nesting\n                end\n            elseif c == ')' then\n         \
    \       nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp06o3cbg9.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp06o3cbg9.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp06o3cbg9.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_group = 0\n    for c in paren_group:gmatch('.') do\n  \
    \    if c == '(' then\n        nesting = nesting + 1\n        if nesting > max_nesting_group\
    \ then\n          max_nesting_group = nesting\n        end\n      elseif c ==\
    \ ')' then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(max_nesting,\
    \ max_nesting_group)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfb0cc4ex.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfb0cc4ex.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpfb0cc4ex.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local paren_level = 0\n        local max_level = 0\n        for j = 1,\
    \ #paren_group do\n            local paren = paren_group:sub(j, j)\n         \
    \   if paren == '(' then\n                paren_level = paren_level + 1\n    \
    \        elseif paren == ')' then\n                paren_level = paren_level -\
    \ 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        paren_levels[i] = max_level\n    end\n    return paren_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplg77fvav.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplg77fvav.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmplg77fvav.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nested_parens\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local max_nested_paren\
    \ = 0\n        local current_nested_paren = 0\n        for _, paren in ipairs(stringx.split(paren_group,\
    \ '')) do\n            if paren == '(' then\n                current_nested_paren\
    \ = current_nested_paren + 1\n            elseif paren == ')' then\n         \
    \       current_nested_paren = current_nested_paren - 1\n            end\n   \
    \         if current_nested_paren > max_nested_paren then\n                max_nested_paren\
    \ = current_nested_paren\n            end\n        end\n        table.insert(max_nested_parens,\
    \ max_nested_paren)\n    end\n    return max_nested_parens\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplhibdcyq.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplhibdcyq.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmplhibdcyq.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                nesting\
    \ = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxbjj82d8.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxbjj82d8.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpxbjj82d8.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \              max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \            elseif c == ')' then\n                nesting = nesting - 1\n   \
    \         end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpb5t51xez.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpb5t51xez.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpb5t51xez.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for i, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_level = 0\n        for j = 1, #paren_group do\n\
    \            if paren_group:sub(j, j) == '(' then\n                nesting = nesting\
    \ + 1\n                if nesting > max_nesting_level then\n                 \
    \   max_nesting_level = nesting\n                end\n            elseif paren_group:sub(j,\
    \ j) == ')' then\n                nesting = nesting - 1\n            end\n   \
    \     end\n        table.insert(max_nesting, max_nesting_level)\n    end\n   \
    \ return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9v7_a505.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9v7_a505.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp9v7_a505.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local nest_level = 0\n        local max_nest_level = 0\n        for j\
    \ = 1, #paren_group do\n            local paren = paren_group:sub(j, j)\n    \
    \        if paren == '(' then\n                nest_level = nest_level + 1\n \
    \           elseif paren == ')' then\n                nest_level = nest_level\
    \ - 1\n            end\n            if nest_level > max_nest_level then\n    \
    \            max_nest_level = nest_level\n            end\n        end\n     \
    \   max_nest_levels[i] = max_nest_level\n    end\n    return max_nest_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0pasib_c.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0pasib_c.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp0pasib_c.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for _, c in ipairs(paren_group)\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \          elseif c == ')' then\n                nesting = nesting - 1\n     \
    \       end\n            max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphjf1v6lg.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphjf1v6lg.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmphjf1v6lg.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_group = stringx.split(paren_string, ' ')\n    local paren_depth\
    \ = {}\n    for i = 1, #paren_group do\n        local paren_count = 0\n      \
    \  local max_count = 0\n        for j = 1, #paren_group[i] do\n            if\
    \ paren_group[i]:sub(j, j) == '(' then\n                paren_count = paren_count\
    \ + 1\n            elseif paren_group[i]:sub(j, j) == ')' then\n             \
    \   paren_count = paren_count - 1\n            end\n            if paren_count\
    \ > max_count then\n                max_count = paren_count\n            end\n\
    \        end\n        table.insert(paren_depth, max_count)\n    end\n    return\
    \ paren_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbxe3yznj.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbxe3yznj.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpbxe3yznj.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for i = 1, #paren_group\
    \ do\n            if paren_group:sub(i, i) == '(' then\n                nesting\
    \ = nesting + 1\n                max_nesting_in_group = math.max(max_nesting_in_group,\
    \ nesting)\n            elseif paren_group:sub(i, i) == ')' then\n           \
    \     nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprsgdu8tj.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprsgdu8tj.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmprsgdu8tj.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local max_level\
    \ = 0\n        local level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \ elseif c == ')' then\n                level = level - 1\n            end\n \
    \           max_level = math.max(max_level, level)\n        end\n        table.insert(max_nesting,\
    \ max_level)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp53o49au6.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp53o49au6.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp53o49au6.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local max_nesting = {}\n\
    \    for _, paren_group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        local max_nesting_in_group = 0\n        for _, char in ipairs(paren_group)\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxvtcqwl_.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxvtcqwl_.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpxvtcqwl_.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \              if nesting > max_nesting_in_group then\n                    max_nesting_in_group\
    \ = nesting\n                end\n            elseif c == ')' then\n         \
    \       nesting = nesting - 1\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9pqhnq52.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9pqhnq52.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp9pqhnq52.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \     max_level = math.max(max_level, level)\n            elseif c == ')' then\n\
    \                level = level - 1\n            end\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkhzo1a2p.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkhzo1a2p.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpkhzo1a2p.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = split(paren_string, ' ')\n    local max_nesting = {}\n\
    \    for _, paren_group in ipairs(paren_groups) do\n        local nesting = 0\n\
    \        local max_nesting_this_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \          elseif c == ')' then\n                nesting = nesting - 1\n     \
    \       end\n            if nesting > max_nesting_this_group then\n          \
    \      max_nesting_this_group = nesting\n            end\n        end\n      \
    \  table.insert(max_nesting, max_nesting_this_group)\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpv28yvrbm.lua:7:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpv28yvrbm.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpv28yvrbm.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    local depths = {}\n    for\
    \ i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n        if\
    \ c == '(' then\n            depth = depth + 1\n            if depth > max_depth\
    \ then\n                max_depth = depth\n            end\n        elseif c ==\
    \ ')' then\n            depth = depth - 1\n        elseif c == ' ' then\n    \
    \        depths[#depths + 1] = max_depth\n            max_depth = 0\n        \
    \    depth = 0\n        end\n    end\n    depths[#depths + 1] = max_depth\n  \
    \  return depths\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local paren_levels\
    \ = {}\n    for i = 1, #paren_groups do\n        local paren_group = paren_groups[i]\n\
    \        local level = 0\n        local max_level = 0\n        for j = 1, #paren_group\
    \ do\n            local char = paren_group:sub(j, j)\n            if char == '('\
    \ then\n                level = level + 1\n                max_level = math.max(max_level,\
    \ level)\n            elseif char == ')' then\n                level = level -\
    \ 1\n            end\n        end\n        paren_levels[i] = max_level\n    end\n\
    \    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkwabf05n.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkwabf05n.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpkwabf05n.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nest = 0\n    local nest_level = 0\n    local nest_levels = {}\n\
    \    for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n \
    \       if c == '(' then\n            nest_level = nest_level + 1\n          \
    \  if nest_level > max_nest then\n                max_nest = nest_level\n    \
    \        end\n        elseif c == ')' then\n            nest_level = nest_level\
    \ - 1\n        elseif c == ' ' then\n            table.insert(nest_levels, max_nest)\n\
    \            max_nest = 0\n            nest_level = 0\n        end\n    end\n\
    \    table.insert(nest_levels, max_nest)\n    return nest_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nest_levels\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nest_level\
    \ = 0\n        local max_nest_level = 0\n        for i = 1, #paren_group do\n\
    \            if paren_group:sub(i, i) == '(' then\n                nest_level\
    \ = nest_level + 1\n            elseif paren_group:sub(i, i) == ')' then\n   \
    \             nest_level = nest_level - 1\n            end\n            if nest_level\
    \ > max_nest_level then\n                max_nest_level = nest_level\n       \
    \     end\n        end\n        table.insert(max_nest_levels, max_nest_level)\n\
    \    end\n    return max_nest_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp99gx_c5_.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp99gx_c5_.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp99gx_c5_.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = {}\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_in_group = 0\n    for _, char in utf8.next, paren_group\
    \ do\n      if char == '(' then\n        nesting = nesting + 1\n      elseif char\
    \ == ')' then\n        nesting = nesting - 1\n      end\n      max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n    end\n    table.insert(max_nesting,\
    \ max_nesting_in_group)\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyxz8r_f5.lua:7:\
    \ attempt to index global 'stringx' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyxz8r_f5.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpyxz8r_f5.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
