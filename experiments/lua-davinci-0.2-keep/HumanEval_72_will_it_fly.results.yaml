name: HumanEval_72_will_it_fly
language: lua
results:
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i, v in ipairs(q) do\n\t\tsum = sum\
    \ + v\n\tend\n\tif sum <= w then\n\t\tfor i = 1, #q / 2 do\n\t\t\tif q[i] ~= q[#q\
    \ - i + 1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\t\
    end\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q do\n\t\t\tif q[i] ~= q[#q - i + 1]\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q do\n\t\t\tif q[i] ~= q[#q - i + 1]\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local left = 1\n        local\
    \ right = #q\n        while left < right do\n            if q[left] ~= q[right]\
    \ then\n                return false\n            end\n            left = left\
    \ + 1\n            right = right - 1\n        end\n        return true\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local i = 1\n    local j = #q\n    while i < j\
    \ do\n      if q[i] ~= q[j] then\n        return false\n      end\n      i = i\
    \ + 1\n      j = j - 1\n    end\n    return true\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q do\n\t\t\tif q[i] ~= q[#q - i + 1]\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  local is_palindrome = true\n  for i = 1, #q do\n    if q[i] ~= q[#q\
    \ - i + 1] then\n      is_palindrome = false\n      break\n    end\n  end\n  return\
    \ is_palindrome and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q do\n\t\t\tif q[i] ~= q[#q - i + 1]\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local rev = {}\n    for i = #q, 1, -1 do\n   \
    \   rev[#rev + 1] = q[i]\n    end\n    for i = 1, #q do\n      if q[i] ~= rev[i]\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local rev = {}\n    for i = #q, 1, -1 do\n   \
    \   rev[#rev + 1] = q[i]\n    end\n    for i = 1, #q do\n      if q[i] ~= rev[i]\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local i, j = 1, #q\n        while\
    \ i < j do\n            if q[i] ~= q[j] then\n                return false\n \
    \           end\n            i = i + 1\n            j = j - 1\n        end\n \
    \       return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local s = \"\"\n    for i = 1, #q do\n      s\
    \ = s .. tostring(q[i])\n    end\n    if s == string.reverse(s) then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local i = 1\n        local j\
    \ = #q\n        while i < j do\n            if q[i] ~= q[j] then\n           \
    \     return false\n            end\n            i = i + 1\n            j = j\
    \ - 1\n        end\n        return true\n    end\n    return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local palindrome = true\n    for i = 1, #q / 2\
    \ do\n      if q[i] ~= q[#q - i + 1] then\n        palindrome = false\n      \
    \  break\n      end\n    end\n    return palindrome\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local i = 1\n    local j = #q\n    while i < j\
    \ do\n      if q[i] ~= q[j] then\n        return false\n      end\n      i = i\
    \ + 1\n      j = j - 1\n    end\n    return true\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local i = 1\n    local j = #q\n    while i < j\
    \ do\n      if q[i] ~= q[j] then\n        return false\n      end\n      i = i\
    \ + 1\n      j = j - 1\n    end\n    return true\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  local is_balanced = true\n  for i = 1, #q do\n    if q[i] ~= q[#q -\
    \ i + 1] then\n      is_balanced = false\n      break\n    end\n  end\n  return\
    \ is_balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q do\n\t\t\tif q[i] ~= q[#q - i + 1]\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    local is_balanced = true\n    for i = 1, #q do\n      \
    \  if q[i] ~= q[#q - i + 1] then\n            is_balanced = false\n          \
    \  break\n        end\n    end\n    return is_balanced and sum <= w\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q do\n\t\t\tif q[i] ~= q[#q - i + 1]\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local s = \"\"\n        for i\
    \ = 1, #q do\n            s = s .. tostring(q[i])\n        end\n        local\
    \ rev = \"\"\n        for i = #s, 1, -1 do\n            rev = rev .. s:sub(i,\
    \ i)\n        end\n        if s == rev then\n            return true\n       \
    \ else\n            return false\n        end\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local reverse = {}\n    for i = #q, 1, -1 do\n\
    \      reverse[#reverse + 1] = q[i]\n    end\n    for i = 1, #q do\n      if q[i]\
    \ ~= reverse[i] then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local reverse = {}\n    for i = #q, 1, -1 do\n\
    \      reverse[#reverse + 1] = q[i]\n    end\n    if #q % 2 == 0 then\n      for\
    \ i = 1, #q / 2 do\n        if q[i] ~= reverse[i] then\n          return false\n\
    \        end\n      end\n      return true\n    else\n      for i = 1, (#q - 1)\
    \ / 2 do\n        if q[i] ~= reverse[i] then\n          return false\n       \
    \ end\n      end\n      return true\n    end\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local left = 1\n    local right = #q\n    while\
    \ left < right do\n      if q[left] ~= q[right] then\n        return false\n \
    \     end\n      left = left + 1\n      right = right - 1\n    end\n    return\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q do\n\t\t\tif q[i] ~= q[#q - i + 1]\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local is_palindrome = true\n    for i = 1, #q\
    \ / 2 do\n      if q[i] ~= q[#q - i + 1] then\n        is_palindrome = false\n\
    \        break\n      end\n    end\n    return is_palindrome\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local i = 1\n    local j = #q\n    while i < j\
    \ do\n      if q[i] ~= q[j] then\n        return false\n      end\n      i = i\
    \ + 1\n      j = j - 1\n    end\n    return true\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local i = 1\n        local j\
    \ = #q\n        while i < j do\n            if q[i] ~= q[j] then\n           \
    \     return false\n            end\n            i = i + 1\n            j = j\
    \ - 1\n        end\n        return true\n    end\n    return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local i = 1\n        local j\
    \ = #q\n        while i < j do\n            if q[i] ~= q[j] then\n           \
    \     return false\n            end\n            i = i + 1\n            j = j\
    \ - 1\n        end\n        return true\n    end\n    return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local is_palindrome = true\n\
    \        for i = 1, #q / 2 do\n            if q[i] ~= q[#q - i + 1] then\n   \
    \             is_palindrome = false\n                break\n            end\n\
    \        end\n        return is_palindrome\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local str = table.concat(q)\n    local rev = string.reverse(str)\n\
    \    if str == rev then\n      return true\n    else\n      return false\n   \
    \ end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\
    \tend\n\tif sum <= w then\n\t\tfor i = 1, #q / 2 do\n\t\t\tif q[i] ~= q[#q - i\
    \ + 1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\
    \treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q / 2 do\n      \
    \      if q[i] ~= q[#q - i + 1] then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local reverse = {}\n    for i = #q, 1, -1 do\n\
    \      reverse[#reverse + 1] = q[i]\n    end\n    if reverse == q then\n     \
    \ return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa0y8jpxa.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpa0y8jpxa.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local s = 0\n  for i = 1, #q do\n    s = s + q[i]\n  end\n\
    \  if s <= w then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q - i + 1] then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local rev = {}\n        for i\
    \ = #q, 1, -1 do\n            rev[#rev + 1] = q[i]\n        end\n        for i\
    \ = 1, #q do\n            if q[i] ~= rev[i] then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    local rev = {}\n    for i = #q, 1, -1 do\n   \
    \   rev[#rev + 1] = q[i]\n    end\n    for i = 1, #q do\n      if q[i] ~= rev[i]\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        local is_palindrome = true\n\
    \        for i = 1, #q / 2 do\n            if q[i] ~= q[#q - i + 1] then\n   \
    \             is_palindrome = false\n                break\n            end\n\
    \        end\n        return is_palindrome\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum <= w then\n    for i = 1, #q do\n      if q[i] ~= q[#q - i +\
    \ 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n    end\n    if sum <= w then\n        for i = 1, #q do\n          \
    \  if q[i] ~= q[#q - i + 1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
