name: HumanEval_144_simplify
language: lua
prompt: "-- Your task is to implement a function that will simplify the expression\n\
  -- x * n. The function returns True if x * n evaluates to a whole number and False\n\
  -- otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n-- <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n-- You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n-- simplify(\"1/5\", \"5/1\") = True\n--\
  \ simplify(\"1/6\", \"2/1\") = False\n-- simplify(\"7/10\", \"10/2\") = False\n\
  local function simplify(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = simplify\n\
  \    lu.assertEquals(candidate('1/5', '5/1'), true)\n    lu.assertEquals(candidate('1/6',\
  \ '2/1'), false)\n    lu.assertEquals(candidate('5/1', '3/1'), true)\n    lu.assertEquals(candidate('7/10',\
  \ '10/2'), false)\n    lu.assertEquals(candidate('2/10', '50/10'), true)\n    lu.assertEquals(candidate('7/2',\
  \ '4/2'), true)\n    lu.assertEquals(candidate('11/6', '6/1'), true)\n    lu.assertEquals(candidate('2/3',\
  \ '5/2'), false)\n    lu.assertEquals(candidate('5/2', '3/5'), false)\n    lu.assertEquals(candidate('2/4',\
  \ '8/4'), true)\n    lu.assertEquals(candidate('2/4', '4/2'), true)\n    lu.assertEquals(candidate('1/5',\
  \ '5/1'), true)\n    lu.assertEquals(candidate('1/5', '1/5'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num = num / gcd\n \
    \   den = den / gcd\n    return num % den == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    return numerator % denominator\
    \ == 0\nend", "    local function gcd(a, b)\n        if b == 0 then\n        \
    \    return a\n        else\n            return gcd(b, a % b)\n        end\n \
    \   end", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local x_numerator\
    \ = tonumber(x_numerator)\n  local x_denominator = tonumber(x_denominator)\n \
    \ local n_numerator = tonumber(n_numerator)\n  local n_denominator = tonumber(n_denominator)\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  local gcd = math.gcd(numerator, denominator)\n  numerator\
    \ = numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local result_numerator = x_numerator * n_numerator\n  local\
    \ result_denominator = x_denominator * n_denominator\n  return result_numerator\
    \ % result_denominator == 0\nend", "  local function gcd(a, b)\n    while b ~=\
    \ 0 do\n      a, b = b, a % b\n    end\n    return a\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function simplify(x)\n\
    \    local numerator, denominator = x:match(\"(%d+)/(%d+)\")\n    numerator, denominator\
    \ = tonumber(numerator), tonumber(denominator)\n    local g = gcd(numerator, denominator)\n\
    \    return numerator / g, denominator / g\n  end\n  local xn, xd = simplify(x)\n\
    \  local nn, nd = simplify(n)\n  local l = lcm(xd, nd)\n  return (xn * l / xd)\
    \ % (nn * l / nd) == 0\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local result_numerator = x_numerator * n_numerator\n  local result_denominator\
    \ = x_denominator * n_denominator\n  return result_numerator % result_denominator\
    \ == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n \
    \   return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n    local numerator,\
    \ denominator = x:match(\"(%d+)/(%d+)\")\n    numerator, denominator = tonumber(numerator),\
    \ tonumber(denominator)\n    local g = gcd(numerator, denominator)\n    return\
    \ numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator =\
    \ simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  return (l / x_denominator) *\
    \ x_numerator % l == 0\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local x_numerator = tonumber(x_numerator)\n  local x_denominator = tonumber(x_denominator)\n\
    \  local n_numerator = tonumber(n_numerator)\n  local n_denominator = tonumber(n_denominator)\n\
    \  local result = (x_numerator * n_denominator) * (n_numerator * x_denominator)\n\
    \  return result % 1 == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "  local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return den /\
    \ gcd == num / gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ num / gcd == den\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ num / gcd == den\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ num / gcd == den\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n    local denominator\
    \ = x_denominator * n_numerator\n    return numerator % denominator == 0\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_denominator\n  local denominator = x_denominator * n_numerator\n  local gcd\
    \ = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n  denominator\
    \ = denominator / gcd\n  return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_denominator\n\
    \  local denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  return numerator % denominator == 0\nend", "    local\
    \ function gcd(a, b)\n        if b == 0 then\n            return a\n        else\n\
    \            return gcd(b, a % b)\n        end\n    end", "  local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return den / gcd == num / gcd\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    return num / gcd == den\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = x_numerator * n_denominator\n  local denominator\
    \ = x_denominator * n_numerator\n  local gcd = math.gcd(numerator, denominator)\n\
    \  return numerator / gcd == denominator / gcd\nend", "  -- TODO: implement the\
    \ function here\n  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local result = x_numerator * n_denominator * n_numerator *\
    \ x_denominator\n    return result % (x_denominator * n_denominator) == 0\nend",
  "  local xn = x * n\n  return xn % 1 == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \    local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n   \
    \ return numerator % denominator == 0\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = tonumber(x_num) * tonumber(n_den) * tonumber(n_num)\n    local den = tonumber(x_den)\
    \ * tonumber(n_den)\n    local gcd = math.gcd(num, den)\n    return num / gcd\
    \ == den / gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    local gcd = math.gcd(numerator,\
    \ denominator)\n    numerator = numerator / gcd\n    denominator = denominator\
    \ / gcd\n    return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local x_numerator = tonumber(x_numerator)\n  local\
    \ x_denominator = tonumber(x_denominator)\n  local n_numerator = tonumber(n_numerator)\n\
    \  local n_denominator = tonumber(n_denominator)\n  local result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator\n  if result % x_denominator ==\
    \ 0 and result % n_denominator == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend", "    local function gcd(a, b)\n        if b == 0 then\n\
    \            return a\n        else\n            return gcd(b, a % b)\n      \
    \  end\n    end", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    return numerator % denominator == 0\nend", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  return num % den == 0\nend", "  local function\
    \ gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n\
    \  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function\
    \ parse(s)\n    local n, d = s:match(\"(%d+)/(%d+)\")\n    return tonumber(n),\
    \ tonumber(d)\n  end\n  local xn, xd = parse(x)\n  local nn, nd = parse(n)\n \
    \ local l = lcm(xd, nd)\n  return (xn * l / xd) % (nn * l / nd) == 0\nend", " \
    \   local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    return num / gcd == den / gcd\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return den / gcd == num / gcd\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num = num / gcd\n \
    \   den = den / gcd\n    return num % den == 0\nend", "  -- TODO: implement this\
    \ function\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n\
    \    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function to_num(s)\n    local n, d = s:match(\"\
    (%d+)/(%d+)\")\n    return tonumber(n), tonumber(d)\n  end\n  local xn, xd = to_num(x)\n\
    \  local nn, nd = to_num(n)\n  local l = lcm(xd, nd)\n  return (l / xd * xn) %\
    \ l == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n\
    \    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function to_num(s)\n    local num, den = s:match(\"\
    (%d+)/(%d+)\")\n    return tonumber(num), tonumber(den)\n  end\n  local x_num,\
    \ x_den = to_num(x)\n  local n_num, n_den = to_num(n)\n  local l = lcm(x_den,\
    \ n_den)\n  return (l / x_den) * x_num == (l / n_den) * n_num\nend", "  local\
    \ x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  num = num / gcd\n  den = den / gcd\n  return num % den == 0\nend", " \
    \ local function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b,\
    \ a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n\
    \  local function parse(s)\n    local num, den = s:match(\"(%d+)/(%d+)\")\n  \
    \  return tonumber(num), tonumber(den)\n  end\n  local xnum, xden = parse(x)\n\
    \  local nnum, nden = parse(n)\n  local l = lcm(xden, nden)\n  return (l / xden\
    \ * xnum) % l == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_den\n\
    \    local den = x_den * n_num\n    return num % den == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "  local function gcd(a, b)\n  \
    \  if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function parse(s)\n\
    \    local n, d = s:match(\"(%d+)/(%d+)\")\n    return tonumber(n), tonumber(d)\n\
    \  end\n  local xn, xd = parse(x)\n  local nn, nd = parse(n)\n  local l = lcm(xd,\
    \ nd)\n  return l / xd * xn % l == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \  local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return\
    \ numerator % denominator == 0\nend", "  local xn = x * n\n  return xn % 1 ==\
    \ 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den\
    \ = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den\
    \ * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\n\
    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den =\
    \ n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return den / gcd == num / gcd\nend",
  "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    return num / gcd == den\nend", "  local\
    \ function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n\
    \  end\n  local function simplify_fraction(f)\n    local numerator, denominator\
    \ = f:match(\"(%d+)/(%d+)\")\n    numerator, denominator = tonumber(numerator),\
    \ tonumber(denominator)\n    local g = gcd(numerator, denominator)\n    return\
    \ numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator =\
    \ simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local numerator = x_numerator * n_numerator\n  local denominator = x_denominator\
    \ * n_denominator\n  return numerator % denominator == 0\nend", "    local x_num,\
    \ x_denom = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_denom = n:match(\"(%d+)/(%d+)\"\
    )\n    local num = x_num * n_num\n    local denom = x_denom * n_denom\n    local\
    \ gcd = math.gcd(num, denom)\n    return gcd == denom\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    return numerator % denominator\
    \ == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den =\
    \ x_den * n_den\n  return num % den == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n    local denominator\
    \ = x_denominator * n_numerator\n    return numerator % denominator == 0\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  return\
    \ num % den == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n    local num,\
    \ den = x:match(\"(%d+)/(%d+)\")\n    local g = gcd(num, den)\n    return num\
    \ / g, den / g\n  end\n  local x_num, x_den = simplify_fraction(x)\n  local n_num,\
    \ n_den = simplify_fraction(n)\n  local l = lcm(x_den, n_den)\n  return (l / x_den)\
    \ * x_num == (l / n_den) * n_num\nend", "  local x_numerator, x_denominator =\
    \ x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  local gcd = math.gcd(numerator, denominator)\n  return numerator\
    \ / gcd == denominator / gcd\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_denominator\n\
    \  local denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local result\
    \ = x_numerator * n_denominator * n_numerator * x_denominator\n  return result\
    \ % x_denominator == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "  local function gcd(a,\
    \ b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local\
    \ function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n\
    \    local numerator, denominator = x:match(\"(%d+)/(%d+)\")\n    local g = gcd(numerator,\
    \ denominator)\n    return numerator / g, denominator / g\n  end\n  local x_numerator,\
    \ x_denominator = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  return (x_numerator * l / x_denominator)\
    \ % (n_numerator * l / n_denominator) == 0\nend", "  local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  x_num, x_den\
    \ = tonumber(x_num), tonumber(x_den)\n  n_num, n_den = tonumber(n_num), tonumber(n_den)\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  num = num / gcd\n  den = den / gcd\n  if num % den == 0 then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  local function gcd(a, b)\n \
    \   if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function to_num(s)\n\
    \    local n, d = s:match(\"(%d+)/(%d+)\")\n    return tonumber(n), tonumber(d)\n\
    \  end\n  local nx, dx = to_num(x)\n  local nn, dn = to_num(n)\n  local l = lcm(dx,\
    \ dn)\n  return (l / dx * nx) % l == 0\nend", "  local function gcd(a, b)\n  \
    \  if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function is_integer(x)\n\
    \    return x % 1 == 0\n  end\n  local function to_number(x)\n    return tonumber(x:match(\"\
    (%d+)/(%d+)\"))\n  end\n  local function to_fraction(x)\n    return x:match(\"\
    (%d+)/(%d+)\")\n  end\n  local function multiply(x, n)\n    local x_numerator,\
    \ x_denominator = to_number(x)\n    local n_numerator, n_denominator = to_number(n)\n\
    \    local numerator = x_numerator * n_numerator\n    local denominator = x_denominator\
    \ * n_denominator\n    local gcd_ = gcd(numerator, denominator)\n    return numerator\
    \ / gcd_ .. \"/\" .. denominator / gcd_\n  end\n  local function divide(x, n)\n\
    \    local x_numerator, x_denominator = to_number(x)\n    local n_numerator, n_denominator\
    \ = to_number(n)\n    local numerator = x_numerator * n_denominator\n    local\
    \ denominator = x_denominator * n_numerator\n    local gcd_ = gcd(numerator, denominator)\n\
    \    return numerator / gcd_ .. \"/\" .. denominator / gcd_\n  end\n  local function\
    \ add(x, n)\n    local x_numerator, x_denominator = to_number(x)\n    local n_numerator,\
    \ n_denominator = to_number(n)\n    local lcm_ = lcm(x_denominator, n_denominator)\n\
    \    local numerator = x_numerator * (lcm_ / x_denominator) + n_numerator * (lcm_\
    \ / n_den", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n \
    \ local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local result\
    \ = (x_numerator * n_denominator) / (x_denominator * n_numerator)\n  return result\
    \ % 1 == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return den /\
    \ gcd == num / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    local gcd = math.gcd(numerator, denominator)\n    return\
    \ numerator / gcd == denominator / gcd\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \    local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n   \
    \ return numerator % denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local x_numerator = tonumber(x_numerator)\n    local x_denominator\
    \ = tonumber(x_denominator)\n    local n_numerator = tonumber(n_numerator)\n \
    \   local n_denominator = tonumber(n_denominator)\n    local result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator\n    if result % (x_denominator\
    \ * n_denominator) == 0 then\n        return true\n    else\n        return false\n\
    \    end\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ result = (x_numerator * n_denominator) / (x_denominator * n_numerator)\n   \
    \ return result % 1 == 0\nend", "  local function gcd(a, b)\n    if b == 0 then\
    \ return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n\
    \    return a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n\
    \    local numerator, denominator = x:match(\"(%d+)/(%d+)\")\n    local g = gcd(numerator,\
    \ denominator)\n    return numerator / g, denominator / g\n  end\n  local x_numerator,\
    \ x_denominator = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  local result_numerator = x_numerator\
    \ * l / x_denominator * n_numerator\n  local result_denominator = l\n  local g\
    \ = gcd(result_numerator, result_denominator)\n  return result_numerator / g ==\
    \ result_denominator\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local numerator = x_numerator * n_denominator\n    local denominator =\
    \ x_denominator * n_numerator\n    return numerator % denominator == 0\nend",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  num = num / gcd\n  den = den / gcd\n  return num\
    \ % den == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  return num % den\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local x_numerator, x_denominator =\
    \ x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  return numerator % denominator == 0\nend", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return den / gcd == num / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = x_numerator * n_denominator\n  local denominator\
    \ = x_denominator * n_numerator\n  return numerator % denominator == 0\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_denominator\n  local denominator = x_denominator * n_numerator\n  return numerator\
    \ % denominator == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n    local numerator,\
    \ denominator = x:match(\"(%d+)/(%d+)\")\n    numerator, denominator = tonumber(numerator),\
    \ tonumber(denominator)\n    local g = gcd(numerator, denominator)\n    return\
    \ numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator =\
    \ simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  return (x_numerator * l / x_denominator)\
    \ % (n_numerator * l / n_denominator) == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local numerator = x_numerator * n_denominator\n  local denominator\
    \ = x_denominator * n_numerator\n  return numerator % denominator == 0\nend",
  "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local result = (x_numerator *\
    \ n_denominator) / (x_denominator * n_numerator)\n    return result % 1 == 0\n\
    end", "    local xn = x * n\n    return xn % 1 == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    return numerator % denominator\
    \ == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n \
    \   return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function parse(s)\n    local n, d = s:match(\"(%d+)/(%d+)\"\
    )\n    return tonumber(n), tonumber(d)\n  end\n  local xn, xd = parse(x)\n  local\
    \ nn, nd = parse(n)\n  local l = lcm(xd, nd)\n  return (xn * (l / xd) * nn) %\
    \ (l / nd) == 0\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n    n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n    local numerator\
    \ = x_numerator * n_numerator\n    local denominator = x_denominator * n_denominator\n\
    \    local gcd = math.gcd(numerator, denominator)\n    return numerator / gcd\
    \ == denominator / gcd\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local numerator = x_numerator * n_denominator\n    local denominator =\
    \ x_denominator * n_numerator\n    return numerator % denominator == 0\nend",
  "    local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "    local x_numerator, x_denominator =\
    \ x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \    local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n   \
    \ return numerator % denominator == 0\nend", "  local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num =\
    \ x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n\
    \  return num / gcd == den\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local numerator = x_numerator * n_denominator\n    local denominator =\
    \ x_denominator * n_numerator\n    return numerator % denominator == 0\nend",
  "    local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    x_num, x_den = tonumber(x_num),\
    \ tonumber(x_den)\n    n_num, n_den = tonumber(n_num), tonumber(n_den)\n    local\
    \ num = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    num = num / gcd\n    den = den / gcd\n    return num % den == 0\n\
    end", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local\
    \ n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator\
    \ * n_denominator\n  local denominator = x_denominator * n_numerator\n  return\
    \ numerator % denominator == 0\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n  local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return numerator\
    \ % denominator == 0\nend", "    local function gcd(a, b)\n        if a == 0 then\n\
    \            return b\n        end\n        return gcd(b % a, a)\n    end\n  \
    \  local function lcm(a, b)\n        return a * b / gcd(a, b)\n    end\n    local\
    \ function to_num(s)\n        local a, b = s:match(\"(%d+)/(%d+)\")\n        return\
    \ tonumber(a), tonumber(b)\n    end\n    local x_num, x_den = to_num(x)\n    local\
    \ n_num, n_den = to_num(n)\n    local l = lcm(x_den, n_den)\n    return l % (x_num\
    \ * n_num) == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  \
    \  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num =\
    \ num / gcd\n    den = den / gcd\n    return num % den == 0\nend", "    local\
    \ function gcd(a, b)\n        if b == 0 then\n            return a\n        else\n\
    \            return gcd(b, a % b)\n        end\n    end", "  local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  num = num / gcd\n  den = den / gcd\n  return num % den == 0\nend", " \
    \ local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local result_numerator = x_numerator\
    \ * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  local result = result_numerator / result_denominator\n  return result % 1 ==\
    \ 0\nend", "    local function gcd(a, b)\n        if b == 0 then\n           \
    \ return a\n        else\n            return gcd(b, a % b)\n        end\n    end",
  "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local\
    \ gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend", "    local\
    \ x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    return num / gcd == den\nend", "    local\
    \ function gcd(a, b)\n        if b == 0 then\n            return a\n        else\n\
    \            return gcd(b, a % b)\n        end\n    end", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    return numerator % denominator\
    \ == 0\nend", "  local xNumerator, xDenominator = x:match(\"(%d+)/(%d+)\")\n \
    \ local nNumerator, nDenominator = n:match(\"(%d+)/(%d+)\")\n  local result =\
    \ xNumerator * nDenominator * nNumerator * xDenominator\n  return result % 1 ==\
    \ 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num = num / gcd\n \
    \   den = den / gcd\n    return num % den == 0\nend", "    local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd\
    \ = math.gcd(num, den)\n    return num / gcd == den\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \  local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return\
    \ numerator % denominator == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num *\
    \ n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n \
    \   return num / gcd == den / gcd\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num\
    \ = x_num * n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num,\
    \ den)\n    num = num / gcd\n    den = den / gcd\n    return num % den == 0\n\
    end", "  local function gcd(a, b)\n    if b == 0 then return a end\n    return\
    \ gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a,\
    \ b)\n  end\n  local function simplify_fraction(x)\n    local numerator, denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n    local gcd_num = gcd(numerator, denominator)\n\
    \    return numerator / gcd_num, denominator / gcd_num\n  end\n  local x_numerator,\
    \ x_denominator = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local lcm_denominator = lcm(x_denominator, n_denominator)\n  local x_numerator_lcm\
    \ = x_numerator * lcm_denominator / x_denominator\n  local n_numerator_lcm = n_numerator\
    \ * lcm_denominator / n_denominator\n  return x_numerator_lcm % n_numerator_lcm\
    \ == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n \
    \   return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function parse(s)\n    local n, d = s:match(\"(%d+)/(%d+)\"\
    )\n    return tonumber(n), tonumber(d)\n  end\n  local xn, xd = parse(x)\n  local\
    \ nn, nd = parse(n)\n  local l = lcm(xd, nd)\n  return (xn * l / xd) % (nn * l\
    \ / nd) == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd ==\
    \ den / gcd\nend", "    local function gcd(a, b)\n        if b == 0 then\n   \
    \         return a\n        else\n            return gcd(b, a % b)\n        end\n\
    \    end", "    local function gcd(a, b)\n        if b == 0 then\n           \
    \ return a\n        else\n            return gcd(b, a % b)\n        end\n    end",
  "  local function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b,\
    \ a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n\
    \  local function to_num(s)\n    local n, d = s:match(\"(%d+)/(%d+)\")\n    return\
    \ tonumber(n), tonumber(d)\n  end\n  local xn, xd = to_num(x)\n  local nn, nd\
    \ = to_num(n)\n  local l = lcm(xd, nd)\n  return (xn * l / xd) % (nn * l / nd)\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local result\
    \ = x_numerator * n_denominator * n_numerator * x_denominator\n  return result\
    \ % (x_denominator * n_denominator) == 0\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "    local function gcd(a, b)\n      \
    \  if b == 0 then\n            return a\n        else\n            return gcd(b,\
    \ a % b)\n        end\n    end", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local result_numerator = x_numerator * n_numerator\n\
    \  local result_denominator = x_denominator * n_denominator\n  local result =\
    \ result_numerator / result_denominator\n  return result % 1 == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local result_numerator = x_numerator\
    \ * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  return result_numerator % result_denominator == 0\nend", "    local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd\
    \ = math.gcd(num, den)\n    return num / gcd == den\nend", "  local function gcd(a,\
    \ b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local\
    \ function lcm(a, b)\n    return (a * b) / gcd(a, b)\n  end\n  local function\
    \ simplify_fraction(x)\n    local numerator, denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n  local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  return (l / x_denominator) * x_numerator % l == 0\nend", " \
    \ local function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b,\
    \ a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n\
    \  local function simplify(x)\n    local a, b = x:match(\"(%d+)/(%d+)\")\n   \
    \ a, b = tonumber(a), tonumber(b)\n    local g = gcd(a, b)\n    return a / g,\
    \ b / g\n  end\n  local xa, xb = simplify(x)\n  local na, nb = simplify(n)\n \
    \ local l = lcm(xb, nb)\n  return (l / xb * xa) % (l / nb * na) == 0\nend", " \
    \   local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    num = num / gcd\n    den = den / gcd\n\
    \    return num % den == 0\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local numerator = x_numerator * n_denominator\n    local denominator =\
    \ x_denominator * n_numerator\n    return numerator % denominator == 0\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_denominator\n  local denominator = x_denominator * n_numerator\n  return numerator\
    \ % denominator == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return den / gcd ==\
    \ num / gcd\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local x_numerator,\
    \ x_denominator = x_numerator * n_denominator, x_denominator * n_numerator\n \
    \ local x_numerator, x_denominator = x_numerator / math.gcd(x_numerator, x_denominator),\
    \ x_denominator / math.gcd(x_numerator, x_denominator)\n  return x_numerator %\
    \ x_denominator == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ result = (x_numerator * n_denominator) * (n_numerator * x_denominator)\n   \
    \ return result % (x_denominator * n_denominator) == 0\nend", "  local function\
    \ gcd(a, b)\n    if a == 0 then return b end\n    return gcd(b % a, a)\n  end\n\
    \  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function\
    \ simplify_fraction(x)\n    local numerator, denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local xn, xd = simplify_fraction(x)\n  local nn, nd = simplify_fraction(n)\n\
    \  local l = lcm(xd, nd)\n  return (l / xd) * xn % 1 == 0 and (l / nd) * nn %\
    \ 1 == 0\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n   \
    \ local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num\
    \ / gcd == den\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator\
    \ = tonumber(x_denominator) * tonumber(n_numerator)\n    local result = numerator\
    \ / denominator\n    return result % 1 == 0\nend", "  local function gcd(a, b)\n\
    \    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function parse(s)\n\
    \    local num, den = s:match(\"(%d+)/(%d+)\")\n    return tonumber(num), tonumber(den)\n\
    \  end\n  local xnum, xden = parse(x)\n  local nnum, nden = parse(n)\n  local\
    \ l = lcm(xden, nden)\n  return (l / xden * xnum) % l == 0\nend", "  local function\
    \ gcd(a, b)\n    while b ~= 0 do\n      a, b = b, a % b\n    end\n    return a\n\
    \  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local\
    \ function to_num(s)\n    local num, den = s:match(\"(%d+)/(%d+)\")\n    return\
    \ tonumber(num), tonumber(den)\n  end\n  local x_num, x_den = to_num(x)\n  local\
    \ n_num, n_den = to_num(n)\n  local lcm_den = lcm(x_den, n_den)\n  return lcm_den\
    \ % (x_num * n_num) == 0\nend", "    local function gcd(a, b)\n        if b ==\
    \ 0 then\n            return a\n        else\n            return gcd(b, a % b)\n\
    \        end\n    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local\
    \ n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return den / gcd ==\
    \ num / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    local gcd = math.gcd(numerator, denominator)\n    return\
    \ numerator / gcd == denominator / gcd\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num *\
    \ n_num\n    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n \
    \   return num / gcd == den\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local numerator = x_numerator * n_denominator\n    local denominator =\
    \ x_denominator * n_numerator\n    return numerator % denominator == 0\nend",
  "    local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "    local\
    \ function gcd(a, b)\n        if b == 0 then\n            return a\n        else\n\
    \            return gcd(b, a % b)\n        end\n    end", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local result_numerator = x_numerator * n_numerator\n\
    \  local result_denominator = x_denominator * n_denominator\n  local result =\
    \ result_numerator / result_denominator\n  return result % 1 == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator *\
    \ n_denominator\n  local denominator = x_denominator * n_numerator\n  return numerator\
    \ % denominator == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function to_num(x)\n    local num, den = x:match(\"\
    (%d+)/(%d+)\")\n    return tonumber(num), tonumber(den)\n  end\n  local x_num,\
    \ x_den = to_num(x)\n  local n_num, n_den = to_num(n)\n  local l = lcm(x_den,\
    \ n_den)\n  return (x_num * l / x_den) % (n_num * l / n_den) == 0\nend", "   \
    \ local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"\
    (%d+)/(%d+)\")\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    num = num / gcd\n    den = den / gcd\n\
    \    return num % den == 0\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local result_numerator = x_numerator * n_numerator\n  local result_denominator\
    \ = x_denominator * n_denominator\n  local result = result_numerator / result_denominator\n\
    \  return result % 1 == 0\nend", "  local xn = x * n\n  return xn % 1 == 0\nend",
  "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n  local result_numerator = x_numerator\
    \ * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  return result_numerator % result_denominator == 0\nend", "  local function\
    \ gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n\
    \  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function\
    \ to_num(x)\n    local num, den = x:match(\"(%d+)/(%d+)\")\n    return tonumber(num),\
    \ tonumber(den)\n  end\n  local x_num, x_den = to_num(x)\n  local n_num, n_den\
    \ = to_num(n)\n  local lcm_den = lcm(x_den, n_den)\n  local x_num_lcm = x_num\
    \ * (lcm_den / x_den)\n  local n_num_lcm = n_num * (lcm_den / n_den)\n  return\
    \ x_num_lcm % n_num_lcm == 0\nend", "  local function gcd(a, b)\n    if b == 0\
    \ then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function to_num(x)\n    local\
    \ num, den = x:match(\"(%d+)/(%d+)\")\n    return tonumber(num), tonumber(den)\n\
    \  end\n  local x_num, x_den = to_num(x)\n  local n_num, n_den = to_num(n)\n \
    \ local l = lcm(x_den, n_den)\n  return (x_num * l / x_den) % (n_num * l / n_den)\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local x_numerator = tonumber(x_numerator)\n  local x_denominator\
    \ = tonumber(x_denominator)\n  local n_numerator = tonumber(n_numerator)\n  local\
    \ n_denominator = tonumber(n_denominator)\n  local result = (x_numerator * n_denominator)\
    \ / (x_denominator * n_numerator)\n  return result % 1 == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "  local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n\
    \  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  local gcd = math.gcd(numerator, denominator)\n  return numerator\
    \ / gcd == denominator / gcd\nend", "  local function gcd(a, b)\n    if b == 0\
    \ then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local xn, xd = x:match(\"(%d+)/(%d+)\"\
    )\n  local nn, nd = n:match(\"(%d+)/(%d+)\")\n  local l = lcm(xd, nd)\n  return\
    \ (l / xd * xn) % (l / nd * nn) == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n  local result_numerator = x_numerator * n_numerator\n  local\
    \ result_denominator = x_denominator * n_denominator\n  return result_numerator\
    \ % result_denominator == 0\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \    return result % 1 == 0\nend", "    local xn = tonumber(x) * tonumber(n)\n\
    \    return math.floor(xn) == xn\nend", "    local function gcd(a, b)\n      \
    \  while b ~= 0 do\n            a, b = b, a % b\n        end\n        return a\n\
    \    end\n    local function lcm(a, b)\n        return a * b / gcd(a, b)\n   \
    \ end\n    local function is_whole(a, b)\n        return a % b == 0\n    end\n\
    \    local function to_num(s)\n        local a, b = s:match(\"(%d+)/(%d+)\")\n\
    \        return tonumber(a), tonumber(b)\n    end\n    local x_num, x_den = to_num(x)\n\
    \    local n_num, n_den = to_num(n)\n    local lcm_den = lcm(x_den, n_den)\n \
    \   local x_num_lcm = x_num * (lcm_den / x_den)\n    local n_num_lcm = n_num *\
    \ (lcm_den / n_den)\n    return is_whole(x_num_lcm * n_num_lcm, lcm_den)\nend",
  "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local result = x_numerator * n_denominator\
    \ * n_numerator * x_denominator\n    return result % 1 == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = tonumber(x_numerator)\
    \ * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator) *\
    \ tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local result = x_numerator * n_denominator\
    \ * n_numerator * x_denominator\n    return result % x_denominator == 0\nend",
  "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    numerator = numerator / gcd\n  \
    \  denominator = denominator / gcd\n    return numerator % denominator == 0\n\
    end", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den =\
    \ n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return den / gcd == num / gcd\nend",
  "    local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "    local x_numerator, x_denominator =\
    \ x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"\
    (%d+)/(%d+)\")\n    local numerator = x_numerator * n_denominator\n    local denominator\
    \ = x_denominator * n_numerator\n    return numerator % denominator == 0\nend",
  "    local function gcd(a, b)\n        if b == 0 then\n            return a\n  \
    \      else\n            return gcd(b, a % b)\n        end\n    end", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return den /\
    \ gcd == num / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ result = (x_numerator * n_denominator) / (x_denominator * n_numerator)\n   \
    \ return result % 1 == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\"\
    )\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n\
    \    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ num / gcd == den\nend", "    local function gcd(a, b)\n        if b == 0 then\n\
    \            return a\n        else\n            return gcd(b, a % b)\n      \
    \  end\n    end", "  local function gcd(a, b)\n    if b == 0 then return a end\n\
    \    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n    local numerator,\
    \ denominator = x:match(\"(%d+)/(%d+)\")\n    local g = gcd(numerator, denominator)\n\
    \    return numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator\
    \ = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  return (l / x_denominator) *\
    \ x_numerator % l == 0\nend", "    local function gcd(a, b)\n        if b == 0\
    \ then\n            return a\n        else\n            return gcd(b, a % b)\n\
    \        end\n    end", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function parse(x)\n    local a, b = x:match(\"\
    (%d+)/(%d+)\")\n    return tonumber(a), tonumber(b)\n  end\n  local xa, xb = parse(x)\n\
    \  local na, nb = parse(n)\n  return lcm(xb, nb) % (xa * nb) == 0\nend", "   \
    \ local function gcd(a, b)\n        if b == 0 then\n            return a\n   \
    \     else\n            return gcd(b, a % b)\n        end\n    end", "  local\
    \ function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n\
    \  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local\
    \ function simplify(x)\n    local a, b = x:match(\"(%d+)/(%d+)\")\n    a, b =\
    \ tonumber(a), tonumber(b)\n    local c = gcd(a, b)\n    return (a / c) .. \"\
    /\" .. (b / c)\n  end\n  local function multiply(x, n)\n    local a, b = x:match(\"\
    (%d+)/(%d+)\")\n    local c, d = n:match(\"(%d+)/(%d+)\")\n    a, b, c, d = tonumber(a),\
    \ tonumber(b), tonumber(c), tonumber(d)\n    local e = lcm(b, d)\n    return (a\
    \ * (e / b) * c) .. \"/\" .. e\n  end\n  local function is_whole(x)\n    local\
    \ a, b = x:match(\"(%d+)/(%d+)\")\n    a, b = tonumber(a), tonumber(b)\n    return\
    \ a % b == 0\n  end\n  return is_whole(simplify(multiply(x, n)))\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
