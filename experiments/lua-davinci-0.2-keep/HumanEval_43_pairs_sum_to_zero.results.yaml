name: HumanEval_43_pairs_sum_to_zero
language: lua
results:
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    local\
    \ t = {}\n    for i = 1, #l do\n        if t[l[i]] then\n            return true\n\
    \        else\n            t[-l[i]] = true\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6v2snwcx.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6v2snwcx.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- your code here\n  local count\
    \ = 0\n  for i = 1, #l do\n    for j = 1, #l do\n      if l[i] + l[j] == 0 and\
    \ i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  if count\
    \ > 0 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local s = {}\n    for i, v\
    \ in ipairs(l) do\n        if s[-v] then\n            return true\n        end\n\
    \        s[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsq819ir4.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpsq819ir4.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpanunb1nm.lua:21:\
    \ expected: false, actual: nil\\nstack traceback:\\n\\t/tmp/tmpanunb1nm.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn48a4cns.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpn48a4cns.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i, v in ipairs(l) do\n\
    \        for j, w in ipairs(l) do\n            if i ~= j and v + w == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local s = {}\n    for i, v\
    \ in ipairs(l) do\n        if s[v] then\n            return true\n        end\n\
    \        s[-v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for i = 1,\
    \ #l do\n    if seen[-l[i]] then\n      return true\n    end\n    seen[l[i]] =\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt31nx5i1.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpt31nx5i1.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for i,\
    \ x in ipairs(l) do\n        if seen[-x] then\n            return true\n     \
    \   end\n        seen[x] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local n = #l\n    for i = 1,\
    \ n do\n        for j = i + 1, n do\n            if l[i] + l[j] == 0 then\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_hg0zata.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_hg0zata.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7gqr9mq8.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7gqr9mq8.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i, v in ipairs(l) do\n\
    \        for j, w in ipairs(l) do\n            if i ~= j and v + w == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_tidghsd.lua:21:\
    \ expected: false, actual: nil\\nstack traceback:\\n\\t/tmp/tmp_tidghsd.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpod2be0j7.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpod2be0j7.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local i = 1\n    local j =\
    \ 1\n    local len = #l\n    while i <= len do\n        j = i + 1\n        while\
    \ j <= len do\n            if l[i] + l[j] == 0 then\n                return true\n\
    \            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpemxkused.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpemxkused.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcbvz7tad.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcbvz7tad.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local s = {}\n    for i, v\
    \ in ipairs(l) do\n        if s[v] then\n            return true\n        end\n\
    \        s[-v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for i = 1,\
    \ #l do\n    if seen[-l[i]] then\n      return true\n    end\n    seen[l[i]] =\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp64hu4w81.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp64hu4w81.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9hi_thox.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9hi_thox.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjilb758u.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpjilb758u.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1h0ci6e7.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1h0ci6e7.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  -- Hint: you can use the function `contains` from the previous exercise\n \
    \ -- to check if a list contains a certain element.\n  -- Hint: you can use the\
    \ function `pairs` from the previous exercise\n  -- to generate all pairs of elements\
    \ from a list.\n  for i, v in pairs(l) do\n    for j, w in pairs(l) do\n     \
    \ if i ~= j and v + w == 0 then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- YOUR CODE HERE\n  --[[\n \
    \ for i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n\
    \        return true\n      end\n    end\n  end\n  return false\n  --]]\n  for\
    \ i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- YOUR CODE HERE\n  for i =\
    \ 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n       \
    \ return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for i, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_f2krlwx.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_f2krlwx.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- YOUR CODE HERE\n  for i, v\
    \ in ipairs(l) do\n    for j, w in ipairs(l) do\n      if i ~= j and v + w ==\
    \ 0 then\n        return true\n      end\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    -- Hint:\
    \ You may want to use the \"in_list\" function from the previous\n    -- question.\n\
    \    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for i,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local t = {}\n    for i, v\
    \ in ipairs(l) do\n        if t[-v] then\n            return true\n        end\n\
    \        t[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeaao5d4z.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpeaao5d4z.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local n = #l\n    if n < 2\
    \ then\n        return false\n    end\n    for i=1,n-1 do\n        for j=i+1,n\
    \ do\n            if l[i] + l[j] == 0 then\n                return true\n    \
    \        end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for i, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local zero_set = {}\n    for\
    \ i, v in ipairs(l) do\n        if zero_set[v] then\n            return true\n\
    \        end\n        zero_set[-v] = true\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local dict = {}\n    for _,\
    \ v in ipairs(l) do\n        if dict[v] then\n            return true\n      \
    \  end\n        dict[-v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5uvdju_9.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5uvdju_9.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwmlabekm.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwmlabekm.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- your code here\n  local s\
    \ = {}\n  for i,v in ipairs(l) do\n    if s[v] then\n      return true\n    else\n\
    \      s[-v] = true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- your code here\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4l77s8tg.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4l77s8tg.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvgmd_h6h.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvgmd_h6h.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for i\
    \ = 1, #l do\n        local x = l[i]\n        if seen[-x] then\n            return\
    \ true\n        end\n        seen[x] = true\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5iovexhe.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5iovexhe.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmp5vxnj1.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpmp5vxnj1.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe6zfbq5v.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpe6zfbq5v.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8iim9egv.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8iim9egv.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local h = {}\n  for i = 1, #l\
    \ do\n    if h[l[i]] then\n      return true\n    end\n    h[-l[i]] = true\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    -- hint:\
    \ use the function `contains`\n    -- hint: use the function `pairs`\n    -- hint:\
    \ use the function `unpack`\n    -- hint: use the function `table.insert`\n  \
    \  -- hint: use the function `table.remove`\n    -- hint: use the function `table.sort`\n\
    \    -- hint: use the function `table.concat`\n    -- hint: use the function `table.pack`\n\
    \    -- hint: use the function `table.unpack`\n    -- hint: use the function `table.getn`\n\
    \    -- hint: use the function `table.maxn`\n    -- hint: use the function `table.foreach`\n\
    \    -- hint: use the function `table.foreachi`\n    -- hint: use the function\
    \ `table.insert`\n    -- hint: use the function `table.remove`\n    -- hint: use\
    \ the function `table.sort`\n    -- hint: use the function `table.concat`\n  \
    \  -- hint: use the function `table.pack`\n    -- hint: use the function `table.unpack`\n\
    \    -- hint: use the function `table.getn`\n    -- hint: use the function `table.maxn`\n\
    \    -- hint: use the function `table.foreach`\n    -- hint: use the function\
    \ `table.foreachi`\n    -- hint: use the function `table.insert`\n    -- hint:\
    \ use the function `table.remove`\n    -- hint: use the function `table.sort`\n\
    \    -- hint: use the function `table.concat`\n    -- hint: use the function `table.pack`\n\
    \    -- hint: use the function `table.unpack`\n    -- hint: use the function `table.getn`\n\
    \    -- hint: use the function `table.maxn`\n    -- hint: use the function `table.foreach`\n\
    \    -- hint: use the function `table.foreachi`\n    -- hint: use the function\
    \ `table.insert`\n    -- hint: use the function `table.remove`\n    -- hint: use\
    \ the function `table.sort`\n    -- hint: use the function `table.concat`\n  \
    \  -- hint: use the function `\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpc30ondic.lua:69: 'end' expected (to close 'function' at\
    \ line 14) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9njj669q.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9njj669q.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  local set = {}\n  for _, v in ipairs(l) do\n    if set[-v] then\n      return\
    \ true\n    end\n    set[v] = true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n\tlocal t = {}\n\tfor i, v in ipairs(l)\
    \ do\n\t\tif t[v] then\n\t\t\treturn true\n\t\tend\n\t\tt[-v] = true\n\tend\n\t\
    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2_ki4_12.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp2_ki4_12.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local s = {}\n    for _, v\
    \ in ipairs(l) do\n        if s[-v] then\n            return true\n        end\n\
    \        s[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprr_4c1bd.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmprr_4c1bd.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoz9p9enf.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpoz9p9enf.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsngvbw6c.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpsngvbw6c.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local s = {}\n  for _, v in ipairs(l)\
    \ do\n    if s[-v] then\n      return true\n    end\n    s[v] = true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: Implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkie5t16t.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkie5t16t.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp93shiusu.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp93shiusu.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnbbz55xy.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnbbz55xy.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local sum = 0\n    for i =\
    \ 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpny6xl8gr.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpny6xl8gr.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local set = {}\n    for _,\
    \ v in ipairs(l) do\n        if set[-v] then\n            return true\n      \
    \  end\n        set[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpln_ocafo.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpln_ocafo.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6i_68gzc.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6i_68gzc.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  -- Hint: use the function `pairs_sum_to_k`\n  return pairs_sum_to_k(l, 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjcpal9va.lua:17:\
    \ attempt to call global 'pairs_sum_to_k' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpjcpal9va.lua:23: in function 'test_humaneval'\\n\\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for i,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    local\
    \ count = 0\n    for i = 1, #l do\n        for j = i + 1, #l do\n            if\
    \ l[i] + l[j] == 0 then\n                count = count + 1\n            end\n\
    \        end\n    end\n    if count > 0 then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    local\
    \ n = #l\n    for i = 1, n do\n        for j = i + 1, n do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8dgdgjmn.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8dgdgjmn.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr5r5dw6b.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpr5r5dw6b.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local n = #l\n    if n < 2\
    \ then\n        return false\n    end\n    for i = 1, n - 1 do\n        for j\
    \ = i + 1, n do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local n = #l\n    for i = 1,\
    \ n do\n        for j = i + 1, n do\n            if l[i] + l[j] == 0 then\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp293om7t4.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp293om7t4.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- your code here\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local n = #l\n    for i = 1,\
    \ n do\n        for j = i + 1, n do\n            if l[i] + l[j] == 0 then\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwujyfeqw.lua:21:\
    \ expected: false, actual: nil\\nstack traceback:\\n\\t/tmp/tmpwujyfeqw.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqiepznv2.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqiepznv2.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprso2r6z1.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmprso2r6z1.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwpjw44ks.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwpjw44ks.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- YOUR CODE HERE\n  local set\
    \ = {}\n  for i, v in ipairs(l) do\n    if set[-v] then\n      return true\n \
    \   end\n    set[v] = true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppwt0ztx8.lua:21:\
    \ expected: false, actual: nil\\nstack traceback:\\n\\t/tmp/tmppwt0ztx8.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local set = {}\n    for i,\
    \ v in ipairs(l) do\n        if set[-v] then\n            return true\n      \
    \  end\n        set[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    if #l < 2 then\n        return\
    \ false\n    end\n    local seen = {}\n    for _, v in ipairs(l) do\n        if\
    \ seen[-v] then\n            return true\n        end\n        seen[v] = true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local t = {}\n    for i = 1,\
    \ #l do\n        if t[l[i]] then\n            return true\n        end\n     \
    \   t[-l[i]] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l - 1 do\n    \
    \    for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n            \
    \    return true\n            end\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp66ao8wcc.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp66ao8wcc.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa_aafl4r.lua:24:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpa_aafl4r.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2_nels5x.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp2_nels5x.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  for i = 1, #l do\n    for j =\
    \ i + 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    -- Hint: you can use the function `contains` from the lecture\n    -- to\
    \ check if a list contains a certain element.\n    -- You can also use the function\
    \ `length` from the lecture\n    -- to get the length of a list.\n    -- You can\
    \ also use the function `sort` from the lecture\n    -- to sort a list.\n    --\
    \ You can also use the function `reverse` from the lecture\n    -- to reverse\
    \ a list.\n    -- You can also use the function `append` from the lecture\n  \
    \  -- to append two lists.\n    -- You can also use the function `concat` from\
    \ the lecture\n    -- to concatenate two lists.\n    -- You can also use the function\
    \ `filter` from the lecture\n    -- to filter a list.\n    -- You can also use\
    \ the function `map` from the lecture\n    -- to map a function over a list.\n\
    \    -- You can also use the function `foldl` from the lecture\n    -- to fold\
    \ a list.\n    -- You can also use the function `foldr` from the lecture\n   \
    \ -- to fold a list.\n    -- You can also use the function `zip` from the lecture\n\
    \    -- to zip two lists.\n    -- You can also use the function `unzip` from the\
    \ lecture\n    -- to unzip a list of pairs.\n    -- You can also use the function\
    \ `zipWith` from the lecture\n    -- to zip two lists with a function.\n    --\
    \ You can also use the function `zipWith3` from the lecture\n    -- to zip three\
    \ lists with a function.\n    -- You can also use the function `zipWith4` from\
    \ the lecture\n    -- to zip four lists with a function.\n    -- You can also\
    \ use the function `zipWith5` from the lecture\n    -- to zip five lists with\
    \ a function.\n    -- You can also use the function `zipWith6` from the lecture\n\
    \    -- to zip six lists with a function.\n    -- You can also use the function\
    \ `zipWith7` from the lecture\n    -- to zip seven lists with a function.\n  \
    \  -- You can also use the function `zipWith8` from the lecture\n    -- to zip\
    \ eight lists with a function.\n    -- You can also use the function\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpb8ksc07n.lua:70: 'end' expected (to close 'function' at\
    \ line 14) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- YOUR CODE HERE\n  local len\
    \ = #l\n  if len < 2 then\n    return false\n  end\n  for i = 1, len do\n    for\
    \ j = i + 1, len do\n      if l[i] + l[j] == 0 then\n        return true\n   \
    \   end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local len = #l\n    if len\
    \ < 2 then\n        return false\n    end\n    for i = 1, len - 1 do\n       \
    \ for j = i + 1, len do\n            if l[i] + l[j] == 0 then\n              \
    \  return true\n            end\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  for i = 1, #l do\n    for j =\
    \ i + 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- YOUR CODE HERE\n  for i =\
    \ 1, #l do\n    for j = i+1, #l do\n      if l[i] + l[j] == 0 then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local n = #l\n    for i = 1,\
    \ n do\n        for j = i + 1, n do\n            if l[i] + l[j] == 0 then\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ocnu6ek.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3ocnu6ek.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_epsnsn0.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_epsnsn0.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8q0xlnnt.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8q0xlnnt.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- YOUR CODE HERE\n  local sum\
    \ = 0\n  for i = 1, #l do\n    for j = 1, #l do\n      if i ~= j then\n      \
    \  sum = l[i] + l[j]\n        if sum == 0 then\n          return true\n      \
    \  end\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi90s83s_.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpi90s83s_.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local function helper(l, i, j)\n\
    \    if i == #l then\n      return false\n    elseif j == #l then\n      return\
    \ helper(l, i + 1, i + 2)\n    elseif l[i] + l[j] == 0 then\n      return true\n\
    \    else\n      return helper(l, i, j + 1)\n    end\n  end\n  return helper(l,\
    \ 1, 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph03f8xin.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph03f8xin.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    for i, v in ipairs(l) do\n        for j, w in ipairs(l) do\n            if\
    \ i ~= j and v + w == 0 then\n                return true\n            end\n \
    \       end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5gdktqfh.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5gdktqfh.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    local\
    \ count = 0\n    for i = 1, #l do\n        for j = i + 1, #l do\n            if\
    \ l[i] + l[j] == 0 then\n                count = count + 1\n            end\n\
    \        end\n    end\n    if count > 0 then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnc8ohjqo.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnc8ohjqo.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- your code here\n  local dict\
    \ = {}\n  for i, v in ipairs(l) do\n    if dict[v] == nil then\n      dict[v]\
    \ = 1\n    else\n      dict[v] = dict[v] + 1\n    end\n  end\n  for i, v in ipairs(l)\
    \ do\n    if dict[-v] ~= nil then\n      if v ~= 0 or dict[v] > 1 then\n     \
    \   return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- your code here\n  for i =\
    \ 1, #l do\n    for j = i+1, #l do\n      if l[i] + l[j] == 0 then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    -- hint:\
    \ you can use the function 'contains' from above\n    -- hint: you can use the\
    \ function 'abs' from the standard library\n    -- hint: you can use the function\
    \ 'sort' from the standard library\n    -- hint: you can use the function 'table.concat'\
    \ from the standard library\n    -- hint: you can use the function 'table.insert'\
    \ from the standard library\n    -- hint: you can use the function 'table.remove'\
    \ from the standard library\n    -- hint: you can use the function 'table.getn'\
    \ from the standard library\n    -- hint: you can use the function 'table.sort'\
    \ from the standard library\n    -- hint: you can use the function 'table.concat'\
    \ from the standard library\n    -- hint: you can use the function 'table.insert'\
    \ from the standard library\n    -- hint: you can use the function 'table.remove'\
    \ from the standard library\n    -- hint: you can use the function 'table.getn'\
    \ from the standard library\n    -- hint: you can use the function 'table.sort'\
    \ from the standard library\n    -- hint: you can use the function 'table.concat'\
    \ from the standard library\n    -- hint: you can use the function 'table.insert'\
    \ from the standard library\n    -- hint: you can use the function 'table.remove'\
    \ from the standard library\n    -- hint: you can use the function 'table.getn'\
    \ from the standard library\n    -- hint: you can use the function 'table.sort'\
    \ from the standard library\n    -- hint: you can use the function 'table.concat'\
    \ from the standard library\n    -- hint: you can use the function 'table.insert'\
    \ from the standard library\n    -- hint: you can use the function 'table.remove'\
    \ from the standard library\n    -- hint: you can use the function 'table.getn'\
    \ from the standard library\n    -- hint: you can use the function 'table.sort'\
    \ from the standard library\n    -- hint: you can use the function 'table.concat'\
    \ from the standard library\n    -- hint: you can use the function 'table.insert'\
    \ from the standard library\n    -- hint: you can use the function 'table.remove'\
    \ from the standard library\n    -- hint: you can use the function\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp36l8bngw.lua:58: 'end' expected (to close 'function' at\
    \ line 14) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- your code here\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzdq9ouxg.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzdq9ouxg.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp8s353se.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpp8s353se.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpifucfq61.lua:21:\
    \ expected: false, actual: nil\\nstack traceback:\\n\\t/tmp/tmpifucfq61.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- your code here\n  local result\
    \ = false\n  for i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j]\
    \ == 0 then\n        result = true\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- YOUR CODE HERE\n  for i =\
    \ 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n       \
    \ return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvsoyxrtt.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvsoyxrtt.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local hash = {}\n    for _,\
    \ v in ipairs(l) do\n        if hash[v] then\n            return true\n      \
    \  end\n        hash[-v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- your code here\n    for\
    \ i, v in ipairs(l) do\n        for j, w in ipairs(l) do\n            if i ~=\
    \ j and v + w == 0 then\n                return true\n            end\n      \
    \  end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local set = {}\n    for _,\
    \ v in ipairs(l) do\n        if set[-v] then\n            return true\n      \
    \  end\n        set[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf24jzary.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpf24jzary.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    for\
    \ i = 1, #l - 1 do\n        for j = i + 1, #l do\n            if l[i] + l[j] ==\
    \ 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp21os2kcb.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp21os2kcb.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1yf8t39n.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1yf8t39n.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- your code here\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwk_0bi8i.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwk_0bi8i.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- TODO: implement this function\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiluerxyn.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpiluerxyn.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp26880m6u.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp26880m6u.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprjez4ff3.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmprjez4ff3.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  for i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: write this function\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1stmrich.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1stmrich.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  for i = 1, #l do\n    for j =\
    \ i + 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local seen = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local set = {}\n  for _, v in\
    \ ipairs(l) do\n    if set[-v] then\n      return true\n    end\n    set[v] =\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  for i = 1, #l do\n    for j =\
    \ i + 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local n = #l\n    for i = 1,\
    \ n do\n        for j = i + 1, n do\n            if l[i] + l[j] == 0 then\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  -- TODO: implement this function\n\
    \  -- Hint: you can use the function 'find_pair' to help you.\n  -- Hint: you\
    \ can use the function 'contains' to help you.\n  -- Hint: you can use the function\
    \ 'map' to help you.\n  -- Hint: you can use the function 'filter' to help you.\n\
    \  -- Hint: you can use the function 'zip' to help you.\n  -- Hint: you can use\
    \ the function 'unzip' to help you.\n  -- Hint: you can use the function 'range'\
    \ to help you.\n  -- Hint: you can use the function 'sort' to help you.\n  --\
    \ Hint: you can use the function 'reverse' to help you.\n  -- Hint: you can use\
    \ the function 'concat' to help you.\n  -- Hint: you can use the function 'append'\
    \ to help you.\n  -- Hint: you can use the function 'head' to help you.\n  --\
    \ Hint: you can use the function 'tail' to help you.\n  -- Hint: you can use the\
    \ function 'init' to help you.\n  -- Hint: you can use the function 'last' to\
    \ help you.\n  -- Hint: you can use the function 'length' to help you.\n  -- Hint:\
    \ you can use the function 'empty' to help you.\n  -- Hint: you can use the function\
    \ 'elem' to help you.\n  -- Hint: you can use the function 'notElem' to help you.\n\
    \  -- Hint: you can use the function 'and' to help you.\n  -- Hint: you can use\
    \ the function 'or' to help you.\n  -- Hint: you can use the function 'all' to\
    \ help you.\n  -- Hint: you can use the function 'any' to help you.\n  -- Hint:\
    \ you can use the function 'maximum' to help you.\n  -- Hint: you can use the\
    \ function 'minimum' to help you.\n  -- Hint: you can use the function 'sum' to\
    \ help you.\n  -- Hint: you can use the function 'product' to help you.\n  --\
    \ Hint: you can use\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp1i7qlllf.lua:59: 'end' expected (to close 'function' at\
    \ line 14) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    -- YOUR CODE HERE\n    for\
    \ i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n    local s = {}\n    for i, v\
    \ in ipairs(l) do\n        if s[-v] then\n            return true\n        end\n\
    \        s[v] = true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
