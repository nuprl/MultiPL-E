name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n-- >>> make_palindrome('cat')\n\
  -- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local suffix = get_longest_palindromic_suffix(string)\n    local prefix = string.sub(string,\
    \ 1, string.len(string) - string.len(suffix))\n    return string .. string.reverse(prefix)\n\
    end", "    local function reverse(string)\n        local result = ''\n       \
    \ for i = #string, 1, -1 do\n            result = result .. string:sub(i, i)\n\
    \        end\n        return result\n    end", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local prefix = string:sub(1, #string -\
    \ longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome = find_longest_palindrome(string)\n    local\
    \ prefix = string.sub(string, 1, #string - #longest_palindrome)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local function longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local len = #string\n\
    \            for i = 1, len / 2 do\n                if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                    return false\n             \
    \   end\n            end\n            return true\n        end\n        local\
    \ len = #string\n        for i = len, 1, -1 do\n            if is_palindrome(string:sub(i,\
    \ len)) then\n                return string:sub(i, len)\n            end\n   \
    \     end\n        return ''\n    end\n    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string:sub(1, #string - #palindrome_suffix)\n \
    \   return string .. palindrome_prefix:reverse()\nend", "    local string_length\
    \ = #string\n    local palindrome_length = 0\n    local palindrome_start = 0\n\
    \    local palindrome_end = 0\n    local palindrome_length_max = 0\n    local\
    \ palindrome_start_max = 0\n    local palindrome_end_max = 0\n    local i = 1\n\
    \    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local\
    \ n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n\
    \    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local\
    \ w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local aa = 1\n\
    \    local ab = 1\n    local ac = 1\n    local ad = 1\n    local ae = 1\n    local\
    \ af = 1\n    local ag = 1\n    local ah = 1\n    local ai = 1\n    local aj =\
    \ 1\n    local ak = 1\n    local al = 1\n    local am = 1\n    local an = 1\n\
    \    local ao = 1\n    local ap = 1\n    local aq = 1\n    local ar = 1\n    local\
    \ as = 1\n    local at = 1\n    local au = 1\n    local av = 1\n    local aw =\
    \ 1\n    local ax = 1\n    local ay = 1\n    local az = 1\n    local ba = 1\n\
    \    local bb = 1\n    local bc = 1\n    local bd = 1\n    local be = 1\n    local\
    \ bf = 1\n    local bg = 1\n    local bh = 1\n    local bi = 1\n    local bj =\
    \ 1\n    local bk = 1\n    local bl = 1\n    local bm = 1\n    local bn = 1\n\
    \    local bo = 1\n    local bp = 1\n    local bq = 1\n    local br = 1\n    local\
    \ bs = 1\n    local bt = 1\n    local bu = 1\n    local bv = 1\n    local bw =\
    \ 1\n    local bx = 1\n    local by = 1\n", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string) + 1)\n    return string .. prefix:reverse()\n\
    end", "  local len = #string\n  local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, len - palindrome_suffix)\n  return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local prefix = string:sub(1, #string -\
    \ longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local string_length = #string\n    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string:sub(1, string_length - #palindrome_suffix)\n\
    \    return string .. palindrome_prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "  local s = string\n  local\
    \ i = s:len()\n  while i > 0 do\n    if is_palindrome(s:sub(1, i)) then\n    \
    \  return s .. s:sub(1, i):reverse()\n    end\n    i = i - 1\n  end\n  return\
    \ s\nend", "    local reversed = string:reverse()\n    local suffix = longest_common_suffix(string,\
    \ reversed)\n    local prefix = string:sub(1, string:len() - suffix:len())\n \
    \   return string .. reversed:sub(prefix:len() + 1)\nend", "    local palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. reverse(prefix)\nend", "    local\
    \ longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local postfix = longest_palindromic_postfix(string)\n \
    \   local prefix = string.sub(string, 1, string.len(string) - string.len(postfix))\n\
    \    return string.reverse(prefix) .. string .. postfix\nend", "    local len\
    \ = #string\n    local rev = string:reverse()\n    local prefix = string:sub(1,\
    \ len - 1)\n    local suffix = string:sub(len, len)\n    local rev_prefix = prefix:reverse()\n\
    \    local rev_suffix = suffix:reverse()\n    local postfix = ''\n    local i\
    \ = 1\n    while i <= len do\n        if rev_prefix:sub(1, i) == rev_suffix:sub(len\
    \ - i + 1, len) then\n            postfix = rev_prefix:sub(i + 1, len)\n     \
    \   end\n        i = i + 1\n    end\n    return string .. postfix\nend", "   \
    \ local string_length = string.len(string)\n    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string.sub(string, 1, string_length - palindrome_suffix)\n\
    \    local palindrome_prefix_reversed = string.reverse(palindrome_prefix)\n  \
    \  return string .. palindrome_prefix_reversed\nend", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    local reversed_prefix = prefix:reverse()\n\
    \    return string .. reversed_prefix\nend", "    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "  local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n  return string .. reverse(prefix)\nend", " \
    \   local function longest_palindrome_suffix(string)\n        local function is_palindrome(string)\n\
    \            local len = string:len()\n            for i = 1, len / 2 do\n   \
    \             if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1) then\n\
    \                    return false\n                end\n            end\n    \
    \        return true\n        end\n        local len = string:len()\n        for\
    \ i = len, 1, -1 do\n            if is_palindrome(string:sub(i, len)) then\n \
    \               return string:sub(i, len)\n            end\n        end\n    \
    \    return ''\n    end\n    local function reverse(string)\n        local len\
    \ = string:len()\n        local reversed = ''\n        for i = len, 1, -1 do\n\
    \            reversed = reversed .. string:sub(i, i)\n        end\n        return\
    \ reversed\n    end\n    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - palindrome_suffix:len())\n  \
    \  return string .. reverse(prefix)\nend", "    local function reverse(string)\n\
    \        local reversed = ''\n        for i = #string, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end",
  "    local palindrome_suffix = find_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #palindrome_suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local prefix = string:sub(1, #string - 1)\n    local suffix = string:sub(#string)\n\
    \    local palindrome = string\n    while #prefix > 0 do\n        if is_palindrome(prefix)\
    \ then\n            palindrome = prefix .. suffix .. prefix:reverse()\n      \
    \      break\n        end\n        prefix = prefix:sub(1, #prefix - 1)\n     \
    \   suffix = suffix .. string:sub(#prefix + 1, #prefix + 1)\n    end\n    return\
    \ palindrome\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string.reverse(prefix) .. string .. suffix\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local suffix_length = longest_palindromic_suffix(string)\n\
    \    local prefix = string:sub(1, #string - suffix_length)\n    return string\
    \ .. prefix:reverse()\nend", "    local len = #string\n    local prefix_len =\
    \ len\n    local suffix_len = 0\n    local palindrome_len = 0\n    local palindrome_start\
    \ = 0\n    local palindrome_end = 0\n    local i = 1\n    local j = len\n    while\
    \ i <= j do\n        if string:sub(i, j) == string:sub(j, i) then\n          \
    \  palindrome_len = j - i + 1\n            palindrome_start = i\n            palindrome_end\
    \ = j\n            prefix_len = i - 1\n            suffix_len = len - j\n    \
    \        i = i + 1\n            j = j - 1\n        else\n            i = i + 1\n\
    \            j = j - 1\n        end\n    end\n    return string:sub(1, prefix_len)\
    \ .. string:sub(palindrome_end + 1, len) .. string:sub(palindrome_start, palindrome_end)\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. reverse(prefix)\n\
    end", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string.reverse(string.sub(string, 1, string.len(string)\
    \ - string.len(palindrome_suffix)))\n    return string.format('%s%s', string,\
    \ palindrome_prefix)\nend", "    local function find_longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local len = string:len()\n\
    \            for i = 1, math.floor(len / 2) do\n                if string:sub(i,\
    \ i) ~= string:sub(len - i + 1, len - i + 1) then\n                    return\
    \ false\n                end\n            end\n            return true\n     \
    \   end\n        local len = string:len()\n        for i = len, 1, -1 do\n   \
    \         if is_palindrome(string:sub(i, len)) then\n                return string:sub(i,\
    \ len)\n            end\n        end\n        return ''\n    end\n    local suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, string:len()\
    \ - suffix:len())\n    return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. reverse(prefix)\nend", " \
    \ local suffix_length = longest_palindromic_suffix(string)\n  local prefix = string:sub(1,\
    \ #string - suffix_length)\n  return string .. prefix:reverse()\nend", "    local\
    \ longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome_suffix)\n    return string ..\
    \ string.reverse(prefix)\nend", "  local longest_palindrome = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #longest_palindrome)\n  return string\
    \ .. prefix:reverse()\nend", "    local len = #string\n    local i = len\n   \
    \ while i > 0 do\n        if string.sub(string, 1, i) == string.reverse(string.sub(string,\
    \ len - i + 1, len)) then\n            break\n        end\n        i = i - 1\n\
    \    end\n    return string .. string.reverse(string.sub(string, 1, len - i))\n\
    end", "    local longest_palindrome = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome)\n    return string ..\
    \ prefix:reverse()\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local function reverse(string)\n     \
    \   local reversed = ''\n        for i = #string, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end",
  "    local longest_palindrome = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_palindrome)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome)\n    return string ..\
    \ prefix:reverse()\nend", "  local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \  return string .. prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local longest_palindrome = find_longest_palindrome(string)\n\
    \    local prefix = string.sub(string, 1, #string - #longest_palindrome)\n   \
    \ return string .. string.reverse(prefix)\nend", "    local prefix_length = 0\n\
    \    local suffix_length = 0\n    local string_length = #string\n    local string_half_length\
    \ = math.floor(string_length / 2)\n    local string_half_length_ceil = math.ceil(string_length\
    \ / 2)\n    local string_half_length_floor = math.floor(string_length / 2)\n \
    \   local string_half_length_ceil_plus_one = math.ceil(string_length / 2) + 1\n\
    \    local string_half_length_floor_plus_one = math.floor(string_length / 2) +\
    \ 1\n    local string_half_length_ceil_minus_one = math.ceil(string_length / 2)\
    \ - 1\n    local string_half_length_floor_minus_one = math.floor(string_length\
    \ / 2) - 1\n    local string_half_length_ceil_plus_two = math.ceil(string_length\
    \ / 2) + 2\n    local string_half_length_floor_plus_two = math.floor(string_length\
    \ / 2) + 2\n    local string_half_length_ceil_minus_two = math.ceil(string_length\
    \ / 2) - 2\n    local string_half_length_floor_minus_two = math.floor(string_length\
    \ / 2) - 2\n    local string_half_length_ceil_plus_three = math.ceil(string_length\
    \ / 2) + 3\n    local string_half_length_floor_plus_three = math.floor(string_length\
    \ / 2) + 3\n    local string_half_length_ceil_minus_three = math.ceil(string_length\
    \ / 2) - 3\n    local string_half_length_floor_minus_three = math.floor(string_length\
    \ / 2) - 3\n    local string_half_length_ceil_plus_four = math.ceil(string_length\
    \ / 2) + 4\n    local string_half_length_floor_plus_four = math.floor(string_length\
    \ / 2) + 4\n    local string_half_length_ceil_minus_four = math.ceil(string_length\
    \ / 2) - 4\n    local", "  local function longest_palindrome_suffix(string)\n\
    \    local function is_palindrome(string)\n      local len = #string\n      for\
    \ i = 1, len / 2 do\n        if string:sub(i, i) ~= string:sub(len - i + 1, len\
    \ - i + 1) then\n          return false\n        end\n      end\n      return\
    \ true\n    end\n    local len = #string\n    for i = len, 1, -1 do\n      if\
    \ is_palindrome(string:sub(i, len)) then\n        return string:sub(i, len)\n\
    \      end\n    end\n    return ''\n  end\n  local function reverse(string)\n\
    \    local len = #string\n    local reversed = ''\n    for i = len, 1, -1 do\n\
    \      reversed = reversed .. string:sub(i, i)\n    end\n    return reversed\n\
    \  end\n  local len = #string\n  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, len - #suffix)\n  return string .. reverse(prefix)\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - longest_palindrome_suffix:len())\n\
    \    return string .. prefix:reverse()\nend", "    local function is_palindrome(string)\n\
    \        local len = #string\n        for i = 1, len / 2 do\n            if string:sub(i,\
    \ i) ~= string:sub(len - i + 1, len - i + 1) then\n                return false\n\
    \            end\n        end\n        return true\n    end", "    local suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string.sub(string, 1,\
    \ #string - #suffix)\n    return string .. string.reverse(prefix)\nend", "   \
    \ local longest_postfix = longest_palindromic_postfix(string)\n    local prefix\
    \ = string:sub(1, #string - #longest_postfix)\n    return string .. prefix:reverse()\n\
    end", "  local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n  return\
    \ string .. prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "  local suffix = longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, #string - #suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local function is_palindrome(string)\n\
    \        local len = #string\n        for i = 1, len / 2 do\n            if string:sub(i,\
    \ i) ~= string:sub(len - i + 1, len - i + 1) then\n                return false\n\
    \            end\n        end\n        return true\n    end", "  local prefix\
    \ = string:sub(1, #string - longest_palindrome_suffix(string))\n  return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local reversed = string:reverse()\n\
    \    local prefix = string:sub(1, #string - 1)\n    local suffix = reversed:sub(1,\
    \ #string - 1)\n    local longest_postfix = longest_common_substring(string, reversed)\n\
    \    return string .. suffix:sub(#longest_postfix + 1)\nend", "    local suffix_length\
    \ = longest_palindromic_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - suffix_length)\n    return string .. prefix:reverse()\nend", "    local prefix_length\
    \ = 0\n    local suffix_length = 0\n    local string_length = #string\n    local\
    \ string_half_length = math.floor(string_length / 2)", "    local function reverse(string)\n\
    \        local reversed = ''\n        for i = #string, 1, -1 do\n            reversed\
    \ = reversed .. string:sub(i, i)\n        end\n        return reversed\n    end",
  "  local suffix = longest_palindrome_suffix(string)\n  local prefix = string:sub(1,\
    \ #string - #suffix)\n  return string .. prefix:reverse()\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "  local function longest_palindromic_suffix(string)\n\
    \    local function is_palindrome(string)\n      local len = #string\n      for\
    \ i = 1, len / 2 do\n        if string:sub(i, i) ~= string:sub(len - i + 1, len\
    \ - i + 1) then\n          return false\n        end\n      end\n      return\
    \ true\n    end\n    local len = #string\n    for i = len, 1, -1 do\n      if\
    \ is_palindrome(string:sub(i, len)) then\n        return string:sub(i, len)\n\
    \      end\n    end\n    return ''\n  end\n  local suffix = longest_palindromic_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #suffix)\n  return string .. prefix:reverse()\n\
    end", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local string_length = #string\n\
    \    local longest_palindrome_length = 0\n    local longest_palindrome_index =\
    \ 0\n    local palindrome_lengths = {}\n    for i = 1, string_length do\n    \
    \    palindrome_lengths[i] = 0\n    end\n    for i = 1, string_length do\n   \
    \     local left = i - 1\n        local right = i + 1\n        while left >= 1\
    \ and right <= string_length and string:sub(left, left) == string:sub(right, right)\
    \ do\n            palindrome_lengths[i] = palindrome_lengths[i] + 1\n        \
    \    left = left - 1\n            right = right + 1\n        end\n        if palindrome_lengths[i]\
    \ > longest_palindrome_length then\n            longest_palindrome_length = palindrome_lengths[i]\n\
    \            longest_palindrome_index = i\n        end\n    end\n    local prefix\
    \ = string:sub(1, longest_palindrome_index - longest_palindrome_length - 1)\n\
    \    local suffix = string:sub(longest_palindrome_index + longest_palindrome_length\
    \ + 1, string_length)\n    return string .. string.reverse(prefix) .. suffix\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local function longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local len = #string\n\
    \            for i = 1, len / 2 do\n                if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                    return false\n             \
    \   end\n            end\n            return true\n        end\n        local\
    \ len = #string\n        local i = len\n        while i > 0 do\n            if\
    \ is_palindrome(string:sub(i)) then\n                return string:sub(i)\n  \
    \          end\n            i = i - 1\n        end\n        return ''\n    end\n\
    \    local suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "  local prefix\
    \ = string:sub(1, math.floor(#string / 2))\n  local suffix = string:sub(math.ceil(#string\
    \ / 2) + 1)\n  local longest_palindrome = find_longest_palindrome(suffix)\n  return\
    \ string .. string.reverse(prefix):sub(#longest_palindrome + 1)\nend", "    local\
    \ n = string:len()\n    local suffix = string:sub(n, n)\n    local prefix = string:sub(1,\
    \ 1)\n    local i = 1\n    while i < n do\n        local j = n - i + 1\n     \
    \   if string:sub(i, i) == string:sub(j, j) then\n            suffix = string:sub(i,\
    \ n)\n            prefix = string:sub(1, i - 1)\n        end\n        i = i +\
    \ 1\n    end\n    return string .. prefix:reverse()\nend", "    local suffix =\
    \ longest_palindrome_suffix(string)\n    local prefix = string.sub(string, 1,\
    \ string.len(string) - string.len(suffix))\n    return string .. string.reverse(prefix)\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, #string - #suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    local reversed_prefix\
    \ = prefix:reverse()\n    return string .. reversed_prefix\nend", "    local len\
    \ = #string\n    local i = len\n    while i > 0 do\n        if is_palindrome(string,\
    \ i, len) then\n            break\n        end\n        i = i - 1\n    end\n \
    \   return string .. string:sub(1, len - i):reverse()\nend", "    local reverse\
    \ = string:reverse()\n    local suffix = string:sub(1, #string - 1)\n    while\
    \ suffix ~= '' do\n        if reverse:find(suffix) == 1 then\n            return\
    \ string .. reverse:sub(#suffix + 1)\n        end\n        suffix = suffix:sub(1,\
    \ #suffix - 1)\n    end\n    return string .. reverse\nend", "    local function\
    \ is_palindrome(string)\n        local len = #string\n        for i = 1, len //\
    \ 2 do\n            if string:sub(i, i) ~= string:sub(len - i + 1, len - i + 1)\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end", "    local suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string.sub(string, 1, #string - #suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local string_length = #string\n    local longest_palindrome_length\
    \ = 0\n    local longest_palindrome_start = 0\n    local longest_palindrome_end\
    \ = 0\n    local longest_palindrome_length_at = {}\n    local longest_palindrome_start_at\
    \ = {}\n    local longest_palindrome_end_at = {}\n    local longest_palindrome_length_at_i\
    \ = 0\n    local longest_palindrome_start_at_i = 0\n    local longest_palindrome_end_at_i\
    \ = 0\n    for i = 1, string_length do\n        longest_palindrome_length_at_i\
    \ = 0\n        longest_palindrome_start_at_i = 0\n        longest_palindrome_end_at_i\
    \ = 0\n        for j = 0, i - 1 do\n            if string:sub(i - j, i) == string:sub(i,\
    \ i + j) then\n                longest_palindrome_length_at_i = j * 2 + 1\n  \
    \              longest_palindrome_start_at_i = i - j\n                longest_palindrome_end_at_i\
    \ = i + j\n            else\n                break\n            end\n        end\n\
    \        longest_palindrome_length_at[i] = longest_palindrome_length_at_i\n  \
    \      longest_palindrome_start_at[i] = longest_palindrome_start_at_i\n      \
    \  longest_palindrome_end_at[i] = longest_palindrome_end_at_i\n        if longest_palindrome_length_at_i\
    \ > longest_palindrome_length then\n            longest_palindrome_length = longest_palindrome_length_at_i\n\
    \            longest_palindrome_start = longest_palindrome_start_at_i\n      \
    \      longest_palindrome_end = longest_palindrome_end_at_i\n        end\n   \
    \ end\n    for i = 1, string_length - 1 do\n        longest_palindrome_length_at_i\
    \ = 0\n        longest_palindrome_start_at_i = 0\n        longest_palindrome",
  "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "  local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \  local prefix = string:sub(1, #string - #palindrome_suffix)\n  return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local function reverse(string)\n\
    \        local result = ''\n        for i = #string, 1, -1 do\n            result\
    \ = result .. string:sub(i, i)\n        end\n        return result\n    end",
  "    local len = #string\n    local prefix = string:sub(1, len - 1)\n    local suffix\
    \ = string:sub(len, len)\n    local prefix_len = len - 1\n    local suffix_len\
    \ = 1\n    while prefix_len > 0 and suffix_len <= len do\n        if is_palindrome(prefix)\
    \ then\n            return string .. reverse(prefix)\n        end\n        prefix\
    \ = prefix:sub(1, prefix_len - 1)\n        suffix = suffix .. string:sub(len -\
    \ suffix_len, len - suffix_len)\n        prefix_len = prefix_len - 1\n       \
    \ suffix_len = suffix_len + 1\n    end\n    return string .. reverse(string)\n\
    end", "    local function longest_palindrome_suffix(string)\n        local function\
    \ is_palindrome(string)\n            local i = 1\n            local j = #string\n\
    \            while i < j do\n                if string:sub(i, i) ~= string:sub(j,\
    \ j) then\n                    return false\n                end\n           \
    \     i = i + 1\n                j = j - 1\n            end\n            return\
    \ true\n        end\n        local i = #string\n        while i > 0 do\n     \
    \       if is_palindrome(string:sub(i)) then\n                return string:sub(i)\n\
    \            end\n            i = i - 1\n        end\n        return ''\n    end\n\
    \    local function reverse(string)\n        local reversed = ''\n        for\
    \ i = #string, 1, -1 do\n            reversed = reversed .. string:sub(i, i)\n\
    \        end\n        return reversed\n    end\n    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. reverse(prefix)\n\
    end", "    local function find_longest_palindrome_postfix(string)\n        local\
    \ function is_palindrome(string)\n            local len = #string\n          \
    \  for i = 1, len / 2 do\n                if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                    return false\n             \
    \   end\n            end\n            return true\n        end\n        local\
    \ len = #string\n        for i = len, 1, -1 do\n            if is_palindrome(string:sub(i,\
    \ len)) then\n                return string:sub(i, len)\n            end\n   \
    \     end\n        return ''\n    end\n    local palindrome_postfix = find_longest_palindrome_postfix(string)\n\
    \    local palindrome_prefix = string:sub(1, #string - #palindrome_postfix)\n\
    \    return string .. palindrome_prefix:reverse()\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local function is_palindrome(string)\n        local len = #string\n\
    \        for i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end", "    local len = string:len()\n \
    \   local suffix_len = longest_palindromic_suffix(string)\n    local prefix =\
    \ string:sub(1, len - suffix_len)\n    return string .. prefix:reverse()\nend",
  "  local longest_palindrome_suffix = longest_palindrome_suffix(string)\n  local\
    \ prefix = string:sub(1, #string - #longest_palindrome_suffix)\n  return string\
    \ .. prefix:reverse()\nend", "  local string_length = #string\n  local palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n  local palindrome_prefix = string:sub(1,\
    \ string_length - palindrome_suffix)\n  return string .. string:reverse():sub(1,\
    \ palindrome_prefix)\nend", "    local longest_palindrome = find_longest_palindrome(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(longest_palindrome))\n\
    \    return string.format('%s%s%s', prefix, longest_palindrome, string.reverse(prefix))\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, string.len(string) - string.len(suffix))\n    return\
    \ string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local function find_longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            return string == string:reverse()\n\
    \        end\n        for i = #string, 1, -1 do\n            if is_palindrome(string:sub(i))\
    \ then\n                return string:sub(i)\n            end\n        end\n \
    \       return ''\n    end\n    local function reverse_prefix(string)\n      \
    \  return string:reverse():sub(#string)\n    end\n    local palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. reverse_prefix(prefix)\nend", " \
    \   local palindrome_suffix = longest_palindrome_suffix(string)\n    local palindrome_prefix\
    \ = string.reverse(string.sub(string, 1, #string - #palindrome_suffix))\n    return\
    \ string .. palindrome_prefix\nend", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, #string - #suffix)\n    return string\
    \ .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local prefix = string:sub(1, #string\
    \ - longest_palindrome_suffix(string) + 1)\n    return string .. prefix:reverse()\n\
    end", "    local function reverse(string)\n        local reversed = {}\n     \
    \   for i = #string, 1, -1 do\n            table.insert(reversed, string:sub(i,\
    \ i))\n        end\n        return table.concat(reversed)\n    end", "    local\
    \ palindrome_suffix = find_longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #palindrome_suffix)\n    return string .. reverse(prefix)\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local palindrome_suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, string:len() - suffix:len())\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local prefix = string:sub(1, #string -\
    \ longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local prefix_length = 0\n    local suffix_length = 0\n    local string_length\
    \ = #string\n    local i = 1\n    local j = string_length\n    while i < j do\n\
    \        if string:sub(i, i) == string:sub(j, j) then\n            prefix_length\
    \ = prefix_length + 1\n            suffix_length = suffix_length + 1\n       \
    \ else\n            prefix_length = 0\n            suffix_length = 0\n       \
    \ end\n        i = i + 1\n        j = j - 1\n    end\n    return string .. string:sub(1,\
    \ string_length - suffix_length):reverse()\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "  local string_length = #string\n  local palindrome_length = 0\n  local\
    \ palindrome_start = 0\n  local palindrome_end = 0\n  local i = 1\n  while i <=\
    \ string_length do\n    local j = 1\n    while i - j >= 1 and i + j <= string_length\
    \ do\n      if string:sub(i - j, i - j) ~= string:sub(i + j, i + j) then\n   \
    \     break\n      end\n      j = j + 1\n    end\n    if j * 2 - 1 > palindrome_length\
    \ then\n      palindrome_length = j * 2 - 1\n      palindrome_start = i - j +\
    \ 1\n      palindrome_end = i + j - 1\n    end\n    if i + 1 <= string_length\
    \ and string:sub(i, i) == string:sub(i + 1, i + 1) then\n      j = 1\n      while\
    \ i - j >= 1 and i + 1 + j <= string_length do\n        if string:sub(i - j, i\
    \ - j) ~= string:sub(i + 1 + j, i + 1 + j) then\n          break\n        end\n\
    \        j = j + 1\n      end\n      if j * 2 > palindrome_length then\n     \
    \   palindrome_length = j * 2\n        palindrome_start = i - j + 1\n        palindrome_end\
    \ = i + j\n      end\n    end\n    i = i + 1\n  end\n  return string .. string:sub(1,\
    \ palindrome_start - 1):reverse()\nend", "    local palindrome_suffix = find_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. reverse(prefix)\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string.reverse(string.sub(string, 1, string.len(string)\
    \ - string.len(palindrome_suffix)))\n    return string .. palindrome_prefix\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome = find_longest_palindrome(string)\n    local\
    \ prefix = string:sub(1, #string - #longest_palindrome)\n    return string ..\
    \ prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, string:len() - suffix:len())\n    return string .. prefix:reverse()\n\
    end", "    local reverse = string:reverse()\n    local suffix = string:sub(1,\
    \ #string - 1)\n    local prefix = string:sub(2, #string)\n    local longest_palindrome\
    \ = ''\n    while #suffix > 0 do\n        if suffix == reverse:sub(1, #suffix)\
    \ then\n            longest_palindrome = suffix\n            break\n        end\n\
    \        suffix = suffix:sub(1, #suffix - 1)\n        prefix = prefix:sub(2, #prefix)\n\
    \    end\n    return string .. reverse:sub(#longest_palindrome + 1, #string)\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix_length = longest_palindromic_suffix(string)\n    local\
    \ prefix = string:sub(1, #string - suffix_length)\n    return string .. prefix:reverse()\n\
    end", "  local function reverse(s)\n    local r = ''\n    for i = #s, 1, -1 do\n\
    \      r = r .. s:sub(i, i)\n    end\n    return r\n  end", "    local suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #suffix)\n    return string .. prefix:reverse()\nend", "  local postfix =\
    \ longest_palindromic_suffix(string)\n  local prefix = string.sub(string, 1, string.len(string)\
    \ - string.len(postfix))\n  return string .. string.reverse(prefix)\nend", " \
    \   local function reverse(string)\n        local reversed = ''\n        for i\
    \ = #string, 1, -1 do\n            reversed = reversed .. string:sub(i, i)\n \
    \       end\n        return reversed\n    end", "    local prefix = string:sub(1,\
    \ math.floor(#string / 2))\n    local suffix = string:sub(math.ceil(#string /\
    \ 2) + 1)\n    local reverse_prefix = prefix:reverse()\n    local palindrome_suffix\
    \ = find_longest_palindrome(suffix)\n    return string .. reverse_prefix:sub(#palindrome_suffix\
    \ + 1)\nend", "    local longest_palindrome = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome)\n    return string\
    \ .. prefix:reverse()\nend", "  local len = #string\n  local i = len\n  while\
    \ i > 0 do\n    local prefix = string:sub(1, i)\n    local suffix = string:sub(len\
    \ - i + 1, len)\n    if prefix == suffix then\n      return string .. string:sub(i\
    \ + 1, len):reverse()\n    end\n    i = i - 1\n  end\n  return string\nend", " \
    \   local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    local\
    \ reversed_prefix = string.reverse(prefix)\n    return prefix .. reversed_prefix\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string.reverse(prefix) .. string .. suffix\nend", "    local palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local suffix = longest_palindrome_suffix(string)\n    local prefix = string.sub(string,\
    \ 1, string.len(string) - string.len(suffix))\n    return string .. string.reverse(prefix)\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string.sub(string, 1, #string - #suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local string_length = #string\n    local prefix_length = math.floor(string_length\
    \ / 2)\n    local suffix_length = string_length - prefix_length\n    local prefix\
    \ = string:sub(1, prefix_length)\n    local suffix = string:sub(suffix_length\
    \ + 1, string_length)\n    local reversed_prefix = string.reverse(prefix)\n  \
    \  local reversed_suffix = string.reverse(suffix)\n    local reversed_prefix_length\
    \ = #reversed_prefix\n    local reversed_suffix_length = #reversed_suffix\n  \
    \  local reversed_prefix_index = 1\n    local reversed_suffix_index = 1\n    local\
    \ prefix_index = 1\n    local suffix_index = 1\n    local prefix_char\n    local\
    \ suffix_char\n    local reversed_prefix_char\n    local reversed_suffix_char\n\
    \    local palindrome_length = 0\n    local palindrome_index = 0\n    while reversed_prefix_index\
    \ <= reversed_prefix_length and reversed_suffix_index <= reversed_suffix_length\
    \ do\n        reversed_prefix_char = reversed_prefix:sub(reversed_prefix_index,\
    \ reversed_prefix_index)\n        reversed_suffix_char = reversed_suffix:sub(reversed_suffix_index,\
    \ reversed_suffix_index)\n        if reversed_prefix_char == reversed_suffix_char\
    \ then\n            palindrome_length = palindrome_length + 1\n            palindrome_index\
    \ = reversed_prefix_index\n        else\n            break\n        end\n    \
    \    reversed_prefix_index = reversed_prefix_index + 1\n        reversed_suffix_index\
    \ = reversed_suffix_index + 1\n    end\n    local palindrome = reversed_prefix:sub(1,\
    \ palindrome_index)\n    local prefix_index = palindrome_index + 1\n    local\
    \ suffix_index = 1\n    while prefix_index <= reversed_prefix_length and suffix_index\
    \ <= suffix_length do\n        prefix_char = reversed_prefix:sub(prefix_index,\
    \ prefix_index)\n        suffix_char = suffix:sub(suffix_index, suffix_index)\n\
    \        if prefix_char == suffix_char then", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string.sub(string, 1, #string - #suffix)\n    return string .. string.reverse(prefix)\n\
    end", "    local function is_palindrome(string)\n        local len = #string\n\
    \        for i = 1, len / 2 do\n            if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end", "    local function longest_palindrome_suffix(string)\n\
    \        local function is_palindrome(string)\n            local len = #string\n\
    \            for i = 1, len / 2 do\n                if string:sub(i, i) ~= string:sub(len\
    \ - i + 1, len - i + 1) then\n                    return false\n             \
    \   end\n            end\n            return true\n        end\n        local\
    \ len = #string\n        for i = len, 1, -1 do\n            if is_palindrome(string:sub(i,\
    \ len)) then\n                return string:sub(i, len)\n            end\n   \
    \     end\n        return ''\n    end\n    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local palindrome_prefix = string:sub(1, #string - #palindrome_suffix)\n \
    \   return string .. palindrome_prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    local reversed_prefix = prefix:reverse()\n\
    \    return string .. reversed_prefix\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. string:reverse():sub(1,\
    \ #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n    local\
    \ prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n  \
    \  return string .. string.reverse(prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. reverse(prefix)\nend", " \
    \   local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. prefix:reverse()\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, string:len() - suffix:len())\n    return string\
    \ .. prefix:reverse()\nend", "    local prefix = string:sub(1, #string - longest_palindrome_suffix(string))\n\
    \    return string .. prefix:reverse()\nend", "    local palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. reverse(prefix)\nend", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string.reverse(prefix)\nend", "    local palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #palindrome_suffix)\n    return string\
    \ .. string:reverse():sub(1, #prefix)\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end", "    local longest_palindrome_suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string:sub(1, #string - #longest_palindrome_suffix)\n    return\
    \ string .. string:reverse():sub(1, #prefix)\nend", "    local palindrome_suffix\
    \ = find_longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #palindrome_suffix)\n    local reverse_prefix = prefix:reverse()\n    return\
    \ string .. reverse_prefix\nend", "    local suffix = longest_palindrome_suffix(string)\n\
    \    local prefix = string.sub(string, 1, string.len(string) - string.len(suffix))\n\
    \    return string .. string.reverse(prefix)\nend", "    local longest_palindrome_suffix\
    \ = longest_palindrome_suffix(string)\n    local prefix = string:sub(1, #string\
    \ - #longest_palindrome_suffix)\n    return string .. prefix:reverse()\nend",
  "    local suffix = longest_palindrome_suffix(string)\n    local prefix = string:sub(1,\
    \ #string - #suffix)\n    return string .. prefix:reverse()\nend", "    local\
    \ longest_palindrome_suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, string:len() - longest_palindrome_suffix:len())\n    return\
    \ string .. prefix:reverse()\nend", "    local n = #string\n    local suffix =\
    \ string:sub(n, n)\n    local prefix = string:sub(1, 1)\n    local i = n - 1\n\
    \    while i > 0 do\n        suffix = string:sub(i, i) .. suffix\n        prefix\
    \ = prefix .. string:sub(i, i)\n        if suffix == prefix then\n           \
    \ break\n        end\n        i = i - 1\n    end\n    return string .. prefix:reverse()\n\
    end", "    local palindrome_suffix = find_palindrome_suffix(string)\n    local\
    \ palindrome_prefix = string.reverse(string.sub(string, 1, #string - #palindrome_suffix))\n\
    \    return string .. palindrome_prefix\nend", "    local prefix = string:sub(1,\
    \ #string - longest_palindrome_suffix(string))\n    return string .. prefix:reverse()\n\
    end", "    local suffix = longest_palindrome_suffix(string)\n    local prefix\
    \ = string:sub(1, #string - #suffix)\n    return string .. prefix:reverse()\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
