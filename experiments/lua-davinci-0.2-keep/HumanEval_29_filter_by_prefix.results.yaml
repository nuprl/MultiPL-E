name: HumanEval_29_filter_by_prefix
language: lua
results:
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpn8hhnc00.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpn8hhnc00.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpn8hhnc00.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplz_a_901.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplz_a_901.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmplz_a_901.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwb5f3s2p.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwb5f3s2p.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpwb5f3s2p.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1ikr9zaj.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1ikr9zaj.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp1ikr9zaj.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppfng2y5j.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppfng2y5j.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmppfng2y5j.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4dem0193.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4dem0193.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp4dem0193.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpb_me9ux_.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpb_me9ux_.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpb_me9ux_.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjqks7k93.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjqks7k93.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpjqks7k93.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoh8_q9zm.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpoh8_q9zm.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpoh8_q9zm.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpf7dbyho4.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpf7dbyho4.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpf7dbyho4.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, string in ipairs(strings) do\n  \
    \      if string:startswith(prefix) then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdi07398e.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdi07398e.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpdi07398e.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2_2kz8xo.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2_2kz8xo.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp2_2kz8xo.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxql9alic.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxql9alic.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpxql9alic.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm0e_su3w.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpm0e_su3w.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpm0e_su3w.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmppq2vmn.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmppq2vmn.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpmppq2vmn.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local filtered = {}\n    for _, s in ipairs(strings) do\n     \
    \   if s:sub(1, #prefix) == prefix then\n            table.insert(filtered, s)\n\
    \        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.sub(s, 1, string.len(prefix)) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpibjvxfid.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpibjvxfid.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpibjvxfid.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4ccd14cr.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4ccd14cr.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp4ccd14cr.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.sub(s, 1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo2y0yjes.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpo2y0yjes.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpo2y0yjes.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe0qxenrv.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpe0qxenrv.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpe0qxenrv.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjqfhaovo.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjqfhaovo.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpjqfhaovo.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfqpfb8zx.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfqpfb8zx.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpfqpfb8zx.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1zqw4p1q.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1zqw4p1q.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp1zqw4p1q.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt5_1ahbp.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt5_1ahbp.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpt5_1ahbp.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpznljhgq3.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpznljhgq3.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpznljhgq3.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcy0xk1_f.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcy0xk1_f.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpcy0xk1_f.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprqfmymqd.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprqfmymqd.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmprqfmymqd.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1p4cac_2.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1p4cac_2.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp1p4cac_2.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr90bo_85.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr90bo_85.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpr90bo_85.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmykov_ni.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmykov_ni.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpmykov_ni.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0duofkz6.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0duofkz6.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp0duofkz6.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa97802ze.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa97802ze.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpa97802ze.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:starts_with(prefix) then\n            table.insert(result, str)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppryytms3.lua:9:\
    \ attempt to call method 'starts_with' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppryytms3.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmppryytms3.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if string.sub(str, 1, #prefix) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp36j49gn_.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp36j49gn_.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp36j49gn_.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptwzmlz6i.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptwzmlz6i.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmptwzmlz6i.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph9m56r85.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph9m56r85.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmph9m56r85.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa010dict.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa010dict.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpa010dict.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp062ag1ss.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp062ag1ss.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp062ag1ss.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1kjw_fcf.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1kjw_fcf.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp1kjw_fcf.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(result, s)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjovxdtzq.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjovxdtzq.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpjovxdtzq.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9309gy9t.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9309gy9t.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp9309gy9t.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjppxsh8b.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjppxsh8b.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpjppxsh8b.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9bpj_ws_.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9bpj_ws_.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp9bpj_ws_.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt3hdpqkk.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt3hdpqkk.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpt3hdpqkk.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1tl5ehub.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1tl5ehub.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp1tl5ehub.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  return filter(strings, function(s) return s:startswith(prefix) end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvxjznc1k.lua:7:\
    \ attempt to call global 'filter' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvxjznc1k.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpvxjznc1k.lua:13: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph3ar8rxb.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph3ar8rxb.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmph3ar8rxb.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyulr4jnc.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyulr4jnc.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpyulr4jnc.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0ldno7gr.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0ldno7gr.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp0ldno7gr.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3i3m9fqh.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3i3m9fqh.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp3i3m9fqh.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8ni5u_mn.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8ni5u_mn.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp8ni5u_mn.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprn0x8xck.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprn0x8xck.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmprn0x8xck.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprebffsjd.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprebffsjd.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmprebffsjd.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkszy3ceg.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkszy3ceg.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpkszy3ceg.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(filtered, s)\n    end\n  end\n \
    \ return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6vchjgfw.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6vchjgfw.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp6vchjgfw.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmhvwa4ye.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmhvwa4ye.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpmhvwa4ye.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuxib_f1l.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuxib_f1l.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpuxib_f1l.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_jdetdo8.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_jdetdo8.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp_jdetdo8.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe4x1qtwd.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpe4x1qtwd.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpe4x1qtwd.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local res = {}\n    for i, v in ipairs(strings) do\n        if\
    \ v:startswith(prefix) then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpckmg2azn.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpckmg2azn.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpckmg2azn.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, v in ipairs(strings) do\n       \
    \ if v:sub(1, #prefix) == prefix then\n            table.insert(result, v)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa7xywfz1.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa7xywfz1.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpa7xywfz1.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpi5dwue13.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpi5dwue13.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpi5dwue13.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8nrirbzs.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8nrirbzs.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp8nrirbzs.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfyzg5sng.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfyzg5sng.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpfyzg5sng.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp74skyrbj.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp74skyrbj.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp74skyrbj.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1h83mr01.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1h83mr01.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp1h83mr01.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.sub(s, 1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if string.sub(s, 1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpof2xw2z1.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpof2xw2z1.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpof2xw2z1.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkxtxnxbt.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkxtxnxbt.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpkxtxnxbt.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzlx_hg8l.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzlx_hg8l.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpzlx_hg8l.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpn8qaingd.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpn8qaingd.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpn8qaingd.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8dnd4ds6.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8dnd4ds6.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp8dnd4ds6.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg1a_8f44.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpg1a_8f44.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpg1a_8f44.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzjb2qpi6.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzjb2qpi6.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpzjb2qpi6.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp01r8emu6.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp01r8emu6.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp01r8emu6.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpylydf2gz.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpylydf2gz.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpylydf2gz.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpiqjfpxyp.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpiqjfpxyp.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpiqjfpxyp.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj3abhand.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpj3abhand.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpj3abhand.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4huea8h5.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4huea8h5.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp4huea8h5.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptiukhnpv.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptiukhnpv.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmptiukhnpv.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpijcsyusi.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpijcsyusi.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpijcsyusi.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_h85xnen.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_h85xnen.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp_h85xnen.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjajkl3ud.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjajkl3ud.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpjajkl3ud.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n   local result = {}\n   for _, str in ipairs(strings) do\n      if\
    \ str:sub(1, #prefix) == prefix then\n         table.insert(result, str)\n   \
    \   end\n   end\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:sub(1, #prefix) == prefix then\n            table.insert(result, s)\n \
    \       end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local filtered = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(filtered, s)\n    end\n  end\n \
    \ return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoogoekx_.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpoogoekx_.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpoogoekx_.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvi7rmquy.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvi7rmquy.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpvi7rmquy.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxuo3cnlt.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxuo3cnlt.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpxuo3cnlt.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for i,v in ipairs(strings) do\n    if v:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp83ki7w5b.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp83ki7w5b.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp83ki7w5b.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr8wdifz1.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr8wdifz1.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpr8wdifz1.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt1b93idq.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt1b93idq.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpt1b93idq.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp91czc60.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpp91czc60.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpp91czc60.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpevtt8ey3.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpevtt8ey3.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpevtt8ey3.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpi68s6u12.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpi68s6u12.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpi68s6u12.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:startswith(prefix) then\n            table.insert(result, str)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpejk8g18l.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpejk8g18l.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpejk8g18l.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1d55uxfn.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1d55uxfn.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmp1d55uxfn.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpu020w3o3.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpu020w3o3.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpu020w3o3.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsunqd5ij.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsunqd5ij.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpsunqd5ij.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph7dprzkl.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph7dprzkl.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmph7dprzkl.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if string.sub(str,\
    \ 1, #prefix) == prefix then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, str in ipairs(strings) do\n     \
    \   if str:sub(1, #prefix) == prefix then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if str:startswith(prefix)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgywr4jpp.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgywr4jpp.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpgywr4jpp.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n    local result = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwlar8c3b.lua:9:\
    \ attempt to call method 'startswith' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwlar8c3b.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpwlar8c3b.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
    \ prefix)\n  local result = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
