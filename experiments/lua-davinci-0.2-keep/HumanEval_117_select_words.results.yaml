name: HumanEval_117_select_words
language: lua
results:
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7xne6t8.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpz7xne6t8.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(t, word)\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdz4_yzu9.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpdz4_yzu9.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t = {}\n    for w in s:gmatch(\"%w+\") do\n        if #w == n\
    \ then\n            table.insert(t, w)\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplj25avek.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmplj25avek.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzmmrk_qv.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpzmmrk_qv.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpusa7si6m.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpusa7si6m.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    local vowels = 0\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \      vowels = 0\n        else\n            word = word .. s:sub(i, i)\n    \
    \        if s:sub(i, i) == \"a\" or s:sub(i, i) == \"e\" or s:sub(i, i) == \"\
    i\" or s:sub(i, i) == \"o\" or s:sub(i, i) == \"u\" then\n                vowels\
    \ = vowels + 1\n            else\n                consonants = consonants + 1\n\
    \            end\n        end\n    end\n    if consonants == n then\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp52y8qyrw.lua:47:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp52y8qyrw.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for w in s:gmatch(\"%w+\") do\n        if w:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n            table.insert(words, w)\n      \
    \  end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjpau9m4o.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpjpau9m4o.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for char in word:gmatch(\"[^aeiouAEIOU]\") do\n    \
    \        consonants = consonants + 1\n        end\n        if consonants == n\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n         \
    \   consonants = consonants + 1\n        end\n        if consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq7__7yhb.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpq7__7yhb.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n   \
    \     end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp8ob6ef2.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpp8ob6ef2.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiou]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_deqgq6l.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp_deqgq6l.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c ~= \" \" then\n\
    \            word = word .. c\n        else\n            if #word == n then\n\
    \                words[#words + 1] = word\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if c ~= \"a\" and c ~=\
    \ \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" and c ~= \" \" then\n   \
    \         consonants = consonants + 1\n        end\n    end\n    if #word == n\
    \ then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgtxa9tu7.lua:40:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpgtxa9tu7.lua:40: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for w in s:gmatch(\"%w+\") do\n    local c = 0\n \
    \   for c in w:gmatch(\"[^aeiou]\") do\n      c = c + 1\n    end\n    if c ==\
    \ n then\n      table.insert(words, w)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpn3ebboqc.lua:17:\
    \ attempt to perform arithmetic on local 'c' (a string value)\\nstack traceback:\\\
    n\\t/tmp/tmpn3ebboqc.lua:17: in function 'candidate'\\n\\t/tmp/tmpn3ebboqc.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for char in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n         \
    \   consonants = consonants + 1\n        end\n        if consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu7dl0ezz.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpu7dl0ezz.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptzdiyyc_.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmptzdiyyc_.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c ~= \"a\" and\
    \ c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n        consonants\
    \ = consonants + 1\n      end\n    end\n  end\n  if consonants == n then\n   \
    \ table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcecea41k.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpcecea41k.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    local vowels = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n \
    \       if c == \" \" then\n            if consonants == n then\n            \
    \    table.insert(words, word)\n            end\n            word = \"\"\n   \
    \         consonants = 0\n            vowels = 0\n        else\n            word\
    \ = word .. c\n            if c == \"a\" or c == \"e\" or c == \"i\" or c == \"\
    o\" or c == \"u\" or c == \"y\" then\n                vowels = vowels + 1\n  \
    \          else\n                consonants = consonants + 1\n            end\n\
    \        end\n    end\n    if consonants == n then\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmposbw5k06.lua:45:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmposbw5k06.lua:45: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        local\
    \ consonants = 0\n        for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n  \
    \          consonants = consonants + 1\n        end\n        if consonants ==\
    \ n then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_5w02izk.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp_5w02izk.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c:match(\"[^aeiou]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpedxsycw_.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpedxsycw_.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  for\
    \ word in s:gmatch(\"%w+\") do\n    local count = 0\n    for letter in word:gmatch(\"\
    %l\") do\n      if consonants[letter] then\n        count = count + 1\n      end\n\
    \    end\n    if count == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8gfdtewu.lua:32:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp8gfdtewu.lua:32:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local\
    \ count = 0\n  for word in s:gmatch(\"%w+\") do\n    for i = 1, #word do\n   \
    \   for j = 1, #consonants do\n        if word:sub(i, i) == consonants[j] then\n\
    \          count = count + 1\n        end\n      end\n    end\n    if count ==\
    \ n then\n      table.insert(words, word)\n    end\n    count = 0\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzt_rb4w6.lua:36:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpzt_rb4w6.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    if s:sub(i, i) ~= \" \" then\n      word = word .. s:sub(i,\
    \ i)\n    else\n      if consonants == n then\n        table.insert(words, word)\n\
    \      end\n      word = \"\"\n      consonants = 0\n    end\n    if s:sub(i,\
    \ i) ~= \"a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i)\
    \ ~= \"o\" and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n      consonants\
    \ = consonants + 1\n    end\n  end\n  if consonants == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2fw2aj12.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp2fw2aj12.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c ~= \" \" then\n      word =\
    \ word .. c\n    else\n      if consonants == n then\n        table.insert(words,\
    \ word)\n      end\n      word = \"\"\n      consonants = 0\n    end\n    if c\
    \ ~= \"a\" and c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" and c ~=\
    \ \" \" then\n      consonants = consonants + 1\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp36r_2kcr.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp36r_2kcr.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for c in word:gmatch(\"[^aeiou]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps72x5r2p.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmps72x5r2p.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfai38vbt.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpfai38vbt.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = ''\n  local consonants = 0\n  local vowels\
    \ = 0\n  for i = 1, #s do\n    if s:sub(i, i) == ' ' then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = ''\n \
    \     consonants = 0\n      vowels = 0\n    else\n      word = word .. s:sub(i,\
    \ i)\n      if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i'\
    \ or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n        vowels = vowels +\
    \ 1\n      else\n        consonants = consonants + 1\n      end\n    end\n  end\n\
    \  if consonants == n then\n    table.insert(words, word)\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqwseifih.lua:47:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpqwseifih.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = 0\n  for i = 1, #s do\n    if s:sub(i, i) == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n      vowels = 0\n    else\n      word = word .. s:sub(i,\
    \ i)\n      if s:sub(i, i) == \"a\" or s:sub(i, i) == \"e\" or s:sub(i, i) ==\
    \ \"i\" or s:sub(i, i) == \"o\" or s:sub(i, i) == \"u\" then\n        vowels =\
    \ vowels + 1\n      else\n        consonants = consonants + 1\n      end\n   \
    \ end\n  end\n  if consonants == n then\n    table.insert(words, word)\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphol8xqi0.lua:47:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmphol8xqi0.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c:match(\"[^aeiou]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxmdr80c8.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpxmdr80c8.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local c = 0\n\
    \    for letter in word:gmatch(\"[^aeiou]\") do\n      c = c + 1\n    end\n  \
    \  if c == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6mp97a5k.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp6mp97a5k.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n  \
    \          consonants = consonants + 1\n        end\n        if consonants ==\
    \ n then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    local consonants\
    \ = 0\n    for char in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpetsyd2jb.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpetsyd2jb.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi59k5qhe.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpi59k5qhe.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if #word == n then\n      \
    \          table.insert(words, word)\n            end\n            word = \"\"\
    \n            consonants = 0\n        end\n    end\n    if #word == n then\n \
    \       table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4sp25549.lua:36:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp4sp25549.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp998xk5k1.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp998xk5k1.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvco6pved.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpvco6pved.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = ''\n    local consonants = 0\n  \
    \  local vowels = 'aeiou'\n    for i = 1, #s do\n        if s:sub(i, i) ~= ' '\
    \ then\n            word = word .. s:sub(i, i)\n        else\n            for\
    \ j = 1, #word do\n                if not vowels:find(word:sub(j, j)) then\n \
    \                   consonants = consonants + 1\n                end\n       \
    \     end\n            if consonants == n then\n                table.insert(words,\
    \ word)\n            end\n            word = ''\n            consonants = 0\n\
    \        end\n    end\n    for j = 1, #word do\n        if not vowels:find(word:sub(j,\
    \ j)) then\n            consonants = consonants + 1\n        end\n    end\n  \
    \  if consonants == n then\n        table.insert(words, word)\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcnpy0ne2.lua:51:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpcnpy0ne2.lua:51:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9gur3tfp.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9gur3tfp.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzs6t11th.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpzs6t11th.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for char in word:gmatch(\"[^aeiouAEIOU]\") do\n    \
    \        consonants = consonants + 1\n        end\n        if consonants == n\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c:match(\"[^aeiou]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwe7v3nc5.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpwe7v3nc5.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for w in s:gmatch(\"%w+\") do\n    if w:gsub(\"[^aeiou]\"\
    , \"\"):len() == n then\n      table.insert(words, w)\n    end\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzla81a53.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpzla81a53.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  for w in s:gmatch(\"%w+\") do\n    local c = 0\n    for\
    \ l in w:gmatch(\"[^aeiou]\") do\n      c = c + 1\n    end\n    if c == n then\n\
    \      t[#t+1] = w\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp891xj2th.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp891xj2th.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local\
    \ consonants_count = 0\n  local word = ''\n  for i = 1, #s do\n    if s:sub(i,\
    \ i) == ' ' then\n      if consonants_count == n then\n        table.insert(words,\
    \ word)\n      end\n      consonants_count = 0\n      word = ''\n    else\n  \
    \    for j = 1, #consonants do\n        if s:sub(i, i) == consonants[j] then\n\
    \          consonants_count = consonants_count + 1\n        end\n      end\n \
    \     word = word .. s:sub(i, i)\n    end\n  end\n  if consonants_count == n then\n\
    \    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph91jh3di.lua:43:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmph91jh3di.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvlu7r_b8.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpvlu7r_b8.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiou]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8xoxngws.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp8xoxngws.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiou]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzewum8vb.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpzewum8vb.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local\
    \ count = 0\n  local word = ''\n  for i = 1, #s do\n    if s:sub(i, i) == ' '\
    \ then\n      if count == n then\n        words[#words + 1] = word\n      end\n\
    \      count = 0\n      word = ''\n    else\n      for j = 1, #consonants do\n\
    \        if s:sub(i, i) == consonants[j] then\n          count = count + 1\n \
    \       end\n      end\n      word = word .. s:sub(i, i)\n    end\n  end\n  if\
    \ count == n then\n    words[#words + 1] = word\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuu0tsnyr.lua:43:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpuu0tsnyr.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"%a\") do\n      if letter:match(\"[^aeiou]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n    if consonants\
    \ == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsiehyuey.lua:35:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpsiehyuey.lua:35:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = {}\n    local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'z'}\n    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local\
    \ consonant_count = 0\n    local vowel_count = 0\n    for i = 1, #s do\n     \
    \   for j = 1, #consonants do\n            if s:sub(i, i) == consonants[j] then\n\
    \                consonant_count = consonant_count + 1\n            end\n    \
    \    end\n        for j = 1, #vowels do\n            if s:sub(i, i) == vowels[j]\
    \ then\n                vowel_count = vowel_count + 1\n            end\n     \
    \   end\n        if s:sub(i, i) == ' ' then\n            if consonant_count ==\
    \ n then\n                table.insert(words, table.concat(word))\n          \
    \  end\n            word = {}\n            consonant_count = 0\n            vowel_count\
    \ = 0\n        else\n            table.insert(word, s:sub(i, i))\n        end\n\
    \    end\n    if consonant_count == n then\n        table.insert(words, table.concat(word))\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbjk34lyj.lua:51:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpbjk34lyj.lua:51: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c ~= \" \" then\n      word =\
    \ word .. c\n    else\n      if consonants == n then\n        table.insert(words,\
    \ word)\n      end\n      word = \"\"\n      consonants = 0\n    end\n    if c\
    \ ~= \"a\" and c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" and c ~=\
    \ \" \" then\n      consonants = consonants + 1\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnwzmtxs2.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpnwzmtxs2.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  for w in s:gmatch(\"%w+\") do\n    if w:gsub(\"[aeiou]\"\
    , \"\"):len() == n then\n      t[#t+1] = w\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5yxyc4t6.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp5yxyc4t6.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for char in word:gmatch(\"%a\") do\n      if not char:match(\"[aeiou]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n    if consonants\
    \ == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe_eeq1ea.lua:35:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpe_eeq1ea.lua:35:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx6866fec.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpx6866fec.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[bcdfghjklmnpqrstvwxyz]\") do\n      consonants\
    \ = consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp647yl371.lua:30:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp647yl371.lua:30: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = 0\n  local vowels_list = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\"\
    , \"E\", \"I\", \"O\", \"U\"}\n  for i = 1, #s do\n    if s:sub(i, i) == \" \"\
    \ then\n      if consonants == n then\n        table.insert(words, word)\n   \
    \   end\n      word = \"\"\n      consonants = 0\n      vowels = 0\n    else\n\
    \      word = word .. s:sub(i, i)\n      for j = 1, #vowels_list do\n        if\
    \ s:sub(i, i) == vowels_list[j] then\n          vowels = vowels + 1\n        end\n\
    \      end\n      consonants = #word - vowels\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c:match(\"[^aeiouAEIOU]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local consonants = {\n        ['b'] = true,\n\
    \        ['c'] = true,\n        ['d'] = true,\n        ['f'] = true,\n       \
    \ ['g'] = true,\n        ['h'] = true,\n        ['j'] = true,\n        ['k'] =\
    \ true,\n        ['l'] = true,\n        ['m'] = true,\n        ['n'] = true,\n\
    \        ['p'] = true,\n        ['q'] = true,\n        ['r'] = true,\n       \
    \ ['s'] = true,\n        ['t'] = true,\n        ['v'] = true,\n        ['w'] =\
    \ true,\n        ['x'] = true,\n        ['y'] = true,\n        ['z'] = true\n\
    \    }\n    for word in s:gmatch(\"%w+\") do\n        local count = 0\n      \
    \  for letter in word:gmatch(\"%a\") do\n            if consonants[letter:lower()]\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    if count == n then\n            table.insert(words, word)\n        end\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if #word == n then\n      \
    \          table.insert(words, word)\n            end\n            word = \"\"\
    \n            consonants = 0\n        end\n    end\n    if #word == n then\n \
    \       table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp2wu3l4t.lua:36:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpp2wu3l4t.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  local words = s:split(\" \")\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local count = 0\n    for j = 1, #word do\n   \
    \   local c = word:sub(j, j)\n      if c:match(\"[^aeiou]\") then\n        count\
    \ = count + 1\n      end\n    end\n    if count == n then\n      table.insert(t,\
    \ word)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkqmovr1m.lua:14:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkqmovr1m.lua:14:\
    \ in function 'candidate'\\n\\t/tmp/tmpkqmovr1m.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c:match(\"[^aeiouAEIOU]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiou]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkv3aivpk.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpkv3aivpk.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp24f33k5t.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp24f33k5t.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for char in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptwqkz0qf.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmptwqkz0qf.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4hycbo8c.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp4hycbo8c.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local nc = 0\n\
    \    for c in word:gmatch(\"[^aeiou]\") do\n      nc = nc + 1\n    end\n    if\
    \ nc == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7sjutotj.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp7sjutotj.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  local function count_consonants(w)\n    local c = 0\n\
    \    for i = 1, #w do\n      if w:sub(i, i):match(\"[^aeiouAEIOU]\") then\n  \
    \      c = c + 1\n      end\n    end\n    return c\n  end\n  for w in s:gmatch(\"\
    %S+\") do\n    if count_consonants(w) == n then\n      table.insert(t, w)\n  \
    \  end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1emjsdb9.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp1emjsdb9.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3cry_lgv.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp3cry_lgv.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c:match(\"[^aeiou]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9kzsobyx.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9kzsobyx.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for c in word:gmatch(\"[^aeiou]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoo8jgthi.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpoo8jgthi.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ n_consonants = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n       \
    \     n_consonants = n_consonants + 1\n        end\n        if n_consonants ==\
    \ n then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu2g_sbz1.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpu2g_sbz1.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c:match(\"[^aeiou]\") then\n\
    \                consonants = consonants + 1\n            end\n        end\n \
    \   end\n    if consonants == n then\n        table.insert(words, word)\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpho1hkdlx.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpho1hkdlx.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = \"bcdfghjklmnpqrstvwxyz\"\n  for\
    \ word in s:gmatch(\"%w+\") do\n    local count = 0\n    for c in word:gmatch(\"\
    [^aeiou]\") do\n      if consonants:find(c) then\n        count = count + 1\n\
    \      end\n    end\n    if count == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5tx1bauj.lua:33:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp5tx1bauj.lua:33: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n  \
    \          consonants = consonants + 1\n        end\n        if consonants ==\
    \ n then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    if s:sub(i, i) ~= \" \" then\n      word = word .. s:sub(i,\
    \ i)\n    else\n      if consonants == n then\n        table.insert(words, word)\n\
    \      end\n      word = \"\"\n      consonants = 0\n    end\n    if s:sub(i,\
    \ i) ~= \"a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i)\
    \ ~= \"o\" and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n      consonants\
    \ = consonants + 1\n    end\n  end\n  if consonants == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpql5r_ki_.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpql5r_ki_.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ count = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n            count\
    \ = count + 1\n        end\n        if count == n then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp23dywulv.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp23dywulv.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp57a006v7.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp57a006v7.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpca0b070c.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpca0b070c.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl5pyufks.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpl5pyufks.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  for\
    \ word in s:gmatch(\"%w+\") do\n    local count = 0\n    for i = 1, #word do\n\
    \      for j = 1, #consonants do\n        if word:sub(i, i) == consonants[j] then\n\
    \          count = count + 1\n        end\n      end\n    end\n    if count ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp05dk_cou.lua:35:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp05dk_cou.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwuhzr9ct.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpwuhzr9ct.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkngf1ywz.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpkngf1ywz.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for c in word:gmatch(\"[^aeiouAEIOU]\") do\n       \
    \     consonants = consonants + 1\n        end\n        if consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = word:gsub(\"[aeiou]\", \"\")\n        if #consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpth68hr4c.lua:30:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpth68hr4c.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for c in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  for\
    \ word in s:gmatch(\"%w+\") do\n    local count = 0\n    for letter in word:gmatch(\"\
    %l\") do\n      if consonants[letter] then\n        count = count + 1\n      end\n\
    \    end\n    if count == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ogdb_5a.lua:32:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp4ogdb_5a.lua:32:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq6oozqxj.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpq6oozqxj.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc3r6wwnq.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpc3r6wwnq.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpblsenxo0.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpblsenxo0.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n   \
    \     end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpycgikbo9.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpycgikbo9.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local consonant_count = 0\n  local\
    \ vowel_count = 0\n  local word = ''\n  for i = 1, #s do\n    if s:sub(i, i) ==\
    \ ' ' then\n      if consonant_count == n then\n        words[#words + 1] = word\n\
    \      end\n      consonant_count = 0\n      vowel_count = 0\n      word = ''\n\
    \    else\n      word = word .. s:sub(i, i)\n      for j = 1, #consonants do\n\
    \        if s:sub(i, i) == consonants[j] then\n          consonant_count = consonant_count\
    \ + 1\n        end\n      end\n      for j = 1, #vowels do\n        if s:sub(i,\
    \ i) == vowels[j] then\n          vowel_count = vowel_count + 1\n        end\n\
    \      end\n    end\n  end\n  if consonant_count == n then\n    words[#words +\
    \ 1] = word\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplcw0p9u9.lua:51:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmplcw0p9u9.lua:51: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = \"bcdfghjklmnpqrstvwxyz\"\n  for\
    \ word in s:gmatch(\"%w+\") do\n    local count = 0\n    for letter in word:gmatch(\"\
    %a\") do\n      if consonants:find(letter:lower()) then\n        count = count\
    \ + 1\n      end\n    end\n    if count == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6rqkghlx.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp6rqkghlx.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ count = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n            count\
    \ = count + 1\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ctl2vq2.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp6ctl2vq2.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for c in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local cons =\
    \ 0\n    for char in word:gmatch(\"[^aeiouAEIOU]\") do\n      cons = cons + 1\n\
    \    end\n    if cons == n then\n      table.insert(words, word)\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local t = {}\n    for w in s:gmatch(\"%w+\") do\n        if w:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(t, w)\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0k9vmvj7.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp0k9vmvj7.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2sfupg7i.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp2sfupg7i.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwt9im3va.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpwt9im3va.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp057v5kni.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp057v5kni.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    if s:sub(i, i) ~= \" \" then\n      word = word .. s:sub(i,\
    \ i)\n    else\n      if consonants == n then\n        table.insert(words, word)\n\
    \      end\n      word = \"\"\n      consonants = 0\n    end\n    if s:sub(i,\
    \ i) ~= \"a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i)\
    \ ~= \"o\" and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n      consonants\
    \ = consonants + 1\n    end\n  end\n  if consonants == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1a6tg6vy.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp1a6tg6vy.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt816_rnr.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpt816_rnr.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ count = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n            count\
    \ = count + 1\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8oxlku_4.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp8oxlku_4.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \"\
    \ then\n      if consonants == n then\n        table.insert(words, word)\n   \
    \   end\n      word = \"\"\n      consonants = 0\n      vowels = 0\n    else\n\
    \      word = word .. c\n      if c == \"a\" or c == \"e\" or c == \"i\" or c\
    \ == \"o\" or c == \"u\" then\n        vowels = vowels + 1\n      else\n     \
    \   consonants = consonants + 1\n      end\n    end\n  end\n  if consonants ==\
    \ n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp60j7mo8a.lua:48:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp60j7mo8a.lua:48:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = word:gsub(\"[aeiouAEIOU]\", \"\")\n    if #consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmy3vy9qy.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpmy3vy9qy.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    if s:sub(i, i) ~= \" \" then\n      word = word .. s:sub(i,\
    \ i)\n    else\n      if #word == n then\n        table.insert(words, word)\n\
    \      end\n      word = \"\"\n    end\n  end\n  if #word == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0bpnevm8.lua:35:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp0bpnevm8.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = ''\n  local consonants = 0\n  for i =\
    \ 1, #s do\n    local c = s:sub(i, i)\n    if c == ' ' then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = ''\n \
    \     consonants = 0\n    else\n      word = word .. c\n      if c:match('[^aeiou]')\
    \ then\n        consonants = consonants + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0nbxi2dv.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp0nbxi2dv.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8unj9ql3.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp8unj9ql3.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local\
    \ word = ''\n  local count = 0\n  for i = 1, #s do\n    if s:sub(i, i) == ' '\
    \ then\n      if count == n then\n        table.insert(words, word)\n      end\n\
    \      word = ''\n      count = 0\n    else\n      word = word .. s:sub(i, i)\n\
    \      for j = 1, #consonants do\n        if s:sub(i, i) == consonants[j] then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  if count\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxvncuko6.lua:43:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpxvncuko6.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuroc36d_.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpuroc36d_.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if #word\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4r6gqzce.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp4r6gqzce.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word - word:gsub(\"\
    [aeiou]\", \"\") == n then\n      table.insert(words, word)\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpv91iy2f_.lua:15:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmpv91iy2f_.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpv91iy2f_.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n  \
    \          consonants = consonants + 1\n        end\n        if consonants ==\
    \ n then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n  \
    \          consonants = consonants + 1\n        end\n        if consonants ==\
    \ n then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = \"bcdfghjklmnpqrstvwxyz\"\n  local\
    \ vowels = \"aeiou\"\n  for word in s:gmatch(\"%w+\") do\n    local count = 0\n\
    \    for c in word:gmatch(\".\") do\n      if not vowels:find(c:lower()) then\n\
    \        count = count + 1\n      end\n    end\n    if count == n then\n     \
    \ table.insert(words, word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for char in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for char in word:gmatch(\"[^aeiouAEIOU]\") do\n    \
    \        consonants = consonants + 1\n        end\n        if consonants == n\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiou]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2u5vzg3w.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp2u5vzg3w.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = 0\n  local consonants_list = {\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"}\n  local vowels_list = {\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n  for i = 1, #s do\n    if s:sub(i, i) ~= \" \" then\n      word\
    \ = word .. s:sub(i, i)\n    else\n      for j = 1, #word do\n        for k =\
    \ 1, #consonants_list do\n          if word:sub(j, j) == consonants_list[k] then\n\
    \            consonants = consonants + 1\n          end\n        end\n       \
    \ for k = 1, #vowels_list do\n          if word:sub(j, j) == vowels_list[k] then\n\
    \            vowels = vowels + 1\n          end\n        end\n      end\n    \
    \  if consonants == n then\n        table.insert(words, word)\n      end\n   \
    \   word = \"\"\n      consonants = 0\n      vowels = 0\n    end\n  end\n  for\
    \ j = 1, #word do\n    for k = 1, #consonants_list do\n      if word:sub(j, j)\
    \ == consonants_list[k] then\n        consonants = consonants + 1\n      end\n\
    \    end\n    for k = 1, #vowels_list do\n      if word:sub(j, j) == vowels_list[k]\
    \ then\n        vowels = vowels + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe4xsvyjp.lua:65:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpe4xsvyjp.lua:65: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnw0c0abw.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpnw0c0abw.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = 0\n  local result = {}\n  for i = 1, #s do\n    if s:sub(i, i) ~= \"\
    \ \" then\n      word = word .. s:sub(i, i)\n    else\n      table.insert(words,\
    \ word)\n      word = \"\"\n    end\n  end\n  table.insert(words, word)\n  for\
    \ i = 1, #words do\n    for j = 1, #words[i] do\n      if words[i]:sub(j, j) ==\
    \ \"a\" or words[i]:sub(j, j) == \"e\" or words[i]:sub(j, j) == \"i\" or words[i]:sub(j,\
    \ j) == \"o\" or words[i]:sub(j, j) == \"u\" then\n        vowels = vowels + 1\n\
    \      else\n        consonants = consonants + 1\n      end\n    end\n    if consonants\
    \ == n then\n      table.insert(result, words[i])\n    end\n    consonants = 0\n\
    \    vowels = 0\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp25z_ogjj.lua:51:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp25z_ogjj.lua:51:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = \"bcdfghjklmnpqrstvwxyz\"\n  for\
    \ word in s:gmatch(\"%w+\") do\n    local count = 0\n    for c in word:gmatch(\"\
    [^aeiou]\") do\n      if consonants:find(c) then\n        count = count + 1\n\
    \      end\n    end\n    if count == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphrpekpk7.lua:33:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmphrpekpk7.lua:33: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp394kmgfb.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp394kmgfb.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = \"aeiouAEIOU\"\n  for i = 1, #s do\n    local c = s:sub(i, i)\n   \
    \ if c == \" \" then\n      if consonants == n then\n        table.insert(words,\
    \ word)\n      end\n      word = \"\"\n      consonants = 0\n    else\n      word\
    \ = word .. c\n      if not vowels:find(c) then\n        consonants = consonants\
    \ + 1\n      end\n    end\n  end\n  if consonants == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr9wgiwfo.lua:25:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpr9wgiwfo.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for char in word:gmatch(\"[^aeiouAEIOU]\") do\n    \
    \        consonants = consonants + 1\n        end\n        if consonants == n\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = ''\n    local consonants = 0\n  \
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #s do\n        if\
    \ s:sub(i, i) ~= ' ' then\n            word = word .. s:sub(i, i)\n        else\n\
    \            for j = 1, #word do\n                if not table.contains(vowels,\
    \ word:sub(j, j):lower()) then\n                    consonants = consonants +\
    \ 1\n                end\n            end\n            if consonants == n then\n\
    \                table.insert(words, word)\n            end\n            word\
    \ = ''\n            consonants = 0\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdr842629.lua:22:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdr842629.lua:22:\
    \ in function 'candidate'\\n\\t/tmp/tmpdr842629.lua:39: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = \"bcdfghjklmnpqrstvwxyz\"\n  for\
    \ word in s:gmatch(\"%w+\") do\n    local count = 0\n    for char in word:gmatch(\"\
    .\") do\n      if consonants:find(char:lower()) then\n        count = count +\
    \ 1\n      end\n    end\n    if count == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0w8nc2pz.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp0w8nc2pz.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if not c:match(\"\
    [aeiou]\") then\n        consonants = consonants + 1\n      end\n    end\n  end\n\
    \  if consonants == n then\n    table.insert(words, word)\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsb4fo9_h.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpsb4fo9_h.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    local vowels = \"aeiou\"\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ count = 0\n        for letter in word:gmatch(\"%a\") do\n            if consonants:find(letter:lower())\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    if count == n then\n            table.insert(words, word)\n        end\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for char in word:gmatch(\"[^aeiouAEIOU]\") do\n    \
    \        consonants = consonants + 1\n        end\n        if consonants == n\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n\tlocal words = {}\n\tlocal word = \"\"\n\tlocal consonants = 0\n\tlocal\
    \ vowels = 0\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif c == \" \"\
    \ then\n\t\t\tif consonants == n then\n\t\t\t\ttable.insert(words, word)\n\t\t\
    \tend\n\t\t\tword = \"\"\n\t\t\tconsonants = 0\n\t\t\tvowels = 0\n\t\telse\n\t\
    \t\tword = word .. c\n\t\t\tif c == \"a\" or c == \"e\" or c == \"i\" or c ==\
    \ \"o\" or c == \"u\" then\n\t\t\t\tvowels = vowels + 1\n\t\t\telse\n\t\t\t\t\
    consonants = consonants + 1\n\t\t\tend\n\t\tend\n\tend\n\tif consonants == n then\n\
    \t\ttable.insert(words, word)\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw2zy7pym.lua:48:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpw2zy7pym.lua:48:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi06we7pq.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpi06we7pq.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if #word\
    \ - word:gsub(\"[aeiou]\", \"\") == n then\n            table.insert(words, word)\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptettwupm.lua:15:\
    \ attempt to perform arithmetic on a string value\\nstack traceback:\\n\\t/tmp/tmptettwupm.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmptettwupm.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9xriulmu.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp9xriulmu.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ count = 0\n        for c in word:gmatch(\"[^aeiou]\") do\n            count\
    \ = count + 1\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjfeili9q.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpjfeili9q.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        local\
    \ count = 0\n        for c in word:gmatch(\"[^aeiou]\") do\n            count\
    \ = count + 1\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0d4p8fep.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp0d4p8fep.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplkm2thp7.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmplkm2thp7.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for char in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \"\
    \ then\n      if consonants == n then\n        table.insert(words, word)\n   \
    \   end\n      word = \"\"\n      consonants = 0\n      vowels = 0\n    else\n\
    \      word = word .. c\n      if c == \"a\" or c == \"e\" or c == \"i\" or c\
    \ == \"o\" or c == \"u\" or c == \"y\" then\n        vowels = vowels + 1\n   \
    \   else\n        consonants = consonants + 1\n      end\n    end\n  end\n  if\
    \ consonants == n then\n    table.insert(words, word)\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpshuzaem1.lua:45:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpshuzaem1.lua:45: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    for word in s:gmatch(\"%w+\") do\n        local count = 0\n        for c\
    \ in word:gmatch(\"[^aeiou]\") do\n            if consonants:find(c) then\n  \
    \              count = count + 1\n            end\n        end\n        if count\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6dn9lkea.lua:33:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp6dn9lkea.lua:33: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c ~= \" \" then\n\
    \            word = word .. c\n        else\n            if #word == n then\n\
    \                table.insert(words, word)\n            end\n            word\
    \ = \"\"\n            consonants = 0\n        end\n        if c ~= \"a\" and c\
    \ ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" and c ~= \" \" then\n\
    \            consonants = consonants + 1\n        end\n        if i == #s then\n\
    \            if #word == n then\n                table.insert(words, word)\n \
    \           end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6w4huh3s.lua:42:\
    \ expected: {\"little\"}\\nactual: {\"Mary\", \"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp6w4huh3s.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    local\
    \ count = 0\n    local word = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' then\n            if count == n then\n                table.insert(words,\
    \ word)\n            end\n            count = 0\n            word = ''\n     \
    \   else\n            word = word .. s:sub(i, i)\n            for j = 1, #consonants\
    \ do\n                if s:sub(i, i) == consonants[j] then\n                 \
    \   count = count + 1\n                end\n            end\n        end\n   \
    \ end\n    if count == n then\n        table.insert(words, word)\n    end\n  \
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnasnolys.lua:43:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpnasnolys.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5pj3lb99.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp5pj3lb99.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local count = 0\n    for\
    \ i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n  \
    \          if count == n then\n                table.insert(words, word)\n   \
    \         end\n            word = \"\"\n            count = 0\n        else\n\
    \            word = word .. c\n            if c ~= \"a\" and c ~= \"e\" and c\
    \ ~= \"i\" and c ~= \"o\" and c ~= \"u\" and c ~= \"y\" then\n               \
    \ count = count + 1\n            end\n        end\n    end\n    if count == n\
    \ then\n        table.insert(words, word)\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpash8u21v.lua:41:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpash8u21v.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for letter in word:gmatch(\"[^aeiou]\") do\n       \
    \     consonants = consonants + 1\n        end\n        if consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx3jbpy1p.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpx3jbpy1p.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ count = 0\n        for letter in word:gmatch(\"[^aeiou]\") do\n            count\
    \ = count + 1\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa6dtpr47.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpa6dtpr47.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyrqgibzv.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpyrqgibzv.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    local\
    \ count = 0\n    local word = ''\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if c == ' ' then\n            if count == n then\n             \
    \   table.insert(words, word)\n            end\n            count = 0\n      \
    \      word = ''\n        else\n            word = word .. c\n            for\
    \ j = 1, #consonants do\n                if c == consonants[j] then\n        \
    \            count = count + 1\n                end\n            end\n       \
    \ end\n    end\n    if count == n then\n        table.insert(words, word)\n  \
    \  end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz_1dsu38.lua:44:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpz_1dsu38.lua:44: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6lrumt3.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpd6lrumt3.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphs5ben4i.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmphs5ben4i.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  for\
    \ word in s:gmatch(\"%S+\") do\n    local count = 0\n    for letter in word:gmatch(\"\
    %a\") do\n      for _, v in ipairs(consonants) do\n        if letter == v then\n\
    \          count = count + 1\n        end\n      end\n    end\n    if count ==\
    \ n then\n      table.insert(words, word)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz5hz4xhh.lua:35:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpz5hz4xhh.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm79xrpij.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpm79xrpij.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if #word - word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf0um0edx.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpf0um0edx.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    local c = 0\n \
    \   for l in w:gmatch(\"[^aeiou]\") do\n      c = c + 1\n    end\n    if c ==\
    \ n then\n      table.insert(words, w)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdezsp7bh.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpdezsp7bh.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for char in word:gmatch(\"[^aeiouAEIOU]\") do\n    \
    \        consonants = consonants + 1\n        end\n        if consonants == n\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdmtiwtoc.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpdmtiwtoc.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpye2lskk8.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpye2lskk8.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c ~= \"a\" and\
    \ c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n        consonants\
    \ = consonants + 1\n      end\n    end\n  end\n  if consonants == n then\n   \
    \ table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqnh0vy4r.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpqnh0vy4r.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local res = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ count = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n            count\
    \ = count + 1\n        end\n        if count == n then\n            table.insert(res,\
    \ word)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt74o7yi_.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpt74o7yi_.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local char = s:sub(i, i)\n    if char == \" \" then\n      if\
    \ consonants == n then\n        table.insert(words, word)\n      end\n      word\
    \ = \"\"\n      consonants = 0\n    else\n      word = word .. char\n      if\
    \ not char:match(\"[aeiouAEIOU]\") then\n        consonants = consonants + 1\n\
    \      end\n    end\n  end\n  if consonants == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    if s:sub(i, i) ~= \" \" then\n      word = word .. s:sub(i,\
    \ i)\n    else\n      if consonants == n then\n        table.insert(words, word)\n\
    \      end\n      word = \"\"\n      consonants = 0\n    end\n    if s:sub(i,\
    \ i) ~= \"a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i)\
    \ ~= \"o\" and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n      consonants\
    \ = consonants + 1\n    end\n  end\n  if consonants == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppv3q20_m.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmppv3q20_m.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbb39au24.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpbb39au24.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if not c:match(\"[aeiou]\"\
    ) then\n                consonants = consonants + 1\n            end\n       \
    \ end\n    end\n    if consonants == n then\n        table.insert(words, word)\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcef54c5e.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpcef54c5e.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = 0\n  for i = 1, #s do\n    if s:sub(i, i) == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n      vowels = 0\n    else\n      word = word .. s:sub(i,\
    \ i)\n      if s:sub(i, i) == \"a\" or s:sub(i, i) == \"e\" or s:sub(i, i) ==\
    \ \"i\" or s:sub(i, i) == \"o\" or s:sub(i, i) == \"u\" then\n        vowels =\
    \ vowels + 1\n      else\n        consonants = consonants + 1\n      end\n   \
    \ end\n  end\n  if consonants == n then\n    table.insert(words, word)\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6b_y0wyo.lua:47:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp6b_y0wyo.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    local count\
    \ = 0\n    for c in word:gmatch(\"[^aeiou]\") do\n      count = count + 1\n  \
    \  end\n    if count == n then\n      table.insert(words, word)\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcxfsgitn.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpcxfsgitn.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for letter in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants =\
    \ consonants + 1\n    end\n    if consonants == n then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = \"bcdfghjklmnpqrstvwxyz\"\n  for\
    \ word in s:gmatch(\"%w+\") do\n    local count = 0\n    for letter in word:gmatch(\"\
    %a\") do\n      if consonants:find(letter:lower()) then\n        count = count\
    \ + 1\n      end\n    end\n    if count == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local consonants\
    \ = 0\n    for char in word:gmatch(\"[^aeiouAEIOU]\") do\n      consonants = consonants\
    \ + 1\n    end\n    if consonants == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ consonants = 0\n        for letter in word:gmatch(\"[^aeiou]\") do\n       \
    \     consonants = consonants + 1\n        end\n        if consonants == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7xx7mq7b.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp7xx7mq7b.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c:match(\"[^aeiou]\"\
    ) then\n        consonants = consonants + 1\n      end\n    end\n  end\n  if consonants\
    \ == n then\n    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqywqtbv6.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpqywqtbv6.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    if c == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n    else\n      word = word .. c\n      if c ~= \"a\" and\
    \ c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n        consonants\
    \ = consonants + 1\n      end\n    end\n  end\n  if consonants == n then\n   \
    \ table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu_rjk45o.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpu_rjk45o.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp07f25ai_.lua:29:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp07f25ai_.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local count\
    \ = 0\n    for char in word:gmatch(\"[^aeiou]\") do\n      count = count + 1\n\
    \    end\n    if count == n then\n      table.insert(words, word)\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp75paky3q.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp75paky3q.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  local\
    \ vowels = 0\n  for i = 1, #s do\n    if s:sub(i, i) == \" \" then\n      if consonants\
    \ == n then\n        table.insert(words, word)\n      end\n      word = \"\"\n\
    \      consonants = 0\n      vowels = 0\n    else\n      word = word .. s:sub(i,\
    \ i)\n      if s:sub(i, i) == \"a\" or s:sub(i, i) == \"e\" or s:sub(i, i) ==\
    \ \"i\" or s:sub(i, i) == \"o\" or s:sub(i, i) == \"u\" then\n        vowels =\
    \ vowels + 1\n      else\n        consonants = consonants + 1\n      end\n   \
    \ end\n  end\n  if consonants == n then\n    table.insert(words, word)\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiykg3cvl.lua:47:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpiykg3cvl.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    for\
    \ word in s:gmatch(\"%w+\") do\n        local count = 0\n        for i = 1, #word\
    \ do\n            for j = 1, #consonants do\n                if word:sub(i, i)\
    \ == consonants[j] then\n                    count = count + 1\n             \
    \   end\n            end\n        end\n        if count == n then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4wdlrgcc.lua:35:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmp4wdlrgcc.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local word = \"\"\n  local consonants = 0\n  for i\
    \ = 1, #s do\n    if s:sub(i, i) ~= \" \" then\n      word = word .. s:sub(i,\
    \ i)\n    else\n      if consonants == n then\n        table.insert(words, word)\n\
    \      end\n      word = \"\"\n      consonants = 0\n    end\n    if s:sub(i,\
    \ i) ~= \"a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i)\
    \ ~= \"o\" and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n      consonants\
    \ = consonants + 1\n    end\n  end\n  if consonants == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu38mliv5.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpu38mliv5.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local count = 0\n  local word = \"\"\n  for i = 1,\
    \ #s do\n    if s:sub(i, i) == \" \" then\n      if count == n then\n        table.insert(words,\
    \ word)\n      end\n      word = \"\"\n      count = 0\n    else\n      word =\
    \ word .. s:sub(i, i)\n      if s:sub(i, i) ~= \"a\" and s:sub(i, i) ~= \"e\"\
    \ and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\" and s:sub(i, i) ~= \"u\" then\n\
    \        count = count + 1\n      end\n    end\n  end\n  if count == n then\n\
    \    table.insert(words, word)\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpemo_o16l.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpemo_o16l.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    local vowels = 0\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \      vowels = 0\n        else\n            word = word .. s:sub(i, i)\n    \
    \        if s:sub(i, i) == \"a\" or s:sub(i, i) == \"e\" or s:sub(i, i) == \"\
    i\" or s:sub(i, i) == \"o\" or s:sub(i, i) == \"u\" then\n                vowels\
    \ = vowels + 1\n            else\n                consonants = consonants + 1\n\
    \            end\n        end\n    end\n    if consonants == n then\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfaap4z41.lua:47:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpfaap4z41.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local consonants = {'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local consonant_count = 0\n  local\
    \ vowel_count = 0\n  local current_word = \"\"\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c == \" \" then\n      if consonant_count == n then\n\
    \        table.insert(words, current_word)\n      end\n      consonant_count =\
    \ 0\n      vowel_count = 0\n      current_word = \"\"\n    else\n      current_word\
    \ = current_word .. c\n      for j = 1, #consonants do\n        if c == consonants[j]\
    \ then\n          consonant_count = consonant_count + 1\n        end\n      end\n\
    \      for j = 1, #vowels do\n        if c == vowels[j] then\n          vowel_count\
    \ = vowel_count + 1\n        end\n      end\n    end\n  end\n  if consonant_count\
    \ == n then\n    table.insert(words, current_word)\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfs6u1qwz.lua:52:\
    \ expected: {\"Mary\", \"lamb\"}\\nactual: {\"lamb\"}\\nstack traceback:\\n\\\
    t/tmp/tmpfs6u1qwz.lua:52: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local t = {}\n  local i = 1\n  local j = 1\n  local k = 0\n  local word\
    \ = \"\"\n  while i <= #s do\n    if s:sub(i, i) == \" \" then\n      if k ==\
    \ n then\n        t[j] = word\n        j = j + 1\n      end\n      word = \"\"\
    \n      k = 0\n    else\n      word = word .. s:sub(i, i)\n      if s:sub(i, i)\
    \ ~= \"a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~=\
    \ \"o\" and s:sub(i, i) ~= \"u\" then\n        k = k + 1\n      end\n    end\n\
    \    i = i + 1\n  end\n  if k == n then\n    t[j] = word\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfdo1rchb.lua:47:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpfdo1rchb.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"\
    [^aeiou]\", \"\"):len() == n then\n      table.insert(words, word)\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt7dcrlx9.lua:25:\
    \ expected: {\"little\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpt7dcrlx9.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        local\
    \ count = 0\n        for char in word:gmatch(\"[^aeiou]\") do\n            count\
    \ = count + 1\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ns7w9ok.lua:33:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmp6ns7w9ok.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if consonants == n then\n                table.insert(words, word)\n\
    \            end\n            word = \"\"\n            consonants = 0\n      \
    \  else\n            word = word .. c\n            if c ~= \"a\" and c ~= \"e\"\
    \ and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n                consonants\
    \ = consonants + 1\n            end\n        end\n    end\n    if consonants ==\
    \ n then\n        table.insert(words, word)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg5_aejyt.lua:44:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpg5_aejyt.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local word = \"\"\n    local consonants = 0\n\
    \    for i = 1, #s do\n        if s:sub(i, i) ~= \" \" then\n            word\
    \ = word .. s:sub(i, i)\n        else\n            if consonants == n then\n \
    \               table.insert(words, word)\n            end\n            word =\
    \ \"\"\n            consonants = 0\n        end\n        if s:sub(i, i) ~= \"\
    a\" and s:sub(i, i) ~= \"e\" and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\"\
    \ and s:sub(i, i) ~= \"u\" and s:sub(i, i) ~= \" \" then\n            consonants\
    \ = consonants + 1\n        end\n    end\n    if consonants == n then\n      \
    \  table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj7ik9pmu.lua:43:\
    \ expected: {\"Uncle\"}\\nactual: {}\\nstack traceback:\\n\\t/tmp/tmpj7ik9pmu.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
