name: HumanEval_24_largest_divisor
language: lua
results:
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while d < n do\n        if n % d == 0 then\n           \
    \ return d\n        end\n        d = d + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0w6e5zil.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmp0w6e5zil.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8_ilfwyc.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmp8_ilfwyc.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while d < n do\n        if n % d == 0 then\n           \
    \ return d\n        end\n        d = d + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1bo60faj.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmp1bo60faj.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while divisor > 0 do\n        if n % divisor ==\
    \ 0 then\n            return divisor\n        end\n        divisor = divisor -\
    \ 1\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = math.floor(n / 2)\n    for i = max_divisor, 2, -1 do\n\
    \        if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=n-1,1,-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  for i = 2, n-1 do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsu3geeku.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpsu3geeku.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = math.floor(n/2)\n    while i > 1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n        i = i - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0urjvce1.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmp0urjvce1.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = math.floor(n/2)\n  while i > 1 do\n    if n % i == 0 then\n     \
    \ return i\n    end\n    i = i - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n-1, 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4bpyxwfj.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp4bpyxwfj.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return i\n   \
    \ end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzt18k3sb.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpzt18k3sb.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while d < n do\n    if n % d == 0 then\n      return d\n   \
    \ end\n    d = d + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkptcogt2.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpkptcogt2.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while divisor > 0 do\n        if n % divisor ==\
    \ 0 then\n            return divisor\n        end\n        divisor = divisor -\
    \ 1\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while d < n do\n        if n % d == 0 then\n           \
    \ return d\n        end\n        d = d + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvaymayu1.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpvaymayu1.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return i\n   \
    \ end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp16jwf43q.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmp16jwf43q.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return n / i\n\
    \    end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw0alqbsi.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpw0alqbsi.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 0\n    for i = 1, n do\n        if n % i == 0 then\n    \
    \        largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcox28x55.lua:17:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpcox28x55.lua:17: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8q8qm289.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmp8q8qm289.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeh8e3gt4.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpeh8e3gt4.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7bwxtkmb.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp7bwxtkmb.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 2\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgz5rfaa0.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpgz5rfaa0.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while divisor > 0 do\n        if n % divisor ==\
    \ 0 then\n            return divisor\n        end\n        divisor = divisor -\
    \ 1\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return i\n   \
    \ end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7hwzq4cy.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmp7hwzq4cy.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while divisor > 0 do\n        if n % divisor ==\
    \ 0 then\n            return divisor\n        end\n        divisor = divisor -\
    \ 1\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = math.floor(n / 2)\n    while i > 1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n        i = i - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn_crwzxy.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpn_crwzxy.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = math.floor(n/2)\n    while i > 1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n        i = i - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe9cx5jf8.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpe9cx5jf8.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp79p3jk9j.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp79p3jk9j.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0sa9ov_z.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp0sa9ov_z.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n-1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest_divisor = 1\n  for i = 2, n - 1 do\n    if n % i == 0 then\n\
    \      largest_divisor = i\n    end\n  end\n  return largest_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return n / i\n\
    \    end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal divisor = n - 1\n\twhile n % divisor ~= 0 do\n\t\tdivisor = divisor -\
    \ 1\n\tend\n\treturn divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = n - 1, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\
    end\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpel6lntwp.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpel6lntwp.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return n / i\n\
    \    end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = math.floor(n/2)\n  while i > 1 do\n    if n % i == 0 then\n     \
    \ return i\n    end\n    i = i - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = 2\n  while n % divisor ~= 0 do\n    divisor = divisor + 1\n\
    \  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2zoft_iq.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp2zoft_iq.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while d < n do\n    if n % d == 0 then\n      return d\n   \
    \ end\n    d = d + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3h1_vuif.lua:18:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp3h1_vuif.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return i\n   \
    \ end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkgs1bzci.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpkgs1bzci.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return n / i\n\
    \    end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbr8rtiwk.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpbr8rtiwk.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppbfrpiuu.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmppbfrpiuu.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return n / i\n\
    \    end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 0\n    for i = 1, n do\n        if n % i == 0 then\n    \
    \        largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7qlu9xjb.lua:17:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp7qlu9xjb.lua:17: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n-1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i <= n do\n        if n % i == 0 then\n          \
    \  return n / i\n        end\n        i = i + 1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return n / i\n\
    \    end\n    i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy2nabq_w.lua:18:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpy2nabq_w.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqh6bhrec.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpqh6bhrec.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1k6kdhdj.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp1k6kdhdj.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = math.floor(n/2)\n    while d > 1 do\n        if n % d == 0 then\n\
    \            return d\n        end\n        d = d - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzjfr6dtm.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpzjfr6dtm.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsl8hxqfo.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpsl8hxqfo.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm2x8ps8r.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpm2x8ps8r.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = math.floor(n / 2)\n    while d > 1 do\n        if n % d == 0 then\n\
    \            return d\n        end\n        d = d - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while divisor > 0 do\n        if n % divisor ==\
    \ 0 then\n            return divisor\n        end\n        divisor = divisor -\
    \ 1\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i <= n do\n        if n % i == 0 then\n          \
    \  return n / i\n        end\n        i = i + 1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while divisor > 0 do\n        if n % divisor ==\
    \ 0 then\n            return divisor\n        end\n        divisor = divisor -\
    \ 1\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while divisor > 0 do\n    if n % divisor == 0 then\n\
    \      return divisor\n    end\n    divisor = divisor - 1\n  end\n  return 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = math.floor(n/2)\n    while i > 1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n        i = i - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdgchqj7v.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpdgchqj7v.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return n / i\n\
    \    end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = math.floor(n/2)\n  while i > 1 do\n    if n % i == 0 then\n     \
    \ return i\n    end\n    i = i - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 2, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpilxqlke8.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpilxqlke8.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 2\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwjhwtqif.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpwjhwtqif.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest_divisor = 1\n  for i = 2, n - 1 do\n    if n % i == 0 then\n\
    \      largest_divisor = i\n    end\n  end\n  return largest_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyv6_p7pj.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpyv6_p7pj.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp76rhusj9.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp76rhusj9.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 2\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2d8w8yhu.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp2d8w8yhu.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = n - 1\n  while n % d ~= 0 do\n    d = d - 1\n  end\n  return d\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 2\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5japvexo.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmp5japvexo.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = math.floor(n / 2)\n  while i > 1 do\n    if n % i == 0 then\n   \
    \   return i\n    end\n    i = i - 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = math.floor(n / 2)\n    while d > 1 do\n        if n % d == 0 then\n\
    \            return d\n        end\n        d = d - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmpwtsszs.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpmpwtsszs.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal i = 1\n\twhile i < n do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzcz9f50n.lua:20:\
    \ expected: 5, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzcz9f50n.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0j8y3htc.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmp0j8y3htc.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = math.floor(n/2)\n    while n % d ~= 0 do\n        d = d - 1\n \
    \   end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = 2, n - 1 do\n        if n % i == 0 then\n            return i\n \
    \       end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx2681eyv.lua:18:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpx2681eyv.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while d < n do\n    if n % d == 0 then\n      return d\n   \
    \ end\n    d = d + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxw67enyp.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpxw67enyp.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbl66bdy6.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpbl66bdy6.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpredb01s5.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpredb01s5.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo7_7lraz.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpo7_7lraz.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n-1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tfor i = n-1, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local d = 2\n  while n % d ~= 0 do\n    d = d + 1\n  end\n  return d\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppuwwqbjd.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmppuwwqbjd.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = math.floor(n / 2)\n    while i > 1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n        i = i - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n-1, 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = math.floor(n/2)\n    while d > 1 do\n        if n % d == 0 then\n\
    \            return d\n        end\n        d = d - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = math.floor(n/2)\n    while i > 1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n        i = i - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = 2\n    while i < n do\n        if n % i == 0 then\n           \
    \ return n / i\n        end\n        i = i + 1\n    end\n    return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i < n do\n    if n % i == 0 then\n      return i\n   \
    \ end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbjd51ac4.lua:20:\
    \ expected: 5, actual: 2\\nstack traceback:\\n\\t/tmp/tmpbjd51ac4.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while divisor > 0 do\n    if n % divisor == 0 then\n\
    \      return divisor\n    end\n    divisor = divisor - 1\n  end\n  return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i=math.floor(n/2),1,-1 do\n    if n % i == 0 then\n      return i\n   \
    \ end\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo90bszyd.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpo90bszyd.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = 2\n  while n % divisor ~= 0 do\n    divisor = divisor + 1\n\
    \  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx7atkjy2.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpx7atkjy2.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = n - 1\n    while n % divisor ~= 0 do\n        divisor = divisor\
    \ - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n-1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n-1, 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = math.floor(n/2)\n    while i > 1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n        i = i - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = 2\n  while n % divisor ~= 0 do\n    divisor = divisor + 1\n\
    \  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr7z0kf_0.lua:15:\
    \ expected: 1, actual: 3\\nstack traceback:\\n\\t/tmp/tmpr7z0kf_0.lua:15: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local divisor = n - 1\n  while n % divisor ~= 0 do\n    divisor = divisor -\
    \ 1\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = 2\n  while i <= n do\n    if n % i == 0 then\n      return n / i\n\
    \    end\n    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  for i = n - 1, 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \tlocal divisor = n - 1\n\twhile n % divisor ~= 0 do\n\t\tdivisor = divisor -\
    \ 1\n\tend\n\treturn divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            largest = i\n        end\n    end\n    return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local largest = 1\n    for i = 2, n-1 do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local i = n - 1\n  while i > 0 do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i - 1\n  end\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n       \
    \     return i\n        end\n        i = i - 1\n    end\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
