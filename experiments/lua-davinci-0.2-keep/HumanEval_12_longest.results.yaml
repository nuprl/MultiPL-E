name: HumanEval_12_longest
language: lua
results:
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_length = 0\n  local max_string = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > max_length then\n      max_length = #s\n      max_string = s\n\
    \    end\n  end\n  return max_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_len = 0\n  local max_str = nil\n  for _, str in ipairs(strings) do\n\
    \    if #str > max_len then\n      max_len = #str\n      max_str = str\n    end\n\
    \  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_length = 0\n  local longest_string = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > max_length then\n      max_length = #s\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if s:len() > longest_length then\n      longest_string = s\n      longest_length\
    \ = s:len()\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local max_len = 0\n\
    \    local max_str = nil\n    for _, str in ipairs(strings) do\n        if #str\
    \ > max_len then\n            max_len = #str\n            max_str = str\n    \
    \    end\n    end\n    return max_str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, str\
    \ in ipairs(strings) do\n        if #str > longest_length then\n            longest_string\
    \ = str\n            longest_length = #str\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_length = 0\n  local longest_string = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > max_length then\n      max_length = #s\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, str in ipairs(strings) do\n    if #str > #longest_string then\n    \
    \  longest_string = str\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_len = 0\n  local max_str = nil\n  for _, str in ipairs(strings) do\n\
    \    if str:len() > max_len then\n      max_len = str:len()\n      max_str = str\n\
    \    end\n  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local max_length = 0\n  local\
    \ max_string = nil\n  for _, s in ipairs(strings) do\n    if #s > max_length then\n\
    \      max_length = #s\n      max_string = s\n    end\n  end\n  return max_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_length = 0\n  local longest_string = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > max_length then\n      max_length = #s\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_len = 0\n  local max_str = nil\n  for _, str in ipairs(strings) do\n\
    \    if #str > max_len then\n      max_len = #str\n      max_str = str\n    end\n\
    \  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_len = 0\n  local max_str = nil\n  for _, str in ipairs(strings) do\n\
    \    if #str > max_len then\n      max_len = #str\n      max_str = str\n    end\n\
    \  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local max_length = 0\n  local\
    \ max_length_string = nil\n  for _, s in ipairs(strings) do\n    if #s > max_length\
    \ then\n      max_length = #s\n      max_length_string = s\n    end\n  end\n \
    \ return max_length_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local max_len = 0\n    local max_str = nil\n    for _, str in ipairs(strings)\
    \ do\n        if #str > max_len then\n            max_len = #str\n           \
    \ max_str = str\n        end\n    end\n    return max_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, str in ipairs(strings) do\n    if #str > #longest_string then\n    \
    \  longest_string = str\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, string in ipairs(strings) do\n    if #string > #longest_string then\n\
    \      longest_string = string\n    end\n  end\n  return longest_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local max = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #max then\n            max\
    \ = s\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, str in ipairs(strings) do\n        if #str > #longest then\n     \
    \       longest = str\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local max_len = 0\n    local max_str = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max_len then\n            max_len = #s\n            max_str\
    \ = s\n        end\n    end\n    return max_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_length = 0\n  local max_string = nil\n  for _, str in ipairs(strings)\
    \ do\n    if #str > max_length then\n      max_length = #str\n      max_string\
    \ = str\n    end\n  end\n  return max_string\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local max_len = 0\n    local max_str = nil\n    for _, s in ipairs(strings)\
    \ do\n        if s:len() > max_len then\n            max_len = s:len()\n     \
    \       max_str = s\n        end\n    end\n    return max_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, string in ipairs(strings) do\n    if #string > #longest_string then\n\
    \      longest_string = string\n    end\n  end\n  return longest_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local max_len = 0\n\
    \    local max_str = nil\n    for _, s in ipairs(strings) do\n        if #s >\
    \ max_len then\n            max_len = #s\n            max_str = s\n        end\n\
    \    end\n    return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, str in ipairs(strings) do\n    if #str > #longest_string then\n    \
    \  longest_string = str\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_len = 0\n  local max_str = nil\n  for _, s in ipairs(strings) do\n\
    \    if #s > max_len then\n      max_len = #s\n      max_str = s\n    end\n  end\n\
    \  return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local max_len = 0\n    local max_str = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max_len then\n            max_len = #s\n            max_str\
    \ = s\n        end\n    end\n    return max_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, string in ipairs(strings) do\n    if #string > #longest_string then\n\
    \      longest_string = string\n    end\n  end\n  return longest_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, string in ipairs(strings) do\n    if #string > #longest_string then\n\
    \      longest_string = string\n    end\n  end\n  return longest_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_len = 0\n  local max_str = nil\n  for _, str in ipairs(strings) do\n\
    \    if str:len() > max_len then\n      max_len = str:len()\n      max_str = str\n\
    \    end\n  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if s:len() > longest_length then\n      longest_string = s\n      longest_length\
    \ = s:len()\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, string in\
    \ ipairs(strings) do\n    local length = string.len(string)\n    if length > longest_length\
    \ then\n      longest_length = length\n      longest_string = string\n    end\n\
    \  end\n  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local max_len = 0\n\
    \    local max_str = nil\n    for _, s in ipairs(strings) do\n        if #s >\
    \ max_len then\n            max_len = #s\n            max_str = s\n        end\n\
    \    end\n    return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_len = 0\n  local max_str = nil\n  for _, s in ipairs(strings) do\n\
    \    if #s > max_len then\n      max_len = #s\n      max_str = s\n    end\n  end\n\
    \  return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, string in\
    \ ipairs(strings) do\n    local length = string.len(string)\n    if length > longest_length\
    \ then\n      longest_length = length\n      longest_string = string\n    end\n\
    \  end\n  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_length = 0\n  local longest_string = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > max_length then\n      max_length = #s\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_len = 0\n  local max_str = nil\n  for _, str in ipairs(strings) do\n\
    \    if #str > max_len then\n      max_len = #str\n      max_str = str\n    end\n\
    \  end\n  return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local max_len = 0\n\
    \    local max_str = nil\n    for _, s in ipairs(strings) do\n        if #s >\
    \ max_len then\n            max_len = #s\n            max_str = s\n        end\n\
    \    end\n    return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, string in ipairs(strings) do\n    if #string > #longest_string then\n\
    \      longest_string = string\n    end\n  end\n  return longest_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_str = strings[1]\n\
    \  for _, str in ipairs(strings) do\n    if #str > #longest_str then\n      longest_str\
    \ = str\n    end\n  end\n  return longest_str\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local max_len = 0\n    local max_str = nil\n    for _, str in ipairs(strings)\
    \ do\n        if #str > max_len then\n            max_len = #str\n           \
    \ max_str = str\n        end\n    end\n    return max_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest = nil\n    for _, s in ipairs(strings) do\n        if longest\
    \ == nil or #s > #longest then\n            longest = s\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local max_len = 0\n\
    \    local max_str = nil\n    for _, s in ipairs(strings) do\n        if #s >\
    \ max_len then\n            max_len = #s\n            max_str = s\n        end\n\
    \    end\n    return max_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if #s > longest_length then\n            longest_string\
    \ = s\n            longest_length = #s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_length = 0\n  local max_string = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > max_length then\n      max_length = #s\n      max_string = s\n\
    \    end\n  end\n  return max_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local result = nil\n    for _, s in ipairs(strings) do\n        if not result\
    \ or #s > #result then\n            result = s\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_string_length = 0\n    for\
    \ _, string in ipairs(strings) do\n        if string:len() > longest_string_length\
    \ then\n            longest_string = string\n            longest_string_length\
    \ = string:len()\n        end\n    end\n    return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local max_len = 0\n    local max_str = nil\n    for _, str in ipairs(strings)\
    \ do\n        if #str > max_len then\n            max_len = #str\n           \
    \ max_str = str\n        end\n    end\n    return max_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max = 0\n  local longest = nil\n  for _, s in ipairs(strings) do\n  \
    \  if #s > max then\n      max = #s\n      longest = s\n    end\n  end\n  return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local max_length = 0\n  local max_string = nil\n  for _, s in ipairs(strings)\
    \ do\n    if #s > max_length then\n      max_length = #s\n      max_string = s\n\
    \    end\n  end\n  return max_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, string in ipairs(strings) do\n    if #string > #longest_string then\n\
    \      longest_string = string\n    end\n  end\n  return longest_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_str\
    \ = strings[1]\n    for _, str in ipairs(strings) do\n        if #str > #longest_str\
    \ then\n            longest_str = str\n        end\n    end\n    return longest_str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local max_length = 0\n    local max_string = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > max_length then\n            max_length = #s\n         \
    \   max_string = s\n        end\n    end\n    return max_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_str = nil\n  local longest_len = 0\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest_str =\
    \ str\n      longest_len = len\n    end\n  end\n  return longest_str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest_string then\n      longest_string\
    \ = s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest_string = strings[1]\n\
    \  for _, string in ipairs(strings) do\n    if #string > #longest_string then\n\
    \      longest_string = string\n    end\n  end\n  return longest_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest_string\
    \ then\n            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local max = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #max then\n            max\
    \ = s\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for i = 2, #strings do\n        if #strings[i] > #longest_string\
    \ then\n            longest_string = strings[i]\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #longest then\n         \
    \   longest = s\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local max = 0\n    local longest = nil\n    for _, s in ipairs(strings) do\n\
    \        if #s > max then\n            max = #s\n            longest = s\n   \
    \     end\n    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    local longest_string = nil\n    local longest_length = 0\n    for _, s in\
    \ ipairs(strings) do\n        if s:len() > longest_length then\n            longest_string\
    \ = s\n            longest_length = s:len()\n        end\n    end\n    return\
    \ longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \    if #strings == 0 then\n        return nil\n    end\n    local longest_string\
    \ = strings[1]\n    for _, string in ipairs(strings) do\n        if #string >\
    \ #longest_string then\n            longest_string = string\n        end\n   \
    \ end\n    return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
