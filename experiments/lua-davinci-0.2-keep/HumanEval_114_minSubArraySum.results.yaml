name: HumanEval_114_minSubArraySum
language: lua
results:
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = nums[1]\n  for i = 2, #nums do\n \
    \   curSum = math.min(curSum + nums[i], nums[i])\n    minSum = math.min(minSum,\
    \ curSum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n  \
    \      sum = sum + nums[i]\n        if sum < minSum then\n            minSum =\
    \ sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n   \
    \ if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = nums[1]\n    local sum = nums[1]\n    for i = 2, #nums do\n \
    \       sum = math.min(sum + nums[i], nums[i])\n        min = math.min(min, sum)\n\
    \    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local currentSum = nums[1]\n  for i = 2, #nums do\n\
    \    currentSum = math.min(currentSum + nums[i], nums[i])\n    minSum = math.min(minSum,\
    \ currentSum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n   \
    \ if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n  \
    \      sum = sum + nums[i]\n        if sum < minSum then\n            minSum =\
    \ sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = 0\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if sum < minSum then\n      minSum = sum\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwa4e0xc8.lua:21:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwa4e0xc8.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n   \
    \ if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = 0\n    local sum = 0\n    for i = 1, #nums do\n        sum\
    \ = sum + nums[i]\n        if sum < minSum then\n            minSum = sum\n  \
    \      end\n    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4wksnush.lua:21:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4wksnush.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n   \
    \ if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local cur_sum = 0\n  for i = 1, #nums do\n   \
    \ cur_sum = cur_sum + nums[i]\n    if cur_sum < min_sum then\n      min_sum =\
    \ cur_sum\n    end\n    if cur_sum > 0 then\n      cur_sum = 0\n    end\n  end\n\
    \  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local cur_sum = 0\n  for i = 1, #nums do\n   \
    \ cur_sum = cur_sum + nums[i]\n    if cur_sum < min_sum then\n      min_sum =\
    \ cur_sum\n    end\n    if cur_sum > 0 then\n      cur_sum = 0\n    end\n  end\n\
    \  return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n   \
    \ if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n  \
    \      sum = sum + nums[i]\n        if sum < minSum then\n            minSum =\
    \ sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n \
    \       sum = sum + nums[i]\n        if sum < min_sum then\n            min_sum\
    \ = sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = nums[1]\n  for i = 2, #nums do\n \
    \   curSum = math.min(curSum + nums[i], nums[i])\n    minSum = math.min(minSum,\
    \ curSum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n  \
    \      sum = sum + nums[i]\n        if sum < minSum then\n            minSum =\
    \ sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n       \
    \ sum = sum + nums[i]\n        if sum < min then\n            min = sum\n    \
    \    end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n   \
    \ if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n       \
    \ sum = sum + nums[i]\n        if sum < min then\n            min = sum\n    \
    \    end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}),\
    \ 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local curSum = nums[1]\n  for i = 2, #nums do\n \
    \   curSum = math.min(curSum + nums[i], nums[i])\n    minSum = math.min(minSum,\
    \ curSum)\n  end\n  return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n  \
    \      sum = sum + nums[i]\n        if sum < minSum then\n            minSum =\
    \ sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    if sum\
    \ > 0 then\n      sum = nums[i]\n    else\n      sum = sum + nums[i]\n    end\n\
    \    if sum < min then\n      min = sum\n    end\n  end\n  return min\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local min_sum = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n   \
    \     sum = sum + nums[i]\n        if sum < min_sum then\n            min_sum\
    \ = sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return min_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n   \
    \ if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = math.min(sum + nums[i], nums[i])\n    min = math.min(min, sum)\n  end\n  return\
    \ min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n  \
    \  lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n    \
    \    sum = sum + nums[i]\n        if sum < minSum then\n            minSum = sum\n\
    \        end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
    \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n \
    \   lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
    \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}),\
    \ -6)\n    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
    \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
    \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if\
    \ sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = minSubArraySum\n    lu.assertEquals(candidate({2,\
    \ 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n-- of nums.\n-- Example\n-- minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n-- minSubArraySum([-1, -2, -3]) == -6\nlocal function minSubArraySum(nums)\n\
    \    local minSum = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n    \
    \    sum = sum + nums[i]\n        if sum < minSum then\n            minSum = sum\n\
    \        end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return minSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = minSubArraySum\n    lu.assertEquals(candidate({2, 3, 4, 1, 2,\
    \ 4}), 1)\n    lu.assertEquals(candidate({-1, -2, -3}), -6)\n    lu.assertEquals(candidate({-1,\
    \ -2, -3, 2, -10}), -14)\n    lu.assertEquals(candidate({-9999999999999999}),\
    \ -9999999999999999)\n    lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)\n\
    \    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({100,\
    \ -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10, 11, 13, 8, 3,\
    \ 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)\n  \
    \  lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
    \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
