name: HumanEval_91_is_bored
language: lua
results:
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        local c = S:sub(i, i)\n      \
    \  if c == 'I' then\n            boredoms = boredoms + 1\n        end\n      \
    \  if c == '.' or c == '?' or c == '!' then\n            i = i + 1\n        end\n\
    \        i = i + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7xinz2bt.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7xinz2bt.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n       \
    \     boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy595fnow.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpy595fnow.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvijrt0ta.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvijrt0ta.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^.?!]+\") do\n        if sentence:match(\"^I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuci6h9ge.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuci6h9ge.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        local c = S:sub(i, i)\n      \
    \  if c == 'I' then\n            boredoms = boredoms + 1\n        end\n      \
    \  if c == '.' or c == '?' or c == '!' then\n            i = i + 1\n        end\n\
    \        i = i + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsg83s2c9.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsg83s2c9.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%w+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppzk872j1.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppzk872j1.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^.!?]+\") do\n        if sentence:match(\"^%s*I%s\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for sentence in string.gmatch(S, \"[^.?!]+\") do\n        if string.match(sentence,\
    \ \"^%s*I\") then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuzzqocl0.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuzzqocl0.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%w+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjucqutd2.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjucqutd2.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3gjejvi8.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3gjejvi8.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ s in S:gmatch(\"[^%.!?]+\") do\n    if s:match(\"^%s*I%s+\") then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzo9bqokp.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzo9bqokp.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for i in string.gmatch(S, \"%a+\") do\n        if i == \"I\" then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvfsfikf.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbvfsfikf.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in string.gmatch(S, \"%a+\") do\n    if word == \"I\" then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp68t_vzy6.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp68t_vzy6.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"[^%s]+\") do\n    if word:match(\"^I\") then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwzxtqcxz.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwzxtqcxz.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _, word in ipairs(S:split(\"[.?!]\")) do\n        if word:match(\"^%s*I\"\
    ) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp93tb51jq.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp93tb51jq.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm6p92_25.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpm6p92_25.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        if S:sub(i, i) == 'I' then\n \
    \           boredoms = boredoms + 1\n        end\n        if S:sub(i, i) == '.'\
    \ or S:sub(i, i) == '?' or S:sub(i, i) == '!' then\n            i = i + 1\n  \
    \      end\n        i = i + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpri7ba1rm.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpri7ba1rm.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        local j = i\n        while j <=\
    \ #S and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n\
    \            j = j + 1\n        end\n        local sentence = S:sub(i, j - 1)\n\
    \        if sentence:sub(1, 1) == 'I' then\n            boredoms = boredoms +\
    \ 1\n        end\n        i = j + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4e8k0zog.lua:30:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4e8k0zog.lua:30: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _, word in ipairs(S:split(\"[.?!]\")) do\n        if word:match(\"^%s*I\"\
    ) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9m9k4cod.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9m9k4cod.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local i = 1\n    while i <= #S do\n        local j = i\n        while j <= #S\
    \ and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n  \
    \          j = j + 1\n        end\n        local sentence = S:sub(i, j)\n    \
    \    if sentence:sub(1, 1) == 'I' then\n            count = count + 1\n      \
    \  end\n        i = j + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7__w31rg.lua:30:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7__w31rg.lua:30: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz6z68y4o.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpz6z68y4o.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for _, word in ipairs(S:split(\"%s\")) do\n        if word == \"I\" then\n\
    \            boredoms = boredoms + 1\n        end\n    end\n    return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvudwh9j.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbvudwh9j.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%w+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmrqog4o3.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmrqog4o3.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^.!?]+\") do\n    if sentence:match(\"^I\") then\n \
    \     boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6nt908mc.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6nt908mc.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local words = string.split(S, \" \")\n    for i, word in ipairs(words) do\n\
    \        if word == \"I\" then\n            boredoms = boredoms + 1\n        end\n\
    \    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9o34zm2.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_9o34zm2.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuej0xpie.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuej0xpie.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local i = 1\n    while i <= #S do\n        local c = S:sub(i, i)\n        if\
    \ c == 'I' then\n            count = count + 1\n        end\n        if c == '.'\
    \ or c == '?' or c == '!' then\n            i = i + 1\n        end\n        i\
    \ = i + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxhj2l68o.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxhj2l68o.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, word in ipairs(string.split(S, \"[.?!]\")) do\n    if string.match(word,\
    \ \"^%s*I%s+\") then\n      boredoms = boredoms + 1\n    end\n  end\n  return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaw47n5gj.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpaw47n5gj.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ s in S:gmatch(\"[^%.!?]+\") do\n    if s:match(\"^I\") then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps2r00638.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps2r00638.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local i = 1\n    while i <= #S do\n        local j = i\n        while j <= #S\
    \ and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n  \
    \          j = j + 1\n        end\n        if S:sub(i, i + 1) == 'I ' then\n \
    \           count = count + 1\n        end\n        i = j + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpotdwf54v.lua:32:\
    \ expected: 2, actual: 1\\nstack traceback:\\n\\t/tmp/tmpotdwf54v.lua:32: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _, word in ipairs(S:split(\"%s\")) do\n        if word == \"I\" then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp612mu0t4.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp612mu0t4.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphr_a7sks.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphr_a7sks.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ sentence in string.gmatch(S, \"[^.?!]+\") do\n    if string.match(sentence,\
    \ \"^%s*I\") then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplaslfjxl.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmplaslfjxl.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:sub(1, 2)\
    \ == \"I \" then\n            boredoms = boredoms + 1\n        end\n    end\n\
    \    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3a_wwq2j.lua:26:\
    \ expected: 2, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3a_wwq2j.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%w+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpezt0reg7.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpezt0reg7.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        local c = S:sub(i, i)\n      \
    \  if c == 'I' then\n            boredoms = boredoms + 1\n        end\n      \
    \  i = i + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl7h72bx_.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpl7h72bx_.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaucwb2z6.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpaucwb2z6.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5teksi3r.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5teksi3r.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n\
    \            boredoms = boredoms + 1\n        end\n    end\n    return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_azikc43.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_azikc43.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%?%.!]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmputlwnh0c.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmputlwnh0c.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        local j = i\n        while j <=\
    \ #S and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n\
    \            j = j + 1\n        end\n        local sentence = S:sub(i, j)\n  \
    \      if sentence:sub(1, 2) == 'I ' then\n            boredoms = boredoms + 1\n\
    \        end\n        i = j + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxflcbcof.lua:33:\
    \ expected: 2, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxflcbcof.lua:33: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp32qj0k64.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp32qj0k64.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcpfb4a0_.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpcpfb4a0_.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _, word in ipairs(S:split(\"[.?!]\")) do\n        if word:match(\"^%s*I\"\
    ) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy0aevie3.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpy0aevie3.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ _, sentence in ipairs(string.split(S, \"[.?!]\")) do\n    if string.starts(sentence,\
    \ \"I\") then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaeb_bwr4.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpaeb_bwr4.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp09txno6x.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp09txno6x.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        local j = i\n        while j <=\
    \ #S and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n\
    \            j = j + 1\n        end\n        local sentence = S:sub(i, j - 1)\n\
    \        if sentence:sub(1, 1) == 'I' then\n            boredoms = boredoms +\
    \ 1\n        end\n        i = j + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgjto8tno.lua:30:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgjto8tno.lua:30: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local\
    \ i = 1\n  while i <= #S do\n    local c = S:sub(i, i)\n    if c == 'I' then\n\
    \      boredoms = boredoms + 1\n    end\n    if c == '.' or c == '?' or c == '!'\
    \ then\n      i = i + 1\n    end\n    i = i + 1\n  end\n  return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpktntq8bp.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpktntq8bp.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu46ufydv.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu46ufydv.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _, word in ipairs(string.split(S, \"[.?!]\")) do\n        if string.sub(word,\
    \ 1, 1) == \"I\" then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0u8k_ogq.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0u8k_ogq.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqqxbw5rr.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqqxbw5rr.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsip1rhsv.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsip1rhsv.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in string.gmatch(S, \"%w+\") do\n    if word == \"I\" then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj335ifsi.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj335ifsi.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"[^%s]+\") do\n        if word:match(\"^I\") then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8_atisfe.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8_atisfe.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpps9xku2g.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpps9xku2g.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        local c = S:sub(i, i)\n      \
    \  if c == 'I' then\n            boredoms = boredoms + 1\n        end\n      \
    \  if c == '.' or c == '?' or c == '!' then\n            i = i + 1\n        end\n\
    \        i = i + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpig50zizd.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpig50zizd.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpas25i8lq.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpas25i8lq.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp00fj4g2l.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp00fj4g2l.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for w in S:gmatch(\"[^%s]+\") do\n        if w:match(\"^I\") then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphe30ilf7.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphe30ilf7.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I%s+\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnpc7x49p.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnpc7x49p.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, sentence in ipairs(string.split(S, \"[.?!]\")) do\n    if sentence:match(\"\
    ^%s*I\") then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgzyf36q2.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgzyf36q2.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx7f816yo.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpx7f816yo.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuskdv_n_.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuskdv_n_.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjhj5iuec.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjhj5iuec.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for _, sentence in ipairs(S:split(\"[.?!]\")) do\n        if sentence:match(\"\
    ^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n   \
    \ return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpffu4_gd7.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpffu4_gd7.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppee8655b.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppee8655b.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8c6bjn6p.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8c6bjn6p.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbm2slhbw.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbm2slhbw.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq1nrb1xx.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpq1nrb1xx.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local sentences = split(S, \"[.?!]\")\n    for _, sentence in ipairs(sentences)\
    \ do\n        if string.sub(sentence, 1, 2) == \"I \" then\n            boredoms\
    \ = boredoms + 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqlton7us.lua:11:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqlton7us.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt7i1n47j.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt7i1n47j.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in string.gmatch(S, \"[^.?!]+\") do\n        if string.match(sentence,\
    \ \"^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n\
    \    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpewrubspv.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpewrubspv.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppo0k21mo.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppo0k21mo.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmkyehut_.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmkyehut_.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3f_jsrzf.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3f_jsrzf.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, word in ipairs(string.split(S, \"[.?!]\")) do\n    if string.match(word,\
    \ \"^%s*I%s\") then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplvemgzls.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplvemgzls.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local i = 1\n    while i <= #S do\n        local j = i\n        while j <= #S\
    \ and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n  \
    \          j = j + 1\n        end\n        local sentence = S:sub(i, j - 1)\n\
    \        if sentence:sub(1, 1) == 'I' then\n            count = count + 1\n  \
    \      end\n        i = j + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuux05ptd.lua:30:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuux05ptd.lua:30: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfeq_kyxo.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfeq_kyxo.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppcmy1ub9.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppcmy1ub9.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%w+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps8r_umlm.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps8r_umlm.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyvaups9f.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyvaups9f.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnf10vdhp.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnf10vdhp.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^.!?]+\") do\n        if sentence:sub(1, 2) ==\
    \ \"I \" then\n            boredoms = boredoms + 1\n        end\n    end\n   \
    \ return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp12t1l1dp.lua:26:\
    \ expected: 2, actual: 1\\nstack traceback:\\n\\t/tmp/tmp12t1l1dp.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuzpyc6ys.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuzpyc6ys.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in string.gmatch(S, \"[^%.!?]+\") do\n        if string.match(sentence,\
    \ \"^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n\
    \    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsx88qb4e.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsx88qb4e.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in string.gmatch(S, \"[^.!?]+\") do\n        if string.match(sentence,\
    \ \"^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n\
    \    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1xrrjan1.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1xrrjan1.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa_88gono.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpa_88gono.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.?!]+\") do\n        if sentence:sub(1, 2)\
    \ == \"I \" then\n            boredoms = boredoms + 1\n        end\n    end\n\
    \    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0d74po18.lua:26:\
    \ expected: 2, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0d74po18.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpib7npi2m.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpib7npi2m.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqspcn7pk.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqspcn7pk.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6fj10p3_.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6fj10p3_.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, word in ipairs(string.split(S, \" \")) do\n    if word == \"I\" then\n  \
    \    boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp8_0znai.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpp8_0znai.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.?!]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl5k_vxbj.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpl5k_vxbj.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local n = 0\n    for\
    \ s in S:gmatch(\"[^%.!?]+\") do\n        if s:match(\"^%s*I\") then\n       \
    \     n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqp930fdd.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqp930fdd.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n       \
    \     boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsgea0ktt.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsgea0ktt.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local start = 1\n    while true do\n        local i = string.find(S, \"I\",\
    \ start)\n        if i == nil then\n            break\n        end\n        local\
    \ j = string.find(S, \"[.?!]\", i)\n        if j == nil then\n            break\n\
    \        end\n        count = count + 1\n        start = j + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp661g0bc6.lua:31:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp661g0bc6.lua:31: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local i = 1\n    while i <= #S do\n        local j = i\n        while j <= #S\
    \ and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n  \
    \          j = j + 1\n        end\n        local sentence = S:sub(i, j - 1)\n\
    \        if sentence:sub(1, 1) == 'I' then\n            count = count + 1\n  \
    \      end\n        i = j + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6womw9j3.lua:30:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6womw9j3.lua:30: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp24jt4ti2.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp24jt4ti2.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk6cpkr4l.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpk6cpkr4l.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprrlllzay.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprrlllzay.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvwza02iu.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvwza02iu.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfoyb3i1q.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfoyb3i1q.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local\
    \ i = 1\n  while i <= #S do\n    if S:sub(i, i) == 'I' then\n      boredoms =\
    \ boredoms + 1\n      while i <= #S and S:sub(i, i) ~= '.' and S:sub(i, i) ~=\
    \ '?' and S:sub(i, i) ~= '!' do\n        i = i + 1\n      end\n    end\n    i\
    \ = i + 1\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvk81ahtj.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpvk81ahtj.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local i = 1\n    while i <= #S do\n        local c = S:sub(i, i)\n      \
    \  if c == 'I' then\n            boredoms = boredoms + 1\n        end\n      \
    \  if c == '.' or c == '?' or c == '!' then\n            i = i + 1\n        end\n\
    \        i = i + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7bbkdo8k.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7bbkdo8k.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ s in string.gmatch(S, \"[^%.!?]+\") do\n    if string.match(s, \"^%s*I\") then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk_omcrmv.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpk_omcrmv.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"%S+\") do\n    if w == \"I\" then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ej9p9ab.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_ej9p9ab.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n\
    \            boredoms = boredoms + 1\n        end\n    end\n    return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9j_jqrki.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9j_jqrki.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in string.gmatch(S, \"[^%.!?]+\") do\n        if string.match(sentence,\
    \ \"^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n\
    \    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpra78offb.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpra78offb.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local\
    \ sentences = split(S, \"[.?!]\")\n  for _, sentence in ipairs(sentences) do\n\
    \    if sentence:match(\"^%s*I\") then\n      boredoms = boredoms + 1\n    end\n\
    \  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuud2kf13.lua:11:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuud2kf13.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"[^%s]+\") do\n    if w:match(\"^I\") then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsp8glu85.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpsp8glu85.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%w+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnumahp1p.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnumahp1p.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, word in ipairs(S:split(\"[.?!]\")) do\n    if word:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa6rmjp89.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa6rmjp89.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps7wsmg57.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps7wsmg57.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%w+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppiu49c1z.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppiu49c1z.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local n = 0\n    local\
    \ i = 1\n    while i <= #S do\n        local c = S:sub(i, i)\n        if c ==\
    \ 'I' then\n            n = n + 1\n        end\n        if c == '.' or c == '?'\
    \ or c == '!' then\n            i = i + 1\n        end\n        i = i + 1\n  \
    \  end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxolwhpy4.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxolwhpy4.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp59ssbr0u.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp59ssbr0u.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv6vwk5sn.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpv6vwk5sn.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5fbs4zmr.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5fbs4zmr.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt_eklrnu.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpt_eklrnu.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ol8_ohp.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8ol8_ohp.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5g0s957a.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5g0s957a.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ s in S:gmatch(\"[^%.!?]+\") do\n    if s:match(\"^%s*I%s\") then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _, sentence in ipairs(string.split(S, \"[.?!]\")) do\n        if string.sub(sentence,\
    \ 1, 1) == \"I\" then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi9sah7f_.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpi9sah7f_.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpknfd2k_g.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpknfd2k_g.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local sentences = split(S, '%p')\n    for _, sentence in ipairs(sentences)\
    \ do\n        if sentence:match('^I') then\n            boredoms = boredoms +\
    \ 1\n        end\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa23iwis8.lua:11:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa23iwis8.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4gljrd5e.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4gljrd5e.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqsi9uzpq.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqsi9uzpq.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  local\
    \ i = 1\n  while i <= #S do\n    local c = S:sub(i, i)\n    if c == 'I' then\n\
    \      count = count + 1\n    end\n    if c == '.' or c == '?' or c == '!' then\n\
    \      i = i + 1\n    end\n    i = i + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps1xsm69i.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps1xsm69i.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_stv_57f.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_stv_57f.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  local\
    \ i = 1\n  while i <= #S do\n    local c = S:sub(i, i)\n    if c == 'I' then\n\
    \      boredoms = boredoms + 1\n    end\n    if c == '.' or c == '?' or c == '!'\
    \ then\n      i = i + 1\n    end\n    i = i + 1\n  end\n  return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmzg2u6i8.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmzg2u6i8.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local i = 1\n    while i <= #S do\n        local j = i\n        while j <= #S\
    \ and S:sub(j, j) ~= '.' and S:sub(j, j) ~= '?' and S:sub(j, j) ~= '!' do\n  \
    \          j = j + 1\n        end\n        local sentence = S:sub(i, j - 1)\n\
    \        if sentence:sub(1, 1) == 'I' then\n            count = count + 1\n  \
    \      end\n        i = j + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_mo6e9aw.lua:30:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp_mo6e9aw.lua:30: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for _, sentence in ipairs(S:split(\"[.?!]\")) do\n        if sentence:match(\"\
    ^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n   \
    \ return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ce5slah.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_ce5slah.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in string.gmatch(S, \"[^%.!?]+\") do\n        if string.match(sentence,\
    \ \"^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n\
    \    return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplwsdmljq.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmplwsdmljq.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^.!?]+\") do\n        if sentence:match(\"^%s*I%s+\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for w in S:gmatch(\"%w+\") do\n        if w == \"I\" then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_36mmw5.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps_36mmw5.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%S+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoka9fcuh.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpoka9fcuh.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphvh_di34.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphvh_di34.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in S:gmatch(\"%S+\") do\n    if w == \"I\" then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0q2xo985.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0q2xo985.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyaakuv2r.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyaakuv2r.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ local i = 1\n    while i <= #S do\n        local c = S:sub(i, i)\n        if\
    \ c == '.' or c == '?' or c == '!' then\n            i = i + 1\n            local\
    \ w = S:sub(i, i)\n            if w == 'I' then\n                count = count\
    \ + 1\n            end\n        end\n        i = i + 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppbo78brn.lua:31:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmppbo78brn.lua:31: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in string.gmatch(S, \"%w+\") do\n    if word == \"I\" then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzeihzpbh.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpzeihzpbh.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.?!]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9cixsxqh.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9cixsxqh.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^.!?]+\") do\n    if sentence:match(\"^%s*I%s+\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf_t4r5k5.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpf_t4r5k5.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, word in ipairs(S:split(\"[.?!]\")) do\n    if word:match(\"^%s*I%s+\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp1x_7g2i.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpp1x_7g2i.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdct76hm3.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdct76hm3.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpei1zrmny.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpei1zrmny.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, word in ipairs(S:split(\"[%.?!]\")) do\n    if word:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpapj5f3bh.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpapj5f3bh.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^.!?]+\") do\n    if sentence:match(\"^I\") then\n \
    \     boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxw9ejliw.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxw9ejliw.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptdsovm12.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmptdsovm12.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%a+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpofko4q25.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpofko4q25.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3homcypr.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp3homcypr.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg_7x8kf6.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpg_7x8kf6.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqqbjj65h.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpqqbjj65h.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ w in string.gmatch(S, \"%a+\") do\n    if w == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl4fd6ohi.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpl4fd6ohi.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7uftshk1.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp7uftshk1.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ozx4wx7.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8ozx4wx7.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, word in ipairs(string.split(S, \"[.?!]\")) do\n    if string.starts(word,\
    \ \"I\") then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz_mka24r.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpz_mka24r.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2koyx_s2.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2koyx_s2.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ _, sentence in ipairs(S:split(\".?!\")) do\n    if sentence:match(\"^%s*I\"\
    ) then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplmero0gk.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplmero0gk.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdjbd01uy.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpdjbd01uy.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^.!?]+\") do\n    if sentence:match(\"^I\") then\n \
    \     boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk3xkwh2a.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpk3xkwh2a.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in string.gmatch(S, \"[^.!?]+\") do\n    if string.match(sentence,\
    \ \"^%s*I\") then\n      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp57m4s8n3.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp57m4s8n3.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8x0abo84.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp8x0abo84.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl6hei6kv.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpl6hei6kv.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjz7n5d8w.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjz7n5d8w.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2ftw8k9n.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2ftw8k9n.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxyo29j0z.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpxyo29j0z.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local start = 1\n    local delimiters = {'.', '?', '!'}\n    while start\
    \ <= #S do\n        local finish = start\n        for _, delimiter in ipairs(delimiters)\
    \ do\n            local index = S:find(delimiter, start)\n            if index\
    \ and index < finish then\n                finish = index\n            end\n \
    \       end\n        local sentence = S:sub(start, finish)\n        if sentence:find('^I')\
    \ then\n            boredoms = boredoms + 1\n        end\n        start = finish\
    \ + 1\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpajzlf2oq.lua:34:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpajzlf2oq.lua:34: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in string.gmatch(S, \"%w+\") do\n    if word == \"I\" then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpensrtyyz.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpensrtyyz.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local n = 0\n    for\
    \ _, sentence in ipairs(S:split('.?!')) do\n        if sentence:match('^%s*I')\
    \ then\n            n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5zz2mey0.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp5zz2mey0.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in string.gmatch(S, \"%w+\") do\n    if word == \"I\" then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp67747udu.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp67747udu.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyyndpym8.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyyndpym8.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps__vveo0.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmps__vveo0.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0__t22vc.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0__t22vc.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ s in string.gmatch(S, \"[^.?!]+\") do\n    if string.match(s, \"^I\") then\n\
    \      boredoms = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfaro8w47.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfaro8w47.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for s in S:gmatch(\"[^%.!?]+\") do\n        if s:match(\"^%s*I\") then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp23_rtdah.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp23_rtdah.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for _, sentence in ipairs(S:split(\".?!\")) do\n        if sentence:match(\"\
    ^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n   \
    \ return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7fggcbq6.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7fggcbq6.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for _, word in ipairs(S:split()) do\n        if word == \"I\" then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp30iry1pj.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp30iry1pj.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    local start = 1\n    local _, end_pos = string.find(S, \"[.?!]\", start)\n\
    \    while end_pos do\n        local sentence = string.sub(S, start, end_pos)\n\
    \        if string.find(sentence, \"^%s*I\") then\n            boredoms = boredoms\
    \ + 1\n        end\n        start = end_pos + 1\n        _, end_pos = string.find(S,\
    \ \"[.?!]\", start)\n    end\n    return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4jcxg5ia.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp4jcxg5ia.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1sbhrlu3.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1sbhrlu3.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprujkr7zz.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprujkr7zz.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"[^%s]+\") do\n        if word:match(\"^I\") then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuhspisno.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpuhspisno.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for _, sentence in ipairs(S:split(\".?!\")) do\n        if sentence:match(\"\
    ^%s*I\") then\n            boredoms = boredoms + 1\n        end\n    end\n   \
    \ return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbecq7exm.lua:11:\
    \ attempt to call method 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbecq7exm.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ word in S:gmatch(\"%S+\") do\n    if word == \"I\" then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwgxb4t1e.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpwgxb4t1e.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ sentence in string.gmatch(S, \"[^.!?]+\") do\n    local first_word = string.match(sentence,\
    \ \"%a+\")\n    if first_word == \"I\" then\n      boredoms = boredoms + 1\n \
    \   end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n\
    \    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ s in S:gmatch(\"[^.!?]+\") do\n    if s:match(\"^I\") then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9o6ehy6w.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp9o6ehy6w.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ _, s in ipairs(string.split(S, \"[.?!]\")) do\n    if string.match(s, \"^%s*I\"\
    ) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplrd5oa5d.lua:11:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplrd5oa5d.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^.!?]+\") do\n        if sentence:match(\"^%s*I%s\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6tfs7mso.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6tfs7mso.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpslun7ez8.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpslun7ez8.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1wcn3dnw.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp1wcn3dnw.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpna4zlcgl.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpna4zlcgl.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.!?]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprhzsb7ic.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmprhzsb7ic.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for sentence in S:gmatch(\"[^%.?!]+\") do\n        if sentence:match(\"^%s*I\"\
    ) then\n            boredoms = boredoms + 1\n        end\n    end\n    return\
    \ boredoms\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_bored\n    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2w33ni2g.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2w33ni2g.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in string.gmatch(S, \"%w+\") do\n        if word == \"I\" then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmomf7trj.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmomf7trj.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local count = 0\n   \
    \ for word in S:gmatch(\"%w+\") do\n        if word == \"I\" then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyt3idsqb.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpyt3idsqb.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local count = 0\n  for\
    \ sentence in S:gmatch(\"[^%.!?]+\") do\n    if sentence:match(\"^%s*I\") then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmgxl8pmq.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpmgxl8pmq.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
