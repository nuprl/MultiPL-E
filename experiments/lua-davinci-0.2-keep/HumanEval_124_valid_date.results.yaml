name: HumanEval_124_valid_date
language: lua
results:
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa92gav8i.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpa92gav8i.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month == nil or day == nil or year == nil\
    \ then\n        return false\n    end\n    month = tonumber(month)\n    day =\
    \ tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if day > 29 then\n         \
    \   return false\n        end\n    elseif month == 4 or month == 6 or month ==\
    \ 9 or month == 11 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n\tif date == nil or date == '' then\n\
    \t\treturn false\n\tend\n\tlocal date_table = {}\n\tfor v in string.gmatch(date,\
    \ \"%d+\") do\n\t\ttable.insert(date_table, v)\n\tend\n\tif #date_table ~= 3 then\n\
    \t\treturn false\n\tend\n\tlocal month = tonumber(date_table[1])\n\tlocal day\
    \ = tonumber(date_table[2])\n\tlocal year = tonumber(date_table[3])\n\tif month\
    \ < 1 or month > 12 then\n\t\treturn false\n\tend\n\tif month == 2 then\n\t\t\
    if day < 1 or day > 29 then\n\t\t\treturn false\n\t\tend\n\telseif month == 4\
    \ or month == 6 or month == 9 or month == 11 then\n\t\tif day < 1 or day > 30\
    \ then\n\t\t\treturn false\n\t\tend\n\telse\n\t\tif day < 1 or day > 31 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ date_table = {}\n    local date_table = split(date, \"-\")\n    local month\
    \ = tonumber(date_table[1])\n    local day = tonumber(date_table[2])\n    local\
    \ year = tonumber(date_table[3])\n    if month == nil or day == nil or year ==\
    \ nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if month == 2 then\n        if day < 1 or\
    \ day > 29 then\n            return false\n        end\n    elseif month == 4\
    \ or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day >\
    \ 30 then\n            return false\n        end\n    else\n        if day < 1\
    \ or day > 31 then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp076zph3b.lua:17:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp076zph3b.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp076zph3b.lua:46: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\n\
    \    return false\n  end\n  local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n\
    \  if month == nil or day == nil or year == nil then\n    return false\n  end\n\
    \  month = tonumber(month)\n  day = tonumber(day)\n  year = tonumber(year)\n \
    \ if month < 1 or month > 12 then\n    return false\n  end\n  if month == 2 then\n\
    \    if day < 1 or day > 29 then\n      return false\n    end\n  elseif month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n    if day < 1 or day\
    \ > 30 then\n      return false\n    end\n  else\n    if day < 1 or day > 31 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \    if month == nil or day == nil or year == nil then\n        return false\n\
    \    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n\
    \    if month < 1 or month > 12 then\n        return false\n    end\n    if day\
    \ < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n\
    \        if day > 29 then\n            return false\n        end\n    elseif month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n        if day > 30 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppowckvzx.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmppowckvzx.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 1 or month == 3 or month == 5 or\
    \ month == 7 or month == 8 or month == 10 or month == 12 then\n    if day < 1\
    \ or day > 31 then\n      return false\n    end\n  elseif month == 4 or month\
    \ == 6 or month == 9 or month == 11 then\n    if day < 1 or day > 30 then\n  \
    \    return false\n    end\n  elseif month == 2 then\n    if day < 1 or day >\
    \ 29 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = string.match(date, \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or\
    \ day == nil or year == nil then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 2 then\n    if day < 1 or day >\
    \ 29 then\n      return false\n    end\n  elseif month == 4 or month == 6 or month\
    \ == 9 or month == 11 then\n    if day < 1 or day > 30 then\n      return false\n\
    \    end\n  else\n    if day < 1 or day > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfu6d9bkl.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpfu6d9bkl.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month == nil or day == nil or year == nil\
    \ then\n        return false\n    end\n    if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n        return false\n    end\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n        return false\n    end\n    if tonumber(month) == 2 and tonumber(day)\
    \ > 29 then\n        return false\n    end\n    if tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ > 30 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\
    \ return false end\n  local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  if m == nil or d == nil or y == nil then return false end\n  m, d, y = tonumber(m),\
    \ tonumber(d), tonumber(y)\n  if m < 1 or m > 12 then return false end\n  if m\
    \ == 2 then\n    if y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0) then\n     \
    \ if d < 1 or d > 29 then return false end\n    else\n      if d < 1 or d > 28\
    \ then return false end\n    end\n  elseif m == 4 or m == 6 or m == 9 or m ==\
    \ 11 then\n    if d < 1 or d > 30 then return false end\n  else\n    if d < 1\
    \ or d > 31 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 31 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) > 29 then\n            return false\n  \
    \      end\n    end\n    if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n        if tonumber(day) > 30 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  local month = tonumber(month)\n\
    \  local day = tonumber(day)\n  local year = tonumber(year)\n  if month < 1 or\
    \ month > 12 then\n    return false\n  end\n  if month == 2 then\n    if year\
    \ % 4 == 0 then\n      if day < 1 or day > 29 then\n        return false\n   \
    \   end\n    else\n      if day < 1 or day > 28 then\n        return false\n \
    \     end\n    end\n  elseif month == 1 or month == 3 or month == 5 or month ==\
    \ 7 or month == 8 or month == 10 or month == 12 then\n    if day < 1 or day >\
    \ 31 then\n      return false\n    end\n  else\n    if day < 1 or day > 30 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu75whhqb.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpu75whhqb.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    month\
    \ = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if\
    \ month < 1 or month > 12 then\n        return false\n    end\n    if month ==\
    \ 2 then\n        if day < 1 or day > 29 then\n            return false\n    \
    \    end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \        if day < 1 or day > 30 then\n            return false\n        end\n\
    \    else\n        if day < 1 or day > 31 then\n            return false\n   \
    \     end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 2 then\n    if day < 1 or day >\
    \ 29 then\n      return false\n    end\n  elseif month == 4 or month == 6 or month\
    \ == 9 or month == 11 then\n    if day < 1 or day > 30 then\n      return false\n\
    \    end\n  else\n    if day < 1 or day > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n  if not month or not day\
    \ or not year then return false end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then return false end\n  if tonumber(month) == 2 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then return false end\n  elseif tonumber(month) ==\
    \ 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n\
    \    if tonumber(day) < 1 or tonumber(day) > 30 then return false end\n  else\n\
    \    if tonumber(day) < 1 or tonumber(day) > 31 then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    month = tonumber(month)\n\
    \    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    if month == 2 then\n        if\
    \ year % 4 == 0 then\n            if day < 1 or day > 29 then\n              \
    \  return false\n            end\n        else\n            if day < 1 or day\
    \ > 28 then\n                return false\n            end\n        end\n    elseif\
    \ month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month\
    \ == 10 or month == 12 then\n        if day < 1 or day > 31 then\n           \
    \ return false\n        end\n    else\n        if day < 1 or day > 30 then\n \
    \           return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyk_n_dv8.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpyk_n_dv8.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5thsuj8y.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp5thsuj8y.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 2 then\n    if day < 1 or day >\
    \ 29 then\n      return false\n    end\n  elseif month == 4 or month == 6 or month\
    \ == 9 or month == 11 then\n    if day < 1 or day > 30 then\n      return false\n\
    \    end\n  else\n    if day < 1 or day > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb34qxier.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpb34qxier.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month == nil or day == nil or year == nil\
    \ then\n        return false\n    end\n    month = tonumber(month)\n    day =\
    \ tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if day > 29 then\n         \
    \   return false\n        end\n    elseif month == 4 or month == 6 or month ==\
    \ 9 or month == 11 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local date_table\
    \ = {}\n    for i in string.gmatch(date, \"%d+\") do\n        table.insert(date_table,\
    \ i)\n    end\n    if #date_table ~= 3 then\n        return false\n    end\n \
    \   local month = tonumber(date_table[1])\n    local day = tonumber(date_table[2])\n\
    \    local year = tonumber(date_table[3])\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if month == 2 then\n        if day < 1 or\
    \ day > 29 then\n            return false\n        end\n    elseif month == 1\
    \ or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month\
    \ == 12 then\n        if day < 1 or day > 31 then\n            return false\n\
    \        end\n    else\n        if day < 1 or day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzjcqgz22.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpzjcqgz22.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_table\
    \ = {}\n  for i in string.gmatch(date, \"%d+\") do\n    table.insert(date_table,\
    \ i)\n  end\n  if #date_table ~= 3 then\n    return false\n  end\n  local month\
    \ = tonumber(date_table[1])\n  local day = tonumber(date_table[2])\n  local year\
    \ = tonumber(date_table[3])\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if month == 2 then\n    if day < 1 or day > 29 then\n      return false\n\
    \    end\n  elseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \    if day < 1 or day > 30 then\n      return false\n    end\n  else\n    if\
    \ day < 1 or day > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month,day,year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day\
    \ == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if month\
    \ < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day\
    \ > 31 then\n        return false\n    end\n    if month == 2 and day > 29 then\n\
    \        return false\n    end\n    if month == 4 or month == 6 or month == 9\
    \ or month == 11 then\n        if day > 30 then\n            return false\n  \
    \      end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_4s5kdnt.lua:20:\
    \ attempt to compare string with number\\nstack traceback:\\n\\t/tmp/tmp_4s5kdnt.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmp_4s5kdnt.lua:40: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local day, month, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if not day or not month or not year then\n  \
    \      return false\n    end\n    day = tonumber(day)\n    month = tonumber(month)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if year % 4 == 0 and (year %\
    \ 100 ~= 0 or year % 400 == 0) then\n            if day < 1 or day > 29 then\n\
    \                return false\n            end\n        else\n            if day\
    \ < 1 or day > 28 then\n                return false\n            end\n      \
    \  end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \        if day < 1 or day > 30 then\n            return false\n        end\n\
    \    else\n        if day < 1 or day > 31 then\n            return false\n   \
    \     end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpllb756jf.lua:51:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpllb756jf.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local m, d, y = date:match(\"(%d+)-(%d+)-(%d+)\"\
    )\n  if not m or not d or not y then return false end\n  m, d, y = tonumber(m),\
    \ tonumber(d), tonumber(y)\n  if m < 1 or m > 12 then return false end\n  if m\
    \ == 2 then\n    if d < 1 or d > 29 then return false end\n  elseif m == 4 or\
    \ m == 6 or m == 9 or m == 11 then\n    if d < 1 or d > 30 then return false end\n\
    \  else\n    if d < 1 or d > 31 then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if not month or not day or not year then return\
    \ false end\n    month = tonumber(month)\n    day = tonumber(day)\n    year =\
    \ tonumber(year)\n    if month < 1 or month > 12 then return false end\n    if\
    \ day < 1 or day > 31 then return false end\n    if month == 2 then\n        if\
    \ day > 29 then return false end\n    elseif month == 4 or month == 6 or month\
    \ == 9 or month == 11 then\n        if day > 30 then return false end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    month\
    \ = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if\
    \ month > 12 or month < 1 then\n        return false\n    end\n    if month ==\
    \ 2 then\n        if year % 4 == 0 then\n            if day > 29 or day < 1 then\n\
    \                return false\n            end\n        else\n            if day\
    \ > 28 or day < 1 then\n                return false\n            end\n      \
    \  end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \        if day > 30 or day < 1 then\n            return false\n        end\n\
    \    else\n        if day > 31 or day < 1 then\n            return false\n   \
    \     end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjuiv9xkw.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjuiv9xkw.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbbseuc89.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpbbseuc89.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjfnyyv3k.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjfnyyv3k.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if not month or not day or not year then return\
    \ false end\n    month = tonumber(month)\n    day = tonumber(day)\n    year =\
    \ tonumber(year)\n    if month < 1 or month > 12 then return false end\n    if\
    \ month == 2 then\n        if (year % 4 == 0 and year % 100 ~= 0) or year % 400\
    \ == 0 then\n            if day < 1 or day > 29 then return false end\n      \
    \  else\n            if day < 1 or day > 28 then return false end\n        end\n\
    \    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n     \
    \   if day < 1 or day > 30 then return false end\n    else\n        if day < 1\
    \ or day > 31 then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\n   \
    \ local month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    month\
    \ = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if\
    \ month < 1 or month > 12 then\n        return false\n    end\n    if month ==\
    \ 2 then\n        if year % 4 == 0 then\n            if day < 1 or day > 29 then\n\
    \                return false\n            end\n        else\n            if day\
    \ < 1 or day > 28 then\n                return false\n            end\n      \
    \  end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n\
    \            return false\n        end\n    else\n        if day < 1 or day >\
    \ 30 then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) >\
    \ 12 or tonumber(month) < 1 then\n    return false\n  end\n  if tonumber(day)\
    \ > 31 or tonumber(day) < 1 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) > 29 then\n      return false\n    end\n  end\n\
    \  if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or\
    \ tonumber(month) == 11 then\n    if tonumber(day) > 30 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ nil or date == '' then\n    return false\n  end\n  local month, day, year =\
    \ string.match(date, '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or\
    \ year == nil then\n    return false\n  end\n  month = tonumber(month)\n  day\
    \ = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if month == 2 then\n    if day < 1 or day > 29 then\n\
    \      return false\n    end\n  elseif month == 4 or month == 6 or month == 9\
    \ or month == 11 then\n    if day < 1 or day > 30 then\n      return false\n \
    \   end\n  else\n    if day < 1 or day > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph7_dy5ag.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmph7_dy5ag.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\n   \
    \ -- return true or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwl2w_npf.lua:22:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpwl2w_npf.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local month, day,\
    \ year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil\
    \ or year == nil then\n        return false\n    end\n    month = tonumber(month)\n\
    \    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    if month == 2 then\n        if\
    \ day < 1 or day > 29 then\n            return false\n        end\n    elseif\
    \ month == 4 or month == 6 or month == 9 or month == 11 then\n        if day <\
    \ 1 or day > 30 then\n            return false\n        end\n    else\n      \
    \  if day < 1 or day > 31 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local d = string.match(date,\
    \ '(%d%d)-(%d%d)-(%d%d%d%d)')\n    if not d then return false end\n    local m,\
    \ d, y = d:match('(%d%d)(%d%d)(%d%d%d%d)')\n    m, d, y = tonumber(m), tonumber(d),\
    \ tonumber(y)\n    if m < 1 or m > 12 then return false end\n    if m == 2 and\
    \ d > 29 then return false end\n    if m == 2 and d == 29 and not is_leap_year(y)\
    \ then return false end\n    if m == 2 and d > 28 then return false end\n    if\
    \ m == 2 and d == 28 and is_leap_year(y) then return false end\n    if m == 4\
    \ or m == 6 or m == 9 or m == 11 then\n        if d > 30 then return false end\n\
    \    end\n    if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or\
    \ m == 12 then\n        if d > 31 then return false end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp353pdmil.lua:19:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp353pdmil.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmp353pdmil.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_table\
    \ = {}\n  local date_table = string.split(date, '-')\n  local month = tonumber(date_table[1])\n\
    \  local day = tonumber(date_table[2])\n  local year = tonumber(date_table[3])\n\
    \  if month < 1 or month > 12 then\n    return false\n  end\n  if month == 1 or\
    \ month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month\
    \ == 12 then\n    if day < 1 or day > 31 then\n      return false\n    end\n \
    \ elseif month == 4 or month == 6 or month == 9 or month == 11 then\n    if day\
    \ < 1 or day > 30 then\n      return false\n    end\n  elseif month == 2 then\n\
    \    if day < 1 or day > 29 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbciltago.lua:17:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbciltago.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpbciltago.lua:43: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_table\
    \ = {}\n  local month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n  if month\
    \ == nil or day == nil or year == nil then\n    return false\n  end\n  if month\
    \ < 1 or month > 12 then\n    return false\n  end\n  if month == 2 then\n    if\
    \ day < 1 or day > 29 then\n      return false\n    end\n  elseif month == 4 or\
    \ month == 6 or month == 9 or month == 11 then\n    if day < 1 or day > 30 then\n\
    \      return false\n    end\n  else\n    if day < 1 or day > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppg0q81fl.lua:21:\
    \ attempt to compare string with number\\nstack traceback:\\n\\t/tmp/tmppg0q81fl.lua:21:\
    \ in function 'candidate'\\n\\t/tmp/tmppg0q81fl.lua:43: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzw_db57d.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpzw_db57d.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == '' then\n    return\
    \ false\n  end\n  local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n \
    \ if not month or not day or not year then\n    return false\n  end\n  month =\
    \ tonumber(month)\n  day = tonumber(day)\n  year = tonumber(year)\n  if month\
    \ < 1 or month > 12 then\n    return false\n  end\n  if month == 2 then\n    if\
    \ day < 1 or day > 29 then\n      return false\n    end\n  elseif month == 4 or\
    \ month == 6 or month == 9 or month == 11 then\n    if day < 1 or day > 30 then\n\
    \      return false\n    end\n  else\n    if day < 1 or day > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ nil or date == '' then\n    return false\n  end\n  local month, day, year =\
    \ date:match('(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year ==\
    \ nil then\n    return false\n  end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  if tonumber(month) == 2 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n      return false\n    end\n  elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n    if tonumber(day) < 1 or tonumber(day) > 30 then\n      return false\n\
    \    end\n  else\n    if tonumber(day) < 1 or tonumber(day) > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplriqivei.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmplriqivei.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7hbnagth.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp7hbnagth.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzwuvo47j.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpzwuvo47j.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg2gxqujm.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpg2gxqujm.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjr84dx6g.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjr84dx6g.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n    if month == nil\
    \ or day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    month\
    \ = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if\
    \ month < 1 or month > 12 then\n        return false\n    end\n    if month ==\
    \ 2 then\n        if year % 4 == 0 then\n            if day < 1 or day > 29 then\n\
    \                return false\n            end\n        else\n            if day\
    \ < 1 or day > 28 then\n                return false\n            end\n      \
    \  end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n\
    \            return false\n        end\n    else\n        if day < 1 or day >\
    \ 30 then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk98pebuh.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpk98pebuh.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == '' then\n        return\
    \ false\n    end\n    local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n\
    \    if not month or not day or not year then\n        return false\n    end\n\
    \    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n\
    \    if month < 1 or month > 12 then\n        return false\n    end\n    if month\
    \ == 2 then\n        if day < 1 or day > 29 then\n            return false\n \
    \       end\n    elseif month == 4 or month == 6 or month == 9 or month == 11\
    \ then\n        if day < 1 or day > 30 then\n            return false\n      \
    \  end\n    else\n        if day < 1 or day > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil\
    \ or year == nil then\n    return false\n  end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  if tonumber(month) == 2 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n      return false\n    end\n  elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n    if tonumber(day) < 1 or tonumber(day) > 30 then\n      return false\n\
    \    end\n  else\n    if tonumber(day) < 1 or tonumber(day) > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"^(%d%d)-(%d%d)-(%d%d%d%d)$\")\n  if month == nil or\
    \ day == nil or year == nil then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n\
    \  end\n  if month == 2 then\n    if day > 29 then\n      return false\n    end\n\
    \  elseif month == 4 or month == 6 or month == 9 or month == 11 then\n    if day\
    \ > 30 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\n   \
    \ local month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if not month\
    \ or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n\
    \    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    if month == 2 then\n        if\
    \ day < 1 or day > 29 then\n            return false\n        end\n    elseif\
    \ month == 4 or month == 6 or month == 9 or month == 11 then\n        if day <\
    \ 1 or day > 30 then\n            return false\n        end\n    else\n      \
    \  if day < 1 or day > 31 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv9l_gw9l.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpv9l_gw9l.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ '' then\n    return false\n  end\n  local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  if month == nil or day == nil or year == nil then\n    return false\n  end\n\
    \  if tonumber(month) < 1 or tonumber(month) > 12 then\n    return false\n  end\n\
    \  if tonumber(month) == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29\
    \ then\n      return false\n    end\n  elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n      return false\n    end\n  else\n    if\
    \ tonumber(day) < 1 or tonumber(day) > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if month == '02' then\n\
    \    if day == '29' then\n      if year % 4 == 0 then\n        return true\n \
    \     else\n        return false\n      end\n    elseif tonumber(day) > 28 then\n\
    \      return false\n    end\n  elseif month == '01' or month == '03' or month\
    \ == '05' or month == '07' or month == '08' or month == '10' or month == '12'\
    \ then\n    if tonumber(day) > 31 then\n      return false\n    end\n  elseif\
    \ month == '04' or month == '06' or month == '09' or month == '11' then\n    if\
    \ tonumber(day) > 30 then\n      return false\n    end\n  else\n    return false\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv1mvalms.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpv1mvalms.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- write your code here\n  local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if not month\
    \ or not day or not year then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 2 then\n    if day < 1 or day >\
    \ 29 then\n      return false\n    end\n  elseif month == 4 or month == 6 or month\
    \ == 9 or month == 11 then\n    if day < 1 or day > 30 then\n      return false\n\
    \    end\n  else\n    if day < 1 or day > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ nil or date == '' then\n    return false\n  end\n  local month, day, year =\
    \ date:match('(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year ==\
    \ nil then\n    return false\n  end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  if tonumber(month) == 2 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n      return false\n    end\n  elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n    if tonumber(day) < 1 or tonumber(day) > 30 then\n      return false\n\
    \    end\n  else\n    if tonumber(day) < 1 or tonumber(day) > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d+)/(%d+)/(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n        if day > 30 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppp75jj2q.lua:39:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmppp75jj2q.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local year, month,\
    \ day = date:match('(%d%d%d%d)%-(%d%d)%-(%d%d)')\n    if year == nil or month\
    \ == nil or day == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn498_ux8.lua:45:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpn498_ux8.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if month == 2 then\n    if day < 1 or day > 29 then\n      return false\n\
    \    end\n  elseif month % 2 == 0 then\n    if day < 1 or day > 30 then\n    \
    \  return false\n    end\n  else\n    if day < 1 or day > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxw_edz8g.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpxw_edz8g.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwfpyoihq.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwfpyoihq.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if year % 4 == 0 and (year %\
    \ 100 ~= 0 or year % 400 == 0) then\n            if day < 1 or day > 29 then\n\
    \                return false\n            end\n        else\n            if day\
    \ < 1 or day > 28 then\n                return false\n            end\n      \
    \  end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n\
    \            return false\n        end\n    else\n        if day < 1 or day >\
    \ 30 then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\
    \ return false end\n  local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  if m == nil or d == nil or y == nil then return false end\n  m, d, y = tonumber(m),\
    \ tonumber(d), tonumber(y)\n  if m < 1 or m > 12 then return false end\n  if m\
    \ == 2 then\n    if y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0) then\n     \
    \ if d < 1 or d > 29 then return false end\n    else\n      if d < 1 or d > 28\
    \ then return false end\n    end\n  elseif m == 4 or m == 6 or m == 9 or m ==\
    \ 11 then\n    if d < 1 or d > 30 then return false end\n  else\n    if d < 1\
    \ or d > 31 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local date_pattern = '(%d%d)-(%d%d)-(%d%d%d%d)'\n\
    \    local month, day, year = date:match(date_pattern)\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    month = tonumber(month)\n\
    \    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    if month == 2 then\n        if\
    \ day < 1 or day > 29 then\n            return false\n        end\n    elseif\
    \ month == 4 or month == 6 or month == 9 or month == 11 then\n        if day <\
    \ 1 or day > 30 then\n            return false\n        end\n    else\n      \
    \  if day < 1 or day > 31 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil\
    \ or year == nil then\n    return false\n  end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  if tonumber(month) == 2 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n      return false\n    end\n  elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n    if tonumber(day) < 1 or tonumber(day) > 30 then\n      return false\n\
    \    end\n  else\n    if tonumber(day) < 1 or tonumber(day) > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprq0seq4t.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmprq0seq4t.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n\
    \    if month and day and year then\n        month = tonumber(month)\n       \
    \ day = tonumber(day)\n        year = tonumber(year)\n        if month >= 1 and\
    \ month <= 12 then\n            if month == 2 then\n                if day >=\
    \ 1 and day <= 29 then\n                    return true\n                end\n\
    \            elseif month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 or month == 12 then\n                if day >= 1 and day\
    \ <= 31 then\n                    return true\n                end\n         \
    \   else\n                if day >= 1 and day <= 30 then\n                   \
    \ return true\n                end\n            end\n        end\n    end\n  \
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 2 then\n    if year % 4 == 0 then\n\
    \      if day < 1 or day > 29 then\n        return false\n      end\n    else\n\
    \      if day < 1 or day > 28 then\n        return false\n      end\n    end\n\
    \  elseif month == 4 or month == 6 or month == 9 or month == 11 then\n    if day\
    \ < 1 or day > 30 then\n      return false\n    end\n  else\n    if day < 1 or\
    \ day > 31 then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if month == \"02\" then\n\
    \    if day == \"29\" then\n      if year % 4 == 0 then\n        return true\n\
    \      else\n        return false\n      end\n    elseif day == \"30\" or day\
    \ == \"31\" then\n      return false\n    end\n  elseif month == \"01\" or month\
    \ == \"03\" or month == \"05\" or month == \"07\" or month == \"08\" or month\
    \ == \"10\" or month == \"12\" then\n    if day == \"31\" then\n      return true\n\
    \    elseif day == \"32\" then\n      return false\n    end\n  elseif month ==\
    \ \"04\" or month == \"06\" or month == \"09\" or month == \"11\" then\n    if\
    \ day == \"30\" then\n      return true\n    elseif day == \"31\" then\n     \
    \ return false\n    end\n  else\n    return false\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkfxf0qpz.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpkfxf0qpz.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ date_table = {}\n    local date_table = split(date, '-')\n    local month =\
    \ tonumber(date_table[1])\n    local day = tonumber(date_table[2])\n    local\
    \ year = tonumber(date_table[3])\n    if month == nil or day == nil or year ==\
    \ nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if day > 29 then\n         \
    \   return false\n        end\n    end\n    if month == 4 or month == 6 or month\
    \ == 9 or month == 11 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa8_mhswa.lua:17:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa8_mhswa.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpa8_mhswa.lua:46: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 1 or tonumber(month) == 3 or tonumber(month)\
    \ == 5 or tonumber(month) == 7 or tonumber(month) == 8 or tonumber(month) == 10\
    \ or tonumber(month) == 12 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    elseif tonumber(month) == 2 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaxiy53jt.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpaxiy53jt.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_2n_gsqu.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp_2n_gsqu.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if month\
    \ < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n\
    \        if day < 1 or day > 29 then\n            return false\n        end\n\
    \    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n     \
    \   if day < 1 or day > 30 then\n            return false\n        end\n    else\n\
    \        if day < 1 or day > 31 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgedq2oaq.lua:20:\
    \ attempt to compare string with number\\nstack traceback:\\n\\t/tmp/tmpgedq2oaq.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmpgedq2oaq.lua:42: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local month, day,\
    \ year = date:match('(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or\
    \ year == nil then\n        return false\n    end\n    month = tonumber(month)\n\
    \    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    if month == 2 then\n        if\
    \ day < 1 or day > 29 then\n            return false\n        end\n    elseif\
    \ month == 4 or month == 6 or month == 9 or month == 11 then\n        if day <\
    \ 1 or day > 30 then\n            return false\n        end\n    else\n      \
    \  if day < 1 or day > 31 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local month, day,\
    \ year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil\
    \ or year == nil then\n        return false\n    end\n    if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 31 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) > 29 then\n            return false\n  \
    \      end\n    end\n    if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n        if tonumber(day) > 30 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpurec89c2.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpurec89c2.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbehcq4qn.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpbehcq4qn.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppr9k0wpi.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmppr9k0wpi.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjaokn5kt.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjaokn5kt.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppfvm7xnc.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmppfvm7xnc.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or date == ''\
    \ then\n        return false\n    end\n    local m, d, y = date:match('(%d+)-(%d+)-(%d+)')\n\
    \    if m == nil or d == nil or y == nil then\n        return false\n    end\n\
    \    m = tonumber(m)\n    d = tonumber(d)\n    y = tonumber(y)\n    if m < 1 or\
    \ m > 12 then\n        return false\n    end\n    if m == 2 then\n        if d\
    \ < 1 or d > 29 then\n            return false\n        end\n    elseif m == 4\
    \ or m == 6 or m == 9 or m == 11 then\n        if d < 1 or d > 30 then\n     \
    \       return false\n        end\n    else\n        if d < 1 or d > 31 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbh9zy2gz.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpbh9zy2gz.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ nil or date == '' then\n    return false\n  end\n  local month, day, year =\
    \ date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day == nil or\
    \ year == nil then\n    return false\n  end\n  month = tonumber(month)\n  day\
    \ = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if month == 2 then\n    if day < 1 or day > 29 then\n\
    \      return false\n    end\n  elseif month == 4 or month == 6 or month == 9\
    \ or month == 11 then\n    if day < 1 or day > 30 then\n      return false\n \
    \   end\n  else\n    if day < 1 or day > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvlmd51vi.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpvlmd51vi.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\n   \
    \ local month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month\
    \ == nil or day == nil or year == nil then\n        return false\n    end\n  \
    \  month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n\
    \    if month < 1 or month > 12 then\n        return false\n    end\n    if month\
    \ == 2 then\n        if day < 1 or day > 29 then\n            return false\n \
    \       end\n    elseif month == 4 or month == 6 or month == 9 or month == 11\
    \ then\n        if day < 1 or day > 30 then\n            return false\n      \
    \  end\n    else\n        if day < 1 or day > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_table\
    \ = {}\n  for i in string.gmatch(date, \"%d+\") do\n    table.insert(date_table,\
    \ i)\n  end\n  if #date_table ~= 3 then\n    return false\n  end\n  local month\
    \ = tonumber(date_table[1])\n  local day = tonumber(date_table[2])\n  local year\
    \ = tonumber(date_table[3])\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if month == 2 then\n    if day < 1 or day > 29 then\n      return false\n\
    \    end\n  elseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \    if day < 1 or day > 30 then\n      return false\n    end\n  else\n    if\
    \ day < 1 or day > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d+)/(%d+)/(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11\
    \ then\n        if day > 30 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_xouw6w.lua:43:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmps_xouw6w.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local date_table\
    \ = {}\n    for i in string.gmatch(date, \"%d+\") do\n        table.insert(date_table,\
    \ i)\n    end\n    if #date_table ~= 3 then\n        return false\n    end\n \
    \   local month = tonumber(date_table[1])\n    local day = tonumber(date_table[2])\n\
    \    local year = tonumber(date_table[3])\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if month == 2 then\n        if day < 1 or\
    \ day > 29 then\n            return false\n        end\n    elseif month == 4\
    \ or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day >\
    \ 30 then\n            return false\n        end\n    else\n        if day < 1\
    \ or day > 31 then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzlba8zn5.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpzlba8zn5.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpczf2i932.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpczf2i932.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ nil or date == '' then\n    return false\n  end\n  local m, d, y = date:match('(%d+)-(%d+)-(%d+)')\n\
    \  if m == nil or d == nil or y == nil then\n    return false\n  end\n  m = tonumber(m)\n\
    \  d = tonumber(d)\n  y = tonumber(y)\n  if m < 1 or m > 12 then\n    return false\n\
    \  end\n  if m == 2 then\n    if d < 1 or d > 29 then\n      return false\n  \
    \  end\n  elseif m == 4 or m == 6 or m == 9 or m == 11 then\n    if d < 1 or d\
    \ > 30 then\n      return false\n    end\n  else\n    if d < 1 or d > 31 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or date == ''\
    \ then\n        return false\n    end\n    local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n\
    \    if month == nil or day == nil or year == nil then\n        return false\n\
    \    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n\
    \    if month < 1 or month > 12 then\n        return false\n    end\n    if month\
    \ == 2 then\n        if day < 1 or day > 29 then\n            return false\n \
    \       end\n    elseif month == 4 or month == 6 or month == 9 or month == 11\
    \ then\n        if day < 1 or day > 30 then\n            return false\n      \
    \  end\n    else\n        if day < 1 or day > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_table\
    \ = {}\n  local month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n  date_table[1]\
    \ = tonumber(month)\n  date_table[2] = tonumber(day)\n  date_table[3] = tonumber(year)\n\
    \  if date_table[1] == nil or date_table[2] == nil or date_table[3] == nil then\n\
    \    return false\n  end\n  if date_table[1] < 1 or date_table[1] > 12 then\n\
    \    return false\n  end\n  if date_table[1] == 1 or date_table[1] == 3 or date_table[1]\
    \ == 5 or date_table[1] == 7 or date_table[1] == 8 or date_table[1] == 10 or date_table[1]\
    \ == 12 then\n    if date_table[2] < 1 or date_table[2] > 31 then\n      return\
    \ false\n    end\n  elseif date_table[1] == 4 or date_table[1] == 6 or date_table[1]\
    \ == 9 or date_table[1] == 11 then\n    if date_table[2] < 1 or date_table[2]\
    \ > 30 then\n      return false\n    end\n  elseif date_table[1] == 2 then\n \
    \   if date_table[2] < 1 or date_table[2] > 29 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpshktqvw1.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpshktqvw1.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\n\
    \    return false\n  end\n  local d, m, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  if d == nil or m == nil or y == nil then\n    return false\n  end\n  d = tonumber(d)\n\
    \  m = tonumber(m)\n  y = tonumber(y)\n  if m < 1 or m > 12 then\n    return false\n\
    \  end\n  if m == 2 then\n    if d < 1 or d > 29 then\n      return false\n  \
    \  end\n  elseif m == 4 or m == 6 or m == 9 or m == 11 then\n    if d < 1 or d\
    \ > 30 then\n      return false\n    end\n  else\n    if d < 1 or d > 31 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9fm0bv86.lua:48:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9fm0bv86.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n\
    \  end\n  if month == 2 then\n    if day > 29 then\n      return false\n    end\n\
    \  elseif month == 4 or month == 6 or month == 9 or month == 11 then\n    if day\
    \ > 30 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprgdsr0rm.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmprgdsr0rm.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_table\
    \ = {}\n  local date_table = split(date, '-')\n  if #date_table ~= 3 then\n  \
    \  return false\n  end\n  local month = tonumber(date_table[1])\n  local day =\
    \ tonumber(date_table[2])\n  local year = tonumber(date_table[3])\n  if month\
    \ < 1 or month > 12 then\n    return false\n  end\n  if month == 2 then\n    if\
    \ day < 1 or day > 29 then\n      return false\n    end\n  elseif month == 1 or\
    \ month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month\
    \ == 12 then\n    if day < 1 or day > 31 then\n      return false\n    end\n \
    \ else\n    if day < 1 or day > 30 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp84uia61y.lua:17:\
    \ attempt to call global 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp84uia61y.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp84uia61y.lua:46: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil\
    \ or year == nil then\n    return false\n  end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  if tonumber(month) == 2 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n      return false\n    end\n  elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n    if tonumber(day) < 1 or tonumber(day) > 30 then\n      return false\n\
    \    end\n  else\n    if tonumber(day) < 1 or tonumber(day) > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz9sgo7rm.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpz9sgo7rm.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyq37866v.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpyq37866v.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month == nil or day == nil or year == nil\
    \ then\n        return false\n    end\n    month = tonumber(month)\n    day =\
    \ tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if month == 2 then\n        if year % 4 ==\
    \ 0 then\n            if day < 1 or day > 29 then\n                return false\n\
    \            end\n        else\n            if day < 1 or day > 28 then\n    \
    \            return false\n            end\n        end\n    elseif month == 4\
    \ or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day >\
    \ 30 then\n            return false\n        end\n    else\n        if day < 1\
    \ or day > 31 then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ '' then\n    return false\n  end\n  local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \  if not day or not month or not year then\n    return false\n  end\n  if month\
    \ == '01' or month == '03' or month == '05' or month == '07' or month == '08'\
    \ or month == '10' or month == '12' then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n      return false\n    end\n  elseif month == '04' or month == '06'\
    \ or month == '09' or month == '11' then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  elseif month == '02' then\n    if\
    \ tonumber(day) < 1 or tonumber(day) > 29 then\n      return false\n    end\n\
    \  else\n    return false\n  end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqscbq4bx.lua:48:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqscbq4bx.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"^(%d%d)-(%d%d)-(%d%d%d%d)$\")\n  if not month or not\
    \ day or not year then\n    return false\n  end\n  month = tonumber(month)\n \
    \ day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if month == 2 then\n    if year % 4 == 0 and year\
    \ % 100 ~= 0 or year % 400 == 0 then\n      if day < 1 or day > 29 then\n    \
    \    return false\n      end\n    else\n      if day < 1 or day > 28 then\n  \
    \      return false\n      end\n    end\n  elseif month == 4 or month == 6 or\
    \ month == 9 or month == 11 then\n    if day < 1 or day > 30 then\n      return\
    \ false\n    end\n  else\n    if day < 1 or day > 31 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4tt_4qop.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp4tt_4qop.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpga9wntkv.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpga9wntkv.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 2 then\n    if year % 4 == 0 then\n\
    \      if day < 1 or day > 29 then\n        return false\n      end\n    else\n\
    \      if day < 1 or day > 28 then\n        return false\n      end\n    end\n\
    \  elseif month == 4 or month == 6 or month == 9 or month == 11 then\n    if day\
    \ < 1 or day > 30 then\n      return false\n    end\n  else\n    if day < 1 or\
    \ day > 31 then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  month = tonumber(month)\n\
    \  day = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12\
    \ then\n    return false\n  end\n  if month == 2 then\n    if day < 1 or day >\
    \ 29 then\n      return false\n    end\n  elseif month == 4 or month == 6 or month\
    \ == 9 or month == 11 then\n    if day < 1 or day > 30 then\n      return false\n\
    \    end\n  else\n    if day < 1 or day > 31 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppni7x9zw.lua:20:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmppni7x9zw.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmppni7x9zw.lua:44: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local date_table\
    \ = {}\n  local date_table = string.split(date, '-')\n  if #date_table ~= 3 then\n\
    \    return false\n  end\n  local month = tonumber(date_table[1])\n  local day\
    \ = tonumber(date_table[2])\n  local year = tonumber(date_table[3])\n  if month\
    \ < 1 or month > 12 then\n    return false\n  end\n  if month == 2 then\n    if\
    \ day < 1 or day > 29 then\n      return false\n    end\n  elseif month == 4 or\
    \ month == 6 or month == 9 or month == 11 then\n    if day < 1 or day > 30 then\n\
    \      return false\n    end\n  else\n    if day < 1 or day > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2e0nkmkz.lua:17:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2e0nkmkz.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp2e0nkmkz.lua:46: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvc9zn2h9.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpvc9zn2h9.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ nil or date == '' then\n    return false\n  end\n  local month, day, year =\
    \ date:match('(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year ==\
    \ nil then\n    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n\
    \  year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if month == 2 then\n    if day < 1 or day > 29 then\n      return false\n\
    \    end\n  elseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \    if day < 1 or day > 30 then\n      return false\n    end\n  else\n    if\
    \ day < 1 or day > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == '' then\n        return false\n    end\n    local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n\
    \    if month == nil or day == nil or year == nil then\n        return false\n\
    \    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n\
    \    if month < 1 or month > 12 then\n        return false\n    end\n    if month\
    \ == 2 then\n        if day < 1 or day > 29 then\n            return false\n \
    \       end\n    elseif month == 4 or month == 6 or month == 9 or month == 11\
    \ then\n        if day < 1 or day > 30 then\n            return false\n      \
    \  end\n    else\n        if day < 1 or day > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,day,year\
    \ = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day == nil\
    \ or year == nil then\n    return false\n  end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  if tonumber(month) == 2 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n      return false\n    end\n  elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n    if tonumber(day) < 1 or tonumber(day) > 30 then\n      return false\n\
    \    end\n  else\n    if tonumber(day) < 1 or tonumber(day) > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 1 or tonumber(month) == 3 or tonumber(month) == 5 or tonumber(month) == 7\
    \ or tonumber(month) == 8 or tonumber(month) == 10 or tonumber(month) == 12 then\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local month, day,\
    \ year = date:match('(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or\
    \ year == nil then\n        return false\n    end\n    month = tonumber(month)\n\
    \    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    if month == 2 then\n        if\
    \ day < 1 or day > 29 then\n            return false\n        end\n    elseif\
    \ month == 4 or month == 6 or month == 9 or month == 11 then\n        if day <\
    \ 1 or day > 30 then\n            return false\n        end\n    else\n      \
    \  if day < 1 or day > 31 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    ^(%d%d)-(%d%d)-(%d%d%d%d)$\")\n    if not month or not day or not year then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n        if day == 29 then\n            if year % 4 ~= 0 then\n \
    \               return false\n            end\n            if year % 100 == 0\
    \ and year % 400 ~= 0 then\n                return false\n            end\n  \
    \      end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n\
    \        if day > 30 then\n            return false\n        end\n    end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyqswmkc3.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpyqswmkc3.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    if date == nil or date == ''\
    \ then\n        return false\n    end\n    local m, d, y = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if m == nil or d == nil or y == nil then\n       \
    \ return false\n    end\n    m = tonumber(m)\n    d = tonumber(d)\n    y = tonumber(y)\n\
    \    if m < 1 or m > 12 then\n        return false\n    end\n    if m == 2 then\n\
    \        if y % 4 == 0 then\n            if d < 1 or d > 29 then\n           \
    \     return false\n            end\n        else\n            if d < 1 or d >\
    \ 28 then\n                return false\n            end\n        end\n    elseif\
    \ m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then\n\
    \        if d < 1 or d > 31 then\n            return false\n        end\n    else\n\
    \        if d < 1 or d > 30 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp14nyvs3z.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp14nyvs3z.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \    if not month or not day or not year then return false end\n    month, day,\
    \ year = tonumber(month), tonumber(day), tonumber(year)\n    if month < 1 or month\
    \ > 12 then return false end\n    if month == 2 and day > 29 then return false\
    \ end\n    if month == 2 and day == 29 and year % 4 ~= 0 then return false end\n\
    \    if month == 2 and day == 29 and year % 100 == 0 and year % 400 ~= 0 then\
    \ return false end\n    if month == 2 and day > 28 then return false end\n   \
    \ if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day\
    \ > 30 then return false end\n    end\n    if month == 1 or month == 3 or month\
    \ == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n      \
    \  if day > 31 then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphdbnp_ow.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmphdbnp_ow.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp57t66p4u.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp57t66p4u.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg24gywqb.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpg24gywqb.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil\
    \ or year == nil then\n    return false\n  end\n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if month == 2 and day > 29 then\n    return false\n  end\n  if month == 4 or\
    \ month == 6 or month == 9 or month == 11 then\n    if day > 30 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwpi5zby2.lua:20:\
    \ attempt to compare string with number\\nstack traceback:\\n\\t/tmp/tmpwpi5zby2.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmpwpi5zby2.lua:40: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if month ==\
    \ nil or day == nil or year == nil then\n        return false\n    end\n    if\
    \ tonumber(month) < 1 or tonumber(month) > 12 then\n        return false\n   \
    \ end\n    if tonumber(month) == 2 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 29 then\n            return false\n        end\n    elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n        if tonumber(day) < 1 or tonumber(day) > 30 then\n            return\
    \ false\n        end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match('(%d+)-(%d+)-(%d+)')\n  if not month or not day or not\
    \ year then\n    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n\
    \  year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if day > 29 then\n      return false\n    end\n  elseif month ==\
    \ 4 or month == 6 or month == 9 or month == 11 then\n    if day > 30 then\n  \
    \    return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp342u0dtn.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp342u0dtn.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt54j08sy.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpt54j08sy.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwq335_36.lua:22:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwq335_36.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxdl6qnl1.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpxdl6qnl1.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    local month = tonumber(month)\n    local day\
    \ = tonumber(day)\n    local year = tonumber(year)\n    if month == nil or day\
    \ == nil or year == nil then\n        return false\n    end\n    if month < 1\
    \ or month > 12 then\n        return false\n    end\n    if month == 2 then\n\
    \        if (year % 4 == 0 and year % 100 ~= 0) or year % 400 == 0 then\n    \
    \        if day < 1 or day > 29 then\n                return false\n         \
    \   end\n        else\n            if day < 1 or day > 28 then\n             \
    \   return false\n            end\n        end\n    elseif month == 1 or month\
    \ == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12\
    \ then\n        if day < 1 or day > 31 then\n            return false\n      \
    \  end\n    else\n        if day < 1 or day > 30 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 31 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) > 29 then\n            return false\n  \
    \      end\n    end\n    if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n        if tonumber(day) > 30 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n\
    \    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n\
    \    if month == 2 then\n        if year % 4 == 0 and year % 100 ~= 0 or year\
    \ % 400 == 0 then\n            if day > 29 then\n                return false\n\
    \            end\n        else\n            if day > 28 then\n               \
    \ return false\n            end\n        end\n    elseif month == 1 or month ==\
    \ 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n\
    \        if day > 31 then\n            return false\n        end\n    elseif month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n        if day > 30 then\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    \    if month < 1 or month > 12 then\n        return false\n    end\n    if day\
    \ < 1 or day > 31 then\n        return false\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 31 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) > 29 then\n            return false\n  \
    \      end\n    end\n    if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n        if tonumber(day) > 30 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ > 12 or tonumber(month) < 1 then\n        return false\n    end\n    if tonumber(day)\
    \ > 31 or tonumber(day) < 1 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) > 29 then\n            return false\n  \
    \      end\n    end\n    if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n        if tonumber(day) > 30 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local month, day,\
    \ year = date:match('(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or\
    \ year == nil then\n        return false\n    end\n    if tonumber(month) < 1\
    \ or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2vwllc04.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp2vwllc04.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local m, d, y\
    \ = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n    if m == nil or d == nil or y ==\
    \ nil then\n        return false\n    end\n    m = tonumber(m)\n    d = tonumber(d)\n\
    \    y = tonumber(y)\n    if m < 1 or m > 12 then\n        return false\n    end\n\
    \    if m == 2 then\n        if y % 4 == 0 then\n            if d < 1 or d > 29\
    \ then\n                return false\n            end\n        else\n        \
    \    if d < 1 or d > 28 then\n                return false\n            end\n\
    \        end\n    elseif m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m ==\
    \ 10 or m == 12 then\n        if d < 1 or d > 31 then\n            return false\n\
    \        end\n    else\n        if d < 1 or d > 30 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ m, d, y = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n    if m == nil or d ==\
    \ nil or y == nil then\n        return false\n    end\n    m = tonumber(m)\n \
    \   d = tonumber(d)\n    y = tonumber(y)\n    if m < 1 or m > 12 then\n      \
    \  return false\n    end\n    if m == 2 then\n        if y % 4 == 0 then\n   \
    \         if d < 1 or d > 29 then\n                return false\n            end\n\
    \        else\n            if d < 1 or d > 28 then\n                return false\n\
    \            end\n        end\n    elseif m == 4 or m == 6 or m == 9 or m == 11\
    \ then\n        if d < 1 or d > 30 then\n            return false\n        end\n\
    \    else\n        if d < 1 or d > 31 then\n            return false\n       \
    \ end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsl0xa2y7.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpsl0xa2y7.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  if date == nil or date == '' then\n\
    \    return false\n  end\n  local month, day, year = date:match('(%d+)-(%d+)-(%d+)')\n\
    \  if month == nil or day == nil or year == nil then\n    return false\n  end\n\
    \  month = tonumber(month)\n  day = tonumber(day)\n  year = tonumber(year)\n \
    \ if month < 1 or month > 12 then\n    return false\n  end\n  if month == 2 then\n\
    \    if day < 1 or day > 29 then\n      return false\n    end\n  elseif month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n    if day < 1 or day\
    \ > 30 then\n      return false\n    end\n  else\n    if day < 1 or day > 31 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil\
    \ or year == nil then\n    return false\n  end\n  month = tonumber(month)\n  day\
    \ = tonumber(day)\n  year = tonumber(year)\n  if month < 1 or month > 12 then\n\
    \    return false\n  end\n  if month == 2 then\n    if year % 4 == 0 then\n  \
    \    if day < 1 or day > 29 then\n        return false\n      end\n    else\n\
    \      if day < 1 or day > 28 then\n        return false\n      end\n    end\n\
    \  elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or\
    \ month == 10 or month == 12 then\n    if day < 1 or day > 31 then\n      return\
    \ false\n    end\n  else\n    if day < 1 or day > 30 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeh20hg39.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpeh20hg39.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \    if not month or not day or not year then return false end\n    month, day,\
    \ year = tonumber(month), tonumber(day), tonumber(year)\n    if month < 1 or month\
    \ > 12 then return false end\n    if month == 2 and day > 29 then return false\
    \ end\n    if month == 2 and day == 29 and not is_leap_year(year) then return\
    \ false end\n    if month == 2 and day > 28 then return false end\n    if month\
    \ == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10\
    \ or month == 12 then\n        if day < 1 or day > 31 then return false end\n\
    \    else\n        if day < 1 or day > 30 then return false end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  if date ==\
    \ nil or date == '' then\n    return false\n  end\n  local date_table = {}\n \
    \ for i in string.gmatch(date, \"%d+\") do\n    table.insert(date_table, i)\n\
    \  end\n  if #date_table ~= 3 then\n    return false\n  end\n  local month = tonumber(date_table[1])\n\
    \  local day = tonumber(date_table[2])\n  local year = tonumber(date_table[3])\n\
    \  if month < 1 or month > 12 then\n    return false\n  end\n  if month == 2 then\n\
    \    if day < 1 or day > 29 then\n      return false\n    end\n  elseif month\
    \ == 4 or month == 6 or month == 9 or month == 11 then\n    if day < 1 or day\
    \ > 30 then\n      return false\n    end\n  else\n    if day < 1 or day > 31 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmkqku846.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpmkqku846.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv_hrba3y.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpv_hrba3y.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkouwzv1y.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpkouwzv1y.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo6nlmzkh.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpo6nlmzkh.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    if date\
    \ == nil or date == '' then\n        return false\n    end\n    local date_table\
    \ = {}\n    for i in string.gmatch(date, \"%d+\") do\n        table.insert(date_table,\
    \ i)\n    end\n    if #date_table ~= 3 then\n        return false\n    end\n \
    \   local month = tonumber(date_table[1])\n    local day = tonumber(date_table[2])\n\
    \    local year = tonumber(date_table[3])\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if month == 2 then\n        if year % 4 ==\
    \ 0 then\n            if day < 1 or day > 29 then\n                return false\n\
    \            end\n        else\n            if day < 1 or day > 28 then\n    \
    \            return false\n            end\n        end\n    elseif month == 1\
    \ or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month\
    \ == 12 then\n        if day < 1 or day > 31 then\n            return false\n\
    \        end\n    else\n        if day < 1 or day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw8b8ci66.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpw8b8ci66.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ date_table = {}\n    local date_table = string.split(date, '-')\n    local month\
    \ = tonumber(date_table[1])\n    local day = tonumber(date_table[2])\n    local\
    \ year = tonumber(date_table[3])\n    if month == nil or day == nil or year ==\
    \ nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if month == 2 then\n        if day < 1 or\
    \ day > 29 then\n            return false\n        end\n    elseif month == 4\
    \ or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day >\
    \ 30 then\n            return false\n        end\n    else\n        if day < 1\
    \ or day > 31 then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpevr9y6c2.lua:17:\
    \ attempt to call field 'split' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpevr9y6c2.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpevr9y6c2.lua:46: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match(\"\
    (%d%d)-(%d%d)-(%d%d%d%d)\")\n    if not month or not day or not year then return\
    \ false end\n    month = tonumber(month)\n    day = tonumber(day)\n    year =\
    \ tonumber(year)\n    if month < 1 or month > 12 then return false end\n    if\
    \ month == 2 then\n        if day < 1 or day > 29 then return false end\n    elseif\
    \ month == 4 or month == 6 or month == 9 or month == 11 then\n        if day <\
    \ 1 or day > 30 then return false end\n    else\n        if day < 1 or day > 31\
    \ then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  local month, day, year = date:match(\"\
    (%d+)-(%d+)-(%d+)\")\n  if not month or not day or not year then return false\
    \ end\n  month, day, year = tonumber(month), tonumber(day), tonumber(year)\n \
    \ if month < 1 or month > 12 then return false end\n  if month == 2 then\n   \
    \ if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then\n      if day <\
    \ 1 or day > 29 then return false end\n    else\n      if day < 1 or day > 28\
    \ then return false end\n    end\n  elseif month == 4 or month == 6 or month ==\
    \ 9 or month == 11 then\n    if day < 1 or day > 30 then return false end\n  else\n\
    \    if day < 1 or day > 31 then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7nd0doak.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp7nd0doak.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')\n\
    \    if not month or not day or not year then return false end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then return false end\n    if tonumber(month) ==\
    \ 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then return false\
    \ end\n    elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then return false end\n    else\n        if tonumber(day) < 1 or tonumber(day)\
    \ > 31 then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil\
    \ or year == nil then\n    return false\n  end\n  if tonumber(month) < 1 or tonumber(month)\
    \ > 12 then\n    return false\n  end\n  if tonumber(month) == 2 then\n    if tonumber(day)\
    \ < 1 or tonumber(day) > 29 then\n      return false\n    end\n  elseif tonumber(month)\
    \ == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11\
    \ then\n    if tonumber(day) < 1 or tonumber(day) > 30 then\n      return false\n\
    \    end\n  else\n    if tonumber(day) < 1 or tonumber(day) > 31 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0zf84pzj.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp0zf84pzj.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- your code here\n    local\
    \ month, day, year = date:match(\"(%d+)-(%d+)-(%d+)\")\n    if month == nil or\
    \ day == nil or year == nil then\n        return false\n    end\n    if tonumber(month)\
    \ < 1 or tonumber(month) > 12 then\n        return false\n    end\n    if tonumber(month)\
    \ == 2 then\n        if tonumber(day) < 1 or tonumber(day) > 29 then\n       \
    \     return false\n        end\n    elseif tonumber(month) == 4 or tonumber(month)\
    \ == 6 or tonumber(month) == 9 or tonumber(month) == 11 then\n        if tonumber(day)\
    \ < 1 or tonumber(day) > 30 then\n            return false\n        end\n    else\n\
    \        if tonumber(day) < 1 or tonumber(day) > 31 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n  -- your code here\n  local month,\
    \ day, year = date:match(\"(%d%d)-(%d%d)-(%d%d%d%d)\")\n  if month == nil or day\
    \ == nil or year == nil then\n    return false\n  end\n  if tonumber(month) <\
    \ 1 or tonumber(month) > 12 then\n    return false\n  end\n  if tonumber(month)\
    \ == 2 then\n    if tonumber(day) < 1 or tonumber(day) > 29 then\n      return\
    \ false\n    end\n  elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month)\
    \ == 9 or tonumber(month) == 11 then\n    if tonumber(day) < 1 or tonumber(day)\
    \ > 30 then\n      return false\n    end\n  else\n    if tonumber(day) < 1 or\
    \ tonumber(day) > 31 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have to write a function which validates a given date string and\n\
    -- returns True if the date is valid otherwise False.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- for example:\
    \ \n-- valid_date('03-11-2000') => True\n-- valid_date('15-01-2012') => False\n\
    -- valid_date('04-0-2040') => False\n-- valid_date('06-04-2020') => True\n-- valid_date('06/04/2020')\
    \ => False\nlocal function valid_date(date)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphzr2wz9i.lua:21:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmphzr2wz9i.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
