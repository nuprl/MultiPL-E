name: HumanEval_47_median
language: lua
results:
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = sort(l)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n    return sorted[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjmy0ihba.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjmy0ihba.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local m = {}\n  for k, v in pairs(l) do\n    m[k] = v\n  end\n\
    \  table.sort(m)\n  local n = #m\n  if n % 2 == 0 then\n    return (m[n / 2] +\
    \ m[n / 2 + 1]) / 2\n  else\n    return m[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpub0fe_qp.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpub0fe_qp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return 0\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 1 then\n      return sorted[(n + 1) / 2]\n    else\n      return\
    \ (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf3ph5qfi.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpf3ph5qfi.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    if #sorted\
    \ % 2 == 0 then\n        return (sorted[#sorted / 2] + sorted[#sorted / 2 + 1])\
    \ / 2\n    else\n        return sorted[math.ceil(#sorted / 2)]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmeoqy3ph.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmeoqy3ph.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = sort(l)\n    if n % 2 == 0\
    \ then\n      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n     \
    \ return sorted[(n + 1) / 2]\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp07fv6fat.lua:13:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp07fv6fat.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n    return sorted[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    table.sort(l)\n    local n = #l\n    if n % 2 == 0 then\n   \
    \     return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n + 1)\
    \ / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc91amr15.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpc91amr15.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n == 0 then\n    return 0\n  elseif n % 2 == 0 then\n    return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n  else\n    return sorted[(n + 1) / 2]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpezhms0i4.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpezhms0i4.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuxyb03ii.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuxyb03ii.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd21v94ky.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpd21v94ky.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjfl6ey38.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjfl6ey38.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n == 0 then\n    return nil\n  elseif n % 2 == 1 then\n    return sorted[(n\
    \ + 1) / 2]\n  else\n    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwjrolh9s.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwjrolh9s.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    if n == 1 then\n        return l[1]\n    end\n    table.sort(l)\n    if n\
    \ % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n    \
    \    return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local l2 = {}\n    for i, v in ipairs(l) do\n        l2[i] =\
    \ v\n    end\n    table.sort(l2)\n    local n = #l2\n    if n % 2 == 0 then\n\
    \        return (l2[n/2] + l2[n/2+1]) / 2\n    else\n        return l2[math.ceil(n/2)]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n == 0 then\n        return nil\n    elseif n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfaem60n9.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfaem60n9.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local m = math.floor(n /\
    \ 2)\n        if n % 2 == 0 then\n            return (l[m] + l[m + 1]) / 2\n \
    \       else\n            return l[m + 1]\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaavmxa88.lua:25:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpaavmxa88.lua:25: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local l2 = table.copy(l)\n  table.sort(l2)\n  local n = #l2\n \
    \ if n % 2 == 0 then\n    return (l2[n / 2] + l2[n / 2 + 1]) / 2\n  else\n   \
    \ return l2[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb3b5cyyh.lua:7:\
    \ attempt to call field 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpb3b5cyyh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n\
    \    return sorted[(n+1)/2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_bflj4y0.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_bflj4y0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local len = #l\n  local sorted = {}\n  for i, v in ipairs(l) do\n\
    \    sorted[i] = v\n  end\n  table.sort(sorted)\n  if len % 2 == 0 then\n    return\
    \ (sorted[len / 2] + sorted[len / 2 + 1]) / 2\n  else\n    return sorted[(len\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local len\
    \ = #sorted\n    if len % 2 == 0 then\n        return (sorted[len / 2] + sorted[len\
    \ / 2 + 1]) / 2\n    else\n        return sorted[(len + 1) / 2]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_y7ve4lb.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_y7ve4lb.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local m = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return (l[m] + l[m + 1]) / 2\n  else\n    return\
    \ l[m + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt3rk4ji9.lua:20:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpt3rk4ji9.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz445htaz.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpz445htaz.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal n = #l\n\tif n == 0 then return nil end\n\tlocal m = math.floor(n\
    \ / 2)\n\tif n % 2 == 0 then\n\t\treturn (l[m] + l[m + 1]) / 2\n\telse\n\t\treturn\
    \ l[m + 1]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnxtsr2en.lua:20:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpnxtsr2en.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local l = sort(l)\n  local n = #l\n  if n % 2 == 0 then\n    return\
    \ (l[n / 2] + l[n / 2 + 1]) / 2\n  else\n    return l[(n + 1) / 2]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv9f65hyp.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpv9f65hyp.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        table.sort(l)\n        if\
    \ n % 2 == 0 then\n            return (l[n / 2] + l[n / 2 + 1]) / 2\n        else\n\
    \            return l[(n + 1) / 2]\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n == 0 then\n        return nil\n    elseif n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp97tial5i.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp97tial5i.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = sort(l)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n    return sorted[(n+1)/2]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt31_t340.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt31_t340.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local m = math.floor(n /\
    \ 2)\n        if n % 2 == 0 then\n            return (l[m] + l[m + 1]) / 2\n \
    \       else\n            return l[m + 1]\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmf1n7ryz.lua:25:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpmf1n7ryz.lua:25: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  if #sorted % 2\
    \ == 0 then\n    return (sorted[#sorted/2] + sorted[#sorted/2+1]) / 2\n  else\n\
    \    return sorted[math.ceil(#sorted/2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgxaixro_.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgxaixro_.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa5hqvyql.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa5hqvyql.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  if #sorted % 2 == 0 then\n    return (sorted[#sorted\
    \ / 2] + sorted[#sorted / 2 + 1]) / 2\n  else\n    return sorted[math.ceil(#sorted\
    \ / 2)]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    if n == 1 then\n        return l[1]\n    end\n    table.sort(l)\n    if n\
    \ % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n    \
    \    return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = {}\n  for i, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n    return sorted[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_jcmjqi.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpw_jcmjqi.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local m = #l / 2\n    if m % 1 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[math.ceil(m)]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpubp8kw00.lua:18:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpubp8kw00.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt3whgcz7.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt3whgcz7.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 1 then\n      return sorted[(n + 1) / 2]\n    else\n      return\
    \ (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdv8k_kax.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdv8k_kax.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local m = math.floor(n /\
    \ 2)\n        if n % 2 == 0 then\n            return (l[m] + l[m + 1]) / 2\n \
    \       else\n            return l[m + 1]\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl746yhcj.lua:25:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpl746yhcj.lua:25: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = table.sort(l)\n    local n = #l\n    if n % 2\
    \ == 0 then\n        return (sorted[n/2] + sorted[n/2+1]) / 2\n    else\n    \
    \    return sorted[math.ceil(n/2)]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp11rnqqoi.lua:12:\
    \ attempt to index local 'sorted' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp11rnqqoi.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  if n == 1 then\
    \ return l[1] end\n  local sorted = copy(l)\n  table.sort(sorted)\n  if n % 2\
    \ == 1 then\n    return sorted[(n + 1) / 2]\n  else\n    return (sorted[n / 2]\
    \ + sorted[n / 2 + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxelbpand.lua:10:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxelbpand.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local m = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return (l[m] + l[m + 1]) / 2\n  else\n    return\
    \ l[m + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl36hzwr9.lua:20:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpl36hzwr9.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    if n % 2 == 0 then\n \
    \     return (l[n/2] + l[n/2+1]) / 2\n    else\n      return l[math.ceil(n/2)]\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local l = table.sort(l)\n    local n = #l\n    if n % 2 == 0\
    \ then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return\
    \ l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8w7u7z1z.lua:8:\
    \ attempt to get length of local 'l' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8w7u7z1z.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local m = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return (l[m] + l[m + 1]) / 2\n  else\n    return\
    \ l[m + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd3ews48n.lua:20:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpd3ews48n.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp917lan38.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp917lan38.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n % 2\
    \ == 1 then\n    return l[math.ceil(n/2)]\n  else\n    return (l[n/2] + l[n/2+1])\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpta7d2dwg.lua:20:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpta7d2dwg.lua:20: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw2qicuri.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpw2qicuri.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp331qdiav.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp331qdiav.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    if n == 1 then\n        return l[1]\n    end\n    local sorted = {}\n   \
    \ for i, v in ipairs(l) do\n        sorted[i] = v\n    end\n    table.sort(sorted)\n\
    \    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) /\
    \ 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7yup4v_0.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7yup4v_0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n/2] + sorted[n/2+1]) / 2\n    else\n       \
    \ return sorted[math.ceil(n/2)]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    if n % 2 == 0 then\n \
    \     return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n      return l[(n + 1) /\
    \ 2]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  table.sort(l)\n\
    \  if n % 2 == 0 then\n    return (l[n/2] + l[n/2+1]) / 2\n  else\n    return\
    \ l[math.ceil(n/2)]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ujbjslw.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4ujbjslw.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    table.sort(l)\n    local n = #l\n    if n % 2 == 0 then\n   \
    \     return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n + 1)\
    \ / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        sorted[i] = v\n\
    \    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return sorted[(n\
    \ + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local len\
    \ = #sorted\n    if len % 2 == 0 then\n        return (sorted[len / 2] + sorted[len\
    \ / 2 + 1]) / 2\n    else\n        return sorted[(len + 1) / 2]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpalep5d2w.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpalep5d2w.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  table.sort(l)\n\
    \  if n % 2 == 0 then\n    return (l[n/2] + l[n/2+1]) / 2\n  else\n    return\
    \ l[math.ceil(n/2)]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9v_zxnhv.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9v_zxnhv.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl8k7o6z0.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpl8k7o6z0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local m = #l\n    if m == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if m % 2 == 0 then\n        return (l[m/2] + l[m/2+1])\
    \ / 2\n    else\n        return l[math.ceil(m/2)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local sorted = copy(l)\n\
    \        table.sort(sorted)\n        if n % 2 == 1 then\n            return sorted[(n\
    \ + 1) / 2]\n        else\n            return (sorted[n / 2] + sorted[n / 2 +\
    \ 1]) / 2\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1udn_ea4.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1udn_ea4.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    local m = n % 2\n    local s = n // 2 + 1\n\
    \    if m == 0 then\n        return (l[s] + l[s + 1]) / 2\n    else\n        return\
    \ l[s]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp2403dkuj.lua:9: unexpected symbol near '/'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local l2 = table.copy(l)\n    table.sort(l2)\n    local n = #l2\n\
    \    if n % 2 == 0 then\n        return (l2[n / 2] + l2[n / 2 + 1]) / 2\n    else\n\
    \        return l2[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvv8zqdrp.lua:7:\
    \ attempt to call field 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvv8zqdrp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local sorted = copy(l)\n\
    \        table.sort(sorted)\n        if n % 2 == 1 then\n            return sorted[(n\
    \ + 1) / 2]\n        else\n            return (sorted[n / 2] + sorted[n / 2 +\
    \ 1]) / 2\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wnjfx3x.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8wnjfx3x.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local sorted = copy(l)\n\
    \        table.sort(sorted)\n        if n % 2 == 1 then\n            return sorted[(n\
    \ + 1) / 2]\n        else\n            return (sorted[n / 2] + sorted[n / 2 +\
    \ 1]) / 2\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpechwy235.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpechwy235.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n == 0 then\n    return nil\n  elseif n % 2 == 1 then\n    return sorted[(n\
    \ + 1) / 2]\n  else\n    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp422khbom.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp422khbom.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local l2 = {}\n  for _, v in ipairs(l) do\n    table.insert(l2,\
    \ v)\n  end\n  table.sort(l2)\n  local n = #l2\n  if n % 2 == 0 then\n    return\
    \ (l2[n / 2] + l2[n / 2 + 1]) / 2\n  else\n    return l2[(n + 1) / 2]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = sort(l)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n    return sorted[(n+1)/2]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoo3wv330.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpoo3wv330.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqc27jxdl.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqc27jxdl.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local sorted =\
    \ {}\n  for i, v in ipairs(l) do\n    sorted[i] = v\n  end\n  table.sort(sorted)\n\
    \  if n % 2 == 1 then\n    return sorted[(n + 1) / 2]\n  else\n    return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return 0\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2xsmxvj4.lua:22:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp2xsmxvj4.lua:22: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = {}\n    for i, v in ipairs(l)\
    \ do\n      sorted[i] = v\n    end\n    table.sort(sorted)\n    if n % 2 == 0\
    \ then\n      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n     \
    \ return sorted[(n + 1) / 2]\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local sorted = copy(l)\n\
    \        table.sort(sorted)\n        if n % 2 == 1 then\n            return sorted[(n\
    \ + 1) / 2]\n        else\n            return (sorted[n / 2] + sorted[n / 2 +\
    \ 1]) / 2\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpalym89si.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpalym89si.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local len = #l\n    if len == 0 then\n        return nil\n  \
    \  end\n    local sorted = copy(l)\n    table.sort(sorted)\n    if len % 2 ==\
    \ 0 then\n        return (sorted[len / 2] + sorted[len / 2 + 1]) / 2\n    else\n\
    \        return sorted[(len + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_p98zhoz.lua:11:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_p98zhoz.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local m = math.floor(n / 2)\n    if n % 2\
    \ == 0 then\n      return (l[m] + l[m + 1]) / 2\n    else\n      return l[m +\
    \ 1]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpedpw_q0u.lua:25:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpedpw_q0u.lua:25: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local l = sort(l)\n  local n = #l\n  if n % 2 == 0 then\n    return\
    \ (l[n / 2] + l[n / 2 + 1]) / 2\n  else\n    return l[(n + 1) / 2]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnnmjq8ww.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnnmjq8ww.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp28f6641u.lua:22:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp28f6641u.lua:22: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    table.insert(t, v)\n\
    \  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local l = table.sort(l)\n  local n = #l\n  if n % 2 == 0 then\n\
    \    return (l[n/2] + l[n/2+1]) / 2\n  else\n    return l[math.ceil(n/2)]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdifnout1.lua:8:\
    \ attempt to get length of local 'l' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdifnout1.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n\
    \    return sorted[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpycvqsbvv.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpycvqsbvv.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n == 0 then\n        return nil\n    elseif n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmdsvlx27.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmdsvlx27.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp06c4icyh.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp06c4icyh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n/2] + sorted[n/2+1]) / 2\n    else\n       \
    \ return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmw85dk4k.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmw85dk4k.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvz19rqjg.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvz19rqjg.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    if n == 1 then\n        return l[1]\n    end\n    table.sort(l)\n    if n\
    \ % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n    \
    \    return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6dppx3qo.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6dppx3qo.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local function median_odd(l)\n        local n = #l\n        local\
    \ m = math.floor(n / 2)\n        return l[m + 1]\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppqvvg589.lua:23: 'end' expected (to close 'function' at\
    \ line 6) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2z7zkzg7.lua:22:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp2z7zkzg7.lua:22: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local l = copy(l)\n  table.sort(l)\n  local n = #l\n  if n % 2\
    \ == 0 then\n    return (l[n/2] + l[n/2+1]) / 2\n  else\n    return l[(n+1)/2]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3lcgxlex.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3lcgxlex.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n\
    \    return sorted[(n+1)/2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9xjlvzwq.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9xjlvzwq.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return 0\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local l = sort(l)\n    local n = #l\n    if n % 2 == 0 then\n\
    \        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ckcreii.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp8ckcreii.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local l = sort(l)\n    local n = #l\n    if n % 2 == 0 then\n\
    \        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_f2q_i0q.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_f2q_i0q.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcm2h_9ua.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcm2h_9ua.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n\
    \    return sorted[(n+1)/2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwodghjzf.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwodghjzf.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local m = math.floor(n /\
    \ 2)\n        if n % 2 == 0 then\n            return (l[m] + l[m + 1]) / 2\n \
    \       else\n            return l[m + 1]\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfxpgic8f.lua:25:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpfxpgic8f.lua:25: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    local len = #sorted\n    if len % 2\
    \ == 0 then\n        return (sorted[len / 2] + sorted[len / 2 + 1]) / 2\n    else\n\
    \        return sorted[(len + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    if n % 2 == 0 then\n \
    \     return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n      return l[(n + 1) /\
    \ 2]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    if n == 1 then\n        return l[1]\n    end\n    local sorted = {}\n   \
    \ for i, v in ipairs(l) do\n        sorted[i] = v\n    end\n    table.sort(sorted)\n\
    \    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) /\
    \ 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl0i3sj6_.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpl0i3sj6_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp272094tb.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp272094tb.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local sorted = copy(l)\n\
    \        table.sort(sorted)\n        if n % 2 == 1 then\n            return sorted[(n\
    \ + 1) / 2]\n        else\n            return (sorted[n / 2] + sorted[n / 2 +\
    \ 1]) / 2\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmmm86g1u.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmmm86g1u.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n\
    \    return sorted[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxc7cccfv.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxc7cccfv.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return 0\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = {}\n    for i, v in ipairs(l)\
    \ do\n      table.insert(sorted, v)\n    end\n    table.sort(sorted)\n    if n\
    \ % 2 == 0 then\n      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n\
    \      return sorted[(n + 1) / 2]\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv2b20vds.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpv2b20vds.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n\
    \    return sorted[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphdpwfzg5.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphdpwfzg5.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = {}\n    for i, v in ipairs(l)\
    \ do\n      sorted[i] = v\n    end\n    table.sort(sorted)\n    if n % 2 == 0\
    \ then\n      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n     \
    \ return sorted[(n + 1) / 2]\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local m = math.floor(n /\
    \ 2)\n        local s = table.sort(l)\n        if n % 2 == 0 then\n          \
    \  return (s[m] + s[m + 1]) / 2\n        else\n            return s[m + 1]\n \
    \       end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppb0tkk2g.lua:18:\
    \ attempt to index local 's' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppb0tkk2g.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = {}\n    for i, v in ipairs(l)\
    \ do\n      sorted[i] = v\n    end\n    table.sort(sorted)\n    if n % 2 == 0\
    \ then\n      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n     \
    \ return sorted[math.ceil(n / 2)]\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = {}\n    for i, v in ipairs(l)\
    \ do\n      sorted[i] = v\n    end\n    table.sort(sorted)\n    if n % 2 == 0\
    \ then\n      return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n     \
    \ return sorted[(n + 1) / 2]\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local t = copy(l)\n    table.sort(t)\n    local n = #t\n    if\
    \ n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n  \
    \      return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkcgjjqfr.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkcgjjqfr.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local sorted = sort(l)\n\
    \        if n % 2 == 0 then\n            return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n        else\n            return sorted[math.ceil(n/2)]\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ybdenvx.lua:13:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6ybdenvx.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 1 then\n      return sorted[(n + 1) / 2]\n    else\n      return\
    \ (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ecs68bg.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7ecs68bg.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local m = math.floor(#l / 2)\n    if #l % 2 == 0 then\n     \
    \   return (l[m] + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3dqo352y.lua:18:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp3dqo352y.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local sorted = copy(l)\n\
    \        table.sort(sorted)\n        if n % 2 == 1 then\n            return sorted[(n\
    \ + 1) / 2]\n        else\n            return (sorted[n / 2] + sorted[n / 2 +\
    \ 1]) / 2\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_2xi18kr.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_2xi18kr.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local m = math.floor(#l / 2)\n    if #l % 2 == 0 then\n     \
    \   return (l[m] + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9wk4eiks.lua:18:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp9wk4eiks.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local sorted = copy(l)\n\
    \        table.sort(sorted)\n        if n % 2 == 1 then\n            return sorted[(n\
    \ + 1) / 2]\n        else\n            return (sorted[n / 2] + sorted[n / 2 +\
    \ 1]) / 2\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyllkypd0.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyllkypd0.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuqpoewgd.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuqpoewgd.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local len = #sorted\n    if len %\
    \ 2 == 0 then\n        return (sorted[len / 2] + sorted[len / 2 + 1]) / 2\n  \
    \  else\n        return sorted[(len + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2e9sbk2t.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2e9sbk2t.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m]\
    \ + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc10f_tpn.lua:22:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpc10f_tpn.lua:22: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    if n % 2 == 1 then\n        return\
    \ sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] + sorted[n / 2\
    \ + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  local n = #sorted\n\
    \  if n % 2 == 0 then\n    return (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n\
    \    return sorted[(n+1)/2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4e742sl_.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4e742sl_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    if n == 1 then\n        return l[1]\n    end\n    table.sort(l)\n    if n\
    \ % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n    \
    \    return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = copy(l)\n  table.sort(sorted)\n  if #sorted % 2\
    \ == 0 then\n    return (sorted[#sorted/2] + sorted[#sorted/2+1]) / 2\n  else\n\
    \    return sorted[math.ceil(#sorted/2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ob727is.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4ob727is.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local function median_helper(l, n)\n        if n == 1 then\n\
    \            return l[1]\n        elseif n == 2 then\n            return (l[1]\
    \ + l[2]) / 2\n        else\n            local m = n / 2\n            if n % 2\
    \ == 0 then\n                return median_helper(l, m)\n            else\n  \
    \              return (median_helper(l, m) + median_helper(l, m + 1)) / 2\n  \
    \          end\n        end\n    end\n    return median_helper(l, #l)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  local m = n %\
    \ 2\n  local s = n // 2 + 1\n  if m == 0 then\n    return (l[s] + l[s - 1]) /\
    \ 2\n  else\n    return l[s]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpj9_4ajpx.lua:10: unexpected symbol near '/'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local len\
    \ = #sorted\n    if len % 2 == 0 then\n        return (sorted[len / 2] + sorted[len\
    \ / 2 + 1]) / 2\n    else\n        return sorted[(len + 1) / 2]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaqwv1vb1.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpaqwv1vb1.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local l = copy(l)\n  table.sort(l)\n  local n = #l\n  if n % 2\
    \ == 0 then\n    return (l[n/2] + l[n/2+1]) / 2\n  else\n    return l[math.ceil(n/2)]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_7dhay35.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_7dhay35.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local l2 = {}\n    for i, v in ipairs(l) do\n        l2[i] =\
    \ v\n    end\n    table.sort(l2)\n    local n = #l2\n    if n % 2 == 0 then\n\
    \        return (l2[n / 2] + l2[n / 2 + 1]) / 2\n    else\n        return l2[(n\
    \ + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    elseif\
    \ n == 1 then\n        return l[1]\n    else\n        local m = math.floor(n /\
    \ 2)\n        local s = l[m]\n        if n % 2 == 0 then\n            s = s +\
    \ l[m + 1]\n            s = s / 2\n        end\n        return s\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2dhu6wsk.lua:26:\
    \ expected: 3, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2dhu6wsk.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        t[#t + 1]\
    \ = v\n    end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n\
    \        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local l = table.copy(l)\n    table.sort(l)\n    local n = #l\n\
    \    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n\
    \        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdh4oo09q.lua:7:\
    \ attempt to call field 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdh4oo09q.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy26v4tnn.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpy26v4tnn.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    if n % 2 == 0 then\n \
    \     return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n      return l[(n + 1) /\
    \ 2]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpihimsgjs.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpihimsgjs.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    if n % 2 == 0 then\n \
    \     return (l[n/2] + l[n/2+1]) / 2\n    else\n      return l[math.ceil(n/2)]\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local t = table.copy(l)\n    table.sort(t)\n    local n = #t\n\
    \    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjd55j4gk.lua:7:\
    \ attempt to call field 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjd55j4gk.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n == 0 then\n        return nil\n    elseif n % 2 == 1 then\n\
    \        return sorted[(n + 1) / 2]\n    else\n        return (sorted[n / 2] +\
    \ sorted[n / 2 + 1]) / 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpve478x1y.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpve478x1y.lua:22:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[math.ceil(n / 2)]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbj3_9z7n.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbj3_9z7n.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpok90sqka.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpok90sqka.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    if #sorted % 2 == 0 then\n        return\
    \ (sorted[#sorted / 2] + sorted[#sorted / 2 + 1]) / 2\n    else\n        return\
    \ sorted[math.ceil(#sorted / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then return nil end\n  if n == 1 then\
    \ return l[1] end\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = l[i]\n\
    \  end\n  table.sort(sorted)\n  if n % 2 == 0 then\n    return (sorted[n / 2]\
    \ + sorted[n / 2 + 1]) / 2\n  else\n    return sorted[math.ceil(n / 2)]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local function median_helper(l, n)\n        if n == 1 then\n\
    \            return l[1]\n        elseif n == 2 then\n            return (l[1]\
    \ + l[2]) / 2\n        else\n            local m = median_helper(l, n / 2)\n \
    \           local n = median_helper(l, (n + 1) / 2)\n            return (m + n)\
    \ / 2\n        end\n    end\n    return median_helper(l, #l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv8dx9fz1.lua:13:\
    \ stack overflow\\nstack traceback:\\n\\t/tmp/tmpv8dx9fz1.lua:13: in function\
    \ 'median_helper'\\n\\t/tmp/tmpv8dx9fz1.lua:13: in function 'median_helper'\\\
    n\\t/tmp/tmpv8dx9fz1.lua:13: in function 'median_helper'\\n\\t/tmp/tmpv8dx9fz1.lua:13:\
    \ in function 'median_helper'\\n\\t/tmp/tmpv8dx9fz1.lua:13: in function 'median_helper'\\\
    n\\t/tmp/tmpv8dx9fz1.lua:13: in function 'median_helper'\\n\\t/tmp/tmpv8dx9fz1.lua:13:\
    \ in function 'median_helper'\\n\\t/tmp/tmpv8dx9fz1.lua:13: in function 'median_helper'\\\
    n\\t/tmp/tmpv8dx9fz1.lua:13: in function 'median_helper'\\n\\t...\\n\\nRan 1 tests\
    \ in 0.156 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4fx_58dv.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4fx_58dv.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local n = #sorted\n    if n % 2 ==\
    \ 0 then\n        return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    else\n \
    \       return sorted[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4xqtlf3y.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4xqtlf3y.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local len\
    \ = #sorted\n    if len % 2 == 0 then\n        return (sorted[len / 2] + sorted[len\
    \ / 2 + 1]) / 2\n    else\n        return sorted[(len + 1) / 2]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3iz3kxdk.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3iz3kxdk.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local m = #l\n    if m % 2 == 0 then\n        return (l[m/2]\
    \ + l[m/2+1]) / 2\n    else\n        return l[math.ceil(m/2)]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8sc2u6x_.lua:18:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp8sc2u6x_.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local l = sort(l)\n  local n = #l\n  if n % 2 == 0 then\n    return\
    \ (l[n / 2] + l[n / 2 + 1]) / 2\n  else\n    return l[(n + 1) / 2]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpchfd14r3.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpchfd14r3.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuw0rdtjz.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuw0rdtjz.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    if n % 2 == 0 then\n \
    \     return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n      return l[(n + 1) /\
    \ 2]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    if n % 2 == 0 then\n \
    \     return (l[n/2] + l[n/2+1]) / 2\n    else\n      return l[math.ceil(n/2)]\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 1 then\n      return sorted[(n + 1) / 2]\n    else\n      return\
    \ (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwsymk4zh.lua:13:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwsymk4zh.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local l = sort(l)\n    local n = #l\n    if n % 2 == 0 then\n\
    \        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n +\
    \ 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7_c7bqg1.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7_c7bqg1.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n / 2] + sorted[n /\
    \ 2 + 1]) / 2\n    else\n        return sorted[(n + 1) / 2]\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpihfppbei.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpihfppbei.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = sort(l)\n  local n = #sorted\n  if n % 2 == 0 then\n\
    \    return (sorted[n / 2] + sorted[n / 2 + 1]) / 2\n  else\n    return sorted[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6uz7ihkd.lua:7:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6uz7ihkd.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1\
    \ then\n    return l[1]\n  else\n    table.sort(l)\n    local m = n // 2\n   \
    \ if n % 2 == 0 then\n      return (l[m] + l[m + 1]) / 2\n    else\n      return\
    \ l[m + 1]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3hg1mc8z.lua:14: unexpected symbol near '/'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local n =\
    \ #sorted\n    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxiu43el6.lua:7:\
    \ attempt to call global 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxiu43el6.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4,\
    \ 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
